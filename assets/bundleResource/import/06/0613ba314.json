[1,["d30GcbfhVMyZTJit7Zw7fV@6c48a","fanHIkDLtA+pgQJpFr9i46@6c48a","70ipWytRJEmpRYe7HYBs7f@6c48a","6dD5LvFPRIdpPgFbQpVUe1@6c48a","4cFolz76pCA56Ov2kt557R@6c48a","8a68FfZBVNT43COamlDsbi@6c48a","55AhjiMrBFpI/8zy8uENl/","82WGXO9FRJnoSyCo88Nf5q","78QTFTjP9ALqmMypI0NMkj@6c48a","67wXssNrFNyp8FAWAXGBZ1","12Y9dMgWdJKJGmTiZyQR9H@fc873","0aNZnUrDBGuoW1ZINsdfE4@6c48a","8cMPNtqeBIToo6rB4xqxWV@6c48a","20Vtgs7BRFrKxSqLeUtqPh@6c48a","4cbLQ7JUZPMYuAskxGIrkE@6c48a","301WD/mzxOzLRMGDipiUQF@6c48a","72HNl1045PG6v8Zdu2p/qi","a3iVsH8vZEhIIq8dehl9Ey","a5rEfXhWRNOr9adjh20PRi@ac1ab","c2AmyG1IlOkpED5FCRp4xj","82q3P+7atJ0IqzvmBBwMzu","b958g1dO9NK5ffFZXb0z4U","35qYtpp91L6I0AqahQHxRq","f2xFoAMYNAiqr96JaYNS1t@6c48a","46mhgo7lpKTo1u2Cv8uwEP@6c48a","7ffSLxb1BLZp2QfNlZ64+2@6c48a","75NaLeykhCW6mB7AFn6UmE@6c48a","56kqMqk1JCpLWM3paW9ILN@6c48a","7aoh87CmlA2aIXe4TOCAf/@6c48a","43FY3dKOZODbx65QhfBDWK@6c48a","e6D4cTq0ZA9YOT/GU39S1u@6c48a","689cQFFSZE8ouksLouVbep@6c48a","50lHypooNJw7YNxBdA5TwI@6c48a","32LoXRFb5Jsov4KCGnL8vM@6c48a","a67l9ymIpNT6tBYTcmNbrv@6c48a","54QMn7pM5LgrrfWBwNYxM+","f2IMFWO39HnpKaxWVvBhj5","9bgoe1wdVNf4QAbfYjdZRS","c89m0XNRpI2qEsAhLShXXE","0b+G5nPQxMC6QeXQ8KzMd8","f9FbGeIrNOqozf8BPD6a4T@f9941","a5rEfXhWRNOr9adjh20PRi@426e1","a5rEfXhWRNOr9adjh20PRi@db859","095+4SwEZJwJHSm1px8dwZ","eegI1YZYpKl5IVxdr+GuCT","a5rEfXhWRNOr9adjh20PRi@bcc20","47JMwYEnRMRo6/bqA0Hn63@9e7cb","f6SJZOjTJB/JrJeh5xTdF7","20g1ukYUVPvKWKBRznAKo+@f9941","953V6SkhlChaUhy2H5/hfh","34c7X948tBLpOIicQ/BslH","a3zQCfCrBCDZJ4uf2rk5u8","d1NGQ2rJZCcbhjH0/erZWw","ceDGyl1cNFmZ5n9M9okE6W","47JMwYEnRMRo6/bqA0Hn63@73b71","75QnKniQtM2afjGwJFJpzd@6c48a","45jFZnnxZFt6SHiEsw+9sg","7abGMAhIxK55JYUM9xy6N1","92MpjkVMtAGKlB9NKKtU1K@1ef38","92MpjkVMtAGKlB9NKKtU1K@d73f9","92MpjkVMtAGKlB9NKKtU1K@1fc78","61OWz28zJI44bx2LtH52/T","8eZYDEStdMIaMNCnbW9Ml0@f9941","89zkOWHglGQoimaMU7kH16@f9941","61ueYimVlOL45t3PIy58af@f9941","75MIUMHTNOzKx8aGrowAfH@6c48a","7cNMeCKU1MXb+zOOmI4ne3@f9941","1fjh6SJzVJCLfi/490AxJN@f9941","9e13vEzDlNSLLpqiyRt4vH@08c68","8fihGWkBZDBZdy11A8uvgs@6c48a","22Fj8qEF5K24+05ssgejhQ@6c48a","abLWCENuhHkrY0plb8Nx2I@6c48a","94apnd3OhNSq5zD9/NEb51@6c48a","24xBnqY6hOoanQf8RpSJu8@f9941","dcvhloMQNJFpE1qLWb6umj","d8t1OK6ipDIZjbre0eSmMa","f1KiPEuSRDIqJgPZgkKPHo@f9941","88JTtVlttLaYhvcH3kmz3g@6c48a","33RQJxesNH0rEaN5mtzr+w","71vSeqowxNGrUiyLr8htgU","54TknWPwVPqJqeCR+Y/Czo@f9941","95EkngnxZFbYuFpsqVTaFr@f9941","11vcSwZKhOt6Knn7niM+l3@f9941","a4GmbwSGJIhaLuYk6h6VWJ@f9941","a5rEfXhWRNOr9adjh20PRi@a571d","a4VWmyCUlLDI6ib2QICV14","b8XYBnBodF8qbiyyXzf3qT@6c48a","88oithw8lE4a01xyXTz1nh@6c48a","78IjGB5LVEs5/kLDT7oVAd@6c48a","837PuOePJCLK9itwKjNjmJ","88qeuFGQ1GiawOEjLkc/ny","95EQ6hFihG95fCmLJCvebl","07jFZaJ6hLQqOBq2Xbs2DF@f9941","71UYyG4fhGoZWqR1G8tqK4@f9941","7eh2pwxfJORrlDnU8XGgL3@f9941","72komJAY1D2LWQFg16b2zA@f9941","c60Wv/5H5NE7uLXumreH54@f9941","acVEmXnsdAV610vtk8XTII@f9941","aatSc0JKpOyZVrlQ6Y5g8s@f9941","53LCvlI3hERZP9UdiDv1qN@f9941","5fc99Q2eJHRI2P095cSqcb@f9941","9d3tzE5XVPebZPreKBJg0y@f9941","6aO5iigEhDo6bz7afk2gne@f9941","6bqRsFt0BHqba5wwketylt@f9941","519yeCGBdPgYjeKqxwx+Wg@f9941","f6c+RpOIlMnr08bmtZ3Xb8@f9941","b2ehRQuxhPCbcki17/MD9q","baoI/qIpFH8o75ZFsJNulS","09m4Ly9bBH0oFSHl9hxmCr@f9941","868l1cneVFT6X57hZgPmcB","11Y6S40p5ENLFd5dg8CHjZ@6c48a","05N8OTa45AFbNA2m/PF/Ki@6c48a","3djJBbJbRDi75uAOYw7Vq2@6c48a","ffblowLglOK4yq5DeiAKx+@6c48a","d02LoZQbFKeL1e3/H599co@6c48a","19FPToAC5MWoXXXT+UcpgJ@6c48a","84mp6JhatBEbiFptsT4agJ","369FZW1gJLfISsMvoWfdMM","eadHiwQI1AUrcD8NI1Xglf","b5snqx50BDmLQHhI/CssiX@6c48a","cdk10Y4plKXoaxjpwoJgAS@2bc07","dcydh6wkBN0oXIV8vQ0Uqo","12Y9dMgWdJKJGmTiZyQR9H@8abdc","aaraxKx9lGg57RmEpMPXx8","12Y9dMgWdJKJGmTiZyQR9H@2e76e","a5rEfXhWRNOr9adjh20PRi@ad3e6","54+y/0t4VGYIS52NWKVtfG","622uUBDlhPd7C386TZUi4n@85b23","2cUeJTvv1LIK45ap8g5csX","91yVoYf61FzZW+n5R1aLAd@f9941","4aqmhO/zZPOKWHw8E64wps@f9941","2b96311Y9ILLMBD9re6LkS@f9941","0bio2kGWBIHJ5orroKd0EC@f9941","c1VofYYu1Pe6oV3IIgeVp8@f9941","ceVBpzbzxM/rK4Xc5/+dPa@f9941","7eyQmtVjhN8rqZRaG8w1R0@f9941","afh8wKDGxEWLzdNVFGQwaF@f9941","6cguefDfpKPbgMv2BIfjDn@f9941","7d66DRCcBCZIipVBTXeVwg@f9941","57RSyfQHhMdaTQKWk4rzWv@f9941","4cAMKfJrZGX4kmmGYFlKE0@f9941","1f25+ZZB9Jk7PBr56KuUvn@f9941","46vAhLkTtMMrfVPsWTTdmh@f9941","541hdNMw5AwqWXONXeE8yA@f9941","e1e0UmV6JI06zJzwnzCqE4","feji1orp5EDoRtfE1Grasn@f9941","622uUBDlhPd7C386TZUi4n@f0b6e","d6MafU+GFCprOuMY4+qhF/","f9FbGeIrNOqozf8BPD6a4T@6c48a","4aPyHzEUFOrZxePqQXlqri","15jn5SMiBM15aUcT4OboJ4@f9941","34eBdeMjBK7ZY6CAH92jm0@6c48a","d1uJP/3Z9Ai7p6/Hy5VzZ5@6c48a","130ymJaDVJ6bs1CCu/Jh9R@6c48a","5c9024/UdFWa6lUrKSzCxF@6c48a","7bt9JL1WVNv73ziZdum4oM@6c48a","92JA07JpRFjbki87diozgZ@6c48a","89zkOWHglGQoimaMU7kH16@6c48a","a4GmbwSGJIhaLuYk6h6VWJ@6c48a","a5rEfXhWRNOr9adjh20PRi@627ab","065kbYp7FL4qMfdx9SRsVd","a5rEfXhWRNOr9adjh20PRi@5e126","407qXHCBBKx4rdYlddCkOZ","f7HscKVgtPpYONpCkhy32j","008UltSDdBUIq5HcN8Csuy@6c48a","03OG3BPIZPC45rq4qDQ3m+@6c48a","030sr8pOFArIDkXeEQ628B@6c48a","07L3XoZhZLtpfmQfiWlpja@6c48a","07jFZaJ6hLQqOBq2Xbs2DF@6c48a","09m4Ly9bBH0oFSHl9hxmCr@6c48a","0baagteb5LJ6CZ2omsB6Li@6c48a","0bio2kGWBIHJ5orroKd0EC@6c48a","f7UZtcP3hLmr4Q8r9OH+k/@c8c72","f7UZtcP3hLmr4Q8r9OH+k/@e382b","f7UZtcP3hLmr4Q8r9OH+k/@661dc","f7UZtcP3hLmr4Q8r9OH+k/@9c33b","f7UZtcP3hLmr4Q8r9OH+k/@3c273","0ewtTG9/RAA6qwm7CyB7n3@6c48a","11vcSwZKhOt6Knn7niM+l3@6c48a","14kErNmvdKF4ySU04eV/TE@6c48a","15jn5SMiBM15aUcT4OboJ4@6c48a","15kF8LRV9DwppWcFuIVoYt@6c48a","1aww5m0MhMIpKCPXFgi0p5@6c48a","1fjh6SJzVJCLfi/490AxJN@6c48a","c6m2tkjv5JpIMmMQmh92Ul@6c48a","74kldpo6ZLAqcVebE8/F+8@6c48a","2244r+aqlN4493STzfT/D8@6c48a","1f25+ZZB9Jk7PBr56KuUvn@6c48a","24xBnqY6hOoanQf8RpSJu8@6c48a","25f/BhGk5EiIOFfeq5bUqi@6c48a","29CNNy6QdEjIUNKO5T71GL@6c48a","c8DFf/7lZE/rLOPiczzNK0@6c48a","8fJQvSDkJG/rOhOCIJhqKO@6c48a","367V21KiNMHolBkvbbViwN","f1TZjD/hlMN6PrzRm75RER@6c48a","34qPah42dIObqYSgS/ohU9@6c48a","34/PfHNwJAZ4pfRhAeRpi4@6c48a","3dRt92EidJ+oPvglc/y0n4@6c48a","646tJeRitOD74DNkFik4C3@6c48a","2ewRRY+FVJeLFN8+1c9pf6","512cpmKZBPLZvE5nNSa++l@6c48a","96pVrH9eZPYodDqwVtld6r@6c48a","06Uj1Zym1I36pqpC/x/2Xx@6c48a","37oGQS72tCuLB2cz6Rocew@6c48a","f6GpINI69FU5xmFkqudpZJ@6c48a","9a4GULJz5PWrRJ7QSrTn5P@6c48a","2f7sFmA3xN64kDoSCcNBxD@6c48a","46vAhLkTtMMrfVPsWTTdmh@6c48a","47sD0r43VL8q2NSRauSkA6@6c48a","48KjBbX1lBh735BOo6luTn@6c48a","4cAMKfJrZGX4kmmGYFlKE0@6c48a","519yeCGBdPgYjeKqxwx+Wg@6c48a","53LCvlI3hERZP9UdiDv1qN@6c48a","541hdNMw5AwqWXONXeE8yA@6c48a","e2Tn+G04pMtYXDDDr32LeS","b8mLLmOp1ErIhxl4AhISp1@53dde","b8mLLmOp1ErIhxl4AhISp1@30732","fcSQtPlHlCNL6/k2S5x6+n","b8mLLmOp1ErIhxl4AhISp1@88b23","b8mLLmOp1ErIhxl4AhISp1@f1394","b8mLLmOp1ErIhxl4AhISp1@73684","b8mLLmOp1ErIhxl4AhISp1@75ee4","b8mLLmOp1ErIhxl4AhISp1@bf48e","b8mLLmOp1ErIhxl4AhISp1@a72ab","8a0TsiFJhI+Y/4LO+B8M19","6cj16iaBRN0Y9pIlicsrgA","b8mLLmOp1ErIhxl4AhISp1@eefa3","b8mLLmOp1ErIhxl4AhISp1@2224c","62jRcfLWFB248yEkljjxEy","74J0H+S2RNS6DAVj2+c80e","b8mLLmOp1ErIhxl4AhISp1@16e12","b8mLLmOp1ErIhxl4AhISp1@62756","57RSyfQHhMdaTQKWk4rzWv@6c48a","5856q0QJVPPLt+2JU0tikn@6c48a","12jhDvB9tAtoo3eSvq70lk@6c48a","a9y0C/U4pKHI8yvosD+950@6c48a","5fc99Q2eJHRI2P095cSqcb@6c48a","61ueYimVlOL45t3PIy58af@6c48a","e042Fef1FLn7QIX74q7fpz@6c48a","340u8QHENNO4wNf7NCztuX@6c48a","65eX3JD/NGcIyff68xWMoe@6c48a","66nTQPRNtP6JrGTMNF46dU@6c48a","f7UZtcP3hLmr4Q8r9OH+k/@75f79","6aO5iigEhDo6bz7afk2gne@6c48a","6bqRsFt0BHqba5wwketylt@6c48a","6cguefDfpKPbgMv2BIfjDn@6c48a","23YS1NxxtKo5KCYrL4kQMt@6c48a","6ey+9/49JBvpUX7WPM9ity@6c48a","71UYyG4fhGoZWqR1G8tqK4@6c48a","9dpzfFwh5LV4uPx7JQ40mT@6c48a","240G9yz29Bs4mleRM6IlBF@6c48a","ccmtuYhXlPU6K7ko4D0zVT@6c48a","1brQd3YBRA6rdKGEqxd79l@6c48a","5deIeYnd1NdY46e/UsO8nJ@6c48a","26WSTw8IVBYaFJwEEBqvVP@6c48a","52KWNOAgpO2ZlAGY9bwN9k@6c48a","3fTwxEgwhKXaHPAvq/GuCz@6c48a","72komJAY1D2LWQFg16b2zA@6c48a","3e+NkI2ndNv46rMjkwnN7e@6c48a","95BHtzwFBMYZg/QjseaV0R@6c48a","77xbr30uNDnKXCbU1uKZ/P@6c48a","79jsCVf7NGl7rYyYoQ1nBg@6c48a","23lMBzElZOwo+ttasW9CyZ","6ayZGm1cxHIoLgNd8m9Wbn","f3w6orJuNN0boH9l57IdQH@8d35d","b5aHJAIXZNm582kzC++Yg7","37NE1Xqk5Fhq3foivipo7h","0488bwZYpCGYif8L0zikXV","29aRWucgVC4Yhx+BJ+P1or","b03ikKtD1NuIuO/N3Bzegz","81RrobXmJLz4/6In0sDtu9@f9941","9fbFHU15FLWLaOYIBqMcZ5@f9941","c9kxLiqTJMi7OZG4nCH0mQ@f9941","eemZkkGlFMTKJTnN5OHxM3@f9941","7dj5uJT9FMn6OrOOx83tfK@f9941","03OG3BPIZPC45rq4qDQ3m+@f9941","34/PfHNwJAZ4pfRhAeRpi4@f9941","c25kO3HTlBRoadm9oAhNJU@f9941","66nTQPRNtP6JrGTMNF46dU@f9941","14kErNmvdKF4ySU04eV/TE@f9941","a4zRxXs8dGyYER8idbG5qm@f9941","008UltSDdBUIq5HcN8Csuy@f9941","a6DTS8kJROr6LqwfvwTnh7@f9941","dcORu38dFAjqecHv7JHj69@f9941","48KjBbX1lBh735BOo6luTn@f9941","47sD0r43VL8q2NSRauSkA6@f9941","ef1BXRyEhPdIJxoWm9vywu@f9941","62C2vzA2lFYIN/KiwAtzwm","cdk10Y4plKXoaxjpwoJgAS@eec3f","5bV2UGDCdJoqkn9NKSFTjZ@a3b6c","14YFmkEHpOLrYzPNUm2HAy","40x29BHJhCM43PNPPHRDE0","f5P5MoSbdF3Z6/g8UJYN5F","25KdxERY9DGKzAOaooiJ6A","25f/BhGk5EiIOFfeq5bUqi@f9941","15kF8LRV9DwppWcFuIVoYt@f9941","b17sTm/hNJ5IBTZM5aWCzA@f9941","030sr8pOFArIDkXeEQ628B@f9941","6ey+9/49JBvpUX7WPM9ity@f9941","a8AKVBTbNA84RAz9aDEdw4@f9941","d02LoZQbFKeL1e3/H599co@f9941","75MIUMHTNOzKx8aGrowAfH@f9941","77xbr30uNDnKXCbU1uKZ/P@f9941","1aww5m0MhMIpKCPXFgi0p5@f9941","depNiyOa5IErJdwQYcbrzm@f9941","d5DvQctnFLL5/r0n52E4gE","05CI0IXBlFAZLC7oDGyE06","3d5ZYDl6tNXpSvVoHkaTlL","93OHkp9C9PF6XGy/eSjuGo@f9941","5856q0QJVPPLt+2JU0tikn@f9941","d550xuRK9Bk4G83Sl3gt3h@f9941","0aDUJw929Kg6abJdJRTApp@f9941","0ewtTG9/RAA6qwm7CyB7n3@f9941","a994tZCUBAlptUbBRjcdc3@f9941","9dFbGyKM9HP525q6v7749V@f9941","29CNNy6QdEjIUNKO5T71GL@f9941","34qPah42dIObqYSgS/ohU9@f9941","65eX3JD/NGcIyff68xWMoe@f9941","37oGQS72tCuLB2cz6Rocew@f9941","c0dpxn0QxCkKihAqhdQqAk@f9941","0baagteb5LJ6CZ2omsB6Li@f9941","a22LpyvsBFU7firm+6V18b","7dNhE+zAlPAZz9aGHYWLhx","40xcYaXm9O/ru5IC27Ieiv","ae34v/0NFBzrhGNsx3OERq","f3+TU6Tp5CGqIR1sQxx1Vs","2fceFThhZFwKrnbB0bA8Go","12Y9dMgWdJKJGmTiZyQR9H@17020","a7ePh0929Ac53pZe/2qZeZ","a9pyAdfQtFRKT0iM0UxYaW@5ac11","a9pyAdfQtFRKT0iM0UxYaW@dafcb","a9pyAdfQtFRKT0iM0UxYaW@4b6b9","a9pyAdfQtFRKT0iM0UxYaW@20557","a9pyAdfQtFRKT0iM0UxYaW@62b03","a9pyAdfQtFRKT0iM0UxYaW@71d04","a9pyAdfQtFRKT0iM0UxYaW@0a6d0","a9pyAdfQtFRKT0iM0UxYaW@72ae0","a9pyAdfQtFRKT0iM0UxYaW@a12ab","a9pyAdfQtFRKT0iM0UxYaW@38ee8","a9pyAdfQtFRKT0iM0UxYaW@23fb6","a9pyAdfQtFRKT0iM0UxYaW@1de20","a9pyAdfQtFRKT0iM0UxYaW@aee0e","a9pyAdfQtFRKT0iM0UxYaW@99836","a9pyAdfQtFRKT0iM0UxYaW@ca6ec","a9pyAdfQtFRKT0iM0UxYaW@1f878","a9pyAdfQtFRKT0iM0UxYaW@5047d","a9pyAdfQtFRKT0iM0UxYaW@02d48","a9pyAdfQtFRKT0iM0UxYaW@0a458","a9pyAdfQtFRKT0iM0UxYaW@28d6c","a9pyAdfQtFRKT0iM0UxYaW@d056b","a9pyAdfQtFRKT0iM0UxYaW@64510","a9pyAdfQtFRKT0iM0UxYaW@89b40","a9pyAdfQtFRKT0iM0UxYaW@a6a75","a9pyAdfQtFRKT0iM0UxYaW@f8d20","a9pyAdfQtFRKT0iM0UxYaW@b0a64","a9pyAdfQtFRKT0iM0UxYaW@85942","a9pyAdfQtFRKT0iM0UxYaW@d0c2e","5bYNCIPEZJ44UN5nRtyxcU","a9pyAdfQtFRKT0iM0UxYaW@8ab66","1fzT+w8IFLDIsTFLXbJgPk","a9pyAdfQtFRKT0iM0UxYaW@3f28c","a9pyAdfQtFRKT0iM0UxYaW@33713","a9pyAdfQtFRKT0iM0UxYaW@3ca57","a9pyAdfQtFRKT0iM0UxYaW@96c94","a9pyAdfQtFRKT0iM0UxYaW@c6fc6","a9pyAdfQtFRKT0iM0UxYaW@f0a6b","a9pyAdfQtFRKT0iM0UxYaW@e6da1","a9pyAdfQtFRKT0iM0UxYaW@f2d8f","a9pyAdfQtFRKT0iM0UxYaW@f1239","a9pyAdfQtFRKT0iM0UxYaW@3abad","a9pyAdfQtFRKT0iM0UxYaW@a952b","a9pyAdfQtFRKT0iM0UxYaW@31792","622uUBDlhPd7C386TZUi4n@dd423","095Jh54SpNMbcyYm7mXbmI","afPD159tRJQIU9QhrPoMgs","de2RTpysJHX6UT0dVXtmqt@6c48a","e3vbJXEItECY2vUwMnsJOS@6c48a","30T0DkBatOra9dinmQLDI1@6c48a","c2H49Il6JIfYbIMEE+PWci@6c48a","cfPN8HhTJCp60VGGtk3tol@6c48a","d64tKKTtBJdIPBpZnpo1Df@6c48a","a0EMQymKlOSqcAsMtsgppl@6c48a","845c2svJJAnacq+G0pUG/q@6c48a","8fkaiGCI1F1pkswT54349c@6c48a","8bhFKKaZ9Bg5dsoBQoIoNs@6c48a","176y/miBVEUp9zG+E9mreS@6c48a","194EDISuhKwa4qmumbI51T@6c48a","0fakV+xyJEJowckXn3nkmr@6c48a","5axCqbzUBFBLGbSX1XCJ2K@6c48a","48aJltHu1LgYoQj7D3BXlY@6c48a","06PxdjiY1BQqYNPxaBOTiQ@6c48a","42fK6mNYJPdpbdUX1riNPM@6c48a","eab0LfeU5JTpHDS7RRGqQ+@6c48a","2f38oW7DpPqaUKxJmzpHaS@6c48a","91a8s7JoJAOoxZ6b+xCrOu@6c48a","a6rI//WRJGWICHyVAON7Np@6c48a","68Rrs/17xK8aoapSB1aYzo@6c48a","7dpCA/HUVD86IlqODBahuF@6c48a","35NItRo95NT4X2y5AQ2pnd@6c48a","15amXonndAmJgYsJbHCUcb","47ZoI1As5PXKZFLDPHTbxr","cdC6cLQk1LCriJl5cViu42","ccyH2oPyFLPZou58f3ynjJ","20NQWML1xABLOxutaTir8T","fb05ta9xhMGJH+ltMzZYwF","ecq8vJiDdLCZbQtB3roCo+","a8kg9pDINCo6iHi4uwVw3c","dbyx25wUBDR7WGVL2b2i5a","5bwwjzRkpBsZPKvvG1Gsop","dfS2RhcL1FDJPmp5xn2st1","e1lLWHWs9Pr5XGY6fi/sMA","2ao9DSJvpFx4mWfqjXGKFL","dbDnWjEbFM2a+D6pkVWDyT","d0MqyYBeFAkIi762QNy1/B@b47c0","6fAc9/gb9Kfr1dCvwZaWSA@b47c0","edyLZXZflJ8Kez+qDduMAv@f9941","84kSY21I5DI64s9lveOwok@f9941","d6EnbsphFFf4ESjssTO6Co@f9941","7cNMeCKU1MXb+zOOmI4ne3@6c48a","7dj5uJT9FMn6OrOOx83tfK@6c48a","7d66DRCcBCZIipVBTXeVwg@6c48a","7eh2pwxfJORrlDnU8XGgL3@6c48a","7eyQmtVjhN8rqZRaG8w1R0@6c48a","81RrobXmJLz4/6In0sDtu9@6c48a","84kSY21I5DI64s9lveOwok@6c48a","07l8HsBdtInavzOkNFinzn@6c48a","f9kWthKhlHH7FLs1fbgnmk@6c48a","fa69zl6yFJ+YOOFfvjCmdW@6c48a","8eZYDEStdMIaMNCnbW9Ml0@6c48a","91yVoYf61FzZW+n5R1aLAd@6c48a","93OHkp9C9PF6XGy/eSjuGo@6c48a","9dFbGyKM9HP525q6v7749V@6c48a","9d3tzE5XVPebZPreKBJg0y@6c48a","9fbFHU15FLWLaOYIBqMcZ5@6c48a","a2EvORCq5PTofHp1kw/x8B@b8518","a2EvORCq5PTofHp1kw/x8B@ff5a5","a2EvORCq5PTofHp1kw/x8B@2665e","a2EvORCq5PTofHp1kw/x8B@2b0ba","a2EvORCq5PTofHp1kw/x8B@0a1ef","a2EvORCq5PTofHp1kw/x8B@3fb77","07L3XoZhZLtpfmQfiWlpja@f9941","60r+Cr88NPH5tPuZs7KoJR@6c48a","c15KGZWYVEf6R0WvHpezNe@6c48a","f7UZtcP3hLmr4Q8r9OH+k/@2badd","a4zRxXs8dGyYER8idbG5qm@6c48a","a6DTS8kJROr6LqwfvwTnh7@6c48a","a3hF7zqaZB6rRz0rz9FK0Z@6c48a","4cNA+SGQ5BjbBhzfesDX50@6c48a","a8AKVBTbNA84RAz9aDEdw4@6c48a","a994tZCUBAlptUbBRjcdc3@6c48a","aatSc0JKpOyZVrlQ6Y5g8s@6c48a","acVEmXnsdAV610vtk8XTII@6c48a","71XsDcIEdD3YeUNRUFj7Nf@6c48a","afh8wKDGxEWLzdNVFGQwaF@6c48a","b17sTm/hNJ5IBTZM5aWCzA@6c48a","fbGkRYRRdJeJhKyxwauN1F@6c48a","f2QTRQHPJDHIdTp671Z1rn@6c48a","e1ujoKw3xOGZvz1x1MiYYW@6c48a","b3OHnm+JJIH4td/vR5Af/h@6c48a","c1iFxO67lFL7YhhiY32lix@6c48a","c4TLRdiqVGIap9oBVrpTQ8@6c48a","4dZiFi3c5JIIDCVc3rX9VB@6c48a","aaTgM+gStK3YOB+PaNjU1c@6c48a","a7vb1RXtRCr60w8M0Y5sdU@6c48a","a4DpfUNEVJP7lSGZhwmX6y@6c48a","62tjy07FNCd7g8KrJqYH34@6c48a","c0dpxn0QxCkKihAqhdQqAk@6c48a","c1VofYYu1Pe6oV3IIgeVp8@6c48a","c25kO3HTlBRoadm9oAhNJU@6c48a","c60Wv/5H5NE7uLXumreH54@6c48a","c9kxLiqTJMi7OZG4nCH0mQ@6c48a","79jsCVf7NGl7rYyYoQ1nBg@f9941","ceVBpzbzxM/rK4Xc5/+dPa@6c48a","d550xuRK9Bk4G83Sl3gt3h@6c48a","d6EnbsphFFf4ESjssTO6Co@6c48a","3cYuhom4dLO7Eb9uyi9zxb@6c48a","dcORu38dFAjqecHv7JHj69@6c48a","a2EvORCq5PTofHp1kw/x8B@2c36b","d77CF+eMNFzKmqHAMc+8Yh","depNiyOa5IErJdwQYcbrzm@6c48a","edyLZXZflJ8Kez+qDduMAv@6c48a","eemZkkGlFMTKJTnN5OHxM3@6c48a","ef1BXRyEhPdIJxoWm9vywu@6c48a","f1KiPEuSRDIqJgPZgkKPHo@6c48a","f3w6orJuNN0boH9l57IdQH@39e38","f3w6orJuNN0boH9l57IdQH@d1efb","f3w6orJuNN0boH9l57IdQH@c119a","f3w6orJuNN0boH9l57IdQH@fe4e0","f6c+RpOIlMnr08bmtZ3Xb8@6c48a","feji1orp5EDoRtfE1Grasn@6c48a"],["value","targetInfo","node","target","root","source","asset","_mesh","_spriteFrame","mainRenderer","_textureSource","_effectAsset","_parent","mainTexture","data","_font","emissiveMap","_particleSystem","_cpuMaterial","_mainTexture","_normalSprite","graphicNode","normalMap","spriteFrame","_skeleton","_target","_file","prefabRootNode","_hoverSprite","_pressedSprite","_disabledSprite","levelPrefab","maskNode","alphaTexture","_cameraComponent","container","lblTitle","btnRight","btnLeft","btnCustomize","btnHome","btnTryAgain","collectibleNode","scoreNode","uiTransform2","uiTransform","textNode","bottomRight","bottomLeft","middle","topLeft","topRight","finalLevelCollider","mainStage","occluder","btnSound","btnMusic","btnResume","overlayBG","powerUpParticle","audioSource","scene","like","star3","star2","star1","scoreBorder","scoreFill","car","mainCamera","ctnHelp","cameraSoundPlayer","cameraFlashEffect4","cameraFlashEffect3","cameraFlashEffect2","cameraFlashEffect1","cameraFlashContainer","renderTextureOpacity","imgBackground","btnDone","imgOverallRarity","imgBackgroundRarity","imgCelebRarity","imgPlayerRarity","imgRenderSprite","renderCamera","txtBG","txtPlayer","txtCelebrity","cameraAnimation","scrollingMaterial","dialogMaterial","_envmapHDR","_envmapLDR","_defaultClip","activeStar","pbrMap","transparencyMap","opacity","overlayNode"],["cc.SpriteFrame",["cc.Node",["_name","_layer","_active","_id","_objFlags","__editorExtras__","_mobility","_parent","_components","_lpos","_children","_prefab","_lscale","_lrot","_euler"],-4,1,9,5,2,4,5,5,5],["cc.Widget",["_alignFlags","_top","_right","_left","_originalWidth","_bottom","_originalHeight","_alignMode","_verticalCenter","_horizontalCenter","_isAbsRight","node"],-8,1],["cc.Sprite",["_sizeMode","_type","_isTrimmedMode","_fillRange","_fillStart","_fillType","node","_spriteFrame","_color","_fillCenter","__prefab"],-3,1,6,5,5,4],["cc.Label",["_string","_actualFontSize","_fontSize","_overflow","_isSystemFontUsed","_lineHeight","_enableWrapText","_isBold","_horizontalAlign","node","_color","_font"],-6,1,5,6],["cc.Node",["_name","_layer","_id","_active","_parent","_components","_lpos","_prefab","_lrot","_euler","_children","_lscale"],-1,1,12,5,4,5,5,9,5],["cc.RealKeyframeValue",["interpolationMode","rightTangentWeight","leftTangentWeight","value","rightTangent","leftTangent"],-3],["cc.Node",["_name","_layer","_active","_id","_children","_components","_parent","_prefab","_lpos","_lscale"],-1,2,12,1,4,5,5],["cc.BoxCollider",["_isTrigger","node","__prefab","_center","_size"],2,1,4,5,5],["cc.TargetOverrideInfo",["propertyPath","targetInfo","source","target","sourceInfo"],2,4,1,1,4],["cc.CurveRange",["mode","constantMax","constant","constantMin","multiplier","spline"],-2,4],["cc.Button",["_transition","_zoomScale","node","_normalColor","_target","_normalSprite","_hoverSprite","_pressedSprite","_disabledSprite"],1,1,5,1,6,6,6,6],["cc.Node",["_name","_objFlags","_parent","_lpos","_prefab","_components","_lrot","_euler","__editorExtras__","_lscale","_children"],1,1,5,4,2,5,5,11,5,12],["cc.MeshRenderer",["_name","node","_materials","bakeSettings","_mesh","__prefab"],2,1,3,4,6,4],["cc.ShapeModule",["_shapeType","_enable","radius","emitFrom","arcSpeed","_position","_rotation","_scale"],-1,4,5,5,5],["cc.Camera",["_visibility","_priority","_fov","_far","_name","_orthoHeight","_clearFlags","_projection","_color","node"],-5,5,1],["cc.ParticleSystem",["_capacity","_aabbHalfX","_aabbHalfY","_aabbHalfZ","_prewarm","playOnAwake","duration","loop","_materials","startColor","startSizeX","startSizeY","startSizeZ","startSpeed","startRotationX","startRotationY","startRotationZ","startDelay","startLifetime","gravityModifier","rateOverTime","rateOverDistance","_colorOverLifetimeModule","_shapeModule","_sizeOvertimeModule","_velocityOvertimeModule","_forceOvertimeModule","_limitVelocityOvertimeModule","_rotationOvertimeModule","_textureAnimationModule","_noiseModule","_trailModule","renderer","node","__prefab"],-5,12,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,1,4],["cc.UITransform",["node","_contentSize","_anchorPoint","__prefab"],3,1,5,5,4],["cc.Node",["_name","_objFlags","__editorExtras__","_id","_prefab","_children","_components","_parent","_lpos"],-1,4,2,2,4,5],["cc.PrefabInstance",["fileId","prefabRootNode","propertyOverrides","mountedChildren","mountedComponents","removedComponents"],2,1,9,9,9,9],["cc.Material",["_name","_defines","_states","_techIdx","_props"],-1,12],["cc.GradientRange",["_mode","color","gradient"],2,5,4],["cc.ParticleSystemRenderer",["_renderMode","_alignSpace","_cpuMaterial","_mainTexture"],1,6,6],["cc.UIOpacity",["_opacity","node","__prefab"],2,1,4],["cc.Mask",["_inverted","_alphaThreshold","_type","node","__prefab"],0,1,4],["cc.Graphics",["_lineJoin","_lineCap","node","_fillColor","__prefab"],1,1,5,4],["cc.Prefab",["_name"],2],["cc.PrefabInstance",["fileId","prefabRootNode","propertyOverrides","mountedComponents"],1,9,9],["e1d25yANAZE25xm/H9GQ9Gl",["node","__prefab","idleTextures","collidedTextures","mainRenderer"],3,1,4,3,3,1],["cc.MeshRenderer",["_name","__prefab","_materials","bakeSettings","node"],2,4,3,4,4],["b3050tySkpBd41FfZaQ/vom",["points","isSpecial","node","__prefab","graphicNode","speicalAppearance"],1,1,4,1,2],["cc.ParticleSystem",["playOnAwake","_capacity","duration","loop","_materials","startColor","startSizeX","startSizeY","startSizeZ","startSpeed","startRotationX","startRotationY","startRotationZ","startDelay","startLifetime","gravityModifier","rateOverTime","rateOverDistance","_colorOverLifetimeModule","_shapeModule","_sizeOvertimeModule","_velocityOvertimeModule","_forceOvertimeModule","_limitVelocityOvertimeModule","_rotationOvertimeModule","_textureAnimationModule","_noiseModule","_trailModule","renderer","bursts"],-1,3,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,9],["cc.ColorOvertimeModule",["_enable","color"],2,4],["cc.Gradient",["alphaKeys","colorKeys"],3,9,9],["cc.AlphaKey",["alpha","time"],1],["cc.SizeOvertimeModule",["_enable","size","x","y","z"],2,4,4,4,4],["cc.RotationOvertimeModule",["_enable","x","y","z"],2,4,4,4],["cc.TextureAnimationModule",["_enable","_numTilesX","_numTilesY","cycleCount","frameOverTime","startFrame"],-1,4,4],["cc.NoiseModule",["_strengthX","_strengthY","_strengthZ"],0],["4de09mJAFNHfq4/3mrZdn/g",["node","__prefab","obstacleGraphic","graphicNode"],3,1,4,2,1],["cc.RigidBody",["_type","node","_angularFactor"],2,1,5],["cc.Animation",["node","_clips"],3,1,3],["def82wS28hJ/7oqjwmLBVd3",["shouldShow","node","graphicNode","__prefab"],2,1,1,4],["cc.ParticleSystem2D",["_name","_dstBlendFactor","emissionRate","life","lifeVar","angle","angleVar","startSize","startSizeVar","endSize","startSpin","endSpin","endSpinVar","speed","speedVar","tangentialAccel","tangentialAccelVar","radialAccel","radialAccelVar","_totalParticles","startRadius","_custom","endRadius","endRadiusVar","autoRemoveOnFinish","node","posVar","gravity","_startColor","_startColorVar","_endColor","_endColorVar","_file","_spriteFrame"],-22,1,5,5,5,5,5,5,6,6],["cc.ColorKey",["time","color"],2,5],["cc.Node",["_name","_active","_id","_parent","_children","_components"],0,1,2,2],["9a401++b6FGrIz83+NGrNU6",["node","__prefab","levelPrefab"],3,1,4,6],["cc.CompPrefabInfo",["fileId"],2],["cc.PrefabInfo",["fileId","instance","root","asset","targetOverrides","nestedPrefabInstanceRoots"],1,1,1,9,2],["cc.PrefabInfo",["fileId","targetOverrides","nestedPrefabInstanceRoots","root","instance","asset"],0,1,4,6],["cc.PrefabInfo",["fileId","root","instance","targetOverrides","nestedPrefabInstanceRoots","asset"],2,1,4,9,2,6],["cc.PrefabInfo",["fileId","instance","targetOverrides","nestedPrefabInstanceRoots","root","asset"],-1,1,1],["cc.PrefabInfo",["fileId","nestedPrefabInstanceRoots","root","instance","targetOverrides","asset"],1,1,4,9,6],["cc.PrefabInfo",["fileId","instance","nestedPrefabInstanceRoots","root","asset","targetOverrides"],0,1,1,9],["cc.PrefabInfo",["root","asset","fileId","instance","targetOverrides","nestedPrefabInstanceRoots"],-1,9,2],["cc.PrefabInfo",["fileId","instance","targetOverrides","root","asset","nestedPrefabInstanceRoots"],0,1,1,2],["cc.TargetInfo",["localID"],2],["cc.MountedChildrenInfo",["targetInfo","nodes"],3,4,2],["CCPropertyOverrideInfo",["value","propertyPath","targetInfo"],1,1],["CCPropertyOverrideInfo",["propertyPath","targetInfo","value"],2,1,8],["CCPropertyOverrideInfo",["propertyPath","targetInfo","value"],2,4,8],["CCPropertyOverrideInfo",["value","propertyPath","targetInfo"],1,4],["CCPropertyOverrideInfo",["propertyPath","targetInfo","value"],2,1,6],["CCPropertyOverrideInfo",["propertyPath","targetInfo","value"],2,4,6],["CCPropertyOverrideInfo",["propertyPath","targetInfo","value"],2,4,1],["cc.MountedComponentsInfo",["targetInfo","components"],3,4,2],["cc.MountedComponentsInfo",["targetInfo","components"],3,4,9],["cc.ModelBakeSettings",[],3],["cc.AudioClip",["_name","_native","_duration"],0],["cc.SphereCollider",["_isTrigger","node","__prefab"],2,1,4],["cc.Sorting",["_sortingOrder","node","__prefab"],2,1,4],["cc.VelocityOvertimeModule",["x","y","z","speedModifier"],3,4,4,4,4],["cc.ForceOvertimeModule",["x","y","z"],3,4,4,4],["cc.LimitVelocityOvertimeModule",["limitX","limitY","limitZ","limit"],3,4,4,4,4],["cc.RealCurve",["_times","_values"],2,9],["cc.TrailModule",["lifeTime","widthRatio","colorOverTrail","colorOvertime","_particleSystem"],3,4,4,4,4,1],["cc.Mesh",["_native","_hash","_struct"],1,11],["cc.ParticleAsset",["_name","_native"],1],["cc.EffectAsset",["_name","shaders","techniques"],0],["c931bkBEeZJs5DbedGOrB4u",["node","__prefab","graphicNode","obstacleGraphic"],3,1,4,1,2],["e328axavzdFqqsxa0QXjEDi",["node","__prefab"],3,1,4],["cc.SkeletalAnimation",["node","__prefab"],3,1,4],["cc.SkinnedMeshRenderer",["node","__prefab","_materials","bakeSettings","_skinningRoot","_mesh","_skeleton"],3,1,4,3,4,1,6,6],["dfa40i8a+dMRY6b1T8rP2Y8",["isRunwayNPC","node","__prefab","mainRenderer"],2,1,4,1],["cc.SceneAsset",["_name"],2],["cc.Canvas",["node","_cameraComponent"],3,1,1],["09723gj1GNCLoH8nqGWn3tt",["node"],3,1],["cc.Scene",["_name","_children","_prefab","_globals"],2,2,4,4],["cc.SceneGlobals",["ambient","shadows","_skybox","fog","octree","lightProbeInfo"],3,4,4,4,4,4,4],["cc.AmbientInfo",["_skyIllumLDR","_skyColorHDR","_groundAlbedoHDR","_skyColorLDR","_groundAlbedoLDR"],2,5,5,5,5],["cc.ShadowsInfo",["_shadowColor"],3,5],["cc.SkyboxInfo",["_envmapHDR","_envmapLDR"],3,6,6],["cc.FogInfo",["_fogDensity","_fogStart","_fogEnd","_fogAtten","_fogColor"],-1,5],["cc.OctreeInfo",[],3],["cc.LightProbeInfo",[],3],["21463u2bNFG8bTHI0siPpWr",["node","pages","pagination","paginationFrames","btnTryAgain","btnHome","btnCustomize","btnLeft","btnRight","lblTitle","container"],3,1,2,2,3,1,1,1,1,1,1,1],["cc.BlockInputEvents",["node"],3,1],["9160fynR0FPM6nHmS6htjz5",["node","heartNodes","collectibleNodes","scoreNode","collectibleNode"],3,1,2,2,1,1],["440650LNFpB+JsKDOXBAik9",["node","maskNode","topRight","topLeft","middle","bottomLeft","bottomRight","textNode","particles","mat","uiTransform","uiTransform2","particleCurve","labelCurve"],3,1,1,1,1,1,1,1,1,2,3,1,1,4,4],["cc.CylinderCollider",["_radius","_height","node","_center"],1,1,5],["aa356Q8ODxOf4sH97WhMmDh",["moveSpeed","initialLevelPos","levelLength","node","mainLevels","celebStage","occluder","mainStage","finalLevelCollider","scrollingMaterial"],0,1,3,1,1,1,1,6],["c0d78PU/LhHipcQAN6TXL/3",["node"],3,1],["c79d9o6jwtGEaYD6ZJtsyA/",["node","pauseContainer","overlayBG","btnResume","btnMusic","btnSound"],3,1,1,1,1,1,1],["3adfc0/ucBMVoFhvx/7o0gT",["node"],3,1],["b6392BptVFPHaYf8m9ToZ8E",["eventName","node"],2,1],["06c64Xkg89CSZxOZOZ4F5MS",["node","cinematicBar1","cinematicBar2","btnSkip","bouncerUIContainer"],3,1,1,1,1,1],["28fd3cV3NRHurFgHryb2/C+",["node","dialogList","dialogMaterial"],3,1,9,6],["DialogList",["id","texture"],2,3],["5da1aWDqTxC2ZqRsLE9Dlwj",["node"],3,1],["cc.Burst",["count"],3,4],["d6257TZ2+JExaomzVt32JoM",["node","particleImage","particleAssets","btnHelp","postGameScreen","raritySprites","raritySpriteLabels","celebNode","momentContainer","bottomContainer","imgCamera","cameraSounds","backgrounds","btnCloseHelp","btnSkip"],3,1,2,3,1,1,3,3,1,1,1,1,3,9,1,1],["SpriteList",["frames"],3,3],["9821e+iyyBHKp/E64LddNUH",["node","powerUpParticle"],3,1,1],["cf938i7pfVAOaI/8ctN6fkF",["node","audioSource","audioList","musicList"],3,1,1,9,9],["AudioList",["audioName","clip"],2,3],["e7a3as5m2dG85pgQDnNNaDj",["followSpeed","node","playerModel"],2,1,1],["08af0E0GJRC4JAbXnbPa1H0",["jumpHeight","jumpDuration","turnDuration","playerAnimation","playerLives","node","playerModel","jumpCurve","turnCurve","playerMaterials","playerParticle"],-2,1,1,4,4,3,1],["cc.DirectionalLight",["node","_color","_staticSettings"],3,1,5,4],["cc.StaticLightSettings",[],3],["00649Uks0NOdr3pleMMhYsM",["minSwipeDistance","swipeDuration","node"],1,1],["cc.Toggle",["_transition","node","_normalColor","_target","_checkMark"],2,1,5,1,1],["cc.AudioSource",["_playOnAwake","node"],2,1],["49c59Iex/hP9LPT7kKNspBi",["node","lblWipeoutMessage","txt_score","collectibles","btnTryAgain","btnHome","btnCustomize","imgWipeout","wipeoutSprites"],3,1,1,1,2,1,1,1,1,3],["c7db2k8qdlFrrXKoYeqY3ra",["node","scoreContainer","swagContainer","collectibles","lblScore","lblOutfitScore","lblTotalScore"],3,1,1,1,2,1,1,1],["15611b0Q11FP4Q/zuglNpwI",["node","txtScore","rarityParticles","rarityMaterials"],3,1,1,2,3],["418d1koDghCHqikXLcsWjkG",["node","countDownLabel","gameOverPanel","winPanel","mainCamera","initialCutscene","gameHud","bouncerInteraction","endGameCam","rarityMomentScreen","btnSkipToCB"],3,1,1,1,1,1,1,1,1,1,1,1],["ee5aesuVPdL3oan2PkQncvM",["node","__prefab","maskNode","overlayNode","opacity"],3,1,4,1,1,1],["0a9d3lQFgJB8qSz17L4D+2M",["powerUpDuration","node","__prefab","graphicNode"],2,1,4,1],["cc.Skeleton",["_name","_hash","_joints","_bindposes"],0,12],["cc.BitmapFont",["_name","fontSize","fntConfig"],0],["08a43cYbndMA7XbKEUmd1k7",["node","__prefab"],3,1,4]],[[56,0,2],[58,0,1,2,3],[59,0,1,2,2],[62,0,1,2,2],[51,0,1,2,3,4,5,5],[9,0,2,4,3,1,2],[19,0,1,2,2],[47,0,2],[10,1],[67,1],[49,0,1,2,3,4,5,4],[1,4,5,7,11,3],[52,0,1,2,3,4,5,3],[12,1,2,4,8,2],[17,0,1,1],[9,0,1,2],[13,1,5,2,3,4,1],[60,0,1,2,2],[1,0,7,10,11,2],[18,1,2,7,4,3],[9,0,3,1,2],[9,0,2,3,1,2],[12,0,2,5,4,3,9,2],[9,2,3,1,1],[19,0,1,4,2,5,2],[63,0,1,2,2],[65,0,1,1],[28,0,1,2,3,1],[29,0,4,1,2,3,2],[50,0,1,2,3,4,5,2],[10,2,2],[76,0,1,2,3],[1,0,7,8,11,9,13,12,14,2],[3,0,6,7,2],[1,0,1,7,8,9,3],[13,1,2,3,4,1],[1,0,7,8,11,9,12,2],[1,0,7,8,11,9,2],[1,0,7,8,9,13,12,14,2],[61,0,1,2,3],[21,1],[1,0,7,10,11,9,13,14,2],[1,0,2,7,10,11,3],[1,0,1,7,10,8,9,3],[20,0,2,1,4,4],[5,0,1,4,5,6,3],[19,0,1,3,2,2],[57,0,1,1],[74,0,1,2],[10,0,5,2],[34,0,1,3],[130,0,1,1],[27,0,1,2,3],[23,1,1],[20,0,3,2,1,4,5],[23,0,1,2],[3,6,7,1],[3,0,2,6,7,3],[26,0,2],[6,0,3,3],[1,0,7,11,9,13,14,2],[1,0,7,8,9,12,2],[1,0,1,7,8,3],[5,0,1,4,5,3],[7,0,1,6,4,5,8,3],[114,0,1,2],[5,0,4,10,7,6,8,9,2],[71,0,1,2,3,1],[72,0,1,2,1],[73,0,1,2,3,1],[75,0,1,2,3,4,1],[80,0,1,1],[1,0,2,7,10,11,9,3],[12,0,2,5,3,6,7,2],[21,0,2,2],[34,0,2],[8,1,2,3,4,1],[17,0,1,2,1],[1,0,7,10,8,11,9,2],[13,0,1,2,3,4,2],[33,0,1],[36,1,2,3,1],[2,0,4,6,11,4],[3,0,2,6,3],[1,0,1,10,8,9,3],[10,0,3,1,4],[3,0,6,2],[3,6,8,7,1],[1,0,7,10,11,9,2],[1,0,1,7,8,9,12,3],[21,1,1],[35,1,2,3,4,1],[6,3,4,1,5,2,6],[48,0,1,2,3,4,5,3],[32,1,1],[37,4,5,1],[6,0,4,1,5,2,6],[38,1],[11,0,1,2,3,4,3],[107,0,1,2],[1,0,10,8,11,9,2],[1,0,7,10,11,12,2],[1,0,7,8,11,13,12,14,2],[1,0,1,7,10,8,3],[5,0,3,1,4,5,6,4],[16,6,7,5,4,0,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,6],[10,0,1,3],[32,0,1,2],[14,1,3,2,4,4],[37,0,1,2,3,4,5,5],[6,0,3,4,1,5,2,7],[6,4,1,5,2,5],[38,0,1,2,4],[22,0,2,3,2],[77,0,1,3],[82,0,1,2,3,4,5,6,1],[2,0,8,11,3],[3,1,0,6,7,3],[24,3,1],[25,2,3,1],[128,0,1,2,3,4],[1,0,10,8,11,2],[1,4,5,11,3],[1,0,1,7,10,8,9,12,3],[1,0,2,1,7,8,9,4],[35,0,1,2,3,4,2],[6,0,1,2,4],[22,2,3,1],[2,0,3,2,1,5,4,6,11,8],[1,0,2,1,7,10,8,9,4],[1,0,7,10,8,9,12,2],[1,0,7,8,2],[7,0,2,1,6,4,5,4],[6,0,3,4,5,5],[2,0,2,5,11,4],[3,0,6,8,7,2],[3,1,0,6,8,7,3],[3,0,3,6,7,3],[3,0,3,6,3],[11,0,1,2,3,4,5,3],[4,0,1,2,5,6,4,9,11,7],[42,0,1,2,2],[111,0,1],[44,0,1,2],[1,0,7,10,9,13,12,14,2],[1,0,2,1,7,10,8,4],[1,0,4,1,7,8,9,4],[46,0,1,2,1],[64,0,1,2,2],[13,0,1,5,2,3,4,2],[68,0,1,2,4],[69,0,1,2,2],[31,0,1,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,3],[14,1,0,3,4,4],[6,0,3,1,2,5],[78,0,1,2,4],[17,0,1],[2,0,4,6,7,11,5],[2,0,3,1,11,4],[3,2,6,8,7,2],[3,2,6,7,2],[3,1,0,4,3,6,8,9,5],[4,0,1,2,3,6,9,10,6],[4,0,8,1,5,3,9,10,6],[4,0,1,6,4,9,11,5],[4,0,8,1,3,6,9,10,6],[4,0,1,2,5,3,9,10,6],[4,0,1,3,6,4,9,6],[43,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,22,23,24,19,25,26,27,28,29,30,31,24],[26,1],[1,0,2,7,8,11,9,12,3],[1,0,2,7,8,11,9,13,12,14,3],[1,0,7,11,13,14,2],[1,0,10,11,9,13,14,2],[1,0,1,10,8,9,12,3],[1,0,3,7,10,8,3],[1,0,7,8,9,13,14,2],[1,0,4,1,7,8,4],[1,0,7,10,9,12,2],[1,0,3,7,8,3],[1,0,10,11,2],[12,0,10,4,3,6,7,2],[7,0,4,5,7,2],[66,0,1,1],[13,0,1,5,2,3,2],[70,0,1,2,2],[14,0,2,4,3],[36,0,1,2,3,2],[22,0,1,2,3,3],[79,0,1,2,3,1],[8,0,1,2,2],[8,1,3,4,1],[8,0,1,3,4,2],[17,0,3,1,1],[2,0,1,4,11,4],[2,0,2,4,11,4],[2,0,2,11,3],[2,0,3,2,4,6,11,6],[2,0,3,2,1,7,11,6],[11,2,3,4,1],[4,0,1,9,3],[4,0,1,2,5,3,4,7,9,11,8],[104,0,1,2],[43,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,20,21,19,25,26,27,28,29,30,31,32,33,23],[15,4,1,2,0,9,8,5],[120,0,1,2,3,4,2],[121,0,1,2],[1,0,8,11,2],[1,0,7,10,11,13,12,14,2],[1,0,10,2],[1,0,10,9,2],[1,0,1,3,10,8,9,4],[1,0,7,10,9,2],[1,0,2,3,7,10,9,4],[1,0,7,10,8,9,2],[1,0,2,1,7,8,4],[1,0,2,7,8,9,13,14,3],[1,0,6,7,10,9,3],[1,0,3,7,8,13,14,3],[1,0,7,8,9,2],[1,0,3,7,8,9,3],[1,0,2,7,10,3],[1,0,7,10,8,11,9,12,2],[1,0,7,10,8,11,2],[1,0,6,10,11,3],[1,0,7,10,11,9,12,2],[1,0,7,8,11,2],[12,0,2,5,3,2],[18,0,5,6,4,2],[18,0,3,5,6,8,3],[5,0,4,5,7,6,8,9,2],[5,0,2,4,5,6,8,9,3],[5,0,2,4,5,3],[5,0,1,4,5,7,3],[5,0,4,5,7,6,8,11,9,2],[7,0,1,4,5,3],[7,0,1,4,5,8,9,3],[7,0,3,6,4,5,3],[7,0,1,4,5,7,3],[45,0,1,2,3,4,5,4],[53,0,1,2,3,4,5,4],[54,0,1,2,3,4,5,5],[55,0,1,2,3,4,5,4],[9,0,2,1,2],[27,0,1,3,2,3],[28,0,1,4,2,3,1],[29,0,1,2,3,2],[20,0,1,4,3],[30,0,1,2,3,4,5,3],[30,0,1,2,3,4,3],[16,1,2,3,4,0,33,34,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,6],[16,5,33,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,2],[16,1,2,3,0,33,34,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,5],[31,2,3,0,1,4,5,6,7,8,9,10,11,12,13,14,15,16,17,29,18,19,20,21,22,23,24,25,26,27,28,5],[10,0,4,5,3],[33,1,0,1],[14,1,0,4,3],[14,1,0,4,5,6,7,3],[8,0,1,2,3,4,2],[8,0,1,2,3,2],[8,0,1,2,4,2],[81,0,1,1],[83,0,1,2,3,2],[39,0,1,3,2,1],[39,0,1,2,1],[84,0,2],[85,0,1,1],[2,0,3,2,1,5,11,6],[2,0,1,11,3],[2,0,5,11,3],[2,0,1,9,8,7,11,6],[2,0,2,1,10,11,5],[2,0,2,1,11,4],[2,0,11,2],[2,0,3,5,11,4],[2,0,3,2,1,4,11,6],[2,0,3,9,8,11,5],[2,0,3,2,4,6,6],[2,0,1,7,11,4],[2,0,1,9,8,11,5],[86,0,1],[3,1,0,2,6,7,4],[3,1,0,6,3],[3,1,0,3,6,8,9,4],[3,1,5,0,3,6,8,9,5],[3,1,0,6,10,7,3],[87,0,1,2,3,2],[88,0,1,2,3,4,5,1],[89,0,1,2,3,4,2],[90,0,1],[91,0,1,1],[92,0,1,2,3,4,5],[93,1],[94,1],[95,0,1,2,3,4,5,6,7,8,9,10,1],[23,0,1,2,2],[24,0,1,3,3],[24,2,0,3,4,3],[25,0,1,2,3,3],[25,2,4,3,1],[96,0,1],[97,0,1,2,3,4,1],[11,0,2,3,4,5,6,7,8,2],[11,0,1,2,5,3],[11,0,2,3,4,2],[98,0,1,2,3,4,5,6,7,8,9,10,11,12,13,1],[40,0,1,2,2],[40,0,1,2],[99,0,1,2,3,3],[4,0,8,1,2,3,4,9,11,7],[4,0,1,2,5,4,9,11,6],[4,0,1,2,3,7,9,6],[4,0,1,2,3,6,7,9,10,7],[4,0,1,2,3,4,7,9,7],[4,0,8,1,2,3,4,9,7],[4,0,1,2,5,3,7,9,10,7],[4,0,1,2,5,4,9,6],[100,0,1,2,3,4,5,6,7,8,9,4],[101,0,1],[41,0,1],[41,0,1,1],[102,0,1,2,3,4,5,1],[103,0,1],[42,1,3,2,1],[105,0,1,2,3,4,1],[106,0,1,2,1],[15,1,2,3,0,9,8,5],[15,7,1,5,3,6,0,9,8,7],[15,4,1,2,5,6,0,8,7],[15,2,0,9,8,3],[108,0,1],[109,0,1],[110,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,1],[112,0,1,1],[44,1,1],[113,0,1,2,3,1],[115,0,1,2,2],[116,0,1,2,3,4,5,6,7,8,9,10,6],[117,0,1,2,1],[118,1],[119,0,1,2,3],[122,0,1,2,3,4,5,6,7,8,1],[123,0,1,2,3,4,5,6,1],[124,0,1,2,3,1],[125,0,1,2,3,4,5,6,7,8,9,10,1],[126,0,1,2,3,4,1],[127,0,1,2,3,2],[129,0,1,2,4]],[[[{"name":"img_celebmoment_flash3","rect":{"x":0,"y":0,"width":1052,"height":883},"offset":{"x":0,"y":0},"originalSize":{"width":1052,"height":883},"rotated":false,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[-526,-441.5,0,526,-441.5,0,-526,441.5,0,526,441.5,0],"indexes":[0,1,2,2,1,3],"uv":[0,883,1052,883,0,0,1052,0],"nuv":[0,0,1,0,0,1,1,1],"minPos":{"x":-526,"y":-441.5,"z":0},"maxPos":{"x":526,"y":441.5,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[10],[164]],[[{"name":"ESR_RECORDING_CONTENT_DIVIDER","rect":{"x":164,"y":0,"width":913,"height":84},"offset":{"x":82,"y":0},"originalSize":{"width":1077,"height":84},"rotated":false,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[-456.5,-42,0,456.5,-42,0,-456.5,42,0,456.5,42,0],"indexes":[0,1,2,2,1,3],"uv":[164,84,1077,84,164,0,1077,0],"nuv":[0.1522748375116063,0,1,0,0.1522748375116063,1,1,1],"minPos":{"x":-456.5,"y":-42,"z":0},"maxPos":{"x":456.5,"y":42,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[10],[165]],[[{"name":"pose2","rect":{"x":70,"y":257,"width":737,"height":920},"offset":{"x":13.5,"y":-44},"originalSize":{"width":850,"height":1346},"rotated":false,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[-368.5,-460,0,368.5,-460,0,-368.5,460,0,368.5,460,0],"indexes":[0,1,2,2,1,3],"uv":[70,1089,807,1089,70,169,807,169],"nuv":[0.08235294117647059,0.12555720653789004,0.9494117647058824,0.12555720653789004,0.08235294117647059,0.8090638930163447,0.9494117647058824,0.8090638930163447],"minPos":{"x":-368.5,"y":-460,"z":0},"maxPos":{"x":368.5,"y":460,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[10],[166]],[[[58,"mainLevel1"],[121,"mainLevel1",[-299,-300,-301,-302,-303,-304,-305,-306,-307,-308,-309,-310],[[147,-298,[7,"14rddNL0hN6LY0LQ7T8Zdr"],989]],[93,"ebhBZNX8pMSKm1FJ0OZ2NW",null,-297,0,[[5,["graphicNode"],-14,[0,["a3g7sdk4BAPL27QvR510GK"]],-13,[0,["432Fxt4F5Oi6ovNo4oHVo1"]]],[5,["speicalAppearance","0"],-16,[0,["a3g7sdk4BAPL27QvR510GK"]],-15,[0,["efquG4D01PBIdWrWoxv2xH"]]],[5,["speicalAppearance","1"],-18,[0,["a3g7sdk4BAPL27QvR510GK"]],-17,[0,["e8t/NvMc5JAZQT0r0Wgnwg"]]],[5,["speicalAppearance","2"],-20,[0,["a3g7sdk4BAPL27QvR510GK"]],-19,[0,["8c12IhI/5IfpZ5xb0uMm/F"]]],[5,["speicalAppearance","3"],-22,[0,["a3g7sdk4BAPL27QvR510GK"]],-21,[0,["881SXtP4FNxL4NVhrHnwT7"]]],[5,["speicalAppearance","4"],-24,[0,["a3g7sdk4BAPL27QvR510GK"]],-23,[0,["341Xa08tBHUb0RbJE1kfQN"]]],[5,["graphicNode"],-26,[0,["a3g7sdk4BAPL27QvR510GK"]],-25,[0,["432Fxt4F5Oi6ovNo4oHVo1"]]],[5,["speicalAppearance","0"],-28,[0,["a3g7sdk4BAPL27QvR510GK"]],-27,[0,["efquG4D01PBIdWrWoxv2xH"]]],[5,["speicalAppearance","1"],-30,[0,["a3g7sdk4BAPL27QvR510GK"]],-29,[0,["e8t/NvMc5JAZQT0r0Wgnwg"]]],[5,["speicalAppearance","2"],-32,[0,["a3g7sdk4BAPL27QvR510GK"]],-31,[0,["8c12IhI/5IfpZ5xb0uMm/F"]]],[5,["speicalAppearance","3"],-34,[0,["a3g7sdk4BAPL27QvR510GK"]],-33,[0,["881SXtP4FNxL4NVhrHnwT7"]]],[5,["speicalAppearance","4"],-36,[0,["a3g7sdk4BAPL27QvR510GK"]],-35,[0,["341Xa08tBHUb0RbJE1kfQN"]]],[5,["graphicNode"],-38,[0,["a3g7sdk4BAPL27QvR510GK"]],-37,[0,["432Fxt4F5Oi6ovNo4oHVo1"]]],[5,["speicalAppearance","0"],-40,[0,["a3g7sdk4BAPL27QvR510GK"]],-39,[0,["efquG4D01PBIdWrWoxv2xH"]]],[5,["speicalAppearance","1"],-42,[0,["a3g7sdk4BAPL27QvR510GK"]],-41,[0,["e8t/NvMc5JAZQT0r0Wgnwg"]]],[5,["speicalAppearance","2"],-44,[0,["a3g7sdk4BAPL27QvR510GK"]],-43,[0,["8c12IhI/5IfpZ5xb0uMm/F"]]],[5,["speicalAppearance","3"],-46,[0,["a3g7sdk4BAPL27QvR510GK"]],-45,[0,["881SXtP4FNxL4NVhrHnwT7"]]],[5,["speicalAppearance","4"],-48,[0,["a3g7sdk4BAPL27QvR510GK"]],-47,[0,["341Xa08tBHUb0RbJE1kfQN"]]],[5,["graphicNode"],-50,[0,["a3g7sdk4BAPL27QvR510GK"]],-49,[0,["432Fxt4F5Oi6ovNo4oHVo1"]]],[5,["speicalAppearance","0"],-52,[0,["a3g7sdk4BAPL27QvR510GK"]],-51,[0,["efquG4D01PBIdWrWoxv2xH"]]],[5,["speicalAppearance","1"],-54,[0,["a3g7sdk4BAPL27QvR510GK"]],-53,[0,["e8t/NvMc5JAZQT0r0Wgnwg"]]],[5,["speicalAppearance","2"],-56,[0,["a3g7sdk4BAPL27QvR510GK"]],-55,[0,["8c12IhI/5IfpZ5xb0uMm/F"]]],[5,["speicalAppearance","3"],-58,[0,["a3g7sdk4BAPL27QvR510GK"]],-57,[0,["881SXtP4FNxL4NVhrHnwT7"]]],[5,["speicalAppearance","4"],-60,[0,["a3g7sdk4BAPL27QvR510GK"]],-59,[0,["341Xa08tBHUb0RbJE1kfQN"]]],[5,["graphicNode"],-62,[0,["a3g7sdk4BAPL27QvR510GK"]],-61,[0,["432Fxt4F5Oi6ovNo4oHVo1"]]],[5,["speicalAppearance","0"],-64,[0,["a3g7sdk4BAPL27QvR510GK"]],-63,[0,["efquG4D01PBIdWrWoxv2xH"]]],[5,["speicalAppearance","1"],-66,[0,["a3g7sdk4BAPL27QvR510GK"]],-65,[0,["e8t/NvMc5JAZQT0r0Wgnwg"]]],[5,["speicalAppearance","2"],-68,[0,["a3g7sdk4BAPL27QvR510GK"]],-67,[0,["8c12IhI/5IfpZ5xb0uMm/F"]]],[5,["speicalAppearance","3"],-70,[0,["a3g7sdk4BAPL27QvR510GK"]],-69,[0,["881SXtP4FNxL4NVhrHnwT7"]]],[5,["speicalAppearance","4"],-72,[0,["a3g7sdk4BAPL27QvR510GK"]],-71,[0,["341Xa08tBHUb0RbJE1kfQN"]]],[5,["graphicNode"],-74,[0,["78j3SJeChFWY5tDVNRr9co"]],-73,[0,["1cVaU83N5Md67JoqqCBd5z","e3hqu0HdxNq4e2nv3hKDvO"]]],[5,["obstacleGraphic","0"],-76,[0,["78j3SJeChFWY5tDVNRr9co"]],-75,[0,["7aaD9DKUZKD74A1tB8ax+i"]]],[5,["graphicNode"],-78,[0,["78j3SJeChFWY5tDVNRr9co"]],-77,[0,["1cVaU83N5Md67JoqqCBd5z","e3hqu0HdxNq4e2nv3hKDvO"]]],[5,["obstacleGraphic","0"],-80,[0,["78j3SJeChFWY5tDVNRr9co"]],-79,[0,["7aaD9DKUZKD74A1tB8ax+i"]]],[5,["graphicNode"],-82,[0,["78j3SJeChFWY5tDVNRr9co"]],-81,[0,["1cVaU83N5Md67JoqqCBd5z","e3hqu0HdxNq4e2nv3hKDvO"]]],[5,["obstacleGraphic","0"],-84,[0,["78j3SJeChFWY5tDVNRr9co"]],-83,[0,["7aaD9DKUZKD74A1tB8ax+i"]]],[5,["graphicNode"],-86,[0,["78j3SJeChFWY5tDVNRr9co"]],-85,[0,["1cVaU83N5Md67JoqqCBd5z","e3hqu0HdxNq4e2nv3hKDvO"]]],[5,["obstacleGraphic","0"],-88,[0,["78j3SJeChFWY5tDVNRr9co"]],-87,[0,["7aaD9DKUZKD74A1tB8ax+i"]]],[5,["graphicNode"],-90,[0,["78j3SJeChFWY5tDVNRr9co"]],-89,[0,["1cVaU83N5Md67JoqqCBd5z","e3hqu0HdxNq4e2nv3hKDvO"]]],[5,["obstacleGraphic","0"],-92,[0,["78j3SJeChFWY5tDVNRr9co"]],-91,[0,["7aaD9DKUZKD74A1tB8ax+i"]]],[5,["graphicNode"],-94,[0,["78j3SJeChFWY5tDVNRr9co"]],-93,[0,["1cVaU83N5Md67JoqqCBd5z","e3hqu0HdxNq4e2nv3hKDvO"]]],[5,["obstacleGraphic","0"],-96,[0,["78j3SJeChFWY5tDVNRr9co"]],-95,[0,["7aaD9DKUZKD74A1tB8ax+i"]]],[5,["graphicNode"],-98,[0,["78j3SJeChFWY5tDVNRr9co"]],-97,[0,["1cVaU83N5Md67JoqqCBd5z","e3hqu0HdxNq4e2nv3hKDvO"]]],[5,["obstacleGraphic","0"],-100,[0,["78j3SJeChFWY5tDVNRr9co"]],-99,[0,["7aaD9DKUZKD74A1tB8ax+i"]]],[5,["graphicNode"],-102,[0,["78j3SJeChFWY5tDVNRr9co"]],-101,[0,["1cVaU83N5Md67JoqqCBd5z","e3hqu0HdxNq4e2nv3hKDvO"]]],[5,["obstacleGraphic","0"],-104,[0,["78j3SJeChFWY5tDVNRr9co"]],-103,[0,["7aaD9DKUZKD74A1tB8ax+i"]]],[5,["graphicNode"],-106,[0,["78j3SJeChFWY5tDVNRr9co"]],-105,[0,["1cVaU83N5Md67JoqqCBd5z","e3hqu0HdxNq4e2nv3hKDvO"]]],[5,["obstacleGraphic","0"],-108,[0,["78j3SJeChFWY5tDVNRr9co"]],-107,[0,["7aaD9DKUZKD74A1tB8ax+i"]]],[5,["graphicNode"],-110,[0,["78j3SJeChFWY5tDVNRr9co"]],-109,[0,["1cVaU83N5Md67JoqqCBd5z","e3hqu0HdxNq4e2nv3hKDvO"]]],[5,["obstacleGraphic","0"],-112,[0,["78j3SJeChFWY5tDVNRr9co"]],-111,[0,["7aaD9DKUZKD74A1tB8ax+i"]]],[5,["graphicNode"],-114,[0,["78j3SJeChFWY5tDVNRr9co"]],-113,[0,["1cVaU83N5Md67JoqqCBd5z","e3hqu0HdxNq4e2nv3hKDvO"]]],[5,["obstacleGraphic","0"],-116,[0,["78j3SJeChFWY5tDVNRr9co"]],-115,[0,["7aaD9DKUZKD74A1tB8ax+i"]]],[5,["graphicNode"],-118,[0,["78j3SJeChFWY5tDVNRr9co"]],-117,[0,["1cVaU83N5Md67JoqqCBd5z","e3hqu0HdxNq4e2nv3hKDvO"]]],[5,["obstacleGraphic","0"],-120,[0,["78j3SJeChFWY5tDVNRr9co"]],-119,[0,["7aaD9DKUZKD74A1tB8ax+i"]]],[5,["graphicNode"],-122,[0,["78j3SJeChFWY5tDVNRr9co"]],-121,[0,["1cVaU83N5Md67JoqqCBd5z","e3hqu0HdxNq4e2nv3hKDvO"]]],[5,["obstacleGraphic","0"],-124,[0,["78j3SJeChFWY5tDVNRr9co"]],-123,[0,["7aaD9DKUZKD74A1tB8ax+i"]]],[5,["graphicNode"],-126,[0,["78j3SJeChFWY5tDVNRr9co"]],-125,[0,["1cVaU83N5Md67JoqqCBd5z","e3hqu0HdxNq4e2nv3hKDvO"]]],[5,["obstacleGraphic","0"],-128,[0,["78j3SJeChFWY5tDVNRr9co"]],-127,[0,["7aaD9DKUZKD74A1tB8ax+i"]]],[5,["graphicNode"],-130,[0,["78j3SJeChFWY5tDVNRr9co"]],-129,[0,["1cVaU83N5Md67JoqqCBd5z","e3hqu0HdxNq4e2nv3hKDvO"]]],[5,["obstacleGraphic","0"],-132,[0,["78j3SJeChFWY5tDVNRr9co"]],-131,[0,["7aaD9DKUZKD74A1tB8ax+i"]]],[5,["graphicNode"],-134,[0,["78j3SJeChFWY5tDVNRr9co"]],-133,[0,["1cVaU83N5Md67JoqqCBd5z","e3hqu0HdxNq4e2nv3hKDvO"]]],[5,["obstacleGraphic","0"],-136,[0,["78j3SJeChFWY5tDVNRr9co"]],-135,[0,["7aaD9DKUZKD74A1tB8ax+i"]]],[5,["graphicNode"],-138,[0,["78j3SJeChFWY5tDVNRr9co"]],-137,[0,["1cVaU83N5Md67JoqqCBd5z","e3hqu0HdxNq4e2nv3hKDvO"]]],[5,["obstacleGraphic","0"],-140,[0,["78j3SJeChFWY5tDVNRr9co"]],-139,[0,["7aaD9DKUZKD74A1tB8ax+i"]]],[5,["graphicNode"],-142,[0,["78j3SJeChFWY5tDVNRr9co"]],-141,[0,["1cVaU83N5Md67JoqqCBd5z","e3hqu0HdxNq4e2nv3hKDvO"]]],[5,["obstacleGraphic","0"],-144,[0,["78j3SJeChFWY5tDVNRr9co"]],-143,[0,["7aaD9DKUZKD74A1tB8ax+i"]]],[5,["graphicNode"],-146,[0,["78j3SJeChFWY5tDVNRr9co"]],-145,[0,["1cVaU83N5Md67JoqqCBd5z","e3hqu0HdxNq4e2nv3hKDvO"]]],[5,["obstacleGraphic","0"],-148,[0,["78j3SJeChFWY5tDVNRr9co"]],-147,[0,["7aaD9DKUZKD74A1tB8ax+i"]]],[5,["graphicNode"],-150,[0,["78j3SJeChFWY5tDVNRr9co"]],-149,[0,["1cVaU83N5Md67JoqqCBd5z","e3hqu0HdxNq4e2nv3hKDvO"]]],[5,["obstacleGraphic","0"],-152,[0,["78j3SJeChFWY5tDVNRr9co"]],-151,[0,["7aaD9DKUZKD74A1tB8ax+i"]]],[5,["graphicNode"],-154,[0,["78j3SJeChFWY5tDVNRr9co"]],-153,[0,["1cVaU83N5Md67JoqqCBd5z","e3hqu0HdxNq4e2nv3hKDvO"]]],[5,["obstacleGraphic","0"],-156,[0,["78j3SJeChFWY5tDVNRr9co"]],-155,[0,["7aaD9DKUZKD74A1tB8ax+i"]]],[5,["graphicNode"],-158,[0,["78j3SJeChFWY5tDVNRr9co"]],-157,[0,["1cVaU83N5Md67JoqqCBd5z","e3hqu0HdxNq4e2nv3hKDvO"]]],[5,["obstacleGraphic","0"],-160,[0,["78j3SJeChFWY5tDVNRr9co"]],-159,[0,["7aaD9DKUZKD74A1tB8ax+i"]]],[5,["graphicNode"],-162,[0,["78j3SJeChFWY5tDVNRr9co"]],-161,[0,["1cVaU83N5Md67JoqqCBd5z","e3hqu0HdxNq4e2nv3hKDvO"]]],[5,["obstacleGraphic","0"],-164,[0,["78j3SJeChFWY5tDVNRr9co"]],-163,[0,["7aaD9DKUZKD74A1tB8ax+i"]]],[5,["graphicNode"],-166,[0,["78j3SJeChFWY5tDVNRr9co"]],-165,[0,["1cVaU83N5Md67JoqqCBd5z","e3hqu0HdxNq4e2nv3hKDvO"]]],[5,["obstacleGraphic","0"],-168,[0,["78j3SJeChFWY5tDVNRr9co"]],-167,[0,["7aaD9DKUZKD74A1tB8ax+i"]]],[5,["graphicNode"],-170,[0,["78j3SJeChFWY5tDVNRr9co"]],-169,[0,["1cVaU83N5Md67JoqqCBd5z","e3hqu0HdxNq4e2nv3hKDvO"]]],[5,["obstacleGraphic","0"],-172,[0,["78j3SJeChFWY5tDVNRr9co"]],-171,[0,["7aaD9DKUZKD74A1tB8ax+i"]]],[5,["graphicNode"],-174,[0,["78j3SJeChFWY5tDVNRr9co"]],-173,[0,["1cVaU83N5Md67JoqqCBd5z","e3hqu0HdxNq4e2nv3hKDvO"]]],[5,["obstacleGraphic","0"],-176,[0,["78j3SJeChFWY5tDVNRr9co"]],-175,[0,["7aaD9DKUZKD74A1tB8ax+i"]]],[5,["graphicNode"],-178,[0,["78j3SJeChFWY5tDVNRr9co"]],-177,[0,["1cVaU83N5Md67JoqqCBd5z","e3hqu0HdxNq4e2nv3hKDvO"]]],[5,["obstacleGraphic","0"],-180,[0,["78j3SJeChFWY5tDVNRr9co"]],-179,[0,["7aaD9DKUZKD74A1tB8ax+i"]]],[5,["graphicNode"],-182,[0,["78j3SJeChFWY5tDVNRr9co"]],-181,[0,["1cVaU83N5Md67JoqqCBd5z","e3hqu0HdxNq4e2nv3hKDvO"]]],[5,["obstacleGraphic","0"],-184,[0,["78j3SJeChFWY5tDVNRr9co"]],-183,[0,["7aaD9DKUZKD74A1tB8ax+i"]]],[5,["graphicNode"],-186,[0,["78j3SJeChFWY5tDVNRr9co"]],-185,[0,["1cVaU83N5Md67JoqqCBd5z","e3hqu0HdxNq4e2nv3hKDvO"]]],[5,["obstacleGraphic","0"],-188,[0,["78j3SJeChFWY5tDVNRr9co"]],-187,[0,["7aaD9DKUZKD74A1tB8ax+i"]]],[5,["graphicNode"],-190,[0,["78j3SJeChFWY5tDVNRr9co"]],-189,[0,["1cVaU83N5Md67JoqqCBd5z","e3hqu0HdxNq4e2nv3hKDvO"]]],[5,["obstacleGraphic","0"],-192,[0,["78j3SJeChFWY5tDVNRr9co"]],-191,[0,["7aaD9DKUZKD74A1tB8ax+i"]]],[5,["graphicNode"],-194,[0,["78j3SJeChFWY5tDVNRr9co"]],-193,[0,["76om5tMkJAELdAAefMkO6v","854tChFohKeYSTZmJTQ80q"]]],[5,["obstacleGraphic","0"],-196,[0,["78j3SJeChFWY5tDVNRr9co"]],-195,[0,["76om5tMkJAELdAAefMkO6v","c1A9sG8V1OlqPhhySK/Coe"]]],[5,["graphicNode"],-198,[0,["78j3SJeChFWY5tDVNRr9co"]],-197,[0,["76om5tMkJAELdAAefMkO6v","854tChFohKeYSTZmJTQ80q"]]],[5,["obstacleGraphic","0"],-200,[0,["78j3SJeChFWY5tDVNRr9co"]],-199,[0,["76om5tMkJAELdAAefMkO6v","c1A9sG8V1OlqPhhySK/Coe"]]],[5,["graphicNode"],-202,[0,["78j3SJeChFWY5tDVNRr9co"]],-201,[0,["76om5tMkJAELdAAefMkO6v","854tChFohKeYSTZmJTQ80q"]]],[5,["obstacleGraphic","0"],-204,[0,["78j3SJeChFWY5tDVNRr9co"]],-203,[0,["76om5tMkJAELdAAefMkO6v","c1A9sG8V1OlqPhhySK/Coe"]]],[5,["mainRenderer"],-206,[0,["1cVaU83N5Md67JoqqCBd5z","8fFvIyGEBFCqgGREWfd/YJ"]],-205,[0,["1cVaU83N5Md67JoqqCBd5z","3ew1Vo2adBpqZ739+OrPkj"]]],[5,["mainRenderer"],-208,[0,["1cVaU83N5Md67JoqqCBd5z","8fFvIyGEBFCqgGREWfd/YJ"]],-207,[0,["1cVaU83N5Md67JoqqCBd5z","3ew1Vo2adBpqZ739+OrPkj"]]],[5,["graphicNode"],-210,[0,["78j3SJeChFWY5tDVNRr9co"]],-209,[0,["76om5tMkJAELdAAefMkO6v","854tChFohKeYSTZmJTQ80q"]]],[5,["obstacleGraphic","0"],-212,[0,["78j3SJeChFWY5tDVNRr9co"]],-211,[0,["76om5tMkJAELdAAefMkO6v","c1A9sG8V1OlqPhhySK/Coe"]]],[5,["mainRenderer"],-214,[0,["1cVaU83N5Md67JoqqCBd5z","8fFvIyGEBFCqgGREWfd/YJ"]],-213,[0,["1cVaU83N5Md67JoqqCBd5z","3ew1Vo2adBpqZ739+OrPkj"]]],[5,["mainRenderer"],-216,[0,["1cVaU83N5Md67JoqqCBd5z","8fFvIyGEBFCqgGREWfd/YJ"]],-215,[0,["1cVaU83N5Md67JoqqCBd5z","3ew1Vo2adBpqZ739+OrPkj"]]],[5,["mainRenderer"],-218,[0,["1cVaU83N5Md67JoqqCBd5z","8fFvIyGEBFCqgGREWfd/YJ"]],-217,[0,["1cVaU83N5Md67JoqqCBd5z","3ew1Vo2adBpqZ739+OrPkj"]]],[5,["mainRenderer"],-220,[0,["1cVaU83N5Md67JoqqCBd5z","8fFvIyGEBFCqgGREWfd/YJ"]],-219,[0,["1cVaU83N5Md67JoqqCBd5z","3ew1Vo2adBpqZ739+OrPkj"]]],[5,["graphicNode"],-222,[0,["78j3SJeChFWY5tDVNRr9co"]],-221,[0,["76om5tMkJAELdAAefMkO6v","854tChFohKeYSTZmJTQ80q"]]],[5,["obstacleGraphic","0"],-224,[0,["78j3SJeChFWY5tDVNRr9co"]],-223,[0,["76om5tMkJAELdAAefMkO6v","c1A9sG8V1OlqPhhySK/Coe"]]],[5,["graphicNode"],-226,[0,["78j3SJeChFWY5tDVNRr9co"]],-225,[0,["76om5tMkJAELdAAefMkO6v","854tChFohKeYSTZmJTQ80q"]]],[5,["obstacleGraphic","0"],-228,[0,["78j3SJeChFWY5tDVNRr9co"]],-227,[0,["76om5tMkJAELdAAefMkO6v","c1A9sG8V1OlqPhhySK/Coe"]]],[5,["mainRenderer"],-230,[0,["1cVaU83N5Md67JoqqCBd5z","8fFvIyGEBFCqgGREWfd/YJ"]],-229,[0,["1cVaU83N5Md67JoqqCBd5z","3ew1Vo2adBpqZ739+OrPkj"]]],[5,["mainRenderer"],-232,[0,["1cVaU83N5Md67JoqqCBd5z","8fFvIyGEBFCqgGREWfd/YJ"]],-231,[0,["1cVaU83N5Md67JoqqCBd5z","3ew1Vo2adBpqZ739+OrPkj"]]],[5,["graphicNode"],-234,[0,["78j3SJeChFWY5tDVNRr9co"]],-233,[0,["76om5tMkJAELdAAefMkO6v","854tChFohKeYSTZmJTQ80q"]]],[5,["obstacleGraphic","0"],-236,[0,["78j3SJeChFWY5tDVNRr9co"]],-235,[0,["76om5tMkJAELdAAefMkO6v","c1A9sG8V1OlqPhhySK/Coe"]]],[5,["mainRenderer"],-238,[0,["1cVaU83N5Md67JoqqCBd5z","8fFvIyGEBFCqgGREWfd/YJ"]],-237,[0,["1cVaU83N5Md67JoqqCBd5z","3ew1Vo2adBpqZ739+OrPkj"]]],[5,["mainRenderer"],-240,[0,["1cVaU83N5Md67JoqqCBd5z","8fFvIyGEBFCqgGREWfd/YJ"]],-239,[0,["1cVaU83N5Md67JoqqCBd5z","3ew1Vo2adBpqZ739+OrPkj"]]],[5,["mainRenderer"],-242,[0,["1cVaU83N5Md67JoqqCBd5z","8fFvIyGEBFCqgGREWfd/YJ"]],-241,[0,["1cVaU83N5Md67JoqqCBd5z","3ew1Vo2adBpqZ739+OrPkj"]]],[5,["mainRenderer"],-244,[0,["1cVaU83N5Md67JoqqCBd5z","8fFvIyGEBFCqgGREWfd/YJ"]],-243,[0,["1cVaU83N5Md67JoqqCBd5z","3ew1Vo2adBpqZ739+OrPkj"]]],[5,["graphicNode"],-246,[0,["78j3SJeChFWY5tDVNRr9co"]],-245,[0,["76om5tMkJAELdAAefMkO6v","854tChFohKeYSTZmJTQ80q"]]],[5,["obstacleGraphic","0"],-248,[0,["78j3SJeChFWY5tDVNRr9co"]],-247,[0,["76om5tMkJAELdAAefMkO6v","c1A9sG8V1OlqPhhySK/Coe"]]],[5,["graphicNode"],-250,[0,["78j3SJeChFWY5tDVNRr9co"]],-249,[0,["76om5tMkJAELdAAefMkO6v","854tChFohKeYSTZmJTQ80q"]]],[5,["obstacleGraphic","0"],-252,[0,["78j3SJeChFWY5tDVNRr9co"]],-251,[0,["76om5tMkJAELdAAefMkO6v","c1A9sG8V1OlqPhhySK/Coe"]]],[5,["mainRenderer"],-254,[0,["1cVaU83N5Md67JoqqCBd5z","8fFvIyGEBFCqgGREWfd/YJ"]],-253,[0,["1cVaU83N5Md67JoqqCBd5z","3ew1Vo2adBpqZ739+OrPkj"]]],[5,["mainRenderer"],-256,[0,["1cVaU83N5Md67JoqqCBd5z","8fFvIyGEBFCqgGREWfd/YJ"]],-255,[0,["1cVaU83N5Md67JoqqCBd5z","3ew1Vo2adBpqZ739+OrPkj"]]],[5,["graphicNode"],-258,[0,["78j3SJeChFWY5tDVNRr9co"]],-257,[0,["76om5tMkJAELdAAefMkO6v","854tChFohKeYSTZmJTQ80q"]]],[5,["obstacleGraphic","0"],-260,[0,["78j3SJeChFWY5tDVNRr9co"]],-259,[0,["76om5tMkJAELdAAefMkO6v","c1A9sG8V1OlqPhhySK/Coe"]]],[5,["mainRenderer"],-262,[0,["1cVaU83N5Md67JoqqCBd5z","8fFvIyGEBFCqgGREWfd/YJ"]],-261,[0,["1cVaU83N5Md67JoqqCBd5z","3ew1Vo2adBpqZ739+OrPkj"]]],[5,["mainRenderer"],-264,[0,["1cVaU83N5Md67JoqqCBd5z","8fFvIyGEBFCqgGREWfd/YJ"]],-263,[0,["1cVaU83N5Md67JoqqCBd5z","3ew1Vo2adBpqZ739+OrPkj"]]],[5,["mainRenderer"],-266,[0,["1cVaU83N5Md67JoqqCBd5z","8fFvIyGEBFCqgGREWfd/YJ"]],-265,[0,["1cVaU83N5Md67JoqqCBd5z","3ew1Vo2adBpqZ739+OrPkj"]]],[5,["mainRenderer"],-268,[0,["1cVaU83N5Md67JoqqCBd5z","8fFvIyGEBFCqgGREWfd/YJ"]],-267,[0,["1cVaU83N5Md67JoqqCBd5z","3ew1Vo2adBpqZ739+OrPkj"]]],[5,["mainRenderer"],-270,[0,["1cVaU83N5Md67JoqqCBd5z","8fFvIyGEBFCqgGREWfd/YJ"]],-269,[0,["1cVaU83N5Md67JoqqCBd5z","3ew1Vo2adBpqZ739+OrPkj"]]],[5,["mainRenderer"],-272,[0,["1cVaU83N5Md67JoqqCBd5z","8fFvIyGEBFCqgGREWfd/YJ"]],-271,[0,["1cVaU83N5Md67JoqqCBd5z","3ew1Vo2adBpqZ739+OrPkj"]]],[5,["mainRenderer"],-274,[0,["1cVaU83N5Md67JoqqCBd5z","8fFvIyGEBFCqgGREWfd/YJ"]],-273,[0,["1cVaU83N5Md67JoqqCBd5z","3ew1Vo2adBpqZ739+OrPkj"]]],[5,["mainRenderer"],-276,[0,["1cVaU83N5Md67JoqqCBd5z","8fFvIyGEBFCqgGREWfd/YJ"]],-275,[0,["1cVaU83N5Md67JoqqCBd5z","3ew1Vo2adBpqZ739+OrPkj"]]],[5,["graphicNode"],-278,[0,["78j3SJeChFWY5tDVNRr9co"]],-277,[0,["76om5tMkJAELdAAefMkO6v","854tChFohKeYSTZmJTQ80q"]]],[5,["obstacleGraphic","0"],-280,[0,["78j3SJeChFWY5tDVNRr9co"]],-279,[0,["76om5tMkJAELdAAefMkO6v","c1A9sG8V1OlqPhhySK/Coe"]]],[5,["mainRenderer"],-282,[0,["1cVaU83N5Md67JoqqCBd5z","8fFvIyGEBFCqgGREWfd/YJ"]],-281,[0,["1cVaU83N5Md67JoqqCBd5z","3ew1Vo2adBpqZ739+OrPkj"]]],[5,["mainRenderer"],-284,[0,["1cVaU83N5Md67JoqqCBd5z","8fFvIyGEBFCqgGREWfd/YJ"]],-283,[0,["1cVaU83N5Md67JoqqCBd5z","3ew1Vo2adBpqZ739+OrPkj"]]],[5,["mainRenderer"],-286,[0,["1cVaU83N5Md67JoqqCBd5z","8fFvIyGEBFCqgGREWfd/YJ"]],-285,[0,["1cVaU83N5Md67JoqqCBd5z","3ew1Vo2adBpqZ739+OrPkj"]]],[5,["mainRenderer"],-288,[0,["1cVaU83N5Md67JoqqCBd5z","8fFvIyGEBFCqgGREWfd/YJ"]],-287,[0,["1cVaU83N5Md67JoqqCBd5z","3ew1Vo2adBpqZ739+OrPkj"]]],[5,["mainRenderer"],-290,[0,["1cVaU83N5Md67JoqqCBd5z","8fFvIyGEBFCqgGREWfd/YJ"]],-289,[0,["1cVaU83N5Md67JoqqCBd5z","3ew1Vo2adBpqZ739+OrPkj"]]],[5,["mainRenderer"],-292,[0,["1cVaU83N5Md67JoqqCBd5z","8fFvIyGEBFCqgGREWfd/YJ"]],-291,[0,["1cVaU83N5Md67JoqqCBd5z","3ew1Vo2adBpqZ739+OrPkj"]]],[5,["mainRenderer"],-294,[0,["1cVaU83N5Md67JoqqCBd5z","8fFvIyGEBFCqgGREWfd/YJ"]],-293,[0,["1cVaU83N5Md67JoqqCBd5z","3ew1Vo2adBpqZ739+OrPkj"]]],[5,["mainRenderer"],-296,[0,["1cVaU83N5Md67JoqqCBd5z","8fFvIyGEBFCqgGREWfd/YJ"]],-295,[0,["1cVaU83N5Md67JoqqCBd5z","3ew1Vo2adBpqZ739+OrPkj"]]]],[-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12]]],[11,0,{},1,[10,"7f7WjHcwRBCY/EdrI6zFjb",null,null,-327,[46,"27G20iHaVCRYpb45hqUCcS",1,[[47,[0,["7f7WjHcwRBCY/EdrI6zFjb"]],[-315,-316,-317,-318,-319,-320,-321,-322,-323,-324,-325,-326]]],[[1,"base_level-008",["_name"],-311],[2,["_lpos"],-312,[1,0,0,-192]],[2,["_lrot"],-313,[3,0,0,0,1]],[2,["_euler"],-314,[1,0,0,0]]]],482]],[11,0,{},1,[10,"7f7WjHcwRBCY/EdrI6zFjb",null,null,-343,[46,"41mxMkd2VFea2zSVSXPOOr",1,[[47,[0,["7f7WjHcwRBCY/EdrI6zFjb"]],[-332,-333,-334,-335,-336,-337,-338,-339,-340,-341,-342]]],[[1,"base_level-012",["_name"],-328],[2,["_lpos"],-329,[1,0,0,-264]],[2,["_lrot"],-330,[3,0,0,0,1]],[2,["_euler"],-331,[1,0,0,0]],[17,["_lpos"],[0,["3e2/Uiw31BBr9/HcYKKA3T","3dZQiUdqlP+4dqWE24pxZa"]],[1,0.075,-0.001,-1.109]]]],803]],[11,0,{},1,[10,"7f7WjHcwRBCY/EdrI6zFjb",null,null,-356,[46,"beeM7Y9RRBvKyBPd+Zwyb+",1,[[47,[0,["7f7WjHcwRBCY/EdrI6zFjb"]],[-348,-349,-350,-351,-352,-353,-354,-355]]],[[1,"base_level-002",["_name"],-344],[2,["_lpos"],-345,[1,0,0,-24]],[2,["_lrot"],-346,[3,0,0,0,1]],[2,["_euler"],-347,[1,0,0,0]]]],7]],[11,0,{},1,[10,"7f7WjHcwRBCY/EdrI6zFjb",null,null,-369,[46,"2aQzi8GzNKGIrc1bJbL3AL",1,[[47,[0,["7f7WjHcwRBCY/EdrI6zFjb"]],[-361,-362,-363,-364,-365,-366,-367,-368]]],[[1,"base_level-003",["_name"],-357],[2,["_lpos"],-358,[1,0,0,-48]],[2,["_lrot"],-359,[3,0,0,0,1]],[2,["_euler"],-360,[1,0,0,0]]]],75]],[11,0,{},1,[10,"7f7WjHcwRBCY/EdrI6zFjb",null,null,-382,[46,"9bBfxZSfhAZrCIZScKlZQy",1,[[47,[0,["7f7WjHcwRBCY/EdrI6zFjb"]],[-374,-375,-376,-377,-378,-379,-380,-381]]],[[1,"base_level-005",["_name"],-370],[2,["_lpos"],-371,[1,0,0,-96]],[2,["_lrot"],-372,[3,0,0,0,1]],[2,["_euler"],-373,[1,0,0,0]]]],210]],[11,0,{},1,[10,"7f7WjHcwRBCY/EdrI6zFjb",null,null,-395,[46,"a584kEkJtPE4uH+3342j43",1,[[47,[0,["7f7WjHcwRBCY/EdrI6zFjb"]],[-387,-388,-389,-390,-391,-392,-393,-394]]],[[1,"base_level-006",["_name"],-383],[2,["_lpos"],-384,[1,0,0,-120]],[2,["_lrot"],-385,[3,0,0,0,1]],[2,["_euler"],-386,[1,0,0,0]]]],278]],[11,0,{},1,[10,"7f7WjHcwRBCY/EdrI6zFjb",null,null,-408,[46,"07XBoT9B9LUJE41CVQHD15",1,[[47,[0,["7f7WjHcwRBCY/EdrI6zFjb"]],[-400,-401,-402,-403,-404,-405,-406,-407]]],[[1,"base_level-007",["_name"],-396],[2,["_lpos"],-397,[1,0,0,-144]],[2,["_lrot"],-398,[3,0,0,0,1]],[2,["_euler"],-399,[1,0,0,0]]]],346]],[11,0,{},1,[10,"7f7WjHcwRBCY/EdrI6zFjb",null,null,-421,[46,"feI7JcaKpF5IZMRa7BmJ8B",1,[[47,[0,["7f7WjHcwRBCY/EdrI6zFjb"]],[-413,-414,-415,-416,-417,-418,-419,-420]]],[[1,"base_level-009",["_name"],-409],[2,["_lpos"],-410,[1,0,0,-168]],[2,["_lrot"],-411,[3,0,0,0,1]],[2,["_euler"],-412,[1,0,0,0]]]],414]],[11,0,{},1,[10,"7f7WjHcwRBCY/EdrI6zFjb",null,null,-434,[46,"bbkXtHWwtOfo+fWuaFoOL7",1,[[47,[0,["7f7WjHcwRBCY/EdrI6zFjb"]],[-426,-427,-428,-429,-430,-431,-432,-433]]],[[1,"base_level-011",["_name"],-422],[2,["_lpos"],-423,[1,0,0,-240]],[2,["_lrot"],-424,[3,0,0,0,1]],[2,["_euler"],-425,[1,0,0,0]]]],735]],[11,0,{},1,[10,"7f7WjHcwRBCY/EdrI6zFjb",null,null,-446,[46,"cb6iGATwZCTo/uX6/T+xSV",1,[[47,[0,["7f7WjHcwRBCY/EdrI6zFjb"]],[-439,-440,-441,-442,-443,-444,-445]]],[[1,"base_level-004",["_name"],-435],[2,["_lpos"],-436,[1,0,0,-72]],[2,["_lrot"],-437,[3,0,0,0,1]],[2,["_euler"],-438,[1,0,0,0]]]],143]],[11,0,{},1,[10,"7f7WjHcwRBCY/EdrI6zFjb",null,null,-457,[46,"1ackKZilBMjLx4G6xesfCl",1,[[47,[0,["7f7WjHcwRBCY/EdrI6zFjb"]],[-451,-452,-453,-454,-455,-456]]],[[1,"base_level-010",["_name"],-447],[2,["_lpos"],-448,[1,0,0,-216]],[2,["_lrot"],-449,[3,0,0,0,1]],[2,["_euler"],-450,[1,0,0,0]]]],670]],[0,["8dt/KCiu1GOJ6DGYai+gUP"]],[0,["8dt/KCiu1GOJ6DGYai+gUP"]],[13,0,5,[10,"66Ba72ak1JOYCB5CSozCYH",null,null,-462,[6,"a3Fm5pCttCAq2zxiNP8KDj",1,[[1,"special_collectible-002",["_name"],-458],[2,["_lpos"],-459,[1,2,1,-14]],[2,["_lrot"],-460,[3,0,0,0,1]],[2,["_euler"],-461,[1,0,0,0]],[39,1,["specialID"],[0,["a3g7sdk4BAPL27QvR510GK"]]],[39,true,["_active"],[0,["e8t/NvMc5JAZQT0r0Wgnwg"]]],[39,false,["_active"],[0,["efquG4D01PBIdWrWoxv2xH"]]]]],80],[{},"mountedRoot",1,5]],[0,["8dt/KCiu1GOJ6DGYai+gUP"]],[0,["8dt/KCiu1GOJ6DGYai+gUP"]],[0,["8dt/KCiu1GOJ6DGYai+gUP"]],[0,["8dt/KCiu1GOJ6DGYai+gUP"]],[13,0,6,[10,"66Ba72ak1JOYCB5CSozCYH",null,null,-467,[6,"486SD60kdKTZ44eBIYUrVb",1,[[1,"special_collectible-003",["_name"],-463],[2,["_lpos"],-464,[1,2,3.5,-10]],[2,["_lrot"],-465,[3,0,0,0,1]],[2,["_euler"],-466,[1,0,0,0]]]],215],[{},"mountedRoot",1,6]],[0,["8dt/KCiu1GOJ6DGYai+gUP"]],[0,["8dt/KCiu1GOJ6DGYai+gUP"]],[0,["8dt/KCiu1GOJ6DGYai+gUP"]],[0,["8dt/KCiu1GOJ6DGYai+gUP"]],[13,0,8,[10,"66Ba72ak1JOYCB5CSozCYH",null,null,-472,[6,"efpl5zWc5KcbtJ23kkyJJF",1,[[1,"special_collectible-004",["_name"],-468],[2,["_lpos"],-469,[1,-2,3.5,-10]],[2,["_lrot"],-470,[3,0,0,0,1]],[2,["_euler"],-471,[1,0,0,0]],[39,false,["_active"],[0,["e8t/NvMc5JAZQT0r0Wgnwg"]]],[39,false,["_active"],[0,["efquG4D01PBIdWrWoxv2xH"]]],[39,2,["specialID"],[0,["a3g7sdk4BAPL27QvR510GK"]]],[39,true,["_active"],[0,["8c12IhI/5IfpZ5xb0uMm/F"]]]]],351],[{},"mountedRoot",1,8]],[0,["8dt/KCiu1GOJ6DGYai+gUP"]],[0,["8dt/KCiu1GOJ6DGYai+gUP"]],[13,0,9,[10,"66Ba72ak1JOYCB5CSozCYH",null,null,-477,[6,"1dJQYknSlNI7pW2J0cA59B",1,[[1,"special_collectible-002",["_name"],-473],[2,["_lpos"],-474,[1,2,3.5,-10]],[2,["_lrot"],-475,[3,0,0,0,1]],[2,["_euler"],-476,[1,0,0,0]],[39,true,["_active"],[0,["881SXtP4FNxL4NVhrHnwT7"]]],[39,false,["_active"],[0,["efquG4D01PBIdWrWoxv2xH"]]],[39,3,["specialID"],[0,["a3g7sdk4BAPL27QvR510GK"]]]]],419],[{},"mountedRoot",1,9]],[0,["8dt/KCiu1GOJ6DGYai+gUP"]],[0,["8dt/KCiu1GOJ6DGYai+gUP"]],[0,["8dt/KCiu1GOJ6DGYai+gUP"]],[0,["8dt/KCiu1GOJ6DGYai+gUP"]],[0,["8dt/KCiu1GOJ6DGYai+gUP"]],[0,["8dt/KCiu1GOJ6DGYai+gUP"]],[0,["8dt/KCiu1GOJ6DGYai+gUP"]],[0,["8dt/KCiu1GOJ6DGYai+gUP"]],[13,0,12,[10,"66Ba72ak1JOYCB5CSozCYH",null,null,-482,[6,"7606j3qOJNmrs9GfvAHr5z",1,[[1,"special_collectible-005",["_name"],-478],[2,["_lpos"],-479,[1,-1,1,-8]],[2,["_lrot"],-480,[3,0,0,0,1]],[2,["_euler"],-481,[1,0,0,0]],[39,true,["_active"],[0,["341Xa08tBHUb0RbJE1kfQN"]]],[39,false,["_active"],[0,["efquG4D01PBIdWrWoxv2xH"]]],[39,4,["specialID"],[0,["a3g7sdk4BAPL27QvR510GK"]]]]],674],[{},"mountedRoot",1,12]],[0,["8dt/KCiu1GOJ6DGYai+gUP"]],[0,["8dt/KCiu1GOJ6DGYai+gUP"]],[0,["8dt/KCiu1GOJ6DGYai+gUP"]],[0,["8dt/KCiu1GOJ6DGYai+gUP"]],[0,["8dt/KCiu1GOJ6DGYai+gUP"]],[0,["8dt/KCiu1GOJ6DGYai+gUP"]],[0,["8dt/KCiu1GOJ6DGYai+gUP"]],[0,["8dt/KCiu1GOJ6DGYai+gUP"]],[0,["8dt/KCiu1GOJ6DGYai+gUP"]],[0,["8dt/KCiu1GOJ6DGYai+gUP"]],[11,0,{},1,[10,"7f7WjHcwRBCY/EdrI6zFjb",null,null,-492,[46,"dfYJ3IrGlHy6ZbChT+xbKh",1,[[47,[0,["7f7WjHcwRBCY/EdrI6zFjb"]],[-488,-489,-490,-491]]],[[1,"base_level-001",["_name"],-483],[2,["_lpos"],-484,[1,0,0,0]],[2,["_lrot"],-485,[3,0,0,0,1]],[2,["_euler"],-486,[1,0,0,0]],[17,["_lpos"],[0,["3e2/Uiw31BBr9/HcYKKA3T","3dZQiUdqlP+4dqWE24pxZa"]],[1,0.075,-0.001,-1.109]],[1,true,["_active"],-487]]],0]],[13,0,4,[29,"969XNiWY5HsaEzSoCn2x/3",-505,[6,"f9xOKTjvBBC5JpXD747Xbx",1,[[1,"obstacle_nonjumpable",["_name"],-501],[2,["_lpos"],-502,[1,-2,0,-11.917]],[2,["_lrot"],-503,[3,0,0,0,1]],[2,["_euler"],-504,[1,0,0,0]]]],[[5,["mainRenderer"],-495,[0,["8dt/KCiu1GOJ6DGYai+gUP"]],-494,[0,["3ew1Vo2adBpqZ739+OrPkj"]]],[20,["graphicNode"],-496,[0,["e3hqu0HdxNq4e2nv3hKDvO"]]],[23,-498,-497,[0,["8fFvIyGEBFCqgGREWfd/YJ"]]],[21,["mainRenderer"],-500,-499,[0,["3ew1Vo2adBpqZ739+OrPkj"]]]],[-493],15],[{},"mountedRoot",1,4]],[19,0,{},[18,"Parent",49,[-512],[4,"acUtatGuVN06wkU24sOluQ",null,null,null,1,0]],[12,"e892RDjrxNZISjs1LC/QQv",null,-511,[24,"1cVaU83N5Md67JoqqCBd5z",49,[[26,[0,["e892RDjrxNZISjs1LC/QQv"]],[-510]]],[[1,"Crowd",["_name"],-506],[2,["_lpos"],-507,[1,0,0.181,0.644]],[2,["_lrot"],-508,[3,0,0,0,1]],[2,["_euler"],-509,[1,0,0,0]],[1,true,["isRunwayNPC"],13],[1,true,["shouldGetRandomPose"],13],[1,2,["tripTexture","length"],13],[3,["tripTexture","0"],13,38],[3,["tripTexture","1"],13,39],[1,8,["poses","length"],13],[3,["poses","0"],13,40],[3,["poses","1"],13,41],[3,["poses","2"],13,42],[3,["poses","3"],13,43],[3,["poses","4"],13,44],[1,null,["poses","5"],13],[1,null,["poses","6"],13],[1,null,["poses","7"],13]],[[0,["8dt/KCiu1GOJ6DGYai+gUP"]]]],[[15,["mainRenderer"],[0,["0b8pE5sPNepqN6zgbDPnqa"]]]],16]],[13,0,4,[29,"969XNiWY5HsaEzSoCn2x/3",-525,[6,"8eeSdn+ydNBbDPwUVDlKnV",1,[[1,"obstacle_nonjumpable-001",["_name"],-521],[2,["_lpos"],-522,[1,2,0,-11.917]],[2,["_lrot"],-523,[3,0,0,0,1]],[2,["_euler"],-524,[1,0,0,0]]]],[[5,["mainRenderer"],-515,[0,["8dt/KCiu1GOJ6DGYai+gUP"]],-514,[0,["3ew1Vo2adBpqZ739+OrPkj"]]],[20,["graphicNode"],-516,[0,["e3hqu0HdxNq4e2nv3hKDvO"]]],[23,-518,-517,[0,["8fFvIyGEBFCqgGREWfd/YJ"]]],[21,["mainRenderer"],-520,-519,[0,["3ew1Vo2adBpqZ739+OrPkj"]]]],[-513],45],[{},"mountedRoot",1,4]],[19,0,{},[18,"Parent",51,[-532],[4,"acUtatGuVN06wkU24sOluQ",null,null,null,1,0]],[12,"e892RDjrxNZISjs1LC/QQv",null,-531,[24,"1cVaU83N5Md67JoqqCBd5z",51,[[26,[0,["e892RDjrxNZISjs1LC/QQv"]],[-530]]],[[1,"Crowd",["_name"],-526],[2,["_lpos"],-527,[1,0,0.181,0.644]],[2,["_lrot"],-528,[3,0,0,0,1]],[2,["_euler"],-529,[1,0,0,0]],[1,true,["isRunwayNPC"],14],[1,true,["shouldGetRandomPose"],14],[1,2,["tripTexture","length"],14],[3,["tripTexture","0"],14,68],[3,["tripTexture","1"],14,69],[1,8,["poses","length"],14],[3,["poses","0"],14,70],[3,["poses","1"],14,71],[3,["poses","2"],14,72],[3,["poses","3"],14,73],[3,["poses","4"],14,74],[1,null,["poses","5"],14],[1,null,["poses","6"],14],[1,null,["poses","7"],14]],[[0,["8dt/KCiu1GOJ6DGYai+gUP"]]]],[[15,["mainRenderer"],[0,["0b8pE5sPNepqN6zgbDPnqa"]]]],46]],[13,0,5,[29,"969XNiWY5HsaEzSoCn2x/3",-545,[6,"205vB9FdhJiYVKm0CNCysN",1,[[1,"obstacle_nonjumpable",["_name"],-541],[2,["_lpos"],-542,[1,0,0,-10]],[2,["_lrot"],-543,[3,0,0,0,1]],[2,["_euler"],-544,[1,0,0,0]]]],[[5,["mainRenderer"],-535,[0,["8dt/KCiu1GOJ6DGYai+gUP"]],-534,[0,["3ew1Vo2adBpqZ739+OrPkj"]]],[20,["graphicNode"],-536,[0,["e3hqu0HdxNq4e2nv3hKDvO"]]],[23,-538,-537,[0,["8fFvIyGEBFCqgGREWfd/YJ"]]],[21,["mainRenderer"],-540,-539,[0,["3ew1Vo2adBpqZ739+OrPkj"]]]],[-533],83],[{},"mountedRoot",1,5]],[19,0,{},[18,"Parent",53,[-552],[4,"acUtatGuVN06wkU24sOluQ",null,null,null,1,0]],[12,"e892RDjrxNZISjs1LC/QQv",null,-551,[24,"1cVaU83N5Md67JoqqCBd5z",53,[[26,[0,["e892RDjrxNZISjs1LC/QQv"]],[-550]]],[[1,"Crowd",["_name"],-546],[2,["_lpos"],-547,[1,0,0.181,0.644]],[2,["_lrot"],-548,[3,0,0,0,1]],[2,["_euler"],-549,[1,0,0,0]],[1,true,["isRunwayNPC"],16],[1,true,["shouldGetRandomPose"],16],[1,2,["tripTexture","length"],16],[3,["tripTexture","0"],16,106],[3,["tripTexture","1"],16,107],[1,8,["poses","length"],16],[3,["poses","0"],16,108],[3,["poses","1"],16,109],[3,["poses","2"],16,110],[3,["poses","3"],16,111],[3,["poses","4"],16,112],[1,null,["poses","5"],16],[1,null,["poses","6"],16],[1,null,["poses","7"],16]],[[0,["8dt/KCiu1GOJ6DGYai+gUP"]]]],[[15,["mainRenderer"],[0,["0b8pE5sPNepqN6zgbDPnqa"]]]],84]],[13,0,5,[29,"969XNiWY5HsaEzSoCn2x/3",-565,[6,"da0Rj/pslLsphdkUwMLZpT",1,[[1,"obstacle_nonjumpable-001",["_name"],-561],[2,["_lpos"],-562,[1,2,0,-17.885]],[2,["_lrot"],-563,[3,0,0,0,1]],[2,["_euler"],-564,[1,0,0,0]]]],[[5,["mainRenderer"],-555,[0,["8dt/KCiu1GOJ6DGYai+gUP"]],-554,[0,["3ew1Vo2adBpqZ739+OrPkj"]]],[20,["graphicNode"],-556,[0,["e3hqu0HdxNq4e2nv3hKDvO"]]],[23,-558,-557,[0,["8fFvIyGEBFCqgGREWfd/YJ"]]],[21,["mainRenderer"],-560,-559,[0,["3ew1Vo2adBpqZ739+OrPkj"]]]],[-553],113],[{},"mountedRoot",1,5]],[19,0,{},[18,"Parent",55,[-572],[4,"acUtatGuVN06wkU24sOluQ",null,null,null,1,0]],[12,"e892RDjrxNZISjs1LC/QQv",null,-571,[24,"1cVaU83N5Md67JoqqCBd5z",55,[[26,[0,["e892RDjrxNZISjs1LC/QQv"]],[-570]]],[[1,"Crowd",["_name"],-566],[2,["_lpos"],-567,[1,0,0.181,0.644]],[2,["_lrot"],-568,[3,0,0,0,1]],[2,["_euler"],-569,[1,0,0,0]],[1,true,["isRunwayNPC"],17],[1,true,["shouldGetRandomPose"],17],[1,2,["tripTexture","length"],17],[3,["tripTexture","0"],17,136],[3,["tripTexture","1"],17,137],[1,8,["poses","length"],17],[3,["poses","0"],17,138],[3,["poses","1"],17,139],[3,["poses","2"],17,140],[3,["poses","3"],17,141],[3,["poses","4"],17,142],[1,null,["poses","5"],17],[1,null,["poses","6"],17],[1,null,["poses","7"],17]],[[0,["8dt/KCiu1GOJ6DGYai+gUP"]]]],[[15,["mainRenderer"],[0,["0b8pE5sPNepqN6zgbDPnqa"]]]],114]],[13,0,11,[29,"969XNiWY5HsaEzSoCn2x/3",-585,[6,"c22J+VbrpEw5GeaRBooGqa",1,[[1,"obstacle_nonjumpable",["_name"],-581],[2,["_lpos"],-582,[1,0,0,-11]],[2,["_lrot"],-583,[3,0,0,0,1]],[2,["_euler"],-584,[1,0,0,0]]]],[[5,["mainRenderer"],-575,[0,["8dt/KCiu1GOJ6DGYai+gUP"]],-574,[0,["3ew1Vo2adBpqZ739+OrPkj"]]],[20,["graphicNode"],-576,[0,["e3hqu0HdxNq4e2nv3hKDvO"]]],[23,-578,-577,[0,["8fFvIyGEBFCqgGREWfd/YJ"]]],[21,["mainRenderer"],-580,-579,[0,["3ew1Vo2adBpqZ739+OrPkj"]]]],[-573],148],[{},"mountedRoot",1,11]],[19,0,{},[18,"Parent",57,[-592],[4,"acUtatGuVN06wkU24sOluQ",null,null,null,1,0]],[12,"e892RDjrxNZISjs1LC/QQv",null,-591,[24,"1cVaU83N5Md67JoqqCBd5z",57,[[26,[0,["e892RDjrxNZISjs1LC/QQv"]],[-590]]],[[1,"Crowd",["_name"],-586],[2,["_lpos"],-587,[1,0,0.181,0.644]],[2,["_lrot"],-588,[3,0,0,0,1]],[2,["_euler"],-589,[1,0,0,0]],[1,true,["isRunwayNPC"],18],[1,true,["shouldGetRandomPose"],18],[1,2,["tripTexture","length"],18],[3,["tripTexture","0"],18,171],[3,["tripTexture","1"],18,172],[1,8,["poses","length"],18],[3,["poses","0"],18,173],[3,["poses","1"],18,174],[3,["poses","2"],18,175],[3,["poses","3"],18,176],[3,["poses","4"],18,177],[1,null,["poses","5"],18],[1,null,["poses","6"],18],[1,null,["poses","7"],18]],[[0,["8dt/KCiu1GOJ6DGYai+gUP"]]]],[[15,["mainRenderer"],[0,["0b8pE5sPNepqN6zgbDPnqa"]]]],149]],[13,0,11,[29,"969XNiWY5HsaEzSoCn2x/3",-605,[6,"074BgK9QJETb2FB83Y33rC",1,[[1,"obstacle_nonjumpable-002",["_name"],-601],[2,["_lpos"],-602,[1,2,0,-18]],[2,["_lrot"],-603,[3,0,0,0,1]],[2,["_euler"],-604,[1,0,0,0]]]],[[5,["mainRenderer"],-595,[0,["8dt/KCiu1GOJ6DGYai+gUP"]],-594,[0,["3ew1Vo2adBpqZ739+OrPkj"]]],[20,["graphicNode"],-596,[0,["e3hqu0HdxNq4e2nv3hKDvO"]]],[23,-598,-597,[0,["8fFvIyGEBFCqgGREWfd/YJ"]]],[21,["mainRenderer"],-600,-599,[0,["3ew1Vo2adBpqZ739+OrPkj"]]]],[-593],178],[{},"mountedRoot",1,11]],[19,0,{},[18,"Parent",59,[-612],[4,"acUtatGuVN06wkU24sOluQ",null,null,null,1,0]],[12,"e892RDjrxNZISjs1LC/QQv",null,-611,[24,"1cVaU83N5Md67JoqqCBd5z",59,[[26,[0,["e892RDjrxNZISjs1LC/QQv"]],[-610]]],[[1,"Crowd",["_name"],-606],[2,["_lpos"],-607,[1,0,0.181,0.644]],[2,["_lrot"],-608,[3,0,0,0,1]],[2,["_euler"],-609,[1,0,0,0]],[1,true,["isRunwayNPC"],19],[1,true,["shouldGetRandomPose"],19],[1,2,["tripTexture","length"],19],[3,["tripTexture","0"],19,201],[3,["tripTexture","1"],19,202],[1,8,["poses","length"],19],[3,["poses","0"],19,203],[3,["poses","1"],19,204],[3,["poses","2"],19,205],[3,["poses","3"],19,206],[3,["poses","4"],19,207],[1,null,["poses","5"],19],[1,null,["poses","6"],19],[1,null,["poses","7"],19]],[[0,["8dt/KCiu1GOJ6DGYai+gUP"]]]],[[15,["mainRenderer"],[0,["0b8pE5sPNepqN6zgbDPnqa"]]]],179]],[13,0,6,[29,"969XNiWY5HsaEzSoCn2x/3",-625,[6,"09xvK3jO5KPrKGCQ8/0Pmq",1,[[1,"obstacle_nonjumpable",["_name"],-621],[2,["_lpos"],-622,[1,-2,0,-6]],[2,["_lrot"],-623,[3,0,0,0,1]],[2,["_euler"],-624,[1,0,0,0]]]],[[5,["mainRenderer"],-615,[0,["8dt/KCiu1GOJ6DGYai+gUP"]],-614,[0,["3ew1Vo2adBpqZ739+OrPkj"]]],[20,["graphicNode"],-616,[0,["e3hqu0HdxNq4e2nv3hKDvO"]]],[23,-618,-617,[0,["8fFvIyGEBFCqgGREWfd/YJ"]]],[21,["mainRenderer"],-620,-619,[0,["3ew1Vo2adBpqZ739+OrPkj"]]]],[-613],218],[{},"mountedRoot",1,6]],[19,0,{},[18,"Parent",61,[-632],[4,"acUtatGuVN06wkU24sOluQ",null,null,null,1,0]],[12,"e892RDjrxNZISjs1LC/QQv",null,-631,[24,"1cVaU83N5Md67JoqqCBd5z",61,[[26,[0,["e892RDjrxNZISjs1LC/QQv"]],[-630]]],[[1,"Crowd",["_name"],-626],[2,["_lpos"],-627,[1,0,0.181,0.644]],[2,["_lrot"],-628,[3,0,0,0,1]],[2,["_euler"],-629,[1,0,0,0]],[1,true,["isRunwayNPC"],21],[1,true,["shouldGetRandomPose"],21],[1,2,["tripTexture","length"],21],[3,["tripTexture","0"],21,241],[3,["tripTexture","1"],21,242],[1,8,["poses","length"],21],[3,["poses","0"],21,243],[3,["poses","1"],21,244],[3,["poses","2"],21,245],[3,["poses","3"],21,246],[3,["poses","4"],21,247],[1,null,["poses","5"],21],[1,null,["poses","6"],21],[1,null,["poses","7"],21]],[[0,["8dt/KCiu1GOJ6DGYai+gUP"]]]],[[15,["mainRenderer"],[0,["0b8pE5sPNepqN6zgbDPnqa"]]]],219]],[13,0,6,[29,"969XNiWY5HsaEzSoCn2x/3",-645,[6,"cdHVJHfwdGqrYcIo1m9ss1",1,[[1,"obstacle_nonjumpable-002",["_name"],-641],[2,["_lpos"],-642,[1,0,0,-10]],[2,["_lrot"],-643,[3,0,0,0,1]],[2,["_euler"],-644,[1,0,0,0]]]],[[5,["mainRenderer"],-635,[0,["8dt/KCiu1GOJ6DGYai+gUP"]],-634,[0,["3ew1Vo2adBpqZ739+OrPkj"]]],[20,["graphicNode"],-636,[0,["e3hqu0HdxNq4e2nv3hKDvO"]]],[23,-638,-637,[0,["8fFvIyGEBFCqgGREWfd/YJ"]]],[21,["mainRenderer"],-640,-639,[0,["3ew1Vo2adBpqZ739+OrPkj"]]]],[-633],248],[{},"mountedRoot",1,6]],[19,0,{},[18,"Parent",63,[-652],[4,"acUtatGuVN06wkU24sOluQ",null,null,null,1,0]],[12,"e892RDjrxNZISjs1LC/QQv",null,-651,[24,"1cVaU83N5Md67JoqqCBd5z",63,[[26,[0,["e892RDjrxNZISjs1LC/QQv"]],[-650]]],[[1,"Crowd",["_name"],-646],[2,["_lpos"],-647,[1,0,0.181,0.644]],[2,["_lrot"],-648,[3,0,0,0,1]],[2,["_euler"],-649,[1,0,0,0]],[1,true,["isRunwayNPC"],22],[1,true,["shouldGetRandomPose"],22],[1,2,["tripTexture","length"],22],[3,["tripTexture","0"],22,271],[3,["tripTexture","1"],22,272],[1,8,["poses","length"],22],[3,["poses","0"],22,273],[3,["poses","1"],22,274],[3,["poses","2"],22,275],[3,["poses","3"],22,276],[3,["poses","4"],22,277],[1,null,["poses","5"],22],[1,null,["poses","6"],22],[1,null,["poses","7"],22]],[[0,["8dt/KCiu1GOJ6DGYai+gUP"]]]],[[15,["mainRenderer"],[0,["0b8pE5sPNepqN6zgbDPnqa"]]]],249]],[13,0,7,[29,"969XNiWY5HsaEzSoCn2x/3",-665,[6,"b86bJW0uZALLf+eurRzr6i",1,[[1,"obstacle_nonjumpable",["_name"],-661],[2,["_lpos"],-662,[1,-2,0,-6]],[2,["_lrot"],-663,[3,0,0,0,1]],[2,["_euler"],-664,[1,0,0,0]]]],[[5,["mainRenderer"],-655,[0,["8dt/KCiu1GOJ6DGYai+gUP"]],-654,[0,["3ew1Vo2adBpqZ739+OrPkj"]]],[20,["graphicNode"],-656,[0,["e3hqu0HdxNq4e2nv3hKDvO"]]],[23,-658,-657,[0,["8fFvIyGEBFCqgGREWfd/YJ"]]],[21,["mainRenderer"],-660,-659,[0,["3ew1Vo2adBpqZ739+OrPkj"]]]],[-653],286],[{},"mountedRoot",1,7]],[19,0,{},[18,"Parent",65,[-672],[4,"acUtatGuVN06wkU24sOluQ",null,null,null,1,0]],[12,"e892RDjrxNZISjs1LC/QQv",null,-671,[24,"1cVaU83N5Md67JoqqCBd5z",65,[[26,[0,["e892RDjrxNZISjs1LC/QQv"]],[-670]]],[[1,"Crowd",["_name"],-666],[2,["_lpos"],-667,[1,0,0.181,0.644]],[2,["_lrot"],-668,[3,0,0,0,1]],[2,["_euler"],-669,[1,0,0,0]],[1,true,["isRunwayNPC"],23],[1,true,["shouldGetRandomPose"],23],[1,2,["tripTexture","length"],23],[3,["tripTexture","0"],23,309],[3,["tripTexture","1"],23,310],[1,8,["poses","length"],23],[3,["poses","0"],23,311],[3,["poses","1"],23,312],[3,["poses","2"],23,313],[3,["poses","3"],23,314],[3,["poses","4"],23,315],[1,null,["poses","5"],23],[1,null,["poses","6"],23],[1,null,["poses","7"],23]],[[0,["8dt/KCiu1GOJ6DGYai+gUP"]]]],[[15,["mainRenderer"],[0,["0b8pE5sPNepqN6zgbDPnqa"]]]],287]],[13,0,7,[29,"969XNiWY5HsaEzSoCn2x/3",-685,[6,"04hV3PH0FFyorAD5XHk6Q7",1,[[1,"obstacle_nonjumpable-002",["_name"],-681],[2,["_lpos"],-682,[1,2,0,-11]],[2,["_lrot"],-683,[3,0,0,0,1]],[2,["_euler"],-684,[1,0,0,0]]]],[[5,["mainRenderer"],-675,[0,["8dt/KCiu1GOJ6DGYai+gUP"]],-674,[0,["3ew1Vo2adBpqZ739+OrPkj"]]],[20,["graphicNode"],-676,[0,["e3hqu0HdxNq4e2nv3hKDvO"]]],[23,-678,-677,[0,["8fFvIyGEBFCqgGREWfd/YJ"]]],[21,["mainRenderer"],-680,-679,[0,["3ew1Vo2adBpqZ739+OrPkj"]]]],[-673],316],[{},"mountedRoot",1,7]],[19,0,{},[18,"Parent",67,[-692],[4,"acUtatGuVN06wkU24sOluQ",null,null,null,1,0]],[12,"e892RDjrxNZISjs1LC/QQv",null,-691,[24,"1cVaU83N5Md67JoqqCBd5z",67,[[26,[0,["e892RDjrxNZISjs1LC/QQv"]],[-690]]],[[1,"Crowd",["_name"],-686],[2,["_lpos"],-687,[1,0,0.181,0.644]],[2,["_lrot"],-688,[3,0,0,0,1]],[2,["_euler"],-689,[1,0,0,0]],[1,true,["isRunwayNPC"],24],[1,true,["shouldGetRandomPose"],24],[1,2,["tripTexture","length"],24],[3,["tripTexture","0"],24,339],[3,["tripTexture","1"],24,340],[1,8,["poses","length"],24],[3,["poses","0"],24,341],[3,["poses","1"],24,342],[3,["poses","2"],24,343],[3,["poses","3"],24,344],[3,["poses","4"],24,345],[1,null,["poses","5"],24],[1,null,["poses","6"],24],[1,null,["poses","7"],24]],[[0,["8dt/KCiu1GOJ6DGYai+gUP"]]]],[[15,["mainRenderer"],[0,["0b8pE5sPNepqN6zgbDPnqa"]]]],317]],[13,0,8,[29,"969XNiWY5HsaEzSoCn2x/3",-705,[6,"2ena5Ya2lJYpJbMYx6zSzW",1,[[1,"obstacle_nonjumpable",["_name"],-701],[2,["_lpos"],-702,[1,0,0,-6]],[2,["_lrot"],-703,[3,0,0,0,1]],[2,["_euler"],-704,[1,0,0,0]]]],[[5,["mainRenderer"],-695,[0,["8dt/KCiu1GOJ6DGYai+gUP"]],-694,[0,["3ew1Vo2adBpqZ739+OrPkj"]]],[20,["graphicNode"],-696,[0,["e3hqu0HdxNq4e2nv3hKDvO"]]],[23,-698,-697,[0,["8fFvIyGEBFCqgGREWfd/YJ"]]],[21,["mainRenderer"],-700,-699,[0,["3ew1Vo2adBpqZ739+OrPkj"]]]],[-693],352],[{},"mountedRoot",1,8]],[19,0,{},[18,"Parent",69,[-712],[4,"acUtatGuVN06wkU24sOluQ",null,null,null,1,0]],[12,"e892RDjrxNZISjs1LC/QQv",null,-711,[24,"1cVaU83N5Md67JoqqCBd5z",69,[[26,[0,["e892RDjrxNZISjs1LC/QQv"]],[-710]]],[[1,"Crowd",["_name"],-706],[2,["_lpos"],-707,[1,0,0.181,0.644]],[2,["_lrot"],-708,[3,0,0,0,1]],[2,["_euler"],-709,[1,0,0,0]],[1,true,["isRunwayNPC"],26],[1,true,["shouldGetRandomPose"],26],[1,2,["tripTexture","length"],26],[3,["tripTexture","0"],26,375],[3,["tripTexture","1"],26,376],[1,8,["poses","length"],26],[3,["poses","0"],26,377],[3,["poses","1"],26,378],[3,["poses","2"],26,379],[3,["poses","3"],26,380],[3,["poses","4"],26,381],[1,null,["poses","5"],26],[1,null,["poses","6"],26],[1,null,["poses","7"],26]],[[0,["8dt/KCiu1GOJ6DGYai+gUP"]]]],[[15,["mainRenderer"],[0,["0b8pE5sPNepqN6zgbDPnqa"]]]],353]],[13,0,8,[29,"969XNiWY5HsaEzSoCn2x/3",-725,[6,"f0zlOktwFD87XBF1Q5v27T",1,[[1,"obstacle_nonjumpable-002",["_name"],-721],[2,["_lpos"],-722,[1,2,0,-11]],[2,["_lrot"],-723,[3,0,0,0,1]],[2,["_euler"],-724,[1,0,0,0]]]],[[5,["mainRenderer"],-715,[0,["8dt/KCiu1GOJ6DGYai+gUP"]],-714,[0,["3ew1Vo2adBpqZ739+OrPkj"]]],[20,["graphicNode"],-716,[0,["e3hqu0HdxNq4e2nv3hKDvO"]]],[23,-718,-717,[0,["8fFvIyGEBFCqgGREWfd/YJ"]]],[21,["mainRenderer"],-720,-719,[0,["3ew1Vo2adBpqZ739+OrPkj"]]]],[-713],382],[{},"mountedRoot",1,8]],[19,0,{},[18,"Parent",71,[-732],[4,"acUtatGuVN06wkU24sOluQ",null,null,null,1,0]],[12,"e892RDjrxNZISjs1LC/QQv",null,-731,[24,"1cVaU83N5Md67JoqqCBd5z",71,[[26,[0,["e892RDjrxNZISjs1LC/QQv"]],[-730]]],[[1,"Crowd",["_name"],-726],[2,["_lpos"],-727,[1,0,0.181,0.644]],[2,["_lrot"],-728,[3,0,0,0,1]],[2,["_euler"],-729,[1,0,0,0]],[1,true,["isRunwayNPC"],27],[1,true,["shouldGetRandomPose"],27],[1,2,["tripTexture","length"],27],[3,["tripTexture","0"],27,405],[3,["tripTexture","1"],27,406],[1,8,["poses","length"],27],[3,["poses","0"],27,407],[3,["poses","1"],27,408],[3,["poses","2"],27,409],[3,["poses","3"],27,410],[3,["poses","4"],27,411],[1,null,["poses","5"],27],[1,null,["poses","6"],27],[1,null,["poses","7"],27]],[[0,["8dt/KCiu1GOJ6DGYai+gUP"]]]],[[15,["mainRenderer"],[0,["0b8pE5sPNepqN6zgbDPnqa"]]]],383]],[13,0,9,[29,"969XNiWY5HsaEzSoCn2x/3",-745,[6,"10EYUnZBZFe5/Y7rTejdRE",1,[[1,"obstacle_nonjumpable",["_name"],-741],[2,["_lpos"],-742,[1,0,0,-6]],[2,["_lrot"],-743,[3,0,0,0,1]],[2,["_euler"],-744,[1,0,0,0]]]],[[5,["mainRenderer"],-735,[0,["8dt/KCiu1GOJ6DGYai+gUP"]],-734,[0,["3ew1Vo2adBpqZ739+OrPkj"]]],[20,["graphicNode"],-736,[0,["e3hqu0HdxNq4e2nv3hKDvO"]]],[23,-738,-737,[0,["8fFvIyGEBFCqgGREWfd/YJ"]]],[21,["mainRenderer"],-740,-739,[0,["3ew1Vo2adBpqZ739+OrPkj"]]]],[-733],420],[{},"mountedRoot",1,9]],[19,0,{},[18,"Parent",73,[-752],[4,"acUtatGuVN06wkU24sOluQ",null,null,null,1,0]],[12,"e892RDjrxNZISjs1LC/QQv",null,-751,[24,"1cVaU83N5Md67JoqqCBd5z",73,[[26,[0,["e892RDjrxNZISjs1LC/QQv"]],[-750]]],[[1,"Crowd",["_name"],-746],[2,["_lpos"],-747,[1,0,0.181,0.644]],[2,["_lrot"],-748,[3,0,0,0,1]],[2,["_euler"],-749,[1,0,0,0]],[1,true,["isRunwayNPC"],29],[1,true,["shouldGetRandomPose"],29],[1,2,["tripTexture","length"],29],[3,["tripTexture","0"],29,443],[3,["tripTexture","1"],29,444],[1,8,["poses","length"],29],[3,["poses","0"],29,445],[3,["poses","1"],29,446],[3,["poses","2"],29,447],[3,["poses","3"],29,448],[3,["poses","4"],29,449],[1,null,["poses","5"],29],[1,null,["poses","6"],29],[1,null,["poses","7"],29]],[[0,["8dt/KCiu1GOJ6DGYai+gUP"]]]],[[15,["mainRenderer"],[0,["0b8pE5sPNepqN6zgbDPnqa"]]]],421]],[13,0,9,[29,"969XNiWY5HsaEzSoCn2x/3",-765,[6,"90CFLTr+VKJoJdGQ5N//fS",1,[[1,"obstacle_nonjumpable-001",["_name"],-761],[2,["_lpos"],-762,[1,0,0,-11]],[2,["_lrot"],-763,[3,0,0,0,1]],[2,["_euler"],-764,[1,0,0,0]]]],[[5,["mainRenderer"],-755,[0,["8dt/KCiu1GOJ6DGYai+gUP"]],-754,[0,["3ew1Vo2adBpqZ739+OrPkj"]]],[20,["graphicNode"],-756,[0,["e3hqu0HdxNq4e2nv3hKDvO"]]],[23,-758,-757,[0,["8fFvIyGEBFCqgGREWfd/YJ"]]],[21,["mainRenderer"],-760,-759,[0,["3ew1Vo2adBpqZ739+OrPkj"]]]],[-753],450],[{},"mountedRoot",1,9]],[19,0,{},[18,"Parent",75,[-772],[4,"acUtatGuVN06wkU24sOluQ",null,null,null,1,0]],[12,"e892RDjrxNZISjs1LC/QQv",null,-771,[24,"1cVaU83N5Md67JoqqCBd5z",75,[[26,[0,["e892RDjrxNZISjs1LC/QQv"]],[-770]]],[[1,"Crowd",["_name"],-766],[2,["_lpos"],-767,[1,0,0.181,0.644]],[2,["_lrot"],-768,[3,0,0,0,1]],[2,["_euler"],-769,[1,0,0,0]],[1,true,["isRunwayNPC"],30],[1,true,["shouldGetRandomPose"],30],[1,2,["tripTexture","length"],30],[3,["tripTexture","0"],30,473],[3,["tripTexture","1"],30,474],[1,8,["poses","length"],30],[3,["poses","0"],30,475],[3,["poses","1"],30,476],[3,["poses","2"],30,477],[3,["poses","3"],30,478],[3,["poses","4"],30,479],[1,null,["poses","5"],30],[1,null,["poses","6"],30],[1,null,["poses","7"],30]],[[0,["8dt/KCiu1GOJ6DGYai+gUP"]]]],[[15,["mainRenderer"],[0,["0b8pE5sPNepqN6zgbDPnqa"]]]],451]],[13,0,2,[29,"969XNiWY5HsaEzSoCn2x/3",-785,[6,"433wqED7NFQ4CMPGOL1wqs",1,[[1,"obstacle_nonjumpable",["_name"],-781],[2,["_lpos"],-782,[1,-2,0,-6]],[2,["_lrot"],-783,[3,0,0,0,1]],[2,["_euler"],-784,[1,0,0,0]]]],[[5,["mainRenderer"],-775,[0,["8dt/KCiu1GOJ6DGYai+gUP"]],-774,[0,["3ew1Vo2adBpqZ739+OrPkj"]]],[20,["graphicNode"],-776,[0,["e3hqu0HdxNq4e2nv3hKDvO"]]],[23,-778,-777,[0,["8fFvIyGEBFCqgGREWfd/YJ"]]],[21,["mainRenderer"],-780,-779,[0,["3ew1Vo2adBpqZ739+OrPkj"]]]],[-773],489],[{},"mountedRoot",1,2]],[19,0,{},[18,"Parent",77,[-792],[4,"acUtatGuVN06wkU24sOluQ",null,null,null,1,0]],[12,"e892RDjrxNZISjs1LC/QQv",null,-791,[24,"1cVaU83N5Md67JoqqCBd5z",77,[[26,[0,["e892RDjrxNZISjs1LC/QQv"]],[-790]]],[[1,"Crowd",["_name"],-786],[2,["_lpos"],-787,[1,0,0.181,0.644]],[2,["_lrot"],-788,[3,0,0,0,1]],[2,["_euler"],-789,[1,0,0,0]],[1,true,["isRunwayNPC"],31],[1,true,["shouldGetRandomPose"],31],[1,2,["tripTexture","length"],31],[3,["tripTexture","0"],31,512],[3,["tripTexture","1"],31,513],[1,8,["poses","length"],31],[3,["poses","0"],31,514],[3,["poses","1"],31,515],[3,["poses","2"],31,516],[3,["poses","3"],31,517],[3,["poses","4"],31,518],[1,null,["poses","5"],31],[1,null,["poses","6"],31],[1,null,["poses","7"],31]],[[0,["8dt/KCiu1GOJ6DGYai+gUP"]]]],[[15,["mainRenderer"],[0,["0b8pE5sPNepqN6zgbDPnqa"]]]],490]],[13,0,2,[29,"969XNiWY5HsaEzSoCn2x/3",-805,[6,"1426pjSwtFb6u6t/3T4QQB",1,[[1,"obstacle_nonjumpable-001",["_name"],-801],[2,["_lpos"],-802,[1,2,0,-6]],[2,["_lrot"],-803,[3,0,0,0,1]],[2,["_euler"],-804,[1,0,0,0]]]],[[5,["mainRenderer"],-795,[0,["8dt/KCiu1GOJ6DGYai+gUP"]],-794,[0,["3ew1Vo2adBpqZ739+OrPkj"]]],[20,["graphicNode"],-796,[0,["e3hqu0HdxNq4e2nv3hKDvO"]]],[23,-798,-797,[0,["8fFvIyGEBFCqgGREWfd/YJ"]]],[21,["mainRenderer"],-800,-799,[0,["3ew1Vo2adBpqZ739+OrPkj"]]]],[-793],519],[{},"mountedRoot",1,2]],[19,0,{},[18,"Parent",79,[-812],[4,"acUtatGuVN06wkU24sOluQ",null,null,null,1,0]],[12,"e892RDjrxNZISjs1LC/QQv",null,-811,[24,"1cVaU83N5Md67JoqqCBd5z",79,[[26,[0,["e892RDjrxNZISjs1LC/QQv"]],[-810]]],[[1,"Crowd",["_name"],-806],[2,["_lpos"],-807,[1,0,0.181,0.644]],[2,["_lrot"],-808,[3,0,0,0,1]],[2,["_euler"],-809,[1,0,0,0]],[1,true,["isRunwayNPC"],32],[1,true,["shouldGetRandomPose"],32],[1,2,["tripTexture","length"],32],[3,["tripTexture","0"],32,542],[3,["tripTexture","1"],32,543],[1,8,["poses","length"],32],[3,["poses","0"],32,544],[3,["poses","1"],32,545],[3,["poses","2"],32,546],[3,["poses","3"],32,547],[3,["poses","4"],32,548],[1,null,["poses","5"],32],[1,null,["poses","6"],32],[1,null,["poses","7"],32]],[[0,["8dt/KCiu1GOJ6DGYai+gUP"]]]],[[15,["mainRenderer"],[0,["0b8pE5sPNepqN6zgbDPnqa"]]]],520]],[13,0,2,[29,"969XNiWY5HsaEzSoCn2x/3",-825,[6,"850nRN1LhGHJFgpN4uRmhf",1,[[1,"obstacle_nonjumpable-002",["_name"],-821],[2,["_lpos"],-822,[1,2,0,-10]],[2,["_lrot"],-823,[3,0,0,0,1]],[2,["_euler"],-824,[1,0,0,0]]]],[[5,["mainRenderer"],-815,[0,["8dt/KCiu1GOJ6DGYai+gUP"]],-814,[0,["3ew1Vo2adBpqZ739+OrPkj"]]],[20,["graphicNode"],-816,[0,["e3hqu0HdxNq4e2nv3hKDvO"]]],[23,-818,-817,[0,["8fFvIyGEBFCqgGREWfd/YJ"]]],[21,["mainRenderer"],-820,-819,[0,["3ew1Vo2adBpqZ739+OrPkj"]]]],[-813],549],[{},"mountedRoot",1,2]],[19,0,{},[18,"Parent",81,[-832],[4,"acUtatGuVN06wkU24sOluQ",null,null,null,1,0]],[12,"e892RDjrxNZISjs1LC/QQv",null,-831,[24,"1cVaU83N5Md67JoqqCBd5z",81,[[26,[0,["e892RDjrxNZISjs1LC/QQv"]],[-830]]],[[1,"Crowd",["_name"],-826],[2,["_lpos"],-827,[1,0,0.181,0.644]],[2,["_lrot"],-828,[3,0,0,0,1]],[2,["_euler"],-829,[1,0,0,0]],[1,true,["isRunwayNPC"],33],[1,true,["shouldGetRandomPose"],33],[1,2,["tripTexture","length"],33],[3,["tripTexture","0"],33,572],[3,["tripTexture","1"],33,573],[1,8,["poses","length"],33],[3,["poses","0"],33,574],[3,["poses","1"],33,575],[3,["poses","2"],33,576],[3,["poses","3"],33,577],[3,["poses","4"],33,578],[1,null,["poses","5"],33],[1,null,["poses","6"],33],[1,null,["poses","7"],33]],[[0,["8dt/KCiu1GOJ6DGYai+gUP"]]]],[[15,["mainRenderer"],[0,["0b8pE5sPNepqN6zgbDPnqa"]]]],550]],[13,0,2,[29,"969XNiWY5HsaEzSoCn2x/3",-845,[6,"63ggzUk21AAKO6uObWJkn7",1,[[1,"obstacle_nonjumpable-003",["_name"],-841],[2,["_lpos"],-842,[1,-2,0,-10]],[2,["_lrot"],-843,[3,0,0,0,1]],[2,["_euler"],-844,[1,0,0,0]]]],[[5,["mainRenderer"],-835,[0,["8dt/KCiu1GOJ6DGYai+gUP"]],-834,[0,["3ew1Vo2adBpqZ739+OrPkj"]]],[20,["graphicNode"],-836,[0,["e3hqu0HdxNq4e2nv3hKDvO"]]],[23,-838,-837,[0,["8fFvIyGEBFCqgGREWfd/YJ"]]],[21,["mainRenderer"],-840,-839,[0,["3ew1Vo2adBpqZ739+OrPkj"]]]],[-833],579],[{},"mountedRoot",1,2]],[19,0,{},[18,"Parent",83,[-852],[4,"acUtatGuVN06wkU24sOluQ",null,null,null,1,0]],[12,"e892RDjrxNZISjs1LC/QQv",null,-851,[24,"1cVaU83N5Md67JoqqCBd5z",83,[[26,[0,["e892RDjrxNZISjs1LC/QQv"]],[-850]]],[[1,"Crowd",["_name"],-846],[2,["_lpos"],-847,[1,0,0.181,0.644]],[2,["_lrot"],-848,[3,0,0,0,1]],[2,["_euler"],-849,[1,0,0,0]],[1,true,["isRunwayNPC"],34],[1,true,["shouldGetRandomPose"],34],[1,2,["tripTexture","length"],34],[3,["tripTexture","0"],34,602],[3,["tripTexture","1"],34,603],[1,8,["poses","length"],34],[3,["poses","0"],34,604],[3,["poses","1"],34,605],[3,["poses","2"],34,606],[3,["poses","3"],34,607],[3,["poses","4"],34,608],[1,null,["poses","5"],34],[1,null,["poses","6"],34],[1,null,["poses","7"],34]],[[0,["8dt/KCiu1GOJ6DGYai+gUP"]]]],[[15,["mainRenderer"],[0,["0b8pE5sPNepqN6zgbDPnqa"]]]],580]],[13,0,2,[29,"969XNiWY5HsaEzSoCn2x/3",-865,[6,"a7E8UF4+JB7bABrMI1/U3d",1,[[1,"obstacle_nonjumpable-004",["_name"],-861],[2,["_lpos"],-862,[1,-2,0,-16]],[2,["_lrot"],-863,[3,0,0,0,1]],[2,["_euler"],-864,[1,0,0,0]]]],[[5,["mainRenderer"],-855,[0,["8dt/KCiu1GOJ6DGYai+gUP"]],-854,[0,["3ew1Vo2adBpqZ739+OrPkj"]]],[20,["graphicNode"],-856,[0,["e3hqu0HdxNq4e2nv3hKDvO"]]],[23,-858,-857,[0,["8fFvIyGEBFCqgGREWfd/YJ"]]],[21,["mainRenderer"],-860,-859,[0,["3ew1Vo2adBpqZ739+OrPkj"]]]],[-853],609],[{},"mountedRoot",1,2]],[19,0,{},[18,"Parent",85,[-872],[4,"acUtatGuVN06wkU24sOluQ",null,null,null,1,0]],[12,"e892RDjrxNZISjs1LC/QQv",null,-871,[24,"1cVaU83N5Md67JoqqCBd5z",85,[[26,[0,["e892RDjrxNZISjs1LC/QQv"]],[-870]]],[[1,"Crowd",["_name"],-866],[2,["_lpos"],-867,[1,0,0.181,0.644]],[2,["_lrot"],-868,[3,0,0,0,1]],[2,["_euler"],-869,[1,0,0,0]],[1,true,["isRunwayNPC"],35],[1,true,["shouldGetRandomPose"],35],[1,2,["tripTexture","length"],35],[3,["tripTexture","0"],35,632],[3,["tripTexture","1"],35,633],[1,8,["poses","length"],35],[3,["poses","0"],35,634],[3,["poses","1"],35,635],[3,["poses","2"],35,636],[3,["poses","3"],35,637],[3,["poses","4"],35,638],[1,null,["poses","5"],35],[1,null,["poses","6"],35],[1,null,["poses","7"],35]],[[0,["8dt/KCiu1GOJ6DGYai+gUP"]]]],[[15,["mainRenderer"],[0,["0b8pE5sPNepqN6zgbDPnqa"]]]],610]],[13,0,2,[29,"969XNiWY5HsaEzSoCn2x/3",-885,[6,"263wXoW2lElIWRmWx/07e1",1,[[1,"obstacle_nonjumpable-005",["_name"],-881],[2,["_lpos"],-882,[1,2,0,-16]],[2,["_lrot"],-883,[3,0,0,0,1]],[2,["_euler"],-884,[1,0,0,0]]]],[[5,["mainRenderer"],-875,[0,["8dt/KCiu1GOJ6DGYai+gUP"]],-874,[0,["3ew1Vo2adBpqZ739+OrPkj"]]],[20,["graphicNode"],-876,[0,["e3hqu0HdxNq4e2nv3hKDvO"]]],[23,-878,-877,[0,["8fFvIyGEBFCqgGREWfd/YJ"]]],[21,["mainRenderer"],-880,-879,[0,["3ew1Vo2adBpqZ739+OrPkj"]]]],[-873],639],[{},"mountedRoot",1,2]],[19,0,{},[18,"Parent",87,[-892],[4,"acUtatGuVN06wkU24sOluQ",null,null,null,1,0]],[12,"e892RDjrxNZISjs1LC/QQv",null,-891,[24,"1cVaU83N5Md67JoqqCBd5z",87,[[26,[0,["e892RDjrxNZISjs1LC/QQv"]],[-890]]],[[1,"Crowd",["_name"],-886],[2,["_lpos"],-887,[1,0,0.181,0.644]],[2,["_lrot"],-888,[3,0,0,0,1]],[2,["_euler"],-889,[1,0,0,0]],[1,true,["isRunwayNPC"],36],[1,true,["shouldGetRandomPose"],36],[1,2,["tripTexture","length"],36],[3,["tripTexture","0"],36,662],[3,["tripTexture","1"],36,663],[1,8,["poses","length"],36],[3,["poses","0"],36,664],[3,["poses","1"],36,665],[3,["poses","2"],36,666],[3,["poses","3"],36,667],[3,["poses","4"],36,668],[1,null,["poses","5"],36],[1,null,["poses","6"],36],[1,null,["poses","7"],36]],[[0,["8dt/KCiu1GOJ6DGYai+gUP"]]]],[[15,["mainRenderer"],[0,["0b8pE5sPNepqN6zgbDPnqa"]]]],640]],[13,0,12,[29,"969XNiWY5HsaEzSoCn2x/3",-905,[6,"aeSyKT335Ar48h+L5hJM01",1,[[1,"obstacle_nonjumpable",["_name"],-901],[2,["_lpos"],-902,[1,0,0,-11]],[2,["_lrot"],-903,[3,0,0,0,1]],[2,["_euler"],-904,[1,0,0,0]]]],[[5,["mainRenderer"],-895,[0,["8dt/KCiu1GOJ6DGYai+gUP"]],-894,[0,["3ew1Vo2adBpqZ739+OrPkj"]]],[20,["graphicNode"],-896,[0,["e3hqu0HdxNq4e2nv3hKDvO"]]],[23,-898,-897,[0,["8fFvIyGEBFCqgGREWfd/YJ"]]],[21,["mainRenderer"],-900,-899,[0,["3ew1Vo2adBpqZ739+OrPkj"]]]],[-893],675],[{},"mountedRoot",1,12]],[19,0,{},[18,"Parent",89,[-912],[4,"acUtatGuVN06wkU24sOluQ",null,null,null,1,0]],[12,"e892RDjrxNZISjs1LC/QQv",null,-911,[24,"1cVaU83N5Md67JoqqCBd5z",89,[[26,[0,["e892RDjrxNZISjs1LC/QQv"]],[-910]]],[[1,"Crowd",["_name"],-906],[2,["_lpos"],-907,[1,0,0.181,0.644]],[2,["_lrot"],-908,[3,0,0,0,1]],[2,["_euler"],-909,[1,0,0,0]],[1,true,["isRunwayNPC"],38],[1,true,["shouldGetRandomPose"],38],[1,2,["tripTexture","length"],38],[3,["tripTexture","0"],38,698],[3,["tripTexture","1"],38,699],[1,8,["poses","length"],38],[3,["poses","0"],38,700],[3,["poses","1"],38,701],[3,["poses","2"],38,702],[3,["poses","3"],38,703],[3,["poses","4"],38,704],[1,null,["poses","5"],38],[1,null,["poses","6"],38],[1,null,["poses","7"],38]],[[0,["8dt/KCiu1GOJ6DGYai+gUP"]]]],[[15,["mainRenderer"],[0,["0b8pE5sPNepqN6zgbDPnqa"]]]],676]],[13,0,12,[29,"969XNiWY5HsaEzSoCn2x/3",-925,[6,"00d+aI5mpK7rbrpXRYlPeg",1,[[1,"obstacle_nonjumpable-001",["_name"],-921],[2,["_lpos"],-922,[1,-2,0,-6]],[2,["_lrot"],-923,[3,0,0,0,1]],[2,["_euler"],-924,[1,0,0,0]]]],[[5,["mainRenderer"],-915,[0,["8dt/KCiu1GOJ6DGYai+gUP"]],-914,[0,["3ew1Vo2adBpqZ739+OrPkj"]]],[20,["graphicNode"],-916,[0,["e3hqu0HdxNq4e2nv3hKDvO"]]],[23,-918,-917,[0,["8fFvIyGEBFCqgGREWfd/YJ"]]],[21,["mainRenderer"],-920,-919,[0,["3ew1Vo2adBpqZ739+OrPkj"]]]],[-913],705],[{},"mountedRoot",1,12]],[19,0,{},[18,"Parent",91,[-932],[4,"acUtatGuVN06wkU24sOluQ",null,null,null,1,0]],[12,"e892RDjrxNZISjs1LC/QQv",null,-931,[24,"1cVaU83N5Md67JoqqCBd5z",91,[[26,[0,["e892RDjrxNZISjs1LC/QQv"]],[-930]]],[[1,"Crowd",["_name"],-926],[2,["_lpos"],-927,[1,0,0.181,0.644]],[2,["_lrot"],-928,[3,0,0,0,1]],[2,["_euler"],-929,[1,0,0,0]],[1,true,["isRunwayNPC"],39],[1,true,["shouldGetRandomPose"],39],[1,2,["tripTexture","length"],39],[3,["tripTexture","0"],39,728],[3,["tripTexture","1"],39,729],[1,8,["poses","length"],39],[3,["poses","0"],39,730],[3,["poses","1"],39,731],[3,["poses","2"],39,732],[3,["poses","3"],39,733],[3,["poses","4"],39,734],[1,null,["poses","5"],39],[1,null,["poses","6"],39],[1,null,["poses","7"],39]],[[0,["8dt/KCiu1GOJ6DGYai+gUP"]]]],[[15,["mainRenderer"],[0,["0b8pE5sPNepqN6zgbDPnqa"]]]],706]],[13,0,10,[29,"969XNiWY5HsaEzSoCn2x/3",-945,[6,"39gYCALB9Oh5+3B9XwaT1n",1,[[1,"obstacle_nonjumpable",["_name"],-941],[2,["_lpos"],-942,[1,-2,0,-11]],[2,["_lrot"],-943,[3,0,0,0,1]],[2,["_euler"],-944,[1,0,0,0]]]],[[5,["mainRenderer"],-935,[0,["8dt/KCiu1GOJ6DGYai+gUP"]],-934,[0,["3ew1Vo2adBpqZ739+OrPkj"]]],[20,["graphicNode"],-936,[0,["e3hqu0HdxNq4e2nv3hKDvO"]]],[23,-938,-937,[0,["8fFvIyGEBFCqgGREWfd/YJ"]]],[21,["mainRenderer"],-940,-939,[0,["3ew1Vo2adBpqZ739+OrPkj"]]]],[-933],743],[{},"mountedRoot",1,10]],[19,0,{},[18,"Parent",93,[-952],[4,"acUtatGuVN06wkU24sOluQ",null,null,null,1,0]],[12,"e892RDjrxNZISjs1LC/QQv",null,-951,[24,"1cVaU83N5Md67JoqqCBd5z",93,[[26,[0,["e892RDjrxNZISjs1LC/QQv"]],[-950]]],[[1,"Crowd",["_name"],-946],[2,["_lpos"],-947,[1,0,0.181,0.644]],[2,["_lrot"],-948,[3,0,0,0,1]],[2,["_euler"],-949,[1,0,0,0]],[1,true,["isRunwayNPC"],40],[1,true,["shouldGetRandomPose"],40],[1,2,["tripTexture","length"],40],[3,["tripTexture","0"],40,766],[3,["tripTexture","1"],40,767],[1,8,["poses","length"],40],[3,["poses","0"],40,768],[3,["poses","1"],40,769],[3,["poses","2"],40,770],[3,["poses","3"],40,771],[3,["poses","4"],40,772],[1,null,["poses","5"],40],[1,null,["poses","6"],40],[1,null,["poses","7"],40]],[[0,["8dt/KCiu1GOJ6DGYai+gUP"]]]],[[15,["mainRenderer"],[0,["0b8pE5sPNepqN6zgbDPnqa"]]]],744]],[13,0,10,[29,"969XNiWY5HsaEzSoCn2x/3",-965,[6,"a7/OYrorBJ6prvF7Uu6BAh",1,[[1,"obstacle_nonjumpable-001",["_name"],-961],[2,["_lpos"],-962,[1,2,0,-18]],[2,["_lrot"],-963,[3,0,0,0,1]],[2,["_euler"],-964,[1,0,0,0]]]],[[5,["mainRenderer"],-955,[0,["8dt/KCiu1GOJ6DGYai+gUP"]],-954,[0,["3ew1Vo2adBpqZ739+OrPkj"]]],[20,["graphicNode"],-956,[0,["e3hqu0HdxNq4e2nv3hKDvO"]]],[23,-958,-957,[0,["8fFvIyGEBFCqgGREWfd/YJ"]]],[21,["mainRenderer"],-960,-959,[0,["3ew1Vo2adBpqZ739+OrPkj"]]]],[-953],773],[{},"mountedRoot",1,10]],[19,0,{},[18,"Parent",95,[-972],[4,"acUtatGuVN06wkU24sOluQ",null,null,null,1,0]],[12,"e892RDjrxNZISjs1LC/QQv",null,-971,[24,"1cVaU83N5Md67JoqqCBd5z",95,[[26,[0,["e892RDjrxNZISjs1LC/QQv"]],[-970]]],[[1,"Crowd",["_name"],-966],[2,["_lpos"],-967,[1,0,0.181,0.644]],[2,["_lrot"],-968,[3,0,0,0,1]],[2,["_euler"],-969,[1,0,0,0]],[1,true,["isRunwayNPC"],41],[1,true,["shouldGetRandomPose"],41],[1,2,["tripTexture","length"],41],[3,["tripTexture","0"],41,796],[3,["tripTexture","1"],41,797],[1,8,["poses","length"],41],[3,["poses","0"],41,798],[3,["poses","1"],41,799],[3,["poses","2"],41,800],[3,["poses","3"],41,801],[3,["poses","4"],41,802],[1,null,["poses","5"],41],[1,null,["poses","6"],41],[1,null,["poses","7"],41]],[[0,["8dt/KCiu1GOJ6DGYai+gUP"]]]],[[15,["mainRenderer"],[0,["0b8pE5sPNepqN6zgbDPnqa"]]]],774]],[13,0,3,[29,"969XNiWY5HsaEzSoCn2x/3",-985,[6,"879kRixudF1J7CpZi07cuj",1,[[1,"obstacle_nonjumpable",["_name"],-981],[2,["_lpos"],-982,[1,-2,0,-7]],[2,["_lrot"],-983,[3,0,0,0,1]],[2,["_euler"],-984,[1,0,0,0]]]],[[5,["mainRenderer"],-975,[0,["8dt/KCiu1GOJ6DGYai+gUP"]],-974,[0,["3ew1Vo2adBpqZ739+OrPkj"]]],[20,["graphicNode"],-976,[0,["e3hqu0HdxNq4e2nv3hKDvO"]]],[23,-978,-977,[0,["8fFvIyGEBFCqgGREWfd/YJ"]]],[21,["mainRenderer"],-980,-979,[0,["3ew1Vo2adBpqZ739+OrPkj"]]]],[-973],809],[{},"mountedRoot",1,3]],[19,0,{},[18,"Parent",97,[-992],[4,"acUtatGuVN06wkU24sOluQ",null,null,null,1,0]],[12,"e892RDjrxNZISjs1LC/QQv",null,-991,[24,"1cVaU83N5Md67JoqqCBd5z",97,[[26,[0,["e892RDjrxNZISjs1LC/QQv"]],[-990]]],[[1,"Crowd",["_name"],-986],[2,["_lpos"],-987,[1,0,0.181,0.644]],[2,["_lrot"],-988,[3,0,0,0,1]],[2,["_euler"],-989,[1,0,0,0]],[1,true,["isRunwayNPC"],42],[1,true,["shouldGetRandomPose"],42],[1,2,["tripTexture","length"],42],[3,["tripTexture","0"],42,832],[3,["tripTexture","1"],42,833],[1,8,["poses","length"],42],[3,["poses","0"],42,834],[3,["poses","1"],42,835],[3,["poses","2"],42,836],[3,["poses","3"],42,837],[3,["poses","4"],42,838],[1,null,["poses","5"],42],[1,null,["poses","6"],42],[1,null,["poses","7"],42]],[[0,["8dt/KCiu1GOJ6DGYai+gUP"]]]],[[15,["mainRenderer"],[0,["0b8pE5sPNepqN6zgbDPnqa"]]]],810]],[13,0,3,[29,"969XNiWY5HsaEzSoCn2x/3",-1005,[6,"730uKhRjxHvbeY0o6+XTV8",1,[[1,"obstacle_nonjumpable-001",["_name"],-1001],[2,["_lpos"],-1002,[1,-2,0,-13]],[2,["_lrot"],-1003,[3,0,0,0,1]],[2,["_euler"],-1004,[1,0,0,0]]]],[[5,["mainRenderer"],-995,[0,["8dt/KCiu1GOJ6DGYai+gUP"]],-994,[0,["3ew1Vo2adBpqZ739+OrPkj"]]],[20,["graphicNode"],-996,[0,["e3hqu0HdxNq4e2nv3hKDvO"]]],[23,-998,-997,[0,["8fFvIyGEBFCqgGREWfd/YJ"]]],[21,["mainRenderer"],-1000,-999,[0,["3ew1Vo2adBpqZ739+OrPkj"]]]],[-993],839],[{},"mountedRoot",1,3]],[19,0,{},[18,"Parent",99,[-1012],[4,"acUtatGuVN06wkU24sOluQ",null,null,null,1,0]],[12,"e892RDjrxNZISjs1LC/QQv",null,-1011,[24,"1cVaU83N5Md67JoqqCBd5z",99,[[26,[0,["e892RDjrxNZISjs1LC/QQv"]],[-1010]]],[[1,"Crowd",["_name"],-1006],[2,["_lpos"],-1007,[1,0,0.181,0.644]],[2,["_lrot"],-1008,[3,0,0,0,1]],[2,["_euler"],-1009,[1,0,0,0]],[1,true,["isRunwayNPC"],43],[1,true,["shouldGetRandomPose"],43],[1,2,["tripTexture","length"],43],[3,["tripTexture","0"],43,862],[3,["tripTexture","1"],43,863],[1,8,["poses","length"],43],[3,["poses","0"],43,864],[3,["poses","1"],43,865],[3,["poses","2"],43,866],[3,["poses","3"],43,867],[3,["poses","4"],43,868],[1,null,["poses","5"],43],[1,null,["poses","6"],43],[1,null,["poses","7"],43]],[[0,["8dt/KCiu1GOJ6DGYai+gUP"]]]],[[15,["mainRenderer"],[0,["0b8pE5sPNepqN6zgbDPnqa"]]]],840]],[13,0,3,[29,"969XNiWY5HsaEzSoCn2x/3",-1025,[6,"3ccI4b9zFCB6CznaAgKnZs",1,[[1,"obstacle_nonjumpable-002",["_name"],-1021],[2,["_lpos"],-1022,[1,-2,0,-19]],[2,["_lrot"],-1023,[3,0,0,0,1]],[2,["_euler"],-1024,[1,0,0,0]]]],[[5,["mainRenderer"],-1015,[0,["8dt/KCiu1GOJ6DGYai+gUP"]],-1014,[0,["3ew1Vo2adBpqZ739+OrPkj"]]],[20,["graphicNode"],-1016,[0,["e3hqu0HdxNq4e2nv3hKDvO"]]],[23,-1018,-1017,[0,["8fFvIyGEBFCqgGREWfd/YJ"]]],[21,["mainRenderer"],-1020,-1019,[0,["3ew1Vo2adBpqZ739+OrPkj"]]]],[-1013],869],[{},"mountedRoot",1,3]],[19,0,{},[18,"Parent",101,[-1032],[4,"acUtatGuVN06wkU24sOluQ",null,null,null,1,0]],[12,"e892RDjrxNZISjs1LC/QQv",null,-1031,[24,"1cVaU83N5Md67JoqqCBd5z",101,[[26,[0,["e892RDjrxNZISjs1LC/QQv"]],[-1030]]],[[1,"Crowd",["_name"],-1026],[2,["_lpos"],-1027,[1,0,0.181,0.644]],[2,["_lrot"],-1028,[3,0,0,0,1]],[2,["_euler"],-1029,[1,0,0,0]],[1,true,["isRunwayNPC"],44],[1,true,["shouldGetRandomPose"],44],[1,2,["tripTexture","length"],44],[3,["tripTexture","0"],44,892],[3,["tripTexture","1"],44,893],[1,8,["poses","length"],44],[3,["poses","0"],44,894],[3,["poses","1"],44,895],[3,["poses","2"],44,896],[3,["poses","3"],44,897],[3,["poses","4"],44,898],[1,null,["poses","5"],44],[1,null,["poses","6"],44],[1,null,["poses","7"],44]],[[0,["8dt/KCiu1GOJ6DGYai+gUP"]]]],[[15,["mainRenderer"],[0,["0b8pE5sPNepqN6zgbDPnqa"]]]],870]],[13,0,3,[29,"969XNiWY5HsaEzSoCn2x/3",-1045,[6,"89BBL/XIlPwoSVkoPG8cgS",1,[[1,"obstacle_nonjumpable-003",["_name"],-1041],[2,["_lpos"],-1042,[1,2,0,-19]],[2,["_lrot"],-1043,[3,0,0,0,1]],[2,["_euler"],-1044,[1,0,0,0]]]],[[5,["mainRenderer"],-1035,[0,["8dt/KCiu1GOJ6DGYai+gUP"]],-1034,[0,["3ew1Vo2adBpqZ739+OrPkj"]]],[20,["graphicNode"],-1036,[0,["e3hqu0HdxNq4e2nv3hKDvO"]]],[23,-1038,-1037,[0,["8fFvIyGEBFCqgGREWfd/YJ"]]],[21,["mainRenderer"],-1040,-1039,[0,["3ew1Vo2adBpqZ739+OrPkj"]]]],[-1033],899],[{},"mountedRoot",1,3]],[19,0,{},[18,"Parent",103,[-1052],[4,"acUtatGuVN06wkU24sOluQ",null,null,null,1,0]],[12,"e892RDjrxNZISjs1LC/QQv",null,-1051,[24,"1cVaU83N5Md67JoqqCBd5z",103,[[26,[0,["e892RDjrxNZISjs1LC/QQv"]],[-1050]]],[[1,"Crowd",["_name"],-1046],[2,["_lpos"],-1047,[1,0,0.181,0.644]],[2,["_lrot"],-1048,[3,0,0,0,1]],[2,["_euler"],-1049,[1,0,0,0]],[1,true,["isRunwayNPC"],45],[1,true,["shouldGetRandomPose"],45],[1,2,["tripTexture","length"],45],[3,["tripTexture","0"],45,922],[3,["tripTexture","1"],45,923],[1,8,["poses","length"],45],[3,["poses","0"],45,924],[3,["poses","1"],45,925],[3,["poses","2"],45,926],[3,["poses","3"],45,927],[3,["poses","4"],45,928],[1,null,["poses","5"],45],[1,null,["poses","6"],45],[1,null,["poses","7"],45]],[[0,["8dt/KCiu1GOJ6DGYai+gUP"]]]],[[15,["mainRenderer"],[0,["0b8pE5sPNepqN6zgbDPnqa"]]]],900]],[13,0,3,[29,"969XNiWY5HsaEzSoCn2x/3",-1065,[6,"990yRzj9RB3qTj8fOr3oNg",1,[[1,"obstacle_nonjumpable-004",["_name"],-1061],[2,["_lpos"],-1062,[1,2,0,-13]],[2,["_lrot"],-1063,[3,0,0,0,1]],[2,["_euler"],-1064,[1,0,0,0]]]],[[5,["mainRenderer"],-1055,[0,["8dt/KCiu1GOJ6DGYai+gUP"]],-1054,[0,["3ew1Vo2adBpqZ739+OrPkj"]]],[20,["graphicNode"],-1056,[0,["e3hqu0HdxNq4e2nv3hKDvO"]]],[23,-1058,-1057,[0,["8fFvIyGEBFCqgGREWfd/YJ"]]],[21,["mainRenderer"],-1060,-1059,[0,["3ew1Vo2adBpqZ739+OrPkj"]]]],[-1053],929],[{},"mountedRoot",1,3]],[19,0,{},[18,"Parent",105,[-1072],[4,"acUtatGuVN06wkU24sOluQ",null,null,null,1,0]],[12,"e892RDjrxNZISjs1LC/QQv",null,-1071,[24,"1cVaU83N5Md67JoqqCBd5z",105,[[26,[0,["e892RDjrxNZISjs1LC/QQv"]],[-1070]]],[[1,"Crowd",["_name"],-1066],[2,["_lpos"],-1067,[1,0,0.181,0.644]],[2,["_lrot"],-1068,[3,0,0,0,1]],[2,["_euler"],-1069,[1,0,0,0]],[1,true,["isRunwayNPC"],46],[1,true,["shouldGetRandomPose"],46],[1,2,["tripTexture","length"],46],[3,["tripTexture","0"],46,952],[3,["tripTexture","1"],46,953],[1,8,["poses","length"],46],[3,["poses","0"],46,954],[3,["poses","1"],46,955],[3,["poses","2"],46,956],[3,["poses","3"],46,957],[3,["poses","4"],46,958],[1,null,["poses","5"],46],[1,null,["poses","6"],46],[1,null,["poses","7"],46]],[[0,["8dt/KCiu1GOJ6DGYai+gUP"]]]],[[15,["mainRenderer"],[0,["0b8pE5sPNepqN6zgbDPnqa"]]]],930]],[13,0,3,[29,"969XNiWY5HsaEzSoCn2x/3",-1085,[6,"dcQqYInW5D36sUXM13BQzU",1,[[1,"obstacle_nonjumpable-005",["_name"],-1081],[2,["_lpos"],-1082,[1,2,0,-7]],[2,["_lrot"],-1083,[3,0,0,0,1]],[2,["_euler"],-1084,[1,0,0,0]]]],[[5,["mainRenderer"],-1075,[0,["8dt/KCiu1GOJ6DGYai+gUP"]],-1074,[0,["3ew1Vo2adBpqZ739+OrPkj"]]],[20,["graphicNode"],-1076,[0,["e3hqu0HdxNq4e2nv3hKDvO"]]],[23,-1078,-1077,[0,["8fFvIyGEBFCqgGREWfd/YJ"]]],[21,["mainRenderer"],-1080,-1079,[0,["3ew1Vo2adBpqZ739+OrPkj"]]]],[-1073],959],[{},"mountedRoot",1,3]],[19,0,{},[18,"Parent",107,[-1092],[4,"acUtatGuVN06wkU24sOluQ",null,null,null,1,0]],[12,"e892RDjrxNZISjs1LC/QQv",null,-1091,[24,"1cVaU83N5Md67JoqqCBd5z",107,[[26,[0,["e892RDjrxNZISjs1LC/QQv"]],[-1090]]],[[1,"Crowd",["_name"],-1086],[2,["_lpos"],-1087,[1,0,0.181,0.644]],[2,["_lrot"],-1088,[3,0,0,0,1]],[2,["_euler"],-1089,[1,0,0,0]],[1,true,["isRunwayNPC"],47],[1,true,["shouldGetRandomPose"],47],[1,2,["tripTexture","length"],47],[3,["tripTexture","0"],47,982],[3,["tripTexture","1"],47,983],[1,8,["poses","length"],47],[3,["poses","0"],47,984],[3,["poses","1"],47,985],[3,["poses","2"],47,986],[3,["poses","3"],47,987],[3,["poses","4"],47,988],[1,null,["poses","5"],47],[1,null,["poses","6"],47],[1,null,["poses","7"],47]],[[0,["8dt/KCiu1GOJ6DGYai+gUP"]]]],[[15,["mainRenderer"],[0,["0b8pE5sPNepqN6zgbDPnqa"]]]],960]],[13,0,48,[29,"969XNiWY5HsaEzSoCn2x/3",-1099,[6,"6bXB09ojRPhojvBV68fIy2",1,[[1,"obstacle_jumpable",["_name"],-1095],[2,["_lpos"],-1096,[1,-2,0,-12.559]],[2,["_lrot"],-1097,[3,0,0,0,1]],[2,["_euler"],-1098,[1,0,0,0]]]],[[20,["graphicNode"],-1094,[0,["854tChFohKeYSTZmJTQ80q"]]]],[-1093],3],[{},"mountedRoot",1,48]],[13,0,48,[29,"969XNiWY5HsaEzSoCn2x/3",-1106,[6,"0fOWJiSzRI6K9fyK+9B4t9",1,[[1,"obstacle_jumpable-001",["_name"],-1102],[2,["_lpos"],-1103,[1,2,0,-12.559]],[2,["_lrot"],-1104,[3,0,0,0,1]],[2,["_euler"],-1105,[1,0,0,0]]]],[[20,["graphicNode"],-1101,[0,["854tChFohKeYSTZmJTQ80q"]]]],[-1100],5],[{},"mountedRoot",1,48]],[13,0,4,[29,"969XNiWY5HsaEzSoCn2x/3",-1113,[6,"3caDjLqMlGMYbXlA2eUu4F",1,[[1,"obstacle_jumpable",["_name"],-1109],[2,["_lpos"],-1110,[1,0,0,-12.565]],[2,["_lrot"],-1111,[3,0,0,0,1]],[2,["_euler"],-1112,[1,0,0,0]]]],[[20,["graphicNode"],-1108,[0,["854tChFohKeYSTZmJTQ80q"]]]],[-1107],13],[{},"mountedRoot",1,4]],[13,0,5,[29,"969XNiWY5HsaEzSoCn2x/3",-1120,[6,"aaB99anF1PhrIyJrrWQ8lD",1,[[1,"obstacle_jumpable",["_name"],-1116],[2,["_lpos"],-1117,[1,-2,0,-10]],[2,["_lrot"],-1118,[3,0,0,0,1]],[2,["_euler"],-1119,[1,0,0,0]]]],[[20,["graphicNode"],-1115,[0,["854tChFohKeYSTZmJTQ80q"]]]],[-1114],81],[{},"mountedRoot",1,5]],[13,0,11,[29,"969XNiWY5HsaEzSoCn2x/3",-1127,[6,"f4OknoRjVO16AYo7QssoOq",1,[[1,"obstacle_jumpable",["_name"],-1123],[2,["_lpos"],-1124,[1,-2,0,-19.562]],[2,["_lrot"],-1125,[3,0,0,0,1]],[2,["_euler"],-1126,[1,0,0,0]]]],[[20,["graphicNode"],-1122,[0,["854tChFohKeYSTZmJTQ80q"]]]],[-1121],208],[{},"mountedRoot",1,11]],[13,0,6,[29,"969XNiWY5HsaEzSoCn2x/3",-1134,[6,"7ar55VDC1F6LrawwCU6Zug",1,[[1,"obstacle_jumpable",["_name"],-1130],[2,["_lpos"],-1131,[1,2,0,-10]],[2,["_lrot"],-1132,[3,0,0,0,1]],[2,["_euler"],-1133,[1,0,0,0]]]],[[20,["graphicNode"],-1129,[0,["854tChFohKeYSTZmJTQ80q"]]]],[-1128],216],[{},"mountedRoot",1,6]],[13,0,7,[29,"969XNiWY5HsaEzSoCn2x/3",-1141,[6,"7bWk+Us4tIQas1UpN/bnH6",1,[[1,"obstacle_jumpable",["_name"],-1137],[2,["_lpos"],-1138,[1,0,0,-17]],[2,["_lrot"],-1139,[3,0,0,0,1]],[2,["_euler"],-1140,[1,0,0,0]]]],[[20,["graphicNode"],-1136,[0,["854tChFohKeYSTZmJTQ80q"]]]],[-1135],284],[{},"mountedRoot",1,7]],[13,0,8,[29,"969XNiWY5HsaEzSoCn2x/3",-1148,[6,"6bChy7qupLLYSRr59/AuWg",1,[[1,"obstacle_jumpable",["_name"],-1144],[2,["_lpos"],-1145,[1,-2,0,-10]],[2,["_lrot"],-1146,[3,0,0,0,1]],[2,["_euler"],-1147,[1,0,0,0]]]],[[20,["graphicNode"],-1143,[0,["854tChFohKeYSTZmJTQ80q"]]]],[-1142],412],[{},"mountedRoot",1,8]],[13,0,9,[29,"969XNiWY5HsaEzSoCn2x/3",-1155,[6,"adU2tEiJtOPoZkT2cO5TlG",1,[[1,"obstacle_jumpable",["_name"],-1151],[2,["_lpos"],-1152,[1,2,0,-11]],[2,["_lrot"],-1153,[3,0,0,0,1]],[2,["_euler"],-1154,[1,0,0,0]]]],[[20,["graphicNode"],-1150,[0,["854tChFohKeYSTZmJTQ80q"]]]],[-1149],480],[{},"mountedRoot",1,9]],[13,0,2,[29,"969XNiWY5HsaEzSoCn2x/3",-1162,[6,"5bt4qH+UVGzL1R2brLYjg+",1,[[1,"obstacle_jumpable",["_name"],-1158],[2,["_lpos"],-1159,[1,0,0,-10]],[2,["_lrot"],-1160,[3,0,0,0,1]],[2,["_euler"],-1161,[1,0,0,0]]]],[[20,["graphicNode"],-1157,[0,["854tChFohKeYSTZmJTQ80q"]]]],[-1156],487],[{},"mountedRoot",1,2]],[13,0,10,[29,"969XNiWY5HsaEzSoCn2x/3",-1169,[6,"43czy7YKxJz7KCVPXn4cC8",1,[[1,"obstacle_jumpable",["_name"],-1165],[2,["_lpos"],-1166,[1,0,0,-13]],[2,["_lrot"],-1167,[3,0,0,0,1]],[2,["_euler"],-1168,[1,0,0,0]]]],[[20,["graphicNode"],-1164,[0,["854tChFohKeYSTZmJTQ80q"]]]],[-1163],741],[{},"mountedRoot",1,10]],[0,["7f7WjHcwRBCY/EdrI6zFjb"]],[0,["99XOIpw/tEtZYaNHTD56XL"]],[0,["99XOIpw/tEtZYaNHTD56XL"]],[0,["969XNiWY5HsaEzSoCn2x/3"]],[19,0,{},[18,"Parent",109,[-1175],[4,"12InrzwKdCEKrV07dQs4zX",null,null,null,1,0]],[10,"c1A9sG8V1OlqPhhySK/Coe",null,null,-1174,[6,"76om5tMkJAELdAAefMkO6v",109,[[1,"obstacle_graphic",["_name"],-1170],[2,["_lpos"],-1171,[1,0,0,0]],[2,["_lrot"],-1172,[3,0,0,0,1]],[2,["_euler"],-1173,[1,0,0,0]]]],4]],[0,["c1A9sG8V1OlqPhhySK/Coe"]],[0,["969XNiWY5HsaEzSoCn2x/3"]],[19,0,{},[18,"Parent",110,[-1181],[4,"12InrzwKdCEKrV07dQs4zX",null,null,null,1,0]],[10,"c1A9sG8V1OlqPhhySK/Coe",null,null,-1180,[6,"76om5tMkJAELdAAefMkO6v",110,[[1,"obstacle_graphic",["_name"],-1176],[2,["_lpos"],-1177,[1,0,0,0]],[2,["_lrot"],-1178,[3,0,0,0,1]],[2,["_euler"],-1179,[1,0,0,0]]]],6]],[0,["c1A9sG8V1OlqPhhySK/Coe"]],[0,["99XOIpw/tEtZYaNHTD56XL"]],[0,["99XOIpw/tEtZYaNHTD56XL"]],[0,["99XOIpw/tEtZYaNHTD56XL"]],[0,["99XOIpw/tEtZYaNHTD56XL"]],[0,["99XOIpw/tEtZYaNHTD56XL"]],[0,["969XNiWY5HsaEzSoCn2x/3"]],[19,0,{},[18,"Parent",111,[-1187],[4,"12InrzwKdCEKrV07dQs4zX",null,null,null,1,0]],[10,"c1A9sG8V1OlqPhhySK/Coe",null,null,-1186,[6,"76om5tMkJAELdAAefMkO6v",111,[[1,"obstacle_graphic",["_name"],-1182],[2,["_lpos"],-1183,[1,0,0,0]],[2,["_lrot"],-1184,[3,0,0,0,1]],[2,["_euler"],-1185,[1,0,0,0]]]],14]],[0,["c1A9sG8V1OlqPhhySK/Coe"]],[0,["969XNiWY5HsaEzSoCn2x/3"]],[0,["e892RDjrxNZISjs1LC/QQv"]],[0,["969XNiWY5HsaEzSoCn2x/3"]],[0,["e892RDjrxNZISjs1LC/QQv"]],[0,["7f7WjHcwRBCY/EdrI6zFjb"]],[0,["99XOIpw/tEtZYaNHTD56XL"]],[0,["99XOIpw/tEtZYaNHTD56XL"]],[0,["99XOIpw/tEtZYaNHTD56XL"]],[0,["99XOIpw/tEtZYaNHTD56XL"]],[0,["66Ba72ak1JOYCB5CSozCYH"]],[0,["969XNiWY5HsaEzSoCn2x/3"]],[19,0,{},[18,"Parent",112,[-1193],[4,"12InrzwKdCEKrV07dQs4zX",null,null,null,1,0]],[10,"c1A9sG8V1OlqPhhySK/Coe",null,null,-1192,[6,"76om5tMkJAELdAAefMkO6v",112,[[1,"obstacle_graphic",["_name"],-1188],[2,["_lpos"],-1189,[1,0,0,0]],[2,["_lrot"],-1190,[3,0,0,0,1]],[2,["_euler"],-1191,[1,0,0,0]]]],82]],[0,["c1A9sG8V1OlqPhhySK/Coe"]],[0,["969XNiWY5HsaEzSoCn2x/3"]],[0,["e892RDjrxNZISjs1LC/QQv"]],[0,["969XNiWY5HsaEzSoCn2x/3"]],[0,["e892RDjrxNZISjs1LC/QQv"]],[0,["7f7WjHcwRBCY/EdrI6zFjb"]],[0,["99XOIpw/tEtZYaNHTD56XL"]],[0,["99XOIpw/tEtZYaNHTD56XL"]],[0,["99XOIpw/tEtZYaNHTD56XL"]],[0,["99XOIpw/tEtZYaNHTD56XL"]],[0,["969XNiWY5HsaEzSoCn2x/3"]],[0,["e892RDjrxNZISjs1LC/QQv"]],[0,["969XNiWY5HsaEzSoCn2x/3"]],[0,["e892RDjrxNZISjs1LC/QQv"]],[0,["969XNiWY5HsaEzSoCn2x/3"]],[19,0,{},[18,"Parent",113,[-1199],[4,"12InrzwKdCEKrV07dQs4zX",null,null,null,1,0]],[10,"c1A9sG8V1OlqPhhySK/Coe",null,null,-1198,[6,"76om5tMkJAELdAAefMkO6v",113,[[1,"obstacle_graphic",["_name"],-1194],[2,["_lpos"],-1195,[1,0,0,0]],[2,["_lrot"],-1196,[3,0,0,0,1]],[2,["_euler"],-1197,[1,0,0,0]]]],209]],[0,["c1A9sG8V1OlqPhhySK/Coe"]],[0,["7f7WjHcwRBCY/EdrI6zFjb"]],[0,["99XOIpw/tEtZYaNHTD56XL"]],[0,["99XOIpw/tEtZYaNHTD56XL"]],[0,["99XOIpw/tEtZYaNHTD56XL"]],[0,["99XOIpw/tEtZYaNHTD56XL"]],[0,["66Ba72ak1JOYCB5CSozCYH"]],[0,["969XNiWY5HsaEzSoCn2x/3"]],[19,0,{},[18,"Parent",114,[-1205],[4,"12InrzwKdCEKrV07dQs4zX",null,null,null,1,0]],[10,"c1A9sG8V1OlqPhhySK/Coe",null,null,-1204,[6,"76om5tMkJAELdAAefMkO6v",114,[[1,"obstacle_graphic",["_name"],-1200],[2,["_lpos"],-1201,[1,0,0,0]],[2,["_lrot"],-1202,[3,0,0,0,1]],[2,["_euler"],-1203,[1,0,0,0]]]],217]],[0,["c1A9sG8V1OlqPhhySK/Coe"]],[0,["969XNiWY5HsaEzSoCn2x/3"]],[0,["e892RDjrxNZISjs1LC/QQv"]],[0,["969XNiWY5HsaEzSoCn2x/3"]],[0,["e892RDjrxNZISjs1LC/QQv"]],[0,["7f7WjHcwRBCY/EdrI6zFjb"]],[0,["99XOIpw/tEtZYaNHTD56XL"]],[0,["99XOIpw/tEtZYaNHTD56XL"]],[0,["99XOIpw/tEtZYaNHTD56XL"]],[0,["99XOIpw/tEtZYaNHTD56XL"]],[0,["99XOIpw/tEtZYaNHTD56XL"]],[0,["969XNiWY5HsaEzSoCn2x/3"]],[19,0,{},[18,"Parent",115,[-1211],[4,"12InrzwKdCEKrV07dQs4zX",null,null,null,1,0]],[10,"c1A9sG8V1OlqPhhySK/Coe",null,null,-1210,[6,"76om5tMkJAELdAAefMkO6v",115,[[1,"obstacle_graphic",["_name"],-1206],[2,["_lpos"],-1207,[1,0,0,0]],[2,["_lrot"],-1208,[3,0,0,0,1]],[2,["_euler"],-1209,[1,0,0,0]]]],285]],[0,["c1A9sG8V1OlqPhhySK/Coe"]],[0,["969XNiWY5HsaEzSoCn2x/3"]],[0,["e892RDjrxNZISjs1LC/QQv"]],[0,["969XNiWY5HsaEzSoCn2x/3"]],[0,["e892RDjrxNZISjs1LC/QQv"]],[0,["7f7WjHcwRBCY/EdrI6zFjb"]],[0,["99XOIpw/tEtZYaNHTD56XL"]],[0,["99XOIpw/tEtZYaNHTD56XL"]],[0,["99XOIpw/tEtZYaNHTD56XL"]],[0,["99XOIpw/tEtZYaNHTD56XL"]],[0,["66Ba72ak1JOYCB5CSozCYH"]],[0,["969XNiWY5HsaEzSoCn2x/3"]],[0,["e892RDjrxNZISjs1LC/QQv"]],[0,["969XNiWY5HsaEzSoCn2x/3"]],[0,["e892RDjrxNZISjs1LC/QQv"]],[0,["969XNiWY5HsaEzSoCn2x/3"]],[19,0,{},[18,"Parent",116,[-1217],[4,"12InrzwKdCEKrV07dQs4zX",null,null,null,1,0]],[10,"c1A9sG8V1OlqPhhySK/Coe",null,null,-1216,[6,"76om5tMkJAELdAAefMkO6v",116,[[1,"obstacle_graphic",["_name"],-1212],[2,["_lpos"],-1213,[1,0,0,0]],[2,["_lrot"],-1214,[3,0,0,0,1]],[2,["_euler"],-1215,[1,0,0,0]]]],413]],[0,["c1A9sG8V1OlqPhhySK/Coe"]],[0,["7f7WjHcwRBCY/EdrI6zFjb"]],[0,["99XOIpw/tEtZYaNHTD56XL"]],[0,["99XOIpw/tEtZYaNHTD56XL"]],[0,["99XOIpw/tEtZYaNHTD56XL"]],[0,["99XOIpw/tEtZYaNHTD56XL"]],[0,["66Ba72ak1JOYCB5CSozCYH"]],[0,["969XNiWY5HsaEzSoCn2x/3"]],[0,["e892RDjrxNZISjs1LC/QQv"]],[0,["969XNiWY5HsaEzSoCn2x/3"]],[0,["e892RDjrxNZISjs1LC/QQv"]],[0,["969XNiWY5HsaEzSoCn2x/3"]],[19,0,{},[18,"Parent",117,[-1223],[4,"12InrzwKdCEKrV07dQs4zX",null,null,null,1,0]],[10,"c1A9sG8V1OlqPhhySK/Coe",null,null,-1222,[6,"76om5tMkJAELdAAefMkO6v",117,[[1,"obstacle_graphic",["_name"],-1218],[2,["_lpos"],-1219,[1,0,0,0]],[2,["_lrot"],-1220,[3,0,0,0,1]],[2,["_euler"],-1221,[1,0,0,0]]]],481]],[0,["c1A9sG8V1OlqPhhySK/Coe"]],[0,["7f7WjHcwRBCY/EdrI6zFjb"]],[0,["99XOIpw/tEtZYaNHTD56XL"]],[0,["99XOIpw/tEtZYaNHTD56XL"]],[0,["99XOIpw/tEtZYaNHTD56XL"]],[0,["c3cWwkhP5He5dmsvAVgOFv"]],[0,["969XNiWY5HsaEzSoCn2x/3"]],[19,0,{},[18,"Parent",118,[-1229],[4,"12InrzwKdCEKrV07dQs4zX",null,null,null,1,0]],[10,"c1A9sG8V1OlqPhhySK/Coe",null,null,-1228,[6,"76om5tMkJAELdAAefMkO6v",118,[[1,"obstacle_graphic",["_name"],-1224],[2,["_lpos"],-1225,[1,0,0,0]],[2,["_lrot"],-1226,[3,0,0,0,1]],[2,["_euler"],-1227,[1,0,0,0]]]],488]],[0,["c1A9sG8V1OlqPhhySK/Coe"]],[0,["969XNiWY5HsaEzSoCn2x/3"]],[0,["e892RDjrxNZISjs1LC/QQv"]],[0,["969XNiWY5HsaEzSoCn2x/3"]],[0,["e892RDjrxNZISjs1LC/QQv"]],[0,["969XNiWY5HsaEzSoCn2x/3"]],[0,["e892RDjrxNZISjs1LC/QQv"]],[0,["969XNiWY5HsaEzSoCn2x/3"]],[0,["e892RDjrxNZISjs1LC/QQv"]],[0,["969XNiWY5HsaEzSoCn2x/3"]],[0,["e892RDjrxNZISjs1LC/QQv"]],[0,["969XNiWY5HsaEzSoCn2x/3"]],[0,["e892RDjrxNZISjs1LC/QQv"]],[0,["99XOIpw/tEtZYaNHTD56XL"]],[0,["7f7WjHcwRBCY/EdrI6zFjb"]],[0,["99XOIpw/tEtZYaNHTD56XL"]],[0,["99XOIpw/tEtZYaNHTD56XL"]],[0,["99XOIpw/tEtZYaNHTD56XL"]],[0,["66Ba72ak1JOYCB5CSozCYH"]],[0,["969XNiWY5HsaEzSoCn2x/3"]],[0,["e892RDjrxNZISjs1LC/QQv"]],[0,["969XNiWY5HsaEzSoCn2x/3"]],[0,["e892RDjrxNZISjs1LC/QQv"]],[0,["7f7WjHcwRBCY/EdrI6zFjb"]],[0,["99XOIpw/tEtZYaNHTD56XL"]],[0,["99XOIpw/tEtZYaNHTD56XL"]],[0,["99XOIpw/tEtZYaNHTD56XL"]],[0,["99XOIpw/tEtZYaNHTD56XL"]],[0,["99XOIpw/tEtZYaNHTD56XL"]],[0,["969XNiWY5HsaEzSoCn2x/3"]],[19,0,{},[18,"Parent",119,[-1235],[4,"12InrzwKdCEKrV07dQs4zX",null,null,null,1,0]],[10,"c1A9sG8V1OlqPhhySK/Coe",null,null,-1234,[6,"76om5tMkJAELdAAefMkO6v",119,[[1,"obstacle_graphic",["_name"],-1230],[2,["_lpos"],-1231,[1,0,0,0]],[2,["_lrot"],-1232,[3,0,0,0,1]],[2,["_euler"],-1233,[1,0,0,0]]]],742]],[0,["c1A9sG8V1OlqPhhySK/Coe"]],[0,["969XNiWY5HsaEzSoCn2x/3"]],[0,["e892RDjrxNZISjs1LC/QQv"]],[0,["969XNiWY5HsaEzSoCn2x/3"]],[0,["e892RDjrxNZISjs1LC/QQv"]],[0,["7f7WjHcwRBCY/EdrI6zFjb"]],[0,["99XOIpw/tEtZYaNHTD56XL"]],[0,["99XOIpw/tEtZYaNHTD56XL"]],[0,["99XOIpw/tEtZYaNHTD56XL"]],[0,["99XOIpw/tEtZYaNHTD56XL"]],[0,["99XOIpw/tEtZYaNHTD56XL"]],[0,["969XNiWY5HsaEzSoCn2x/3"]],[0,["e892RDjrxNZISjs1LC/QQv"]],[0,["969XNiWY5HsaEzSoCn2x/3"]],[0,["e892RDjrxNZISjs1LC/QQv"]],[0,["969XNiWY5HsaEzSoCn2x/3"]],[0,["e892RDjrxNZISjs1LC/QQv"]],[0,["969XNiWY5HsaEzSoCn2x/3"]],[0,["e892RDjrxNZISjs1LC/QQv"]],[0,["969XNiWY5HsaEzSoCn2x/3"]],[0,["e892RDjrxNZISjs1LC/QQv"]],[0,["969XNiWY5HsaEzSoCn2x/3"]],[0,["e892RDjrxNZISjs1LC/QQv"]],[0,["7f7WjHcwRBCY/EdrI6zFjb"]],[27,50,[7,"8fFvIyGEBFCqgGREWfd/YJ"],[18,19,20,21,22,23,24,25,26,27],[28,29,30,31,32,33,34,35,36,37]],[27,52,[7,"8fFvIyGEBFCqgGREWfd/YJ"],[48,49,50,51,52,53,54,55,56,57],[58,59,60,61,62,63,64,65,66,67]],[27,54,[7,"8fFvIyGEBFCqgGREWfd/YJ"],[86,87,88,89,90,91,92,93,94,95],[96,97,98,99,100,101,102,103,104,105]],[27,56,[7,"8fFvIyGEBFCqgGREWfd/YJ"],[116,117,118,119,120,121,122,123,124,125],[126,127,128,129,130,131,132,133,134,135]],[27,58,[7,"8fFvIyGEBFCqgGREWfd/YJ"],[151,152,153,154,155,156,157,158,159,160],[161,162,163,164,165,166,167,168,169,170]],[27,60,[7,"8fFvIyGEBFCqgGREWfd/YJ"],[181,182,183,184,185,186,187,188,189,190],[191,192,193,194,195,196,197,198,199,200]],[27,62,[7,"8fFvIyGEBFCqgGREWfd/YJ"],[221,222,223,224,225,226,227,228,229,230],[231,232,233,234,235,236,237,238,239,240]],[27,64,[7,"8fFvIyGEBFCqgGREWfd/YJ"],[251,252,253,254,255,256,257,258,259,260],[261,262,263,264,265,266,267,268,269,270]],[27,66,[7,"8fFvIyGEBFCqgGREWfd/YJ"],[289,290,291,292,293,294,295,296,297,298],[299,300,301,302,303,304,305,306,307,308]],[27,68,[7,"8fFvIyGEBFCqgGREWfd/YJ"],[319,320,321,322,323,324,325,326,327,328],[329,330,331,332,333,334,335,336,337,338]],[27,70,[7,"8fFvIyGEBFCqgGREWfd/YJ"],[355,356,357,358,359,360,361,362,363,364],[365,366,367,368,369,370,371,372,373,374]],[27,72,[7,"8fFvIyGEBFCqgGREWfd/YJ"],[385,386,387,388,389,390,391,392,393,394],[395,396,397,398,399,400,401,402,403,404]],[27,74,[7,"8fFvIyGEBFCqgGREWfd/YJ"],[423,424,425,426,427,428,429,430,431,432],[433,434,435,436,437,438,439,440,441,442]],[27,76,[7,"8fFvIyGEBFCqgGREWfd/YJ"],[453,454,455,456,457,458,459,460,461,462],[463,464,465,466,467,468,469,470,471,472]],[27,78,[7,"8fFvIyGEBFCqgGREWfd/YJ"],[492,493,494,495,496,497,498,499,500,501],[502,503,504,505,506,507,508,509,510,511]],[27,80,[7,"8fFvIyGEBFCqgGREWfd/YJ"],[522,523,524,525,526,527,528,529,530,531],[532,533,534,535,536,537,538,539,540,541]],[27,82,[7,"8fFvIyGEBFCqgGREWfd/YJ"],[552,553,554,555,556,557,558,559,560,561],[562,563,564,565,566,567,568,569,570,571]],[27,84,[7,"8fFvIyGEBFCqgGREWfd/YJ"],[582,583,584,585,586,587,588,589,590,591],[592,593,594,595,596,597,598,599,600,601]],[27,86,[7,"8fFvIyGEBFCqgGREWfd/YJ"],[612,613,614,615,616,617,618,619,620,621],[622,623,624,625,626,627,628,629,630,631]],[27,88,[7,"8fFvIyGEBFCqgGREWfd/YJ"],[642,643,644,645,646,647,648,649,650,651],[652,653,654,655,656,657,658,659,660,661]],[27,90,[7,"8fFvIyGEBFCqgGREWfd/YJ"],[678,679,680,681,682,683,684,685,686,687],[688,689,690,691,692,693,694,695,696,697]],[27,92,[7,"8fFvIyGEBFCqgGREWfd/YJ"],[708,709,710,711,712,713,714,715,716,717],[718,719,720,721,722,723,724,725,726,727]],[27,94,[7,"8fFvIyGEBFCqgGREWfd/YJ"],[746,747,748,749,750,751,752,753,754,755],[756,757,758,759,760,761,762,763,764,765]],[27,96,[7,"8fFvIyGEBFCqgGREWfd/YJ"],[776,777,778,779,780,781,782,783,784,785],[786,787,788,789,790,791,792,793,794,795]],[27,98,[7,"8fFvIyGEBFCqgGREWfd/YJ"],[812,813,814,815,816,817,818,819,820,821],[822,823,824,825,826,827,828,829,830,831]],[27,100,[7,"8fFvIyGEBFCqgGREWfd/YJ"],[842,843,844,845,846,847,848,849,850,851],[852,853,854,855,856,857,858,859,860,861]],[27,102,[7,"8fFvIyGEBFCqgGREWfd/YJ"],[872,873,874,875,876,877,878,879,880,881],[882,883,884,885,886,887,888,889,890,891]],[27,104,[7,"8fFvIyGEBFCqgGREWfd/YJ"],[902,903,904,905,906,907,908,909,910,911],[912,913,914,915,916,917,918,919,920,921]],[27,106,[7,"8fFvIyGEBFCqgGREWfd/YJ"],[932,933,934,935,936,937,938,939,940,941],[942,943,944,945,946,947,948,949,950,951]],[27,108,[7,"8fFvIyGEBFCqgGREWfd/YJ"],[962,963,964,965,966,967,968,969,970,971],[972,973,974,975,976,977,978,979,980,981]],[13,0,48,[10,"99XOIpw/tEtZYaNHTD56XL",null,null,-1236,[6,"5evAkL1yhLZYGE5EzN5RO1",1,[[1,"basic_collectible-002",["_name"],121],[2,["_lpos"],121,[1,0,1,-11]],[2,["_lrot"],121,[3,0,0,0,1]],[2,["_euler"],121,[1,0,0,0]],[17,["_lpos"],[0,["68kW3uhlJDxJxe3kV3iMqw"]],[1,0,0,-0.093]]]],1],[{},"mountedRoot",1,48]],[13,0,48,[10,"99XOIpw/tEtZYaNHTD56XL",null,null,-1237,[6,"0fYQT9cOpGiZ86aWGBE68h",1,[[1,"basic_collectible-004",["_name"],122],[2,["_lpos"],122,[1,0,1,-16]],[2,["_lrot"],122,[3,0,0,0,1]],[2,["_euler"],122,[1,0,0,0]],[17,["_lpos"],[0,["68kW3uhlJDxJxe3kV3iMqw"]],[1,0,0,-0.093]]]],2],[{},"mountedRoot",1,48]],[13,0,4,[10,"99XOIpw/tEtZYaNHTD56XL",null,null,-1238,[6,"5evAkL1yhLZYGE5EzN5RO1",1,[[1,"basic_collectible-002",["_name"],129],[2,["_lpos"],129,[1,0,1,-8]],[2,["_lrot"],129,[3,0,0,0,1]],[2,["_euler"],129,[1,0,0,0]],[17,["_lpos"],[0,["68kW3uhlJDxJxe3kV3iMqw"]],[1,0,0,0]]]],8],[{},"mountedRoot",1,4]],[13,0,4,[10,"99XOIpw/tEtZYaNHTD56XL",null,null,-1239,[6,"7ckgHJTgNJS5roXCexKNM2",1,[[1,"basic_collectible-003",["_name"],130],[2,["_lpos"],130,[1,0,2.5,-10]],[2,["_lrot"],130,[3,0,0,0,1]],[2,["_euler"],130,[1,0,0,0]],[17,["_lpos"],[0,["68kW3uhlJDxJxe3kV3iMqw"]],[1,0,0,0]]]],9],[{},"mountedRoot",1,4]],[13,0,4,[10,"99XOIpw/tEtZYaNHTD56XL",null,null,-1240,[6,"863JyS/ZZGWYr811i1+6WM",1,[[1,"basic_collectible-005",["_name"],131],[2,["_lpos"],131,[1,0,3.5,-12]],[2,["_lrot"],131,[3,0,0,0,1]],[2,["_euler"],131,[1,0,0,0]],[17,["_lpos"],[0,["68kW3uhlJDxJxe3kV3iMqw"]],[1,0,0,0]]]],10],[{},"mountedRoot",1,4]],[13,0,4,[10,"99XOIpw/tEtZYaNHTD56XL",null,null,-1241,[6,"bfG/E/KmZIC75jL1KwLSlg",1,[[1,"basic_collectible-006",["_name"],132],[2,["_lpos"],132,[1,0,2.5,-14]],[2,["_lrot"],132,[3,0,0,0,1]],[2,["_euler"],132,[1,0,0,0]],[17,["_lpos"],[0,["68kW3uhlJDxJxe3kV3iMqw"]],[1,0,0,0]]]],11],[{},"mountedRoot",1,4]],[13,0,4,[10,"99XOIpw/tEtZYaNHTD56XL",null,null,-1242,[6,"d5iKbNNg1MhK/C2J696ruP",1,[[1,"basic_collectible-008",["_name"],133],[2,["_lpos"],133,[1,0,1,-16]],[2,["_lrot"],133,[3,0,0,0,1]],[2,["_euler"],133,[1,0,0,0]],[17,["_lpos"],[0,["68kW3uhlJDxJxe3kV3iMqw"]],[1,0,0,0]]]],12],[{},"mountedRoot",1,4]],[28,"Quad<ModelComponent>",[22,"Quad",50,[-1243],[4,"e3hqu0HdxNq4e2nv3hKDvO",null,null,null,1,0],[1,0,1.45,0],[1,2.7,2.7,2.7]],[7,"3ew1Vo2adBpqZ739+OrPkj"],[17],[9]],[28,"Quad<ModelComponent>",[22,"Quad",52,[-1244],[4,"e3hqu0HdxNq4e2nv3hKDvO",null,null,null,1,0],[1,0,1.45,0],[1,2.7,2.7,2.7]],[7,"3ew1Vo2adBpqZ739+OrPkj"],[47],[9]],[13,0,5,[10,"99XOIpw/tEtZYaNHTD56XL",null,null,-1245,[6,"5evAkL1yhLZYGE5EzN5RO1",1,[[1,"basic_collectible-002",["_name"],142],[2,["_lpos"],142,[1,0,1,-4]],[2,["_lrot"],142,[3,0,0,0,1]],[2,["_euler"],142,[1,0,0,0]],[17,["_lpos"],[0,["68kW3uhlJDxJxe3kV3iMqw"]],[1,0,0,0]]]],76],[{},"mountedRoot",1,5]],[13,0,5,[10,"99XOIpw/tEtZYaNHTD56XL",null,null,-1246,[6,"0fYQT9cOpGiZ86aWGBE68h",1,[[1,"basic_collectible-004",["_name"],143],[2,["_lpos"],143,[1,1,1,-8]],[2,["_lrot"],143,[3,0,0,0,1]],[2,["_euler"],143,[1,0,0,0]],[17,["_lpos"],[0,["68kW3uhlJDxJxe3kV3iMqw"]],[1,0,0,0]]]],77],[{},"mountedRoot",1,5]],[13,0,5,[10,"99XOIpw/tEtZYaNHTD56XL",null,null,-1247,[6,"bfG/E/KmZIC75jL1KwLSlg",1,[[1,"basic_collectible-006",["_name"],144],[2,["_lpos"],144,[1,2,1,-12]],[2,["_lrot"],144,[3,0,0,0,1]],[2,["_euler"],144,[1,0,0,0]],[17,["_lpos"],[0,["68kW3uhlJDxJxe3kV3iMqw"]],[1,0,0,0]]]],78],[{},"mountedRoot",1,5]],[13,0,5,[10,"99XOIpw/tEtZYaNHTD56XL",null,null,-1248,[6,"37cRl01oVLVYo+aQP+wEth",1,[[1,"basic_collectible-009",["_name"],145],[2,["_lpos"],145,[1,0,1,-19]],[2,["_lrot"],145,[3,0,0,0,1]],[2,["_euler"],145,[1,0,0,0]],[17,["_lpos"],[0,["68kW3uhlJDxJxe3kV3iMqw"]],[1,0,0,0]]]],79],[{},"mountedRoot",1,5]],[28,"Quad<ModelComponent>",[22,"Quad",54,[-1249],[4,"e3hqu0HdxNq4e2nv3hKDvO",null,null,null,1,0],[1,0,1.45,0],[1,2.7,2.7,2.7]],[7,"3ew1Vo2adBpqZ739+OrPkj"],[85],[9]],[28,"Quad<ModelComponent>",[22,"Quad",56,[-1250],[4,"e3hqu0HdxNq4e2nv3hKDvO",null,null,null,1,0],[1,0,1.45,0],[1,2.7,2.7,2.7]],[7,"3ew1Vo2adBpqZ739+OrPkj"],[115],[9]],[13,0,11,[10,"99XOIpw/tEtZYaNHTD56XL",null,null,-1251,[6,"5evAkL1yhLZYGE5EzN5RO1",1,[[1,"basic_collectible-002",["_name"],155],[2,["_lpos"],155,[1,0,1,-4]],[2,["_lrot"],155,[3,0,0,0,1]],[2,["_euler"],155,[1,0,0,0]],[17,["_lpos"],[0,["68kW3uhlJDxJxe3kV3iMqw"]],[1,0,0,0]]]],144],[{},"mountedRoot",1,11]],[13,0,11,[10,"99XOIpw/tEtZYaNHTD56XL",null,null,-1252,[6,"0fYQT9cOpGiZ86aWGBE68h",1,[[1,"basic_collectible-004",["_name"],156],[2,["_lpos"],156,[1,-1,1,-8]],[2,["_lrot"],156,[3,0,0,0,1]],[2,["_euler"],156,[1,0,0,0]],[17,["_lpos"],[0,["68kW3uhlJDxJxe3kV3iMqw"]],[1,0,0,0]]]],145],[{},"mountedRoot",1,11]],[13,0,11,[10,"99XOIpw/tEtZYaNHTD56XL",null,null,-1253,[6,"37cRl01oVLVYo+aQP+wEth",1,[[1,"basic_collectible-009",["_name"],157],[2,["_lpos"],157,[1,0,1,-18]],[2,["_lrot"],157,[3,0,0,0,1]],[2,["_euler"],157,[1,0,0,0]],[17,["_lpos"],[0,["68kW3uhlJDxJxe3kV3iMqw"]],[1,0,0,0]]]],146],[{},"mountedRoot",1,11]],[13,0,11,[10,"99XOIpw/tEtZYaNHTD56XL",null,null,-1254,[6,"9cfAhBryJMzLS1lYAEsTdI",1,[[1,"basic_collectible-006",["_name"],158],[2,["_lpos"],158,[1,-2,1,-12]],[2,["_lrot"],158,[3,0,0,0,1]],[2,["_euler"],158,[1,0,0,0]],[17,["_lpos"],[0,["68kW3uhlJDxJxe3kV3iMqw"]],[1,0,0,0]]]],147],[{},"mountedRoot",1,11]],[28,"Quad<ModelComponent>",[22,"Quad",58,[-1255],[4,"e3hqu0HdxNq4e2nv3hKDvO",null,null,null,1,0],[1,0,1.45,0],[1,2.7,2.7,2.7]],[7,"3ew1Vo2adBpqZ739+OrPkj"],[150],[9]],[28,"Quad<ModelComponent>",[22,"Quad",60,[-1256],[4,"e3hqu0HdxNq4e2nv3hKDvO",null,null,null,1,0],[1,0,1.45,0],[1,2.7,2.7,2.7]],[7,"3ew1Vo2adBpqZ739+OrPkj"],[180],[9]],[13,0,6,[10,"99XOIpw/tEtZYaNHTD56XL",null,null,-1257,[6,"7ckgHJTgNJS5roXCexKNM2",1,[[1,"basic_collectible-003",["_name"],167],[2,["_lpos"],167,[1,2,1,-6]],[2,["_lrot"],167,[3,0,0,0,1]],[2,["_euler"],167,[1,0,0,0]],[17,["_lpos"],[0,["68kW3uhlJDxJxe3kV3iMqw"]],[1,0,0,0]]]],211],[{},"mountedRoot",1,6]],[13,0,6,[10,"99XOIpw/tEtZYaNHTD56XL",null,null,-1258,[6,"0fYQT9cOpGiZ86aWGBE68h",1,[[1,"basic_collectible-004",["_name"],168],[2,["_lpos"],168,[1,2,2.5,-8]],[2,["_lrot"],168,[3,0,0,0,1]],[2,["_euler"],168,[1,0,0,0]],[17,["_lpos"],[0,["68kW3uhlJDxJxe3kV3iMqw"]],[1,0,0,0]]]],212],[{},"mountedRoot",1,6]],[13,0,6,[10,"99XOIpw/tEtZYaNHTD56XL",null,null,-1259,[6,"3bxiW5Ai1NS4HMCRUH3aYi",1,[[1,"basic_collectible-007",["_name"],169],[2,["_lpos"],169,[1,2,1,-14]],[2,["_lrot"],169,[3,0,0,0,1]],[2,["_euler"],169,[1,0,0,0]],[17,["_lpos"],[0,["68kW3uhlJDxJxe3kV3iMqw"]],[1,0,0,0]]]],213],[{},"mountedRoot",1,6]],[13,0,6,[10,"99XOIpw/tEtZYaNHTD56XL",null,null,-1260,[6,"a0yWmTKklBlbXC7JGuMrDx",1,[[1,"basic_collectible-010",["_name"],170],[2,["_lpos"],170,[1,2,2.5,-12]],[2,["_lrot"],170,[3,0,0,0,1]],[2,["_euler"],170,[1,0,0,0]],[17,["_lpos"],[0,["68kW3uhlJDxJxe3kV3iMqw"]],[1,0,0,0]]]],214],[{},"mountedRoot",1,6]],[28,"Quad<ModelComponent>",[22,"Quad",62,[-1261],[4,"e3hqu0HdxNq4e2nv3hKDvO",null,null,null,1,0],[1,0,1.45,0],[1,2.7,2.7,2.7]],[7,"3ew1Vo2adBpqZ739+OrPkj"],[220],[9]],[28,"Quad<ModelComponent>",[22,"Quad",64,[-1262],[4,"e3hqu0HdxNq4e2nv3hKDvO",null,null,null,1,0],[1,0,1.45,0],[1,2.7,2.7,2.7]],[7,"3ew1Vo2adBpqZ739+OrPkj"],[250],[9]],[13,0,7,[10,"99XOIpw/tEtZYaNHTD56XL",null,null,-1263,[6,"5evAkL1yhLZYGE5EzN5RO1",1,[[1,"basic_collectible-002",["_name"],180],[2,["_lpos"],180,[1,2,1,-4]],[2,["_lrot"],180,[3,0,0,0,1]],[2,["_euler"],180,[1,0,0,0]],[17,["_lpos"],[0,["68kW3uhlJDxJxe3kV3iMqw"]],[1,0,0,0]]]],279],[{},"mountedRoot",1,7]],[13,0,7,[10,"99XOIpw/tEtZYaNHTD56XL",null,null,-1264,[6,"0fYQT9cOpGiZ86aWGBE68h",1,[[1,"basic_collectible-004",["_name"],181],[2,["_lpos"],181,[1,2,1,-7]],[2,["_lrot"],181,[3,0,0,0,1]],[2,["_euler"],181,[1,0,0,0]],[17,["_lpos"],[0,["68kW3uhlJDxJxe3kV3iMqw"]],[1,0,0,0]]]],280],[{},"mountedRoot",1,7]],[13,0,7,[10,"99XOIpw/tEtZYaNHTD56XL",null,null,-1265,[6,"863JyS/ZZGWYr811i1+6WM",1,[[1,"basic_collectible-005",["_name"],182],[2,["_lpos"],182,[1,0,1,-10]],[2,["_lrot"],182,[3,0,0,0,1]],[2,["_euler"],182,[1,0,0,0]],[17,["_lpos"],[0,["68kW3uhlJDxJxe3kV3iMqw"]],[1,0,0,0]]]],281],[{},"mountedRoot",1,7]],[13,0,7,[10,"99XOIpw/tEtZYaNHTD56XL",null,null,-1266,[6,"3bxiW5Ai1NS4HMCRUH3aYi",1,[[1,"basic_collectible-007",["_name"],183],[2,["_lpos"],183,[1,-2,1,-14]],[2,["_lrot"],183,[3,0,0,0,1]],[2,["_euler"],183,[1,0,0,0]],[17,["_lpos"],[0,["68kW3uhlJDxJxe3kV3iMqw"]],[1,0,0,0]]]],282],[{},"mountedRoot",1,7]],[13,0,7,[10,"99XOIpw/tEtZYaNHTD56XL",null,null,-1267,[6,"e5olwQDuJEGrkCO2KR2Jbk",1,[[1,"basic_collectible-009",["_name"],184],[2,["_lpos"],184,[1,-2,1,-18]],[2,["_lrot"],184,[3,0,0,0,1]],[2,["_euler"],184,[1,0,0,0]],[17,["_lpos"],[0,["68kW3uhlJDxJxe3kV3iMqw"]],[1,0,0,0]]]],283],[{},"mountedRoot",1,7]],[28,"Quad<ModelComponent>",[22,"Quad",66,[-1268],[4,"e3hqu0HdxNq4e2nv3hKDvO",null,null,null,1,0],[1,0,1.45,0],[1,2.7,2.7,2.7]],[7,"3ew1Vo2adBpqZ739+OrPkj"],[288],[9]],[28,"Quad<ModelComponent>",[22,"Quad",68,[-1269],[4,"e3hqu0HdxNq4e2nv3hKDvO",null,null,null,1,0],[1,0,1.45,0],[1,2.7,2.7,2.7]],[7,"3ew1Vo2adBpqZ739+OrPkj"],[318],[9]],[13,0,8,[10,"99XOIpw/tEtZYaNHTD56XL",null,null,-1270,[6,"7ckgHJTgNJS5roXCexKNM2",1,[[1,"basic_collectible-003",["_name"],193],[2,["_lpos"],193,[1,-2,1,-6]],[2,["_lrot"],193,[3,0,0,0,1]],[2,["_euler"],193,[1,0,0,0]],[17,["_lpos"],[0,["68kW3uhlJDxJxe3kV3iMqw"]],[1,0,0,0]]]],347],[{},"mountedRoot",1,8]],[13,0,8,[10,"99XOIpw/tEtZYaNHTD56XL",null,null,-1271,[6,"0fYQT9cOpGiZ86aWGBE68h",1,[[1,"basic_collectible-004",["_name"],194],[2,["_lpos"],194,[1,-2,2.5,-8]],[2,["_lrot"],194,[3,0,0,0,1]],[2,["_euler"],194,[1,0,0,0]],[17,["_lpos"],[0,["68kW3uhlJDxJxe3kV3iMqw"]],[1,0,0,0]]]],348],[{},"mountedRoot",1,8]],[13,0,8,[10,"99XOIpw/tEtZYaNHTD56XL",null,null,-1272,[6,"3bxiW5Ai1NS4HMCRUH3aYi",1,[[1,"basic_collectible-007",["_name"],195],[2,["_lpos"],195,[1,-2,1,-14]],[2,["_lrot"],195,[3,0,0,0,1]],[2,["_euler"],195,[1,0,0,0]],[17,["_lpos"],[0,["68kW3uhlJDxJxe3kV3iMqw"]],[1,0,0,0]]]],349],[{},"mountedRoot",1,8]],[13,0,8,[10,"99XOIpw/tEtZYaNHTD56XL",null,null,-1273,[6,"a0yWmTKklBlbXC7JGuMrDx",1,[[1,"basic_collectible-010",["_name"],196],[2,["_lpos"],196,[1,-2,2.5,-12]],[2,["_lrot"],196,[3,0,0,0,1]],[2,["_euler"],196,[1,0,0,0]],[17,["_lpos"],[0,["68kW3uhlJDxJxe3kV3iMqw"]],[1,0,0,0]]]],350],[{},"mountedRoot",1,8]],[28,"Quad<ModelComponent>",[22,"Quad",70,[-1274],[4,"e3hqu0HdxNq4e2nv3hKDvO",null,null,null,1,0],[1,0,1.45,0],[1,2.7,2.7,2.7]],[7,"3ew1Vo2adBpqZ739+OrPkj"],[354],[9]],[28,"Quad<ModelComponent>",[22,"Quad",72,[-1275],[4,"e3hqu0HdxNq4e2nv3hKDvO",null,null,null,1,0],[1,0,1.45,0],[1,2.7,2.7,2.7]],[7,"3ew1Vo2adBpqZ739+OrPkj"],[384],[9]],[13,0,9,[10,"99XOIpw/tEtZYaNHTD56XL",null,null,-1276,[6,"7ckgHJTgNJS5roXCexKNM2",1,[[1,"basic_collectible-003",["_name"],206],[2,["_lpos"],206,[1,2,1,-6]],[2,["_lrot"],206,[3,0,0,0,1]],[2,["_euler"],206,[1,0,0,0]],[17,["_lpos"],[0,["68kW3uhlJDxJxe3kV3iMqw"]],[1,0,0,0]]]],415],[{},"mountedRoot",1,9]],[13,0,9,[10,"99XOIpw/tEtZYaNHTD56XL",null,null,-1277,[6,"0fYQT9cOpGiZ86aWGBE68h",1,[[1,"basic_collectible-004",["_name"],207],[2,["_lpos"],207,[1,2,2.5,-8]],[2,["_lrot"],207,[3,0,0,0,1]],[2,["_euler"],207,[1,0,0,0]],[17,["_lpos"],[0,["68kW3uhlJDxJxe3kV3iMqw"]],[1,0,0,0]]]],416],[{},"mountedRoot",1,9]],[13,0,9,[10,"99XOIpw/tEtZYaNHTD56XL",null,null,-1278,[6,"3bxiW5Ai1NS4HMCRUH3aYi",1,[[1,"basic_collectible-007",["_name"],208],[2,["_lpos"],208,[1,2,1,-14]],[2,["_lrot"],208,[3,0,0,0,1]],[2,["_euler"],208,[1,0,0,0]],[17,["_lpos"],[0,["68kW3uhlJDxJxe3kV3iMqw"]],[1,0,0,0]]]],417],[{},"mountedRoot",1,9]],[13,0,9,[10,"99XOIpw/tEtZYaNHTD56XL",null,null,-1279,[6,"a0yWmTKklBlbXC7JGuMrDx",1,[[1,"basic_collectible-010",["_name"],209],[2,["_lpos"],209,[1,2,2.5,-12]],[2,["_lrot"],209,[3,0,0,0,1]],[2,["_euler"],209,[1,0,0,0]],[17,["_lpos"],[0,["68kW3uhlJDxJxe3kV3iMqw"]],[1,0,0,0]]]],418],[{},"mountedRoot",1,9]],[28,"Quad<ModelComponent>",[22,"Quad",74,[-1280],[4,"e3hqu0HdxNq4e2nv3hKDvO",null,null,null,1,0],[1,0,1.45,0],[1,2.7,2.7,2.7]],[7,"3ew1Vo2adBpqZ739+OrPkj"],[422],[9]],[28,"Quad<ModelComponent>",[22,"Quad",76,[-1281],[4,"e3hqu0HdxNq4e2nv3hKDvO",null,null,null,1,0],[1,0,1.45,0],[1,2.7,2.7,2.7]],[7,"3ew1Vo2adBpqZ739+OrPkj"],[452],[9]],[13,0,2,[10,"99XOIpw/tEtZYaNHTD56XL",null,null,-1282,[6,"7ckgHJTgNJS5roXCexKNM2",1,[[1,"basic_collectible-003",["_name"],219],[2,["_lpos"],219,[1,0,1,-6]],[2,["_lrot"],219,[3,0,0,0,1]],[2,["_euler"],219,[1,0,0,0]],[17,["_lpos"],[0,["68kW3uhlJDxJxe3kV3iMqw"]],[1,0,0,0]]]],483],[{},"mountedRoot",1,2]],[13,0,2,[10,"99XOIpw/tEtZYaNHTD56XL",null,null,-1283,[6,"0fYQT9cOpGiZ86aWGBE68h",1,[[1,"basic_collectible-004",["_name"],220],[2,["_lpos"],220,[1,0,2.5,-8]],[2,["_lrot"],220,[3,0,0,0,1]],[2,["_euler"],220,[1,0,0,0]],[17,["_lpos"],[0,["68kW3uhlJDxJxe3kV3iMqw"]],[1,0,0,0]]]],484],[{},"mountedRoot",1,2]],[13,0,2,[10,"99XOIpw/tEtZYaNHTD56XL",null,null,-1284,[6,"3bxiW5Ai1NS4HMCRUH3aYi",1,[[1,"basic_collectible-007",["_name"],221],[2,["_lpos"],221,[1,0,1,-14]],[2,["_lrot"],221,[3,0,0,0,1]],[2,["_euler"],221,[1,0,0,0]],[17,["_lpos"],[0,["68kW3uhlJDxJxe3kV3iMqw"]],[1,0,0,0]]]],485],[{},"mountedRoot",1,2]],[13,0,2,[10,"c3cWwkhP5He5dmsvAVgOFv",null,null,-1285,[6,"4eokJMxrpPG5h8cQpcqoc7",1,[[1,"power_up-001",["_name"],222],[2,["_lpos"],222,[1,0,3.5,-10]],[2,["_lrot"],222,[3,0,0,0,1]],[2,["_euler"],222,[1,0,0,0]]]],486],[{},"mountedRoot",1,2]],[28,"Quad<ModelComponent>",[22,"Quad",78,[-1286],[4,"e3hqu0HdxNq4e2nv3hKDvO",null,null,null,1,0],[1,0,1.45,0],[1,2.7,2.7,2.7]],[7,"3ew1Vo2adBpqZ739+OrPkj"],[491],[9]],[28,"Quad<ModelComponent>",[22,"Quad",80,[-1287],[4,"e3hqu0HdxNq4e2nv3hKDvO",null,null,null,1,0],[1,0,1.45,0],[1,2.7,2.7,2.7]],[7,"3ew1Vo2adBpqZ739+OrPkj"],[521],[9]],[28,"Quad<ModelComponent>",[22,"Quad",82,[-1288],[4,"e3hqu0HdxNq4e2nv3hKDvO",null,null,null,1,0],[1,0,1.45,0],[1,2.7,2.7,2.7]],[7,"3ew1Vo2adBpqZ739+OrPkj"],[551],[9]],[28,"Quad<ModelComponent>",[22,"Quad",84,[-1289],[4,"e3hqu0HdxNq4e2nv3hKDvO",null,null,null,1,0],[1,0,1.45,0],[1,2.7,2.7,2.7]],[7,"3ew1Vo2adBpqZ739+OrPkj"],[581],[9]],[28,"Quad<ModelComponent>",[22,"Quad",86,[-1290],[4,"e3hqu0HdxNq4e2nv3hKDvO",null,null,null,1,0],[1,0,1.45,0],[1,2.7,2.7,2.7]],[7,"3ew1Vo2adBpqZ739+OrPkj"],[611],[9]],[28,"Quad<ModelComponent>",[22,"Quad",88,[-1291],[4,"e3hqu0HdxNq4e2nv3hKDvO",null,null,null,1,0],[1,0,1.45,0],[1,2.7,2.7,2.7]],[7,"3ew1Vo2adBpqZ739+OrPkj"],[641],[9]],[13,0,2,[10,"99XOIpw/tEtZYaNHTD56XL",null,null,-1292,[6,"62WkNDd+pLvYcHeWwxurgQ",1,[[1,"basic_collectible-005",["_name"],238],[2,["_lpos"],238,[1,0,2.5,-12]],[2,["_lrot"],238,[3,0,0,0,1]],[2,["_euler"],238,[1,0,0,0]],[17,["_lpos"],[0,["68kW3uhlJDxJxe3kV3iMqw"]],[1,0,0,0]]]],669],[{},"mountedRoot",1,2]],[13,0,12,[10,"99XOIpw/tEtZYaNHTD56XL",null,null,-1293,[6,"5evAkL1yhLZYGE5EzN5RO1",1,[[1,"basic_collectible-002",["_name"],240],[2,["_lpos"],240,[1,0,1,-4]],[2,["_lrot"],240,[3,0,0,0,1]],[2,["_euler"],240,[1,0,0,0]],[17,["_lpos"],[0,["68kW3uhlJDxJxe3kV3iMqw"]],[1,0,0,0]]]],671],[{},"mountedRoot",1,12]],[13,0,12,[10,"99XOIpw/tEtZYaNHTD56XL",null,null,-1294,[6,"d5iKbNNg1MhK/C2J696ruP",1,[[1,"basic_collectible-008",["_name"],241],[2,["_lpos"],241,[1,-2,1,-14]],[2,["_lrot"],241,[3,0,0,0,1]],[2,["_euler"],241,[1,0,0,0]],[17,["_lpos"],[0,["68kW3uhlJDxJxe3kV3iMqw"]],[1,0,0,0]]]],672],[{},"mountedRoot",1,12]],[13,0,12,[10,"99XOIpw/tEtZYaNHTD56XL",null,null,-1295,[6,"a0yWmTKklBlbXC7JGuMrDx",1,[[1,"basic_collectible-010",["_name"],242],[2,["_lpos"],242,[1,-2,1,-10]],[2,["_lrot"],242,[3,0,0,0,1]],[2,["_euler"],242,[1,0,0,0]],[17,["_lpos"],[0,["68kW3uhlJDxJxe3kV3iMqw"]],[1,0,0,0]]]],673],[{},"mountedRoot",1,12]],[28,"Quad<ModelComponent>",[22,"Quad",90,[-1296],[4,"e3hqu0HdxNq4e2nv3hKDvO",null,null,null,1,0],[1,0,1.45,0],[1,2.7,2.7,2.7]],[7,"3ew1Vo2adBpqZ739+OrPkj"],[677],[9]],[28,"Quad<ModelComponent>",[22,"Quad",92,[-1297],[4,"e3hqu0HdxNq4e2nv3hKDvO",null,null,null,1,0],[1,0,1.45,0],[1,2.7,2.7,2.7]],[7,"3ew1Vo2adBpqZ739+OrPkj"],[707],[9]],[13,0,10,[10,"99XOIpw/tEtZYaNHTD56XL",null,null,-1298,[6,"5evAkL1yhLZYGE5EzN5RO1",1,[[1,"basic_collectible-002",["_name"],249],[2,["_lpos"],249,[1,-2,1,-3]],[2,["_lrot"],249,[3,0,0,0,1]],[2,["_euler"],249,[1,0,0,0]],[17,["_lpos"],[0,["68kW3uhlJDxJxe3kV3iMqw"]],[1,0,0,0]]]],736],[{},"mountedRoot",1,10]],[13,0,10,[10,"99XOIpw/tEtZYaNHTD56XL",null,null,-1299,[6,"d5iKbNNg1MhK/C2J696ruP",1,[[1,"basic_collectible-008",["_name"],250],[2,["_lpos"],250,[1,2,1,-11]],[2,["_lrot"],250,[3,0,0,0,1]],[2,["_euler"],250,[1,0,0,0]],[17,["_lpos"],[0,["68kW3uhlJDxJxe3kV3iMqw"]],[1,0,0,0]]]],737],[{},"mountedRoot",1,10]],[13,0,10,[10,"99XOIpw/tEtZYaNHTD56XL",null,null,-1300,[6,"a0yWmTKklBlbXC7JGuMrDx",1,[[1,"basic_collectible-010",["_name"],251],[2,["_lpos"],251,[1,0,1,-7]],[2,["_lrot"],251,[3,0,0,0,1]],[2,["_euler"],251,[1,0,0,0]],[17,["_lpos"],[0,["68kW3uhlJDxJxe3kV3iMqw"]],[1,0,0,0]]]],738],[{},"mountedRoot",1,10]],[13,0,10,[10,"99XOIpw/tEtZYaNHTD56XL",null,null,-1301,[6,"f6BizgzwdE/ZitfKjcum4g",1,[[1,"basic_collectible-012",["_name"],252],[2,["_lpos"],252,[1,0,1,-17]],[2,["_lrot"],252,[3,0,0,0,1]],[2,["_euler"],252,[1,0,0,0]],[17,["_lpos"],[0,["68kW3uhlJDxJxe3kV3iMqw"]],[1,0,0,0]]]],739],[{},"mountedRoot",1,10]],[13,0,10,[10,"99XOIpw/tEtZYaNHTD56XL",null,null,-1302,[6,"6f37Y4iapFnrmZr3HMKk4W",1,[[1,"basic_collectible-013",["_name"],253],[2,["_lpos"],253,[1,0,1,-21]],[2,["_lrot"],253,[3,0,0,0,1]],[2,["_euler"],253,[1,0,0,0]],[17,["_lpos"],[0,["68kW3uhlJDxJxe3kV3iMqw"]],[1,0,0,0]]]],740],[{},"mountedRoot",1,10]],[28,"Quad<ModelComponent>",[22,"Quad",94,[-1303],[4,"e3hqu0HdxNq4e2nv3hKDvO",null,null,null,1,0],[1,0,1.45,0],[1,2.7,2.7,2.7]],[7,"3ew1Vo2adBpqZ739+OrPkj"],[745],[9]],[28,"Quad<ModelComponent>",[22,"Quad",96,[-1304],[4,"e3hqu0HdxNq4e2nv3hKDvO",null,null,null,1,0],[1,0,1.45,0],[1,2.7,2.7,2.7]],[7,"3ew1Vo2adBpqZ739+OrPkj"],[775],[9]],[13,0,3,[10,"99XOIpw/tEtZYaNHTD56XL",null,null,-1305,[6,"a0yWmTKklBlbXC7JGuMrDx",1,[[1,"basic_collectible-010",["_name"],262],[2,["_lpos"],262,[1,0,1,-5]],[2,["_lrot"],262,[3,0,0,0,1]],[2,["_euler"],262,[1,0,0,0]],[17,["_lpos"],[0,["68kW3uhlJDxJxe3kV3iMqw"]],[1,0,0,0]]]],804],[{},"mountedRoot",1,3]],[13,0,3,[10,"99XOIpw/tEtZYaNHTD56XL",null,null,-1306,[6,"09PjSBleBJ76SehVYJQSUG",1,[[1,"basic_collectible-011",["_name"],263],[2,["_lpos"],263,[1,0,1,-13]],[2,["_lrot"],263,[3,0,0,0,1]],[2,["_euler"],263,[1,0,0,0]],[17,["_lpos"],[0,["68kW3uhlJDxJxe3kV3iMqw"]],[1,0,0,0]]]],805],[{},"mountedRoot",1,3]],[13,0,3,[10,"99XOIpw/tEtZYaNHTD56XL",null,null,-1307,[6,"13BgNrO/hFA7S6MkZsZoDP",1,[[1,"basic_collectible-008",["_name"],264],[2,["_lpos"],264,[1,0,1,-9]],[2,["_lrot"],264,[3,0,0,0,1]],[2,["_euler"],264,[1,0,0,0]],[17,["_lpos"],[0,["68kW3uhlJDxJxe3kV3iMqw"]],[1,0,0,0]]]],806],[{},"mountedRoot",1,3]],[13,0,3,[10,"99XOIpw/tEtZYaNHTD56XL",null,null,-1308,[6,"927InVE0FFOb1WaKQi7NGb",1,[[1,"basic_collectible-013",["_name"],265],[2,["_lpos"],265,[1,0,1,-17]],[2,["_lrot"],265,[3,0,0,0,1]],[2,["_euler"],265,[1,0,0,0]],[17,["_lpos"],[0,["68kW3uhlJDxJxe3kV3iMqw"]],[1,0,0,0]]]],807],[{},"mountedRoot",1,3]],[13,0,3,[10,"99XOIpw/tEtZYaNHTD56XL",null,null,-1309,[6,"6b+SMsyHdBmYORnOLBXCy0",1,[[1,"basic_collectible-014",["_name"],266],[2,["_lpos"],266,[1,0,1,-21]],[2,["_lrot"],266,[3,0,0,0,1]],[2,["_euler"],266,[1,0,0,0]],[17,["_lpos"],[0,["68kW3uhlJDxJxe3kV3iMqw"]],[1,0,0,0]]]],808],[{},"mountedRoot",1,3]],[28,"Quad<ModelComponent>",[22,"Quad",98,[-1310],[4,"e3hqu0HdxNq4e2nv3hKDvO",null,null,null,1,0],[1,0,1.45,0],[1,2.7,2.7,2.7]],[7,"3ew1Vo2adBpqZ739+OrPkj"],[811],[9]],[28,"Quad<ModelComponent>",[22,"Quad",100,[-1311],[4,"e3hqu0HdxNq4e2nv3hKDvO",null,null,null,1,0],[1,0,1.45,0],[1,2.7,2.7,2.7]],[7,"3ew1Vo2adBpqZ739+OrPkj"],[841],[9]],[28,"Quad<ModelComponent>",[22,"Quad",102,[-1312],[4,"e3hqu0HdxNq4e2nv3hKDvO",null,null,null,1,0],[1,0,1.45,0],[1,2.7,2.7,2.7]],[7,"3ew1Vo2adBpqZ739+OrPkj"],[871],[9]],[28,"Quad<ModelComponent>",[22,"Quad",104,[-1313],[4,"e3hqu0HdxNq4e2nv3hKDvO",null,null,null,1,0],[1,0,1.45,0],[1,2.7,2.7,2.7]],[7,"3ew1Vo2adBpqZ739+OrPkj"],[901],[9]],[28,"Quad<ModelComponent>",[22,"Quad",106,[-1314],[4,"e3hqu0HdxNq4e2nv3hKDvO",null,null,null,1,0],[1,0,1.45,0],[1,2.7,2.7,2.7]],[7,"3ew1Vo2adBpqZ739+OrPkj"],[931],[9]],[28,"Quad<ModelComponent>",[22,"Quad",108,[-1315],[4,"e3hqu0HdxNq4e2nv3hKDvO",null,null,null,1,0],[1,0,1.45,0],[1,2.7,2.7,2.7]],[7,"3ew1Vo2adBpqZ739+OrPkj"],[961],[9]]],0,[0,-1,3,0,-2,10,0,-3,12,0,-4,2,0,-5,9,0,-6,8,0,-7,7,0,-8,6,0,-9,11,0,-10,5,0,-11,4,0,-12,48,0,3,20,0,5,20,0,3,20,0,5,20,0,3,20,0,5,20,0,3,20,0,5,20,0,3,20,0,5,20,0,3,20,0,5,20,0,3,25,0,5,25,0,3,25,0,5,25,0,3,25,0,5,25,0,3,25,0,5,25,0,3,25,0,5,25,0,3,25,0,5,25,0,3,28,0,5,28,0,3,28,0,5,28,0,3,28,0,5,28,0,3,28,0,5,28,0,3,28,0,5,28,0,3,28,0,5,28,0,3,37,0,5,37,0,3,37,0,5,37,0,3,37,0,5,37,0,3,37,0,5,37,0,3,37,0,5,37,0,3,37,0,5,37,0,3,15,0,5,15,0,3,15,0,5,15,0,3,15,0,5,15,0,3,15,0,5,15,0,3,15,0,5,15,0,3,15,0,5,15,0,3,51,0,5,51,0,3,51,0,5,51,0,3,49,0,5,49,0,3,49,0,5,49,0,3,53,0,5,53,0,3,53,0,5,53,0,3,55,0,5,55,0,3,55,0,5,55,0,3,59,0,5,59,0,3,59,0,5,59,0,3,61,0,5,61,0,3,61,0,5,61,0,3,63,0,5,63,0,3,63,0,5,63,0,3,65,0,5,65,0,3,65,0,5,65,0,3,67,0,5,67,0,3,67,0,5,67,0,3,69,0,5,69,0,3,69,0,5,69,0,3,71,0,5,71,0,3,71,0,5,71,0,3,75,0,5,75,0,3,75,0,5,75,0,3,73,0,5,73,0,3,73,0,5,73,0,3,77,0,5,77,0,3,77,0,5,77,0,3,79,0,5,79,0,3,79,0,5,79,0,3,81,0,5,81,0,3,81,0,5,81,0,3,83,0,5,83,0,3,83,0,5,83,0,3,85,0,5,85,0,3,85,0,5,85,0,3,87,0,5,87,0,3,87,0,5,87,0,3,89,0,5,89,0,3,89,0,5,89,0,3,91,0,5,91,0,3,91,0,5,91,0,3,93,0,5,93,0,3,93,0,5,93,0,3,95,0,5,95,0,3,95,0,5,95,0,3,97,0,5,97,0,3,97,0,5,97,0,3,99,0,5,99,0,3,99,0,5,99,0,3,101,0,5,101,0,3,101,0,5,101,0,3,103,0,5,103,0,3,103,0,5,103,0,3,105,0,5,105,0,3,105,0,5,105,0,3,107,0,5,107,0,3,107,0,5,107,0,3,57,0,5,57,0,3,57,0,5,57,0,3,109,0,5,109,0,3,109,0,5,109,0,3,110,0,5,110,0,3,110,0,5,110,0,3,111,0,5,111,0,3,111,0,5,111,0,3,49,0,5,49,0,3,51,0,5,51,0,3,112,0,5,112,0,3,112,0,5,112,0,3,53,0,5,53,0,3,55,0,5,55,0,3,57,0,5,57,0,3,59,0,5,59,0,3,113,0,5,113,0,3,113,0,5,113,0,3,114,0,5,114,0,3,114,0,5,114,0,3,61,0,5,61,0,3,63,0,5,63,0,3,115,0,5,115,0,3,115,0,5,115,0,3,65,0,5,65,0,3,67,0,5,67,0,3,69,0,5,69,0,3,71,0,5,71,0,3,116,0,5,116,0,3,116,0,5,116,0,3,117,0,5,117,0,3,117,0,5,117,0,3,75,0,5,75,0,3,73,0,5,73,0,3,118,0,5,118,0,3,118,0,5,118,0,3,77,0,5,77,0,3,79,0,5,79,0,3,81,0,5,81,0,3,83,0,5,83,0,3,85,0,5,85,0,3,87,0,5,87,0,3,89,0,5,89,0,3,91,0,5,91,0,3,119,0,5,119,0,3,119,0,5,119,0,3,93,0,5,93,0,3,95,0,5,95,0,3,97,0,5,97,0,3,99,0,5,99,0,3,101,0,5,101,0,3,103,0,5,103,0,3,105,0,5,105,0,3,107,0,5,107,0,4,1,0,2,1,0,-1,48,0,-2,4,0,-3,5,0,-4,11,0,-5,6,0,-6,7,0,-7,8,0,-8,9,0,-9,2,0,-10,12,0,-11,10,0,-12,3,0,1,239,0,1,239,0,1,239,0,1,239,0,-1,356,0,-2,357,0,-3,358,0,-4,359,0,-5,118,0,-6,77,0,-7,79,0,-8,81,0,-9,83,0,-10,85,0,-11,87,0,-12,366,0,4,2,0,1,279,0,1,279,0,1,279,0,1,279,0,-1,379,0,-2,380,0,-3,381,0,-4,382,0,-5,383,0,-6,97,0,-7,99,0,-8,101,0,-9,103,0,-10,105,0,-11,107,0,4,3,0,1,141,0,1,141,0,1,141,0,1,141,0,-1,312,0,-2,313,0,-3,314,0,-4,315,0,-5,316,0,-6,111,0,-7,49,0,-8,51,0,4,4,0,1,154,0,1,154,0,1,154,0,1,154,0,-1,319,0,-2,320,0,-3,321,0,-4,322,0,-5,15,0,-6,112,0,-7,53,0,-8,55,0,4,5,0,1,179,0,1,179,0,1,179,0,1,179,0,-1,331,0,-2,332,0,-3,333,0,-4,334,0,-5,20,0,-6,114,0,-7,61,0,-8,63,0,4,6,0,1,192,0,1,192,0,1,192,0,1,192,0,-1,337,0,-2,338,0,-3,339,0,-4,340,0,-5,341,0,-6,115,0,-7,65,0,-8,67,0,4,7,0,1,205,0,1,205,0,1,205,0,1,205,0,-1,344,0,-2,345,0,-3,346,0,-4,347,0,-5,25,0,-6,69,0,-7,71,0,-8,116,0,4,8,0,1,218,0,1,218,0,1,218,0,1,218,0,-1,350,0,-2,351,0,-3,352,0,-4,353,0,-5,28,0,-6,73,0,-7,75,0,-8,117,0,4,9,0,1,261,0,1,261,0,1,261,0,1,261,0,-1,372,0,-2,373,0,-3,374,0,-4,375,0,-5,376,0,-6,119,0,-7,93,0,-8,95,0,4,10,0,1,166,0,1,166,0,1,166,0,1,166,0,-1,325,0,-2,326,0,-3,327,0,-4,328,0,-5,57,0,-6,59,0,-7,113,0,4,11,0,1,248,0,1,248,0,1,248,0,1,248,0,-1,367,0,-2,368,0,-3,369,0,-4,37,0,-5,89,0,-6,91,0,4,12,0,1,146,0,1,146,0,1,146,0,1,146,0,4,15,0,1,171,0,1,171,0,1,171,0,1,171,0,4,20,0,1,197,0,1,197,0,1,197,0,1,197,0,4,25,0,1,210,0,1,210,0,1,210,0,1,210,0,4,28,0,1,243,0,1,243,0,1,243,0,1,243,0,4,37,0,1,120,0,1,120,0,1,120,0,1,120,0,1,120,0,-1,310,0,-2,311,0,-3,109,0,-4,110,0,4,48,0,-1,50,0,3,50,0,5,50,0,3,50,0,3,50,0,5,280,0,3,50,0,5,280,0,1,137,0,1,137,0,1,137,0,1,137,0,4,49,0,1,138,0,1,138,0,1,138,0,1,138,0,-1,280,0,4,50,0,-1,50,0,-1,52,0,3,52,0,5,52,0,3,52,0,3,52,0,5,281,0,3,52,0,5,281,0,1,139,0,1,139,0,1,139,0,1,139,0,4,51,0,1,140,0,1,140,0,1,140,0,1,140,0,-1,281,0,4,52,0,-1,52,0,-1,54,0,3,54,0,5,54,0,3,54,0,3,54,0,5,282,0,3,54,0,5,282,0,1,150,0,1,150,0,1,150,0,1,150,0,4,53,0,1,151,0,1,151,0,1,151,0,1,151,0,-1,282,0,4,54,0,-1,54,0,-1,56,0,3,56,0,5,56,0,3,56,0,3,56,0,5,283,0,3,56,0,5,283,0,1,152,0,1,152,0,1,152,0,1,152,0,4,55,0,1,153,0,1,153,0,1,153,0,1,153,0,-1,283,0,4,56,0,-1,56,0,-1,58,0,3,58,0,5,58,0,3,58,0,3,58,0,5,284,0,3,58,0,5,284,0,1,159,0,1,159,0,1,159,0,1,159,0,4,57,0,1,160,0,1,160,0,1,160,0,1,160,0,-1,284,0,4,58,0,-1,58,0,-1,60,0,3,60,0,5,60,0,3,60,0,3,60,0,5,285,0,3,60,0,5,285,0,1,161,0,1,161,0,1,161,0,1,161,0,4,59,0,1,162,0,1,162,0,1,162,0,1,162,0,-1,285,0,4,60,0,-1,60,0,-1,62,0,3,62,0,5,62,0,3,62,0,3,62,0,5,286,0,3,62,0,5,286,0,1,175,0,1,175,0,1,175,0,1,175,0,4,61,0,1,176,0,1,176,0,1,176,0,1,176,0,-1,286,0,4,62,0,-1,62,0,-1,64,0,3,64,0,5,64,0,3,64,0,3,64,0,5,287,0,3,64,0,5,287,0,1,177,0,1,177,0,1,177,0,1,177,0,4,63,0,1,178,0,1,178,0,1,178,0,1,178,0,-1,287,0,4,64,0,-1,64,0,-1,66,0,3,66,0,5,66,0,3,66,0,3,66,0,5,288,0,3,66,0,5,288,0,1,188,0,1,188,0,1,188,0,1,188,0,4,65,0,1,189,0,1,189,0,1,189,0,1,189,0,-1,288,0,4,66,0,-1,66,0,-1,68,0,3,68,0,5,68,0,3,68,0,3,68,0,5,289,0,3,68,0,5,289,0,1,190,0,1,190,0,1,190,0,1,190,0,4,67,0,1,191,0,1,191,0,1,191,0,1,191,0,-1,289,0,4,68,0,-1,68,0,-1,70,0,3,70,0,5,70,0,3,70,0,3,70,0,5,290,0,3,70,0,5,290,0,1,198,0,1,198,0,1,198,0,1,198,0,4,69,0,1,199,0,1,199,0,1,199,0,1,199,0,-1,290,0,4,70,0,-1,70,0,-1,72,0,3,72,0,5,72,0,3,72,0,3,72,0,5,291,0,3,72,0,5,291,0,1,200,0,1,200,0,1,200,0,1,200,0,4,71,0,1,201,0,1,201,0,1,201,0,1,201,0,-1,291,0,4,72,0,-1,72,0,-1,74,0,3,74,0,5,74,0,3,74,0,3,74,0,5,292,0,3,74,0,5,292,0,1,211,0,1,211,0,1,211,0,1,211,0,4,73,0,1,212,0,1,212,0,1,212,0,1,212,0,-1,292,0,4,74,0,-1,74,0,-1,76,0,3,76,0,5,76,0,3,76,0,3,76,0,5,293,0,3,76,0,5,293,0,1,213,0,1,213,0,1,213,0,1,213,0,4,75,0,1,214,0,1,214,0,1,214,0,1,214,0,-1,293,0,4,76,0,-1,76,0,-1,78,0,3,78,0,5,78,0,3,78,0,3,78,0,5,294,0,3,78,0,5,294,0,1,226,0,1,226,0,1,226,0,1,226,0,4,77,0,1,227,0,1,227,0,1,227,0,1,227,0,-1,294,0,4,78,0,-1,78,0,-1,80,0,3,80,0,5,80,0,3,80,0,3,80,0,5,295,0,3,80,0,5,295,0,1,228,0,1,228,0,1,228,0,1,228,0,4,79,0,1,229,0,1,229,0,1,229,0,1,229,0,-1,295,0,4,80,0,-1,80,0,-1,82,0,3,82,0,5,82,0,3,82,0,3,82,0,5,296,0,3,82,0,5,296,0,1,230,0,1,230,0,1,230,0,1,230,0,4,81,0,1,231,0,1,231,0,1,231,0,1,231,0,-1,296,0,4,82,0,-1,82,0,-1,84,0,3,84,0,5,84,0,3,84,0,3,84,0,5,297,0,3,84,0,5,297,0,1,232,0,1,232,0,1,232,0,1,232,0,4,83,0,1,233,0,1,233,0,1,233,0,1,233,0,-1,297,0,4,84,0,-1,84,0,-1,86,0,3,86,0,5,86,0,3,86,0,3,86,0,5,298,0,3,86,0,5,298,0,1,234,0,1,234,0,1,234,0,1,234,0,4,85,0,1,235,0,1,235,0,1,235,0,1,235,0,-1,298,0,4,86,0,-1,86,0,-1,88,0,3,88,0,5,88,0,3,88,0,3,88,0,5,299,0,3,88,0,5,299,0,1,236,0,1,236,0,1,236,0,1,236,0,4,87,0,1,237,0,1,237,0,1,237,0,1,237,0,-1,299,0,4,88,0,-1,88,0,-1,90,0,3,90,0,5,90,0,3,90,0,3,90,0,5,300,0,3,90,0,5,300,0,1,244,0,1,244,0,1,244,0,1,244,0,4,89,0,1,245,0,1,245,0,1,245,0,1,245,0,-1,300,0,4,90,0,-1,90,0,-1,92,0,3,92,0,5,92,0,3,92,0,3,92,0,5,301,0,3,92,0,5,301,0,1,246,0,1,246,0,1,246,0,1,246,0,4,91,0,1,247,0,1,247,0,1,247,0,1,247,0,-1,301,0,4,92,0,-1,92,0,-1,94,0,3,94,0,5,94,0,3,94,0,3,94,0,5,302,0,3,94,0,5,302,0,1,257,0,1,257,0,1,257,0,1,257,0,4,93,0,1,258,0,1,258,0,1,258,0,1,258,0,-1,302,0,4,94,0,-1,94,0,-1,96,0,3,96,0,5,96,0,3,96,0,3,96,0,5,303,0,3,96,0,5,303,0,1,259,0,1,259,0,1,259,0,1,259,0,4,95,0,1,260,0,1,260,0,1,260,0,1,260,0,-1,303,0,4,96,0,-1,96,0,-1,98,0,3,98,0,5,98,0,3,98,0,3,98,0,5,304,0,3,98,0,5,304,0,1,267,0,1,267,0,1,267,0,1,267,0,4,97,0,1,268,0,1,268,0,1,268,0,1,268,0,-1,304,0,4,98,0,-1,98,0,-1,100,0,3,100,0,5,100,0,3,100,0,3,100,0,5,305,0,3,100,0,5,305,0,1,269,0,1,269,0,1,269,0,1,269,0,4,99,0,1,270,0,1,270,0,1,270,0,1,270,0,-1,305,0,4,100,0,-1,100,0,-1,102,0,3,102,0,5,102,0,3,102,0,3,102,0,5,306,0,3,102,0,5,306,0,1,271,0,1,271,0,1,271,0,1,271,0,4,101,0,1,272,0,1,272,0,1,272,0,1,272,0,-1,306,0,4,102,0,-1,102,0,-1,104,0,3,104,0,5,104,0,3,104,0,3,104,0,5,307,0,3,104,0,5,307,0,1,273,0,1,273,0,1,273,0,1,273,0,4,103,0,1,274,0,1,274,0,1,274,0,1,274,0,-1,307,0,4,104,0,-1,104,0,-1,106,0,3,106,0,5,106,0,3,106,0,3,106,0,5,308,0,3,106,0,5,308,0,1,275,0,1,275,0,1,275,0,1,275,0,4,105,0,1,276,0,1,276,0,1,276,0,1,276,0,-1,308,0,4,106,0,-1,106,0,-1,108,0,3,108,0,5,108,0,3,108,0,3,108,0,5,309,0,3,108,0,5,309,0,1,277,0,1,277,0,1,277,0,1,277,0,4,107,0,1,278,0,1,278,0,1,278,0,1,278,0,-1,309,0,4,108,0,-1,108,0,-1,124,0,3,124,0,1,123,0,1,123,0,1,123,0,1,123,0,4,109,0,-1,127,0,3,127,0,1,126,0,1,126,0,1,126,0,1,126,0,4,110,0,-1,135,0,3,135,0,1,134,0,1,134,0,1,134,0,1,134,0,4,111,0,-1,148,0,3,148,0,1,147,0,1,147,0,1,147,0,1,147,0,4,112,0,-1,164,0,3,164,0,1,163,0,1,163,0,1,163,0,1,163,0,4,113,0,-1,173,0,3,173,0,1,172,0,1,172,0,1,172,0,1,172,0,4,114,0,-1,186,0,3,186,0,1,185,0,1,185,0,1,185,0,1,185,0,4,115,0,-1,203,0,3,203,0,1,202,0,1,202,0,1,202,0,1,202,0,4,116,0,-1,216,0,3,216,0,1,215,0,1,215,0,1,215,0,1,215,0,4,117,0,-1,224,0,3,224,0,1,223,0,1,223,0,1,223,0,1,223,0,4,118,0,-1,255,0,3,255,0,1,254,0,1,254,0,1,254,0,1,254,0,4,119,0,1,125,0,1,125,0,1,125,0,1,125,0,4,124,0,-1,124,0,1,128,0,1,128,0,1,128,0,1,128,0,4,127,0,-1,127,0,1,136,0,1,136,0,1,136,0,1,136,0,4,135,0,-1,135,0,1,149,0,1,149,0,1,149,0,1,149,0,4,148,0,-1,148,0,1,165,0,1,165,0,1,165,0,1,165,0,4,164,0,-1,164,0,1,174,0,1,174,0,1,174,0,1,174,0,4,173,0,-1,173,0,1,187,0,1,187,0,1,187,0,1,187,0,4,186,0,-1,186,0,1,204,0,1,204,0,1,204,0,1,204,0,4,203,0,-1,203,0,1,217,0,1,217,0,1,217,0,1,217,0,4,216,0,-1,216,0,1,225,0,1,225,0,1,225,0,1,225,0,4,224,0,-1,224,0,1,256,0,1,256,0,1,256,0,1,256,0,4,255,0,-1,255,0,4,310,0,4,311,0,4,312,0,4,313,0,4,314,0,4,315,0,4,316,0,-1,317,0,-1,318,0,4,319,0,4,320,0,4,321,0,4,322,0,-1,323,0,-1,324,0,4,325,0,4,326,0,4,327,0,4,328,0,-1,329,0,-1,330,0,4,331,0,4,332,0,4,333,0,4,334,0,-1,335,0,-1,336,0,4,337,0,4,338,0,4,339,0,4,340,0,4,341,0,-1,342,0,-1,343,0,4,344,0,4,345,0,4,346,0,4,347,0,-1,348,0,-1,349,0,4,350,0,4,351,0,4,352,0,4,353,0,-1,354,0,-1,355,0,4,356,0,4,357,0,4,358,0,4,359,0,-1,360,0,-1,361,0,-1,362,0,-1,363,0,-1,364,0,-1,365,0,4,366,0,4,367,0,4,368,0,4,369,0,-1,370,0,-1,371,0,4,372,0,4,373,0,4,374,0,4,375,0,4,376,0,-1,377,0,-1,378,0,4,379,0,4,380,0,4,381,0,4,382,0,4,383,0,-1,384,0,-1,385,0,-1,386,0,-1,387,0,-1,388,0,-1,389,0,14,1,280,9,317,281,9,318,282,9,323,283,9,324,284,9,329,285,9,330,286,9,335,287,9,336,288,9,342,289,9,343,290,9,348,291,9,349,292,9,354,293,9,355,294,9,360,295,9,361,296,9,362,297,9,363,298,9,364,299,9,365,300,9,370,301,9,371,302,9,377,303,9,378,304,9,384,305,9,385,306,9,386,307,9,387,308,9,388,309,9,389,1315],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,317,318,323,324,329,330,335,336,342,343,348,349,354,355,360,361,362,363,364,365,370,371,377,378,384,385,386,387,388,389],[6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,-1,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,0,0,0,0,0,0,0,6,6,-1,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,0,0,0,0,0,0,0,6,6,6,6,6,6,6,6,6,6,-1,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,0,0,0,0,0,0,0,6,6,-1,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,0,0,0,0,0,0,0,6,6,6,6,6,6,6,-1,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,0,0,0,0,0,0,0,6,6,-1,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,0,0,0,0,0,0,0,6,6,6,6,6,6,6,6,6,6,6,6,-1,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,0,0,0,0,0,0,0,6,6,-1,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,0,0,0,0,0,0,0,6,6,6,6,6,6,6,6,6,6,-1,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,0,0,0,0,0,0,0,6,6,-1,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,0,0,0,0,0,0,0,6,6,6,6,6,6,6,6,-1,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,0,0,0,0,0,0,0,6,6,-1,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,0,0,0,0,0,0,0,6,6,6,6,6,6,6,6,6,6,-1,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,0,0,0,0,0,0,0,6,6,-1,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,0,0,0,0,0,0,0,6,6,6,6,6,6,6,6,6,6,6,-1,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,0,0,0,0,0,0,0,6,6,-1,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,0,0,0,0,0,0,0,6,6,-1,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,0,0,0,0,0,0,0,6,6,-1,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,0,0,0,0,0,0,0,6,6,-1,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,0,0,0,0,0,0,0,6,6,-1,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,0,0,0,0,0,0,0,6,6,6,6,6,6,6,6,-1,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,0,0,0,0,0,0,0,6,6,-1,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,0,0,0,0,0,0,0,6,6,6,6,6,6,6,6,6,6,-1,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,0,0,0,0,0,0,0,6,6,-1,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,0,0,0,0,0,0,0,6,6,6,6,6,6,6,6,-1,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,0,0,0,0,0,0,0,6,6,-1,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,0,0,0,0,0,0,0,6,6,-1,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,0,0,0,0,0,0,0,6,6,-1,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,0,0,0,0,0,0,0,6,6,-1,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,0,0,0,0,0,0,0,6,6,-1,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,0,0,0,0,0,0,0,31,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],[35,9,9,21,20,21,20,35,9,9,9,9,9,21,20,16,6,7,8,11,12,13,14,1,2,3,4,5,8,0,0,0,0,0,0,0,0,0,15,0,1,2,3,4,5,16,6,7,8,11,12,13,14,1,2,3,4,5,8,0,0,0,0,0,0,0,0,0,15,0,1,2,3,4,5,35,9,9,9,9,39,21,20,16,6,7,8,11,12,13,14,1,2,3,4,5,8,0,0,0,0,0,0,0,0,0,15,0,1,2,3,4,5,16,6,7,8,11,12,13,14,1,2,3,4,5,8,0,0,0,0,0,0,0,0,0,15,0,1,2,3,4,5,35,9,9,9,9,16,6,7,8,11,12,13,14,1,2,3,4,5,8,0,0,0,0,0,0,0,0,0,15,0,1,2,3,4,5,16,6,7,8,11,12,13,14,1,2,3,4,5,8,0,0,0,0,0,0,0,0,0,15,0,1,2,3,4,5,21,20,35,9,9,9,9,39,21,20,16,6,7,8,11,12,13,14,1,2,3,4,5,8,0,0,0,0,0,0,0,0,0,15,0,1,2,3,4,5,16,6,7,8,11,12,13,14,1,2,3,4,5,8,0,0,0,0,0,0,0,0,0,15,0,1,2,3,4,5,35,9,9,9,9,9,21,20,16,6,7,8,11,12,13,14,1,2,3,4,5,8,0,0,0,0,0,0,0,0,0,15,0,1,2,3,4,5,16,6,7,8,11,12,13,14,1,2,3,4,5,8,0,0,0,0,0,0,0,0,0,15,0,1,2,3,4,5,35,9,9,9,9,39,16,6,7,8,11,12,13,14,1,2,3,4,5,8,0,0,0,0,0,0,0,0,0,15,0,1,2,3,4,5,16,6,7,8,11,12,13,14,1,2,3,4,5,8,0,0,0,0,0,0,0,0,0,15,0,1,2,3,4,5,21,20,35,9,9,9,9,39,16,6,7,8,11,12,13,14,1,2,3,4,5,8,0,0,0,0,0,0,0,0,0,15,0,1,2,3,4,5,16,6,7,8,11,12,13,14,1,2,3,4,5,8,0,0,0,0,0,0,0,0,0,15,0,1,2,3,4,5,21,20,35,9,9,9,85,21,20,16,6,7,8,11,12,13,14,1,2,3,4,5,8,0,0,0,0,0,0,0,0,0,15,0,1,2,3,4,5,16,6,7,8,11,12,13,14,1,2,3,4,5,8,0,0,0,0,0,0,0,0,0,15,0,1,2,3,4,5,16,6,7,8,11,12,13,14,1,2,3,4,5,8,0,0,0,0,0,0,0,0,0,15,0,1,2,3,4,5,16,6,7,8,11,12,13,14,1,2,3,4,5,8,0,0,0,0,0,0,0,0,0,15,0,1,2,3,4,5,16,6,7,8,11,12,13,14,1,2,3,4,5,8,0,0,0,0,0,0,0,0,0,15,0,1,2,3,4,5,16,6,7,8,11,12,13,14,1,2,3,4,5,8,0,0,0,0,0,0,0,0,0,15,0,1,2,3,4,5,9,35,9,9,9,39,16,6,7,8,11,12,13,14,1,2,3,4,5,8,0,0,0,0,0,0,0,0,0,15,0,1,2,3,4,5,16,6,7,8,11,12,13,14,1,2,3,4,5,8,0,0,0,0,0,0,0,0,0,15,0,1,2,3,4,5,35,9,9,9,9,9,21,20,16,6,7,8,11,12,13,14,1,2,3,4,5,8,0,0,0,0,0,0,0,0,0,15,0,1,2,3,4,5,16,6,7,8,11,12,13,14,1,2,3,4,5,8,0,0,0,0,0,0,0,0,0,15,0,1,2,3,4,5,35,9,9,9,9,9,16,6,7,8,11,12,13,14,1,2,3,4,5,8,0,0,0,0,0,0,0,0,0,15,0,1,2,3,4,5,16,6,7,8,11,12,13,14,1,2,3,4,5,8,0,0,0,0,0,0,0,0,0,15,0,1,2,3,4,5,16,6,7,8,11,12,13,14,1,2,3,4,5,8,0,0,0,0,0,0,0,0,0,15,0,1,2,3,4,5,16,6,7,8,11,12,13,14,1,2,3,4,5,8,0,0,0,0,0,0,0,0,0,15,0,1,2,3,4,5,16,6,7,8,11,12,13,14,1,2,3,4,5,8,0,0,0,0,0,0,0,0,0,15,0,1,2,3,4,5,16,6,7,8,11,12,13,14,1,2,3,4,5,8,0,0,0,0,0,0,0,0,0,15,0,1,2,3,4,5,74,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10]],[[[150,"multiShutter",".mp3",0.888163],-1],0,0,[],[],[]],[[[44,"DJ_Booth_and_Equipments_Texture",[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{"USE_INSTANCING":true,"DCC_APP_NAME":5,"USE_ALBEDO_MAP":true,"USE_EMISSIVE_MAP":true},{},{}],[[[{"albedoScale":0.800000011920929},"emissive",8,[4,4290559164],"mainTexture",6,0,"emissiveMap",6,1],{},{}],11,0,0]]],0,0,[0,0,0],[13,16,11],[86,87,47]],[[{"name":"wipeout","rect":{"x":0,"y":0,"width":128,"height":128},"offset":{"x":0,"y":0},"originalSize":{"width":128,"height":128},"rotated":false,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[-64,-64,0,64,-64,0,-64,64,0,64,64,0],"indexes":[0,1,2,2,1,3],"uv":[0,128,128,128,0,0,128,0],"nuv":[0,0,1,0,0,1,1,1],"minPos":{"x":-64,"y":-64,"z":0},"maxPos":{"x":64,"y":64,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[10],[167]],[[{"name":"img_game_heart_active","rect":{"x":0,"y":0,"width":127,"height":114},"offset":{"x":0,"y":0},"originalSize":{"width":127,"height":114},"rotated":false,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[-63.5,-57,0,63.5,-57,0,-63.5,57,0,63.5,57,0],"indexes":[0,1,2,2,1,3],"uv":[0,114,127,114,0,0,127,0],"nuv":[0,0,1,0,0,1,1,1],"minPos":{"x":-63.5,"y":-57,"z":0},"maxPos":{"x":63.5,"y":57,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[10],[168]],[[{"name":"img_bar_star_inactive","rect":{"x":0,"y":0,"width":62,"height":60},"offset":{"x":0,"y":0},"originalSize":{"width":62,"height":60},"rotated":false,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[-31,-30,0,31,-30,0,-31,30,0,31,30,0],"indexes":[0,1,2,2,1,3],"uv":[0,60,62,60,0,0,62,0],"nuv":[0,0,1,0,0,1,1,1],"minPos":{"x":-31,"y":-30,"z":0},"maxPos":{"x":31,"y":30,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[10],[169]],[[[54,"Poster",1,[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{"USE_TEXTURE":true}],[[[{},"mainTexture",6,0]],11]]],0,0,[0,0],[13,11],[110,51]],[[[54,"mat_game_flames_particle",4,[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{}],[[[{},"mainTexture",6,0]],11]]],0,0,[0,0],[13,11],[55,52]],[[{"name":"ESR_CONTAINER_MOVEMENTS","rect":{"x":0,"y":0,"width":1035,"height":659},"offset":{"x":0,"y":0},"originalSize":{"width":1035,"height":659},"rotated":false,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[-517.5,-329.5,0,517.5,-329.5,0,-517.5,329.5,0,517.5,329.5,0],"indexes":[0,1,2,2,1,3],"uv":[0,659,1035,659,0,0,1035,0],"nuv":[0,0,1,0,0,1,1,1],"minPos":{"x":-517.5,"y":-329.5,"z":0},"maxPos":{"x":517.5,"y":329.5,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[10],[170]],[[{"name":"img_post_home","rect":{"x":0,"y":0,"width":361,"height":359},"offset":{"x":0,"y":0},"originalSize":{"width":361,"height":359},"rotated":false,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[-180.5,-179.5,0,180.5,-179.5,0,-180.5,179.5,0,180.5,179.5,0],"indexes":[0,1,2,2,1,3],"uv":[0,359,361,359,0,0,361,0],"nuv":[0,0,1,0,0,1,1,1],"minPos":{"x":-180.5,"y":-179.5,"z":0},"maxPos":{"x":180.5,"y":179.5,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[10],[171]],[[[58,"collectible_special"],[100,"collectible_special",[-10],[[248,30,true,-8,[7,"a3g7sdk4BAPL27QvR510GK"],-7,[-2,-3,-4,-5,-6]],[151,true,-9,[7,"d37NxTwAhHrb+JIaTzTB8N"]]],[4,"66Ba72ak1JOYCB5CSozCYH",null,null,null,-1,0],[1,0,1,0]],[18,"Parent",1,[-11,-12,-13,-14,-15,-16],[4,"432Fxt4F5Oi6ovNo4oHVo1",null,null,null,1,0]],[170,"Flat_brim_Cap",false,2,[[16,-17,[7,"403oxsB65AjoIpiwQK38YE"],[0],[9],1]],[4,"15BMV0mJ9N1IWKKtoowt78",null,null,null,1,0],[1,0,-0.123,-0.231],[1,109.38345909118652,109.38345909118652,109.38345909118652]],[170,"Sunglasses",false,2,[[16,-18,[7,"e72EKgPQZLxLyKa4nwA5/U"],[2],[9],3]],[4,"d6UDGtMg9H4bKFtdug2jve",null,null,null,1,0],[1,0,-1.305,0.246],[1,11.796413362026215,11.796413362026215,11.796413362026215]],[36,"pasted__typeMesh1",2,[[16,-19,[7,"0b2YKvFPRLkJWKei1y/+8V"],[4],[9],5]],[4,"c2sC+BA6pF2ITrsyjBhh8m",null,null,null,1,0],[1,-2.097,-0.45100000000000007,0.299],[1,9.558,9.558,9.558]],[171,"NLE_Watch",false,2,[[16,-20,[7,"a1/cmSj0hLg5TbDDEclONP"],[6],[9],7]],[4,"afRg4zEQJA1q8+0NwCh/ZB",null,null,null,1,0],[1,0.005,0.04400000000000004,0.139],[3,0,0,-0.3883199161574089,0.9215246294676572],[1,35.89391827583313,35.89391827583313,9.152847826480865],[1,0,0,-45.70000000000002]],[171,"Microphones",false,2,[[16,-21,[7,"a7Nzx9lmBC3KfCRWCoJZEH"],[8],[9],9]],[4,"8fNxFAznBGBLrT2itXzncK",null,null,null,1,0],[1,-0.052,0.05400000000000005,0.287],[3,0,0,0.19509032201612825,0.9807852804032307],[1,37.78562664985656,37.78562664985656,37.78562664985657],[1,0,0,22.500000000000007]],[230,"Particle",2,[[-22,[185,-942,-23,[7,"fcRiM9yKpIIZf5MhmsgX50"]]],1,4],[4,"8e2/l9nZJH8bBbASca/SJS",null,null,null,1,0],[1,0,0,-0.222],[3,0.7071067811865475,0,0,0.7071067811865476],[1,89.99999999999999,0,0]],[250,1.4681366081220584,1.4547917963074268,2.0866383872725605,true,1,8,[7,"afnECGWjJHbZwwbjHulnb2"],[[10,null],6,0],[90,[4,4292868351]],[30,2],[8],[8],[8],[8],[8],[8],[8],[30,500],[8],[30,1],[8],[94,[74,1,[80,[[75,0],[50,255,0.4598214285714286],[50,0,1]]]]],[186,3,0.094,[30,1]],[91,[8],[8],[8],[8]],[67,[8],[8],[8],[30,1]],[68,[8],[8],[8]],[69,[8],[8],[8],[8]],[187,true,[8],[8],[30,0.47123889803846897]],[95,[49,1,[48,[0,1],[[59,2,1],[59,2,1]]]],[8]],[97],[70,[30,1],[8],[40],[40],-24],[188,3,1,11,12]]],0,[0,4,1,0,-1,3,0,-2,4,0,-3,5,0,-4,6,0,-5,7,0,21,2,0,2,1,0,2,1,0,-1,2,0,-1,3,0,-2,4,0,-3,5,0,-4,6,0,-5,7,0,-6,8,0,2,3,0,2,4,0,2,5,0,2,6,0,2,7,0,-1,9,0,2,8,0,17,9,0,14,1,24],[0,0,0,0,0,0,0,0,0,0,0,0,0],[-1,7,-1,7,-1,7,-1,7,-1,7,-1,18,19],[56,172,56,173,56,174,56,175,56,176,75,75,88]],[[{"name":"img_wipeout_image_container","rect":{"x":0,"y":0,"width":1035,"height":941},"offset":{"x":0,"y":0},"originalSize":{"width":1035,"height":941},"rotated":false,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[-517.5,-470.5,0,517.5,-470.5,0,-517.5,470.5,0,517.5,470.5,0],"indexes":[0,1,2,2,1,3],"uv":[0,941,1035,941,0,0,1035,0],"nuv":[0,0,1,0,0,1,1,1],"minPos":{"x":-517.5,"y":-470.5,"z":0},"maxPos":{"x":517.5,"y":470.5,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[10],[177]],[[{"name":"default_toggle_normal","rect":{"x":0,"y":0,"width":28,"height":28},"offset":{"x":0,"y":0},"originalSize":{"width":28,"height":28},"rotated":false,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[-14,-14,0,14,-14,0,-14,14,0,14,14,0],"indexes":[0,1,2,2,1,3],"uv":[0,28,28,28,0,0,28,0],"nuv":[0,0,1,0,0,1,1,1],"minPos":{"x":-14,"y":-14,"z":0},"maxPos":{"x":14,"y":14,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[10],[178]],[[[31,".bin",815868016,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":72464,"length":14280,"count":7140,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":72464,"count":1294,"stride":56},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_texCoord1","format":21,"isNormalized":false}]}]},"minPosition",8,[1,-0.49748557806015015,-0.5,-0.4989933371543884],"maxPosition",8,[1,0.49949654936790466,0.5,0.49899348616600037]]],-1],0,0,[],[],[]],[[[31,".bin",2489017538,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":6776,"length":1200,"count":600,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":6776,"count":121,"stride":56},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_texCoord1","format":21,"isNormalized":false}]}]},"minPosition",8,[1,-5,0,-5],"maxPosition",8,[1,5,0,5]]],-1],0,0,[],[],[]],[[[31,".bin",3476720256,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":224,"length":12,"count":6,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":224,"count":4,"stride":56},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_texCoord1","format":21,"isNormalized":false}]}]},"minPosition",8,[1,-0.5,-0.5,0],"maxPosition",8,[1,0.5,0.5,0]]],-1],0,0,[],[],[]],[[[114,"particle2d_common",".plist"],-1],0,0,[0],[23],[76]],[[{"name":"img_celebmoment_flash1","rect":{"x":0,"y":0,"width":1003,"height":1429},"offset":{"x":0,"y":0},"originalSize":{"width":1003,"height":1429},"rotated":false,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[-501.5,-714.5,0,501.5,-714.5,0,-501.5,714.5,0,501.5,714.5,0],"indexes":[0,1,2,2,1,3],"uv":[0,1429,1003,1429,0,0,1003,0],"nuv":[0,0,1,0,0,1,1,1],"minPos":{"x":-501.5,"y":-714.5,"z":0},"maxPos":{"x":501.5,"y":714.5,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[10],[179]],[[{"name":"default_toggle_checkmark","rect":{"x":4,"y":5,"width":20,"height":18},"offset":{"x":0,"y":0},"originalSize":{"width":28,"height":28},"rotated":false,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[-10,-9,0,10,-9,0,-10,9,0,10,9,0],"indexes":[0,1,2,2,1,3],"uv":[4,23,24,23,4,5,24,5],"nuv":[0.14285714285714285,0.17857142857142858,0.8571428571428571,0.17857142857142858,0.14285714285714285,0.8214285714285714,0.8571428571428571,0.8214285714285714],"minPos":{"x":-10,"y":-9,"z":0},"maxPos":{"x":10,"y":9,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[10],[180]],[[{"name":"pose4","rect":{"x":210,"y":150,"width":454,"height":1070},"offset":{"x":12,"y":-12},"originalSize":{"width":850,"height":1346},"rotated":false,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[-227,-535,0,227,-535,0,-227,535,0,227,535,0],"indexes":[0,1,2,2,1,3],"uv":[210,1196,664,1196,210,126,664,126],"nuv":[0.24705882352941178,0.09361069836552749,0.7811764705882352,0.09361069836552749,0.24705882352941178,0.888558692421991,0.7811764705882352,0.888558692421991],"minPos":{"x":-227,"y":-535,"z":0},"maxPos":{"x":227,"y":535,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[10],[181]],[[{"name":"img_rarity_label_superrare","rect":{"x":53,"y":22,"width":409,"height":346},"offset":{"x":1.5,"y":12},"originalSize":{"width":512,"height":414},"rotated":false,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[-204.5,-173,0,204.5,-173,0,-204.5,173,0,204.5,173,0],"indexes":[0,1,2,2,1,3],"uv":[53,392,462,392,53,46,462,46],"nuv":[0.103515625,0.1111111111111111,0.90234375,0.1111111111111111,0.103515625,0.9468599033816425,0.90234375,0.9468599033816425],"minPos":{"x":-204.5,"y":-173,"z":0},"maxPos":{"x":204.5,"y":173,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[10],[182]],[[{"name":"img_post_pagination_inactive","rect":{"x":0,"y":0,"width":213,"height":213},"offset":{"x":0,"y":0},"originalSize":{"width":213,"height":213},"rotated":false,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[-106.5,-106.5,0,106.5,-106.5,0,-106.5,106.5,0,106.5,106.5,0],"indexes":[0,1,2,2,1,3],"uv":[0,213,213,213,0,0,213,0],"nuv":[0,0,1,0,0,1,1,1],"minPos":{"x":-106.5,"y":-106.5,"z":0},"maxPos":{"x":106.5,"y":106.5,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[10],[183]],[[[44,"Singage_Texture",[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{"USE_ALBEDO_MAP":true,"USE_NORMAL_MAP":true,"USE_EMISSIVE_MAP":true},{},{},{}],[[[{"roughness":1,"specularIntensity":1},"mainTexture",6,0,"normalMap",6,1,"emissiveMap",6,2],{},{},{}],11,0,0,0]]],0,0,[0,0,0,0],[13,22,16,11],[184,185,186,38]],[[{"name":"img_rarity_label_common","rect":{"x":6,"y":143,"width":502,"height":112},"offset":{"x":1,"y":8},"originalSize":{"width":512,"height":414},"rotated":false,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[-251,-56,0,251,-56,0,-251,56,0,251,56,0],"indexes":[0,1,2,2,1,3],"uv":[6,271,508,271,6,159,508,159],"nuv":[0.01171875,0.38405797101449274,0.9921875,0.38405797101449274,0.01171875,0.6545893719806763,0.9921875,0.6545893719806763],"minPos":{"x":-251,"y":-56,"z":0},"maxPos":{"x":251,"y":56,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[10],[187]],[[[44,"placeholder_mat_menu_backdrop",[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{"USE_INSTANCING":true},{},{}],[[[{},"mainColor",8,[4,4294937594]],{},{}],11,0,0]]],0,0,[0],[11],[89]],[[{"name":"atom","rect":{"x":0,"y":0,"width":31,"height":31},"offset":{"x":0,"y":0},"originalSize":{"width":31,"height":31},"rotated":false,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[-15.5,-15.5,0,15.5,-15.5,0,-15.5,15.5,0,15.5,15.5,0],"indexes":[0,1,2,2,1,3],"uv":[0,31,31,31,0,0,31,0],"nuv":[0,0,1,0,0,1,1,1],"minPos":{"x":-15.5,"y":-15.5,"z":0},"maxPos":{"x":15.5,"y":15.5,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[10],[188]],[[[114,"particle2d_ultrarare",".plist"],-1],0,0,[0],[23],[76]],[[{"name":"pose5","rect":{"x":234,"y":84,"width":331,"height":1199},"offset":{"x":-25.5,"y":-10.5},"originalSize":{"width":850,"height":1346},"rotated":false,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[-165.5,-599.5,0,165.5,-599.5,0,-165.5,599.5,0,165.5,599.5,0],"indexes":[0,1,2,2,1,3],"uv":[234,1262,565,1262,234,63,565,63],"nuv":[0.2752941176470588,0.046805349182763745,0.6647058823529411,0.046805349182763745,0.2752941176470588,0.937592867756315,0.6647058823529411,0.937592867756315],"minPos":{"x":-165.5,"y":-599.5,"z":0},"maxPos":{"x":165.5,"y":599.5,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[10],[189]],[[{"name":"img_wipeout_1","rect":{"x":0,"y":0,"width":968,"height":663},"offset":{"x":0,"y":0},"originalSize":{"width":968,"height":663},"rotated":false,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[-484,-331.5,0,484,-331.5,0,-484,331.5,0,484,331.5,0],"indexes":[0,1,2,2,1,3],"uv":[0,663,968,663,0,0,968,0],"nuv":[0,0,1,0,0,1,1,1],"minPos":{"x":-484,"y":-331.5,"z":0},"maxPos":{"x":484,"y":331.5,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[10],[190]],[[[58,"mainLevel2"],[121,"mainLevel2",[-237,-238,-239,-240,-241,-242,-243,-244,-245,-246,-247,-248],[[147,-236,[7,"3bRT+OorNBDYAnBaQiSAu9"],964]],[93,"4638DgiwBDObg4wI61qV8+",null,-235,0,[[5,["graphicNode"],-14,[0,["78j3SJeChFWY5tDVNRr9co"]],-13,[0,["1cVaU83N5Md67JoqqCBd5z","e3hqu0HdxNq4e2nv3hKDvO"]]],[5,["obstacleGraphic","0"],-16,[0,["78j3SJeChFWY5tDVNRr9co"]],-15,[0,["7aaD9DKUZKD74A1tB8ax+i"]]],[5,["graphicNode"],-18,[0,["78j3SJeChFWY5tDVNRr9co"]],-17,[0,["1cVaU83N5Md67JoqqCBd5z","e3hqu0HdxNq4e2nv3hKDvO"]]],[5,["obstacleGraphic","0"],-20,[0,["78j3SJeChFWY5tDVNRr9co"]],-19,[0,["7aaD9DKUZKD74A1tB8ax+i"]]],[5,["graphicNode"],-22,[0,["78j3SJeChFWY5tDVNRr9co"]],-21,[0,["1cVaU83N5Md67JoqqCBd5z","e3hqu0HdxNq4e2nv3hKDvO"]]],[5,["obstacleGraphic","0"],-24,[0,["78j3SJeChFWY5tDVNRr9co"]],-23,[0,["7aaD9DKUZKD74A1tB8ax+i"]]],[5,["graphicNode"],-26,[0,["78j3SJeChFWY5tDVNRr9co"]],-25,[0,["1cVaU83N5Md67JoqqCBd5z","e3hqu0HdxNq4e2nv3hKDvO"]]],[5,["obstacleGraphic","0"],-28,[0,["78j3SJeChFWY5tDVNRr9co"]],-27,[0,["7aaD9DKUZKD74A1tB8ax+i"]]],[5,["graphicNode"],-30,[0,["78j3SJeChFWY5tDVNRr9co"]],-29,[0,["1cVaU83N5Md67JoqqCBd5z","e3hqu0HdxNq4e2nv3hKDvO"]]],[5,["obstacleGraphic","0"],-32,[0,["78j3SJeChFWY5tDVNRr9co"]],-31,[0,["7aaD9DKUZKD74A1tB8ax+i"]]],[5,["graphicNode"],-34,[0,["78j3SJeChFWY5tDVNRr9co"]],-33,[0,["1cVaU83N5Md67JoqqCBd5z","e3hqu0HdxNq4e2nv3hKDvO"]]],[5,["obstacleGraphic","0"],-36,[0,["78j3SJeChFWY5tDVNRr9co"]],-35,[0,["7aaD9DKUZKD74A1tB8ax+i"]]],[5,["graphicNode"],-38,[0,["78j3SJeChFWY5tDVNRr9co"]],-37,[0,["1cVaU83N5Md67JoqqCBd5z","e3hqu0HdxNq4e2nv3hKDvO"]]],[5,["obstacleGraphic","0"],-40,[0,["78j3SJeChFWY5tDVNRr9co"]],-39,[0,["7aaD9DKUZKD74A1tB8ax+i"]]],[5,["graphicNode"],-42,[0,["78j3SJeChFWY5tDVNRr9co"]],-41,[0,["1cVaU83N5Md67JoqqCBd5z","e3hqu0HdxNq4e2nv3hKDvO"]]],[5,["obstacleGraphic","0"],-44,[0,["78j3SJeChFWY5tDVNRr9co"]],-43,[0,["7aaD9DKUZKD74A1tB8ax+i"]]],[5,["graphicNode"],-46,[0,["78j3SJeChFWY5tDVNRr9co"]],-45,[0,["1cVaU83N5Md67JoqqCBd5z","e3hqu0HdxNq4e2nv3hKDvO"]]],[5,["obstacleGraphic","0"],-48,[0,["78j3SJeChFWY5tDVNRr9co"]],-47,[0,["7aaD9DKUZKD74A1tB8ax+i"]]],[5,["graphicNode"],-50,[0,["78j3SJeChFWY5tDVNRr9co"]],-49,[0,["1cVaU83N5Md67JoqqCBd5z","e3hqu0HdxNq4e2nv3hKDvO"]]],[5,["obstacleGraphic","0"],-52,[0,["78j3SJeChFWY5tDVNRr9co"]],-51,[0,["7aaD9DKUZKD74A1tB8ax+i"]]],[5,["graphicNode"],-54,[0,["78j3SJeChFWY5tDVNRr9co"]],-53,[0,["1cVaU83N5Md67JoqqCBd5z","e3hqu0HdxNq4e2nv3hKDvO"]]],[5,["obstacleGraphic","0"],-56,[0,["78j3SJeChFWY5tDVNRr9co"]],-55,[0,["7aaD9DKUZKD74A1tB8ax+i"]]],[5,["graphicNode"],-58,[0,["78j3SJeChFWY5tDVNRr9co"]],-57,[0,["1cVaU83N5Md67JoqqCBd5z","e3hqu0HdxNq4e2nv3hKDvO"]]],[5,["obstacleGraphic","0"],-60,[0,["78j3SJeChFWY5tDVNRr9co"]],-59,[0,["7aaD9DKUZKD74A1tB8ax+i"]]],[5,["graphicNode"],-62,[0,["78j3SJeChFWY5tDVNRr9co"]],-61,[0,["1cVaU83N5Md67JoqqCBd5z","e3hqu0HdxNq4e2nv3hKDvO"]]],[5,["obstacleGraphic","0"],-64,[0,["78j3SJeChFWY5tDVNRr9co"]],-63,[0,["7aaD9DKUZKD74A1tB8ax+i"]]],[5,["graphicNode"],-66,[0,["78j3SJeChFWY5tDVNRr9co"]],-65,[0,["1cVaU83N5Md67JoqqCBd5z","e3hqu0HdxNq4e2nv3hKDvO"]]],[5,["obstacleGraphic","0"],-68,[0,["78j3SJeChFWY5tDVNRr9co"]],-67,[0,["7aaD9DKUZKD74A1tB8ax+i"]]],[5,["graphicNode"],-70,[0,["78j3SJeChFWY5tDVNRr9co"]],-69,[0,["1cVaU83N5Md67JoqqCBd5z","e3hqu0HdxNq4e2nv3hKDvO"]]],[5,["obstacleGraphic","0"],-72,[0,["78j3SJeChFWY5tDVNRr9co"]],-71,[0,["7aaD9DKUZKD74A1tB8ax+i"]]],[5,["graphicNode"],-74,[0,["78j3SJeChFWY5tDVNRr9co"]],-73,[0,["1cVaU83N5Md67JoqqCBd5z","e3hqu0HdxNq4e2nv3hKDvO"]]],[5,["obstacleGraphic","0"],-76,[0,["78j3SJeChFWY5tDVNRr9co"]],-75,[0,["7aaD9DKUZKD74A1tB8ax+i"]]],[5,["graphicNode"],-78,[0,["78j3SJeChFWY5tDVNRr9co"]],-77,[0,["1cVaU83N5Md67JoqqCBd5z","e3hqu0HdxNq4e2nv3hKDvO"]]],[5,["obstacleGraphic","0"],-80,[0,["78j3SJeChFWY5tDVNRr9co"]],-79,[0,["7aaD9DKUZKD74A1tB8ax+i"]]],[5,["graphicNode"],-82,[0,["78j3SJeChFWY5tDVNRr9co"]],-81,[0,["1cVaU83N5Md67JoqqCBd5z","e3hqu0HdxNq4e2nv3hKDvO"]]],[5,["obstacleGraphic","0"],-84,[0,["78j3SJeChFWY5tDVNRr9co"]],-83,[0,["7aaD9DKUZKD74A1tB8ax+i"]]],[5,["graphicNode"],-86,[0,["78j3SJeChFWY5tDVNRr9co"]],-85,[0,["1cVaU83N5Md67JoqqCBd5z","e3hqu0HdxNq4e2nv3hKDvO"]]],[5,["obstacleGraphic","0"],-88,[0,["78j3SJeChFWY5tDVNRr9co"]],-87,[0,["7aaD9DKUZKD74A1tB8ax+i"]]],[5,["graphicNode"],-90,[0,["78j3SJeChFWY5tDVNRr9co"]],-89,[0,["1cVaU83N5Md67JoqqCBd5z","e3hqu0HdxNq4e2nv3hKDvO"]]],[5,["obstacleGraphic","0"],-92,[0,["78j3SJeChFWY5tDVNRr9co"]],-91,[0,["7aaD9DKUZKD74A1tB8ax+i"]]],[5,["graphicNode"],-94,[0,["78j3SJeChFWY5tDVNRr9co"]],-93,[0,["1cVaU83N5Md67JoqqCBd5z","e3hqu0HdxNq4e2nv3hKDvO"]]],[5,["obstacleGraphic","0"],-96,[0,["78j3SJeChFWY5tDVNRr9co"]],-95,[0,["7aaD9DKUZKD74A1tB8ax+i"]]],[5,["graphicNode"],-98,[0,["78j3SJeChFWY5tDVNRr9co"]],-97,[0,["1cVaU83N5Md67JoqqCBd5z","e3hqu0HdxNq4e2nv3hKDvO"]]],[5,["obstacleGraphic","0"],-100,[0,["78j3SJeChFWY5tDVNRr9co"]],-99,[0,["7aaD9DKUZKD74A1tB8ax+i"]]],[5,["graphicNode"],-102,[0,["78j3SJeChFWY5tDVNRr9co"]],-101,[0,["1cVaU83N5Md67JoqqCBd5z","e3hqu0HdxNq4e2nv3hKDvO"]]],[5,["obstacleGraphic","0"],-104,[0,["78j3SJeChFWY5tDVNRr9co"]],-103,[0,["7aaD9DKUZKD74A1tB8ax+i"]]],[5,["graphicNode"],-106,[0,["78j3SJeChFWY5tDVNRr9co"]],-105,[0,["1cVaU83N5Md67JoqqCBd5z","e3hqu0HdxNq4e2nv3hKDvO"]]],[5,["obstacleGraphic","0"],-108,[0,["78j3SJeChFWY5tDVNRr9co"]],-107,[0,["7aaD9DKUZKD74A1tB8ax+i"]]],[5,["graphicNode"],-110,[0,["78j3SJeChFWY5tDVNRr9co"]],-109,[0,["1cVaU83N5Md67JoqqCBd5z","e3hqu0HdxNq4e2nv3hKDvO"]]],[5,["obstacleGraphic","0"],-112,[0,["78j3SJeChFWY5tDVNRr9co"]],-111,[0,["7aaD9DKUZKD74A1tB8ax+i"]]],[5,["graphicNode"],-114,[0,["78j3SJeChFWY5tDVNRr9co"]],-113,[0,["1cVaU83N5Md67JoqqCBd5z","e3hqu0HdxNq4e2nv3hKDvO"]]],[5,["obstacleGraphic","0"],-116,[0,["78j3SJeChFWY5tDVNRr9co"]],-115,[0,["7aaD9DKUZKD74A1tB8ax+i"]]],[5,["graphicNode"],-118,[0,["78j3SJeChFWY5tDVNRr9co"]],-117,[0,["1cVaU83N5Md67JoqqCBd5z","e3hqu0HdxNq4e2nv3hKDvO"]]],[5,["obstacleGraphic","0"],-120,[0,["78j3SJeChFWY5tDVNRr9co"]],-119,[0,["7aaD9DKUZKD74A1tB8ax+i"]]],[5,["graphicNode"],-122,[0,["78j3SJeChFWY5tDVNRr9co"]],-121,[0,["1cVaU83N5Md67JoqqCBd5z","e3hqu0HdxNq4e2nv3hKDvO"]]],[5,["obstacleGraphic","0"],-124,[0,["78j3SJeChFWY5tDVNRr9co"]],-123,[0,["7aaD9DKUZKD74A1tB8ax+i"]]],[5,["graphicNode"],-126,[0,["78j3SJeChFWY5tDVNRr9co"]],-125,[0,["1cVaU83N5Md67JoqqCBd5z","e3hqu0HdxNq4e2nv3hKDvO"]]],[5,["obstacleGraphic","0"],-128,[0,["78j3SJeChFWY5tDVNRr9co"]],-127,[0,["7aaD9DKUZKD74A1tB8ax+i"]]],[5,["graphicNode"],-130,[0,["78j3SJeChFWY5tDVNRr9co"]],-129,[0,["76om5tMkJAELdAAefMkO6v","854tChFohKeYSTZmJTQ80q"]]],[5,["obstacleGraphic","0"],-132,[0,["78j3SJeChFWY5tDVNRr9co"]],-131,[0,["76om5tMkJAELdAAefMkO6v","c1A9sG8V1OlqPhhySK/Coe"]]],[5,["mainRenderer"],-134,[0,["1cVaU83N5Md67JoqqCBd5z","8fFvIyGEBFCqgGREWfd/YJ"]],-133,[0,["1cVaU83N5Md67JoqqCBd5z","3ew1Vo2adBpqZ739+OrPkj"]]],[5,["mainRenderer"],-136,[0,["1cVaU83N5Md67JoqqCBd5z","8fFvIyGEBFCqgGREWfd/YJ"]],-135,[0,["1cVaU83N5Md67JoqqCBd5z","3ew1Vo2adBpqZ739+OrPkj"]]],[5,["graphicNode"],-138,[0,["78j3SJeChFWY5tDVNRr9co"]],-137,[0,["76om5tMkJAELdAAefMkO6v","854tChFohKeYSTZmJTQ80q"]]],[5,["obstacleGraphic","0"],-140,[0,["78j3SJeChFWY5tDVNRr9co"]],-139,[0,["76om5tMkJAELdAAefMkO6v","c1A9sG8V1OlqPhhySK/Coe"]]],[5,["mainRenderer"],-142,[0,["1cVaU83N5Md67JoqqCBd5z","8fFvIyGEBFCqgGREWfd/YJ"]],-141,[0,["1cVaU83N5Md67JoqqCBd5z","3ew1Vo2adBpqZ739+OrPkj"]]],[5,["mainRenderer"],-144,[0,["1cVaU83N5Md67JoqqCBd5z","8fFvIyGEBFCqgGREWfd/YJ"]],-143,[0,["1cVaU83N5Md67JoqqCBd5z","3ew1Vo2adBpqZ739+OrPkj"]]],[5,["mainRenderer"],-146,[0,["1cVaU83N5Md67JoqqCBd5z","8fFvIyGEBFCqgGREWfd/YJ"]],-145,[0,["1cVaU83N5Md67JoqqCBd5z","3ew1Vo2adBpqZ739+OrPkj"]]],[5,["graphicNode"],-148,[0,["78j3SJeChFWY5tDVNRr9co"]],-147,[0,["76om5tMkJAELdAAefMkO6v","854tChFohKeYSTZmJTQ80q"]]],[5,["obstacleGraphic","0"],-150,[0,["78j3SJeChFWY5tDVNRr9co"]],-149,[0,["76om5tMkJAELdAAefMkO6v","c1A9sG8V1OlqPhhySK/Coe"]]],[5,["mainRenderer"],-152,[0,["1cVaU83N5Md67JoqqCBd5z","8fFvIyGEBFCqgGREWfd/YJ"]],-151,[0,["1cVaU83N5Md67JoqqCBd5z","3ew1Vo2adBpqZ739+OrPkj"]]],[5,["mainRenderer"],-154,[0,["1cVaU83N5Md67JoqqCBd5z","8fFvIyGEBFCqgGREWfd/YJ"]],-153,[0,["1cVaU83N5Md67JoqqCBd5z","3ew1Vo2adBpqZ739+OrPkj"]]],[5,["graphicNode"],-156,[0,["78j3SJeChFWY5tDVNRr9co"]],-155,[0,["76om5tMkJAELdAAefMkO6v","854tChFohKeYSTZmJTQ80q"]]],[5,["obstacleGraphic","0"],-158,[0,["78j3SJeChFWY5tDVNRr9co"]],-157,[0,["76om5tMkJAELdAAefMkO6v","c1A9sG8V1OlqPhhySK/Coe"]]],[5,["mainRenderer"],-160,[0,["1cVaU83N5Md67JoqqCBd5z","8fFvIyGEBFCqgGREWfd/YJ"]],-159,[0,["1cVaU83N5Md67JoqqCBd5z","3ew1Vo2adBpqZ739+OrPkj"]]],[5,["mainRenderer"],-162,[0,["1cVaU83N5Md67JoqqCBd5z","8fFvIyGEBFCqgGREWfd/YJ"]],-161,[0,["1cVaU83N5Md67JoqqCBd5z","3ew1Vo2adBpqZ739+OrPkj"]]],[5,["graphicNode"],-164,[0,["78j3SJeChFWY5tDVNRr9co"]],-163,[0,["76om5tMkJAELdAAefMkO6v","854tChFohKeYSTZmJTQ80q"]]],[5,["obstacleGraphic","0"],-166,[0,["78j3SJeChFWY5tDVNRr9co"]],-165,[0,["76om5tMkJAELdAAefMkO6v","c1A9sG8V1OlqPhhySK/Coe"]]],[5,["mainRenderer"],-168,[0,["1cVaU83N5Md67JoqqCBd5z","8fFvIyGEBFCqgGREWfd/YJ"]],-167,[0,["1cVaU83N5Md67JoqqCBd5z","3ew1Vo2adBpqZ739+OrPkj"]]],[5,["mainRenderer"],-170,[0,["1cVaU83N5Md67JoqqCBd5z","8fFvIyGEBFCqgGREWfd/YJ"]],-169,[0,["1cVaU83N5Md67JoqqCBd5z","3ew1Vo2adBpqZ739+OrPkj"]]],[5,["graphicNode"],-172,[0,["78j3SJeChFWY5tDVNRr9co"]],-171,[0,["76om5tMkJAELdAAefMkO6v","854tChFohKeYSTZmJTQ80q"]]],[5,["obstacleGraphic","0"],-174,[0,["78j3SJeChFWY5tDVNRr9co"]],-173,[0,["76om5tMkJAELdAAefMkO6v","c1A9sG8V1OlqPhhySK/Coe"]]],[5,["mainRenderer"],-176,[0,["1cVaU83N5Md67JoqqCBd5z","8fFvIyGEBFCqgGREWfd/YJ"]],-175,[0,["1cVaU83N5Md67JoqqCBd5z","3ew1Vo2adBpqZ739+OrPkj"]]],[5,["mainRenderer"],-178,[0,["1cVaU83N5Md67JoqqCBd5z","8fFvIyGEBFCqgGREWfd/YJ"]],-177,[0,["1cVaU83N5Md67JoqqCBd5z","3ew1Vo2adBpqZ739+OrPkj"]]],[5,["graphicNode"],-180,[0,["78j3SJeChFWY5tDVNRr9co"]],-179,[0,["76om5tMkJAELdAAefMkO6v","854tChFohKeYSTZmJTQ80q"]]],[5,["obstacleGraphic","0"],-182,[0,["78j3SJeChFWY5tDVNRr9co"]],-181,[0,["76om5tMkJAELdAAefMkO6v","c1A9sG8V1OlqPhhySK/Coe"]]],[5,["mainRenderer"],-184,[0,["1cVaU83N5Md67JoqqCBd5z","8fFvIyGEBFCqgGREWfd/YJ"]],-183,[0,["1cVaU83N5Md67JoqqCBd5z","3ew1Vo2adBpqZ739+OrPkj"]]],[5,["mainRenderer"],-186,[0,["1cVaU83N5Md67JoqqCBd5z","8fFvIyGEBFCqgGREWfd/YJ"]],-185,[0,["1cVaU83N5Md67JoqqCBd5z","3ew1Vo2adBpqZ739+OrPkj"]]],[5,["graphicNode"],-188,[0,["78j3SJeChFWY5tDVNRr9co"]],-187,[0,["76om5tMkJAELdAAefMkO6v","854tChFohKeYSTZmJTQ80q"]]],[5,["obstacleGraphic","0"],-190,[0,["78j3SJeChFWY5tDVNRr9co"]],-189,[0,["76om5tMkJAELdAAefMkO6v","c1A9sG8V1OlqPhhySK/Coe"]]],[5,["mainRenderer"],-192,[0,["1cVaU83N5Md67JoqqCBd5z","8fFvIyGEBFCqgGREWfd/YJ"]],-191,[0,["1cVaU83N5Md67JoqqCBd5z","3ew1Vo2adBpqZ739+OrPkj"]]],[5,["mainRenderer"],-194,[0,["1cVaU83N5Md67JoqqCBd5z","8fFvIyGEBFCqgGREWfd/YJ"]],-193,[0,["1cVaU83N5Md67JoqqCBd5z","3ew1Vo2adBpqZ739+OrPkj"]]],[5,["graphicNode"],-196,[0,["78j3SJeChFWY5tDVNRr9co"]],-195,[0,["76om5tMkJAELdAAefMkO6v","854tChFohKeYSTZmJTQ80q"]]],[5,["obstacleGraphic","0"],-198,[0,["78j3SJeChFWY5tDVNRr9co"]],-197,[0,["76om5tMkJAELdAAefMkO6v","c1A9sG8V1OlqPhhySK/Coe"]]],[5,["mainRenderer"],-200,[0,["1cVaU83N5Md67JoqqCBd5z","8fFvIyGEBFCqgGREWfd/YJ"]],-199,[0,["1cVaU83N5Md67JoqqCBd5z","3ew1Vo2adBpqZ739+OrPkj"]]],[5,["mainRenderer"],-202,[0,["1cVaU83N5Md67JoqqCBd5z","8fFvIyGEBFCqgGREWfd/YJ"]],-201,[0,["1cVaU83N5Md67JoqqCBd5z","3ew1Vo2adBpqZ739+OrPkj"]]],[5,["mainRenderer"],-204,[0,["1cVaU83N5Md67JoqqCBd5z","8fFvIyGEBFCqgGREWfd/YJ"]],-203,[0,["1cVaU83N5Md67JoqqCBd5z","3ew1Vo2adBpqZ739+OrPkj"]]],[5,["graphicNode"],-206,[0,["78j3SJeChFWY5tDVNRr9co"]],-205,[0,["76om5tMkJAELdAAefMkO6v","854tChFohKeYSTZmJTQ80q"]]],[5,["obstacleGraphic","0"],-208,[0,["78j3SJeChFWY5tDVNRr9co"]],-207,[0,["76om5tMkJAELdAAefMkO6v","c1A9sG8V1OlqPhhySK/Coe"]]],[5,["mainRenderer"],-210,[0,["1cVaU83N5Md67JoqqCBd5z","8fFvIyGEBFCqgGREWfd/YJ"]],-209,[0,["1cVaU83N5Md67JoqqCBd5z","3ew1Vo2adBpqZ739+OrPkj"]]],[5,["mainRenderer"],-212,[0,["1cVaU83N5Md67JoqqCBd5z","8fFvIyGEBFCqgGREWfd/YJ"]],-211,[0,["1cVaU83N5Md67JoqqCBd5z","3ew1Vo2adBpqZ739+OrPkj"]]],[5,["mainRenderer"],-214,[0,["1cVaU83N5Md67JoqqCBd5z","8fFvIyGEBFCqgGREWfd/YJ"]],-213,[0,["1cVaU83N5Md67JoqqCBd5z","3ew1Vo2adBpqZ739+OrPkj"]]],[5,["graphicNode"],-216,[0,["78j3SJeChFWY5tDVNRr9co"]],-215,[0,["76om5tMkJAELdAAefMkO6v","854tChFohKeYSTZmJTQ80q"]]],[5,["obstacleGraphic","0"],-218,[0,["78j3SJeChFWY5tDVNRr9co"]],-217,[0,["76om5tMkJAELdAAefMkO6v","c1A9sG8V1OlqPhhySK/Coe"]]],[5,["mainRenderer"],-220,[0,["1cVaU83N5Md67JoqqCBd5z","8fFvIyGEBFCqgGREWfd/YJ"]],-219,[0,["1cVaU83N5Md67JoqqCBd5z","3ew1Vo2adBpqZ739+OrPkj"]]],[5,["mainRenderer"],-222,[0,["1cVaU83N5Md67JoqqCBd5z","8fFvIyGEBFCqgGREWfd/YJ"]],-221,[0,["1cVaU83N5Md67JoqqCBd5z","3ew1Vo2adBpqZ739+OrPkj"]]],[5,["mainRenderer"],-224,[0,["1cVaU83N5Md67JoqqCBd5z","8fFvIyGEBFCqgGREWfd/YJ"]],-223,[0,["1cVaU83N5Md67JoqqCBd5z","3ew1Vo2adBpqZ739+OrPkj"]]],[5,["graphicNode"],-226,[0,["78j3SJeChFWY5tDVNRr9co"]],-225,[0,["76om5tMkJAELdAAefMkO6v","854tChFohKeYSTZmJTQ80q"]]],[5,["obstacleGraphic","0"],-228,[0,["78j3SJeChFWY5tDVNRr9co"]],-227,[0,["76om5tMkJAELdAAefMkO6v","c1A9sG8V1OlqPhhySK/Coe"]]],[5,["mainRenderer"],-230,[0,["1cVaU83N5Md67JoqqCBd5z","8fFvIyGEBFCqgGREWfd/YJ"]],-229,[0,["1cVaU83N5Md67JoqqCBd5z","3ew1Vo2adBpqZ739+OrPkj"]]],[5,["mainRenderer"],-232,[0,["1cVaU83N5Md67JoqqCBd5z","8fFvIyGEBFCqgGREWfd/YJ"]],-231,[0,["1cVaU83N5Md67JoqqCBd5z","3ew1Vo2adBpqZ739+OrPkj"]]],[5,["mainRenderer"],-234,[0,["1cVaU83N5Md67JoqqCBd5z","8fFvIyGEBFCqgGREWfd/YJ"]],-233,[0,["1cVaU83N5Md67JoqqCBd5z","3ew1Vo2adBpqZ739+OrPkj"]]]],[-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12]]],[11,0,{},1,[10,"7f7WjHcwRBCY/EdrI6zFjb",null,null,-264,[46,"acRa34YGNGj5QIpA09N+Rn",1,[[47,[0,["7f7WjHcwRBCY/EdrI6zFjb"]],[-253,-254,-255,-256,-257,-258,-259,-260,-261,-262,-263]]],[[1,"base_level-010",["_name"],-249],[2,["_lpos"],-250,[1,0,0,-216]],[2,["_lrot"],-251,[3,0,0,0,1]],[2,["_euler"],-252,[1,0,0,0]]]],666]],[11,0,{},1,[10,"7f7WjHcwRBCY/EdrI6zFjb",null,null,-280,[46,"b4ZTx6/aFJBoZQdQnVFS2y",1,[[47,[0,["7f7WjHcwRBCY/EdrI6zFjb"]],[-269,-270,-271,-272,-273,-274,-275,-276,-277,-278,-279]]],[[1,"base_level-011",["_name"],-265],[2,["_lpos"],-266,[1,0,0,-240]],[2,["_lrot"],-267,[3,0,0,0,1]],[2,["_euler"],-268,[1,0,0,0]]]],766]],[11,0,{},1,[10,"7f7WjHcwRBCY/EdrI6zFjb",null,null,-294,[46,"77j7niRJ1Cs7odSnFG4A2H",1,[[47,[0,["7f7WjHcwRBCY/EdrI6zFjb"]],[-285,-286,-287,-288,-289,-290,-291,-292,-293]]],[[1,"base_level-012",["_name"],-281],[2,["_lpos"],-282,[1,0,0,-264]],[2,["_lrot"],-283,[3,0,0,0,1]],[2,["_euler"],-284,[1,0,0,0]]]],866]],[11,0,{},1,[10,"7f7WjHcwRBCY/EdrI6zFjb",null,null,-307,[46,"edgSZWf+lKQbXW2/1e2bwr",1,[[47,[0,["7f7WjHcwRBCY/EdrI6zFjb"]],[-299,-300,-301,-302,-303,-304,-305,-306]]],[[1,"base_level-004",["_name"],-295],[2,["_lpos"],-296,[1,0,0,-72]],[2,["_lrot"],-297,[3,0,0,0,1]],[2,["_euler"],-298,[1,0,0,0]]]],230]],[11,0,{},1,[10,"7f7WjHcwRBCY/EdrI6zFjb",null,null,-320,[46,"490XFW/JNH/rAJa9AP8jES",1,[[47,[0,["7f7WjHcwRBCY/EdrI6zFjb"]],[-312,-313,-314,-315,-316,-317,-318,-319]]],[[1,"base_level-005",["_name"],-308],[2,["_lpos"],-309,[1,0,0,-96]],[2,["_lrot"],-310,[3,0,0,0,1]],[2,["_euler"],-311,[1,0,0,0]]]],298]],[11,0,{},1,[10,"7f7WjHcwRBCY/EdrI6zFjb",null,null,-333,[46,"22PlIY6DVGVqC4NWdtUivz",1,[[47,[0,["7f7WjHcwRBCY/EdrI6zFjb"]],[-325,-326,-327,-328,-329,-330,-331,-332]]],[[1,"base_level-002",["_name"],-321],[2,["_lpos"],-322,[1,0,0,-24]],[2,["_lrot"],-323,[3,0,0,0,1]],[2,["_euler"],-324,[1,0,0,0]]]],65]],[11,0,{},1,[10,"7f7WjHcwRBCY/EdrI6zFjb",null,null,-347,[46,"c4Lp58hsZGSrMO6ZSFtOLN",1,[[47,[0,["7f7WjHcwRBCY/EdrI6zFjb"]],[-339,-340,-341,-342,-343,-344,-345,-346]]],[[1,"base_level-003",["_name"],-334],[2,["_lpos"],-335,[1,0,0,-48]],[2,["_lrot"],-336,[3,0,0,0,1]],[2,["_euler"],-337,[1,0,0,0]],[2,["_lscale"],-338,[1,1,1,1]]]],162]],[11,0,{},1,[10,"7f7WjHcwRBCY/EdrI6zFjb",null,null,-360,[46,"cf0CB78GpFyLMifmBn1S6Z",1,[[47,[0,["7f7WjHcwRBCY/EdrI6zFjb"]],[-352,-353,-354,-355,-356,-357,-358,-359]]],[[1,"base_level-006",["_name"],-348],[2,["_lpos"],-349,[1,0,0,-120]],[2,["_lrot"],-350,[3,0,0,0,1]],[2,["_euler"],-351,[1,0,0,0]]]],366]],[11,0,{},1,[10,"7f7WjHcwRBCY/EdrI6zFjb",null,null,-373,[46,"00oWzhrchN05tfA0XJCbox",1,[[47,[0,["7f7WjHcwRBCY/EdrI6zFjb"]],[-365,-366,-367,-368,-369,-370,-371,-372]]],[[1,"base_level-007",["_name"],-361],[2,["_lpos"],-362,[1,0,0,-144]],[2,["_lrot"],-363,[3,0,0,0,1]],[2,["_euler"],-364,[1,0,0,0]]]],434]],[11,0,{},1,[10,"7f7WjHcwRBCY/EdrI6zFjb",null,null,-386,[46,"c6OiNzBNVOHrftHt3N/D4x",1,[[47,[0,["7f7WjHcwRBCY/EdrI6zFjb"]],[-378,-379,-380,-381,-382,-383,-384,-385]]],[[1,"base_level-008",["_name"],-374],[2,["_lpos"],-375,[1,0,0,-168]],[2,["_lrot"],-376,[3,0,0,0,1]],[2,["_euler"],-377,[1,0,0,0]]]],502]],[11,0,{},1,[10,"7f7WjHcwRBCY/EdrI6zFjb",null,null,-398,[46,"55/JfZMGdKRpjgzNlxexXP",1,[[47,[0,["7f7WjHcwRBCY/EdrI6zFjb"]],[-391,-392,-393,-394,-395,-396,-397]]],[[1,"base_level-009",["_name"],-387],[2,["_lpos"],-388,[1,0,0,-192]],[2,["_lrot"],-389,[3,0,0,0,1]],[2,["_euler"],-390,[1,0,0,0]]]],570]],[0,["8dt/KCiu1GOJ6DGYai+gUP"]],[0,["8dt/KCiu1GOJ6DGYai+gUP"]],[0,["8dt/KCiu1GOJ6DGYai+gUP"]],[0,["8dt/KCiu1GOJ6DGYai+gUP"]],[0,["8dt/KCiu1GOJ6DGYai+gUP"]],[0,["8dt/KCiu1GOJ6DGYai+gUP"]],[0,["8dt/KCiu1GOJ6DGYai+gUP"]],[0,["8dt/KCiu1GOJ6DGYai+gUP"]],[0,["8dt/KCiu1GOJ6DGYai+gUP"]],[0,["8dt/KCiu1GOJ6DGYai+gUP"]],[0,["8dt/KCiu1GOJ6DGYai+gUP"]],[0,["8dt/KCiu1GOJ6DGYai+gUP"]],[0,["8dt/KCiu1GOJ6DGYai+gUP"]],[0,["8dt/KCiu1GOJ6DGYai+gUP"]],[0,["8dt/KCiu1GOJ6DGYai+gUP"]],[0,["8dt/KCiu1GOJ6DGYai+gUP"]],[0,["8dt/KCiu1GOJ6DGYai+gUP"]],[0,["8dt/KCiu1GOJ6DGYai+gUP"]],[0,["8dt/KCiu1GOJ6DGYai+gUP"]],[0,["8dt/KCiu1GOJ6DGYai+gUP"]],[0,["8dt/KCiu1GOJ6DGYai+gUP"]],[0,["8dt/KCiu1GOJ6DGYai+gUP"]],[0,["8dt/KCiu1GOJ6DGYai+gUP"]],[0,["8dt/KCiu1GOJ6DGYai+gUP"]],[0,["8dt/KCiu1GOJ6DGYai+gUP"]],[0,["8dt/KCiu1GOJ6DGYai+gUP"]],[0,["8dt/KCiu1GOJ6DGYai+gUP"]],[0,["8dt/KCiu1GOJ6DGYai+gUP"]],[0,["8dt/KCiu1GOJ6DGYai+gUP"]],[11,0,{},1,[10,"7f7WjHcwRBCY/EdrI6zFjb",null,null,-408,[46,"05K9p8SShPbrl8INw0uvCa",1,[[47,[0,["7f7WjHcwRBCY/EdrI6zFjb"]],[-403,-404,-405,-406,-407]]],[[1,"base_level-001",["_name"],-399],[2,["_lpos"],-400,[1,0,0,0]],[2,["_lrot"],-401,[3,0,0,0,1]],[2,["_euler"],-402,[1,0,0,0]],[17,["_lpos"],[0,["5evAkL1yhLZYGE5EzN5RO1","99XOIpw/tEtZYaNHTD56XL"]],[1,0,1,-10]],[17,["_lpos"],[0,["7ckgHJTgNJS5roXCexKNM2","99XOIpw/tEtZYaNHTD56XL"]],[1,0,1,-13]]]],0]],[13,0,42,[29,"969XNiWY5HsaEzSoCn2x/3",-421,[6,"3dbQ87Zr9CFL1Z+ZgnP/4E",1,[[1,"obstacle_nonjumpable",["_name"],-417],[2,["_lpos"],-418,[1,0,0,-21]],[2,["_lrot"],-419,[3,0,0,0,1]],[2,["_euler"],-420,[1,0,0,0]]]],[[5,["mainRenderer"],-411,[0,["8dt/KCiu1GOJ6DGYai+gUP"]],-410,[0,["3ew1Vo2adBpqZ739+OrPkj"]]],[20,["graphicNode"],-412,[0,["e3hqu0HdxNq4e2nv3hKDvO"]]],[23,-414,-413,[0,["8fFvIyGEBFCqgGREWfd/YJ"]]],[21,["mainRenderer"],-416,-415,[0,["3ew1Vo2adBpqZ739+OrPkj"]]]],[-409],5],[{},"mountedRoot",1,42]],[19,0,{},[18,"Parent",43,[-428],[4,"acUtatGuVN06wkU24sOluQ",null,null,null,1,0]],[12,"e892RDjrxNZISjs1LC/QQv",null,-427,[24,"1cVaU83N5Md67JoqqCBd5z",43,[[26,[0,["e892RDjrxNZISjs1LC/QQv"]],[-426]]],[[1,"Crowd",["_name"],-422],[2,["_lpos"],-423,[1,0,0.181,0.644]],[2,["_lrot"],-424,[3,0,0,0,1]],[2,["_euler"],-425,[1,0,0,0]],[1,true,["isRunwayNPC"],13],[1,true,["shouldGetRandomPose"],13],[1,2,["tripTexture","length"],13],[3,["tripTexture","0"],13,28],[3,["tripTexture","1"],13,29],[1,8,["poses","length"],13],[3,["poses","0"],13,30],[3,["poses","1"],13,31],[3,["poses","2"],13,32],[3,["poses","3"],13,33],[3,["poses","4"],13,34],[1,null,["poses","5"],13],[1,null,["poses","6"],13],[1,null,["poses","7"],13]],[[0,["8dt/KCiu1GOJ6DGYai+gUP"]]]],[[15,["mainRenderer"],[0,["0b8pE5sPNepqN6zgbDPnqa"]]]],6]],[13,0,42,[29,"969XNiWY5HsaEzSoCn2x/3",-441,[6,"798ln2yWhC0a4YOvcPzbPF",1,[[1,"obstacle_nonjumpable-001",["_name"],-437],[2,["_lpos"],-438,[1,-2,0,-19]],[2,["_lrot"],-439,[3,0,0,0,1]],[2,["_euler"],-440,[1,0,0,0]]]],[[5,["mainRenderer"],-431,[0,["8dt/KCiu1GOJ6DGYai+gUP"]],-430,[0,["3ew1Vo2adBpqZ739+OrPkj"]]],[20,["graphicNode"],-432,[0,["e3hqu0HdxNq4e2nv3hKDvO"]]],[23,-434,-433,[0,["8fFvIyGEBFCqgGREWfd/YJ"]]],[21,["mainRenderer"],-436,-435,[0,["3ew1Vo2adBpqZ739+OrPkj"]]]],[-429],35],[{},"mountedRoot",1,42]],[19,0,{},[18,"Parent",45,[-448],[4,"acUtatGuVN06wkU24sOluQ",null,null,null,1,0]],[12,"e892RDjrxNZISjs1LC/QQv",null,-447,[24,"1cVaU83N5Md67JoqqCBd5z",45,[[26,[0,["e892RDjrxNZISjs1LC/QQv"]],[-446]]],[[1,"Crowd",["_name"],-442],[2,["_lpos"],-443,[1,0,0.181,0.644]],[2,["_lrot"],-444,[3,0,0,0,1]],[2,["_euler"],-445,[1,0,0,0]],[1,true,["isRunwayNPC"],14],[1,true,["shouldGetRandomPose"],14],[1,2,["tripTexture","length"],14],[3,["tripTexture","0"],14,58],[3,["tripTexture","1"],14,59],[1,8,["poses","length"],14],[3,["poses","0"],14,60],[3,["poses","1"],14,61],[3,["poses","2"],14,62],[3,["poses","3"],14,63],[3,["poses","4"],14,64],[1,null,["poses","5"],14],[1,null,["poses","6"],14],[1,null,["poses","7"],14]],[[0,["8dt/KCiu1GOJ6DGYai+gUP"]]]],[[15,["mainRenderer"],[0,["0b8pE5sPNepqN6zgbDPnqa"]]]],36]],[13,0,7,[29,"969XNiWY5HsaEzSoCn2x/3",-461,[6,"03+v4Xh71M5oOCdEZ1Apkk",1,[[1,"obstacle_nonjumpable",["_name"],-457],[2,["_lpos"],-458,[1,2,0,-7]],[2,["_lrot"],-459,[3,0,0,0,1]],[2,["_euler"],-460,[1,0,0,0]]]],[[5,["mainRenderer"],-451,[0,["8dt/KCiu1GOJ6DGYai+gUP"]],-450,[0,["3ew1Vo2adBpqZ739+OrPkj"]]],[20,["graphicNode"],-452,[0,["e3hqu0HdxNq4e2nv3hKDvO"]]],[23,-454,-453,[0,["8fFvIyGEBFCqgGREWfd/YJ"]]],[21,["mainRenderer"],-456,-455,[0,["3ew1Vo2adBpqZ739+OrPkj"]]]],[-449],72],[{},"mountedRoot",1,7]],[19,0,{},[18,"Parent",47,[-468],[4,"acUtatGuVN06wkU24sOluQ",null,null,null,1,0]],[12,"e892RDjrxNZISjs1LC/QQv",null,-467,[24,"1cVaU83N5Md67JoqqCBd5z",47,[[26,[0,["e892RDjrxNZISjs1LC/QQv"]],[-466]]],[[1,"Crowd",["_name"],-462],[2,["_lpos"],-463,[1,0,0.181,0.644]],[2,["_lrot"],-464,[3,0,0,0,1]],[2,["_euler"],-465,[1,0,0,0]],[1,true,["isRunwayNPC"],15],[1,true,["shouldGetRandomPose"],15],[1,2,["tripTexture","length"],15],[3,["tripTexture","0"],15,95],[3,["tripTexture","1"],15,96],[1,8,["poses","length"],15],[3,["poses","0"],15,97],[3,["poses","1"],15,98],[3,["poses","2"],15,99],[3,["poses","3"],15,100],[3,["poses","4"],15,101],[1,null,["poses","5"],15],[1,null,["poses","6"],15],[1,null,["poses","7"],15]],[[0,["8dt/KCiu1GOJ6DGYai+gUP"]]]],[[15,["mainRenderer"],[0,["0b8pE5sPNepqN6zgbDPnqa"]]]],73]],[13,0,7,[29,"969XNiWY5HsaEzSoCn2x/3",-481,[6,"fbPw6eEmNHkpsUfRnlCuYr",1,[[1,"obstacle_nonjumpable-001",["_name"],-477],[2,["_lpos"],-478,[1,0,0,-12]],[2,["_lrot"],-479,[3,0,0,0,1]],[2,["_euler"],-480,[1,0,0,0]]]],[[5,["mainRenderer"],-471,[0,["8dt/KCiu1GOJ6DGYai+gUP"]],-470,[0,["3ew1Vo2adBpqZ739+OrPkj"]]],[20,["graphicNode"],-472,[0,["e3hqu0HdxNq4e2nv3hKDvO"]]],[23,-474,-473,[0,["8fFvIyGEBFCqgGREWfd/YJ"]]],[21,["mainRenderer"],-476,-475,[0,["3ew1Vo2adBpqZ739+OrPkj"]]]],[-469],102],[{},"mountedRoot",1,7]],[19,0,{},[18,"Parent",49,[-488],[4,"acUtatGuVN06wkU24sOluQ",null,null,null,1,0]],[12,"e892RDjrxNZISjs1LC/QQv",null,-487,[24,"1cVaU83N5Md67JoqqCBd5z",49,[[26,[0,["e892RDjrxNZISjs1LC/QQv"]],[-486]]],[[1,"Crowd",["_name"],-482],[2,["_lpos"],-483,[1,0,0.181,0.644]],[2,["_lrot"],-484,[3,0,0,0,1]],[2,["_euler"],-485,[1,0,0,0]],[1,true,["isRunwayNPC"],16],[1,true,["shouldGetRandomPose"],16],[1,2,["tripTexture","length"],16],[3,["tripTexture","0"],16,125],[3,["tripTexture","1"],16,126],[1,8,["poses","length"],16],[3,["poses","0"],16,127],[3,["poses","1"],16,128],[3,["poses","2"],16,129],[3,["poses","3"],16,130],[3,["poses","4"],16,131],[1,null,["poses","5"],16],[1,null,["poses","6"],16],[1,null,["poses","7"],16]],[[0,["8dt/KCiu1GOJ6DGYai+gUP"]]]],[[15,["mainRenderer"],[0,["0b8pE5sPNepqN6zgbDPnqa"]]]],103]],[13,0,7,[29,"969XNiWY5HsaEzSoCn2x/3",-501,[6,"f2EIx8PPJGHoCXqn1uaDW0",1,[[1,"obstacle_nonjumpable-002",["_name"],-497],[2,["_lpos"],-498,[1,-2,0,-7]],[2,["_lrot"],-499,[3,0,0,0,1]],[2,["_euler"],-500,[1,0,0,0]]]],[[5,["mainRenderer"],-491,[0,["8dt/KCiu1GOJ6DGYai+gUP"]],-490,[0,["3ew1Vo2adBpqZ739+OrPkj"]]],[20,["graphicNode"],-492,[0,["e3hqu0HdxNq4e2nv3hKDvO"]]],[23,-494,-493,[0,["8fFvIyGEBFCqgGREWfd/YJ"]]],[21,["mainRenderer"],-496,-495,[0,["3ew1Vo2adBpqZ739+OrPkj"]]]],[-489],132],[{},"mountedRoot",1,7]],[19,0,{},[18,"Parent",51,[-508],[4,"acUtatGuVN06wkU24sOluQ",null,null,null,1,0]],[12,"e892RDjrxNZISjs1LC/QQv",null,-507,[24,"1cVaU83N5Md67JoqqCBd5z",51,[[26,[0,["e892RDjrxNZISjs1LC/QQv"]],[-506]]],[[1,"Crowd",["_name"],-502],[2,["_lpos"],-503,[1,0,0.181,0.644]],[2,["_lrot"],-504,[3,0,0,0,1]],[2,["_euler"],-505,[1,0,0,0]],[1,true,["isRunwayNPC"],17],[1,true,["shouldGetRandomPose"],17],[1,2,["tripTexture","length"],17],[3,["tripTexture","0"],17,155],[3,["tripTexture","1"],17,156],[1,8,["poses","length"],17],[3,["poses","0"],17,157],[3,["poses","1"],17,158],[3,["poses","2"],17,159],[3,["poses","3"],17,160],[3,["poses","4"],17,161],[1,null,["poses","5"],17],[1,null,["poses","6"],17],[1,null,["poses","7"],17]],[[0,["8dt/KCiu1GOJ6DGYai+gUP"]]]],[[15,["mainRenderer"],[0,["0b8pE5sPNepqN6zgbDPnqa"]]]],133]],[13,0,8,[29,"969XNiWY5HsaEzSoCn2x/3",-521,[6,"2aLKCtTN5MTJVQJTH7jxgI",1,[[1,"obstacle_nonjumpable",["_name"],-517],[2,["_lpos"],-518,[1,0,0,-9]],[2,["_lrot"],-519,[3,0,0,0,1]],[2,["_euler"],-520,[1,0,0,0]]]],[[5,["mainRenderer"],-511,[0,["8dt/KCiu1GOJ6DGYai+gUP"]],-510,[0,["3ew1Vo2adBpqZ739+OrPkj"]]],[20,["graphicNode"],-512,[0,["e3hqu0HdxNq4e2nv3hKDvO"]]],[23,-514,-513,[0,["8fFvIyGEBFCqgGREWfd/YJ"]]],[21,["mainRenderer"],-516,-515,[0,["3ew1Vo2adBpqZ739+OrPkj"]]]],[-509],169],[{},"mountedRoot",1,8]],[19,0,{},[18,"Parent",53,[-528],[4,"acUtatGuVN06wkU24sOluQ",null,null,null,1,0]],[12,"e892RDjrxNZISjs1LC/QQv",null,-527,[24,"1cVaU83N5Md67JoqqCBd5z",53,[[26,[0,["e892RDjrxNZISjs1LC/QQv"]],[-526]]],[[1,"Crowd",["_name"],-522],[2,["_lpos"],-523,[1,0,0.181,0.644]],[2,["_lrot"],-524,[3,0,0,0,1]],[2,["_euler"],-525,[1,0,0,0]],[1,true,["isRunwayNPC"],18],[1,true,["shouldGetRandomPose"],18],[1,2,["tripTexture","length"],18],[3,["tripTexture","0"],18,192],[3,["tripTexture","1"],18,193],[1,8,["poses","length"],18],[3,["poses","0"],18,194],[3,["poses","1"],18,195],[3,["poses","2"],18,196],[3,["poses","3"],18,197],[3,["poses","4"],18,198],[1,null,["poses","5"],18],[1,null,["poses","6"],18],[1,null,["poses","7"],18]],[[0,["8dt/KCiu1GOJ6DGYai+gUP"]]]],[[15,["mainRenderer"],[0,["0b8pE5sPNepqN6zgbDPnqa"]]]],170]],[13,0,8,[29,"969XNiWY5HsaEzSoCn2x/3",-541,[6,"ecG6DynalKFIN9lL7T+mit",1,[[1,"obstacle_nonjumpable-001",["_name"],-537],[2,["_lpos"],-538,[1,-2,0,-9]],[2,["_lrot"],-539,[3,0,0,0,1]],[2,["_euler"],-540,[1,0,0,0]]]],[[5,["mainRenderer"],-531,[0,["8dt/KCiu1GOJ6DGYai+gUP"]],-530,[0,["3ew1Vo2adBpqZ739+OrPkj"]]],[20,["graphicNode"],-532,[0,["e3hqu0HdxNq4e2nv3hKDvO"]]],[23,-534,-533,[0,["8fFvIyGEBFCqgGREWfd/YJ"]]],[21,["mainRenderer"],-536,-535,[0,["3ew1Vo2adBpqZ739+OrPkj"]]]],[-529],199],[{},"mountedRoot",1,8]],[19,0,{},[18,"Parent",55,[-548],[4,"acUtatGuVN06wkU24sOluQ",null,null,null,1,0]],[12,"e892RDjrxNZISjs1LC/QQv",null,-547,[24,"1cVaU83N5Md67JoqqCBd5z",55,[[26,[0,["e892RDjrxNZISjs1LC/QQv"]],[-546]]],[[1,"Crowd",["_name"],-542],[2,["_lpos"],-543,[1,0,0.181,0.644]],[2,["_lrot"],-544,[3,0,0,0,1]],[2,["_euler"],-545,[1,0,0,0]],[1,true,["isRunwayNPC"],19],[1,true,["shouldGetRandomPose"],19],[1,2,["tripTexture","length"],19],[3,["tripTexture","0"],19,222],[3,["tripTexture","1"],19,223],[1,8,["poses","length"],19],[3,["poses","0"],19,224],[3,["poses","1"],19,225],[3,["poses","2"],19,226],[3,["poses","3"],19,227],[3,["poses","4"],19,228],[1,null,["poses","5"],19],[1,null,["poses","6"],19],[1,null,["poses","7"],19]],[[0,["8dt/KCiu1GOJ6DGYai+gUP"]]]],[[15,["mainRenderer"],[0,["0b8pE5sPNepqN6zgbDPnqa"]]]],200]],[13,0,5,[29,"969XNiWY5HsaEzSoCn2x/3",-561,[6,"28rfJp0+dMT4wh93GSVlRM",1,[[1,"obstacle_nonjumpable",["_name"],-557],[2,["_lpos"],-558,[1,-2,0,-11]],[2,["_lrot"],-559,[3,0,0,0,1]],[2,["_euler"],-560,[1,0,0,0]]]],[[5,["mainRenderer"],-551,[0,["8dt/KCiu1GOJ6DGYai+gUP"]],-550,[0,["3ew1Vo2adBpqZ739+OrPkj"]]],[20,["graphicNode"],-552,[0,["e3hqu0HdxNq4e2nv3hKDvO"]]],[23,-554,-553,[0,["8fFvIyGEBFCqgGREWfd/YJ"]]],[21,["mainRenderer"],-556,-555,[0,["3ew1Vo2adBpqZ739+OrPkj"]]]],[-549],234],[{},"mountedRoot",1,5]],[19,0,{},[18,"Parent",57,[-568],[4,"acUtatGuVN06wkU24sOluQ",null,null,null,1,0]],[12,"e892RDjrxNZISjs1LC/QQv",null,-567,[24,"1cVaU83N5Md67JoqqCBd5z",57,[[26,[0,["e892RDjrxNZISjs1LC/QQv"]],[-566]]],[[1,"Crowd",["_name"],-562],[2,["_lpos"],-563,[1,0,0.181,0.644]],[2,["_lrot"],-564,[3,0,0,0,1]],[2,["_euler"],-565,[1,0,0,0]],[1,true,["isRunwayNPC"],20],[1,true,["shouldGetRandomPose"],20],[1,2,["tripTexture","length"],20],[3,["tripTexture","0"],20,257],[3,["tripTexture","1"],20,258],[1,8,["poses","length"],20],[3,["poses","0"],20,259],[3,["poses","1"],20,260],[3,["poses","2"],20,261],[3,["poses","3"],20,262],[3,["poses","4"],20,263],[1,null,["poses","5"],20],[1,null,["poses","6"],20],[1,null,["poses","7"],20]],[[0,["8dt/KCiu1GOJ6DGYai+gUP"]]]],[[15,["mainRenderer"],[0,["0b8pE5sPNepqN6zgbDPnqa"]]]],235]],[13,0,5,[29,"969XNiWY5HsaEzSoCn2x/3",-581,[6,"b56LjtKmJKdad5Vyl6ImZi",1,[[1,"obstacle_nonjumpable-001",["_name"],-577],[2,["_lpos"],-578,[1,2,0,-8]],[2,["_lrot"],-579,[3,0,0,0,1]],[2,["_euler"],-580,[1,0,0,0]]]],[[5,["mainRenderer"],-571,[0,["8dt/KCiu1GOJ6DGYai+gUP"]],-570,[0,["3ew1Vo2adBpqZ739+OrPkj"]]],[20,["graphicNode"],-572,[0,["e3hqu0HdxNq4e2nv3hKDvO"]]],[23,-574,-573,[0,["8fFvIyGEBFCqgGREWfd/YJ"]]],[21,["mainRenderer"],-576,-575,[0,["3ew1Vo2adBpqZ739+OrPkj"]]]],[-569],264],[{},"mountedRoot",1,5]],[19,0,{},[18,"Parent",59,[-588],[4,"acUtatGuVN06wkU24sOluQ",null,null,null,1,0]],[12,"e892RDjrxNZISjs1LC/QQv",null,-587,[24,"1cVaU83N5Md67JoqqCBd5z",59,[[26,[0,["e892RDjrxNZISjs1LC/QQv"]],[-586]]],[[1,"Crowd",["_name"],-582],[2,["_lpos"],-583,[1,0,0.181,0.644]],[2,["_lrot"],-584,[3,0,0,0,1]],[2,["_euler"],-585,[1,0,0,0]],[1,true,["isRunwayNPC"],21],[1,true,["shouldGetRandomPose"],21],[1,2,["tripTexture","length"],21],[3,["tripTexture","0"],21,287],[3,["tripTexture","1"],21,288],[1,8,["poses","length"],21],[3,["poses","0"],21,289],[3,["poses","1"],21,290],[3,["poses","2"],21,291],[3,["poses","3"],21,292],[3,["poses","4"],21,293],[1,null,["poses","5"],21],[1,null,["poses","6"],21],[1,null,["poses","7"],21]],[[0,["8dt/KCiu1GOJ6DGYai+gUP"]]]],[[15,["mainRenderer"],[0,["0b8pE5sPNepqN6zgbDPnqa"]]]],265]],[13,0,6,[29,"969XNiWY5HsaEzSoCn2x/3",-601,[6,"0bJuN7gC9O6KbJUvvMuJOd",1,[[1,"obstacle_nonjumpable",["_name"],-597],[2,["_lpos"],-598,[1,2,0,-11]],[2,["_lrot"],-599,[3,0,0,0,1]],[2,["_euler"],-600,[1,0,0,0]]]],[[5,["mainRenderer"],-591,[0,["8dt/KCiu1GOJ6DGYai+gUP"]],-590,[0,["3ew1Vo2adBpqZ739+OrPkj"]]],[20,["graphicNode"],-592,[0,["e3hqu0HdxNq4e2nv3hKDvO"]]],[23,-594,-593,[0,["8fFvIyGEBFCqgGREWfd/YJ"]]],[21,["mainRenderer"],-596,-595,[0,["3ew1Vo2adBpqZ739+OrPkj"]]]],[-589],302],[{},"mountedRoot",1,6]],[19,0,{},[18,"Parent",61,[-608],[4,"acUtatGuVN06wkU24sOluQ",null,null,null,1,0]],[12,"e892RDjrxNZISjs1LC/QQv",null,-607,[24,"1cVaU83N5Md67JoqqCBd5z",61,[[26,[0,["e892RDjrxNZISjs1LC/QQv"]],[-606]]],[[1,"Crowd",["_name"],-602],[2,["_lpos"],-603,[1,0,0.181,0.644]],[2,["_lrot"],-604,[3,0,0,0,1]],[2,["_euler"],-605,[1,0,0,0]],[1,true,["isRunwayNPC"],22],[1,true,["shouldGetRandomPose"],22],[1,2,["tripTexture","length"],22],[3,["tripTexture","0"],22,325],[3,["tripTexture","1"],22,326],[1,8,["poses","length"],22],[3,["poses","0"],22,327],[3,["poses","1"],22,328],[3,["poses","2"],22,329],[3,["poses","3"],22,330],[3,["poses","4"],22,331],[1,null,["poses","5"],22],[1,null,["poses","6"],22],[1,null,["poses","7"],22]],[[0,["8dt/KCiu1GOJ6DGYai+gUP"]]]],[[15,["mainRenderer"],[0,["0b8pE5sPNepqN6zgbDPnqa"]]]],303]],[13,0,6,[29,"969XNiWY5HsaEzSoCn2x/3",-621,[6,"20CDK5Q2NAOqeUFCdjk3a4",1,[[1,"obstacle_nonjumpable-001",["_name"],-617],[2,["_lpos"],-618,[1,0,0,-8]],[2,["_lrot"],-619,[3,0,0,0,1]],[2,["_euler"],-620,[1,0,0,0]]]],[[5,["mainRenderer"],-611,[0,["8dt/KCiu1GOJ6DGYai+gUP"]],-610,[0,["3ew1Vo2adBpqZ739+OrPkj"]]],[20,["graphicNode"],-612,[0,["e3hqu0HdxNq4e2nv3hKDvO"]]],[23,-614,-613,[0,["8fFvIyGEBFCqgGREWfd/YJ"]]],[21,["mainRenderer"],-616,-615,[0,["3ew1Vo2adBpqZ739+OrPkj"]]]],[-609],332],[{},"mountedRoot",1,6]],[19,0,{},[18,"Parent",63,[-628],[4,"acUtatGuVN06wkU24sOluQ",null,null,null,1,0]],[12,"e892RDjrxNZISjs1LC/QQv",null,-627,[24,"1cVaU83N5Md67JoqqCBd5z",63,[[26,[0,["e892RDjrxNZISjs1LC/QQv"]],[-626]]],[[1,"Crowd",["_name"],-622],[2,["_lpos"],-623,[1,0,0.181,0.644]],[2,["_lrot"],-624,[3,0,0,0,1]],[2,["_euler"],-625,[1,0,0,0]],[1,true,["isRunwayNPC"],23],[1,true,["shouldGetRandomPose"],23],[1,2,["tripTexture","length"],23],[3,["tripTexture","0"],23,355],[3,["tripTexture","1"],23,356],[1,8,["poses","length"],23],[3,["poses","0"],23,357],[3,["poses","1"],23,358],[3,["poses","2"],23,359],[3,["poses","3"],23,360],[3,["poses","4"],23,361],[1,null,["poses","5"],23],[1,null,["poses","6"],23],[1,null,["poses","7"],23]],[[0,["8dt/KCiu1GOJ6DGYai+gUP"]]]],[[15,["mainRenderer"],[0,["0b8pE5sPNepqN6zgbDPnqa"]]]],333]],[13,0,9,[29,"969XNiWY5HsaEzSoCn2x/3",-641,[6,"d4RxZ7Qm5Pj6fX8ypTPfiE",1,[[1,"obstacle_nonjumpable",["_name"],-637],[2,["_lpos"],-638,[1,2,0,-11]],[2,["_lrot"],-639,[3,0,0,0,1]],[2,["_euler"],-640,[1,0,0,0]]]],[[5,["mainRenderer"],-631,[0,["8dt/KCiu1GOJ6DGYai+gUP"]],-630,[0,["3ew1Vo2adBpqZ739+OrPkj"]]],[20,["graphicNode"],-632,[0,["e3hqu0HdxNq4e2nv3hKDvO"]]],[23,-634,-633,[0,["8fFvIyGEBFCqgGREWfd/YJ"]]],[21,["mainRenderer"],-636,-635,[0,["3ew1Vo2adBpqZ739+OrPkj"]]]],[-629],374],[{},"mountedRoot",1,9]],[19,0,{},[18,"Parent",65,[-648],[4,"acUtatGuVN06wkU24sOluQ",null,null,null,1,0]],[12,"e892RDjrxNZISjs1LC/QQv",null,-647,[24,"1cVaU83N5Md67JoqqCBd5z",65,[[26,[0,["e892RDjrxNZISjs1LC/QQv"]],[-646]]],[[1,"Crowd",["_name"],-642],[2,["_lpos"],-643,[1,0,0.181,0.644]],[2,["_lrot"],-644,[3,0,0,0,1]],[2,["_euler"],-645,[1,0,0,0]],[1,true,["isRunwayNPC"],24],[1,true,["shouldGetRandomPose"],24],[1,2,["tripTexture","length"],24],[3,["tripTexture","0"],24,397],[3,["tripTexture","1"],24,398],[1,8,["poses","length"],24],[3,["poses","0"],24,399],[3,["poses","1"],24,400],[3,["poses","2"],24,401],[3,["poses","3"],24,402],[3,["poses","4"],24,403],[1,null,["poses","5"],24],[1,null,["poses","6"],24],[1,null,["poses","7"],24]],[[0,["8dt/KCiu1GOJ6DGYai+gUP"]]]],[[15,["mainRenderer"],[0,["0b8pE5sPNepqN6zgbDPnqa"]]]],375]],[13,0,9,[29,"969XNiWY5HsaEzSoCn2x/3",-661,[6,"2bonSO4LBECpDW8JotwFZw",1,[[1,"obstacle_nonjumpable-001",["_name"],-657],[2,["_lpos"],-658,[1,-2,0,-12]],[2,["_lrot"],-659,[3,0,0,0,1]],[2,["_euler"],-660,[1,0,0,0]]]],[[5,["mainRenderer"],-651,[0,["8dt/KCiu1GOJ6DGYai+gUP"]],-650,[0,["3ew1Vo2adBpqZ739+OrPkj"]]],[20,["graphicNode"],-652,[0,["e3hqu0HdxNq4e2nv3hKDvO"]]],[23,-654,-653,[0,["8fFvIyGEBFCqgGREWfd/YJ"]]],[21,["mainRenderer"],-656,-655,[0,["3ew1Vo2adBpqZ739+OrPkj"]]]],[-649],404],[{},"mountedRoot",1,9]],[19,0,{},[18,"Parent",67,[-668],[4,"acUtatGuVN06wkU24sOluQ",null,null,null,1,0]],[12,"e892RDjrxNZISjs1LC/QQv",null,-667,[24,"1cVaU83N5Md67JoqqCBd5z",67,[[26,[0,["e892RDjrxNZISjs1LC/QQv"]],[-666]]],[[1,"Crowd",["_name"],-662],[2,["_lpos"],-663,[1,0,0.181,0.644]],[2,["_lrot"],-664,[3,0,0,0,1]],[2,["_euler"],-665,[1,0,0,0]],[1,true,["isRunwayNPC"],25],[1,true,["shouldGetRandomPose"],25],[1,2,["tripTexture","length"],25],[3,["tripTexture","0"],25,427],[3,["tripTexture","1"],25,428],[1,8,["poses","length"],25],[3,["poses","0"],25,429],[3,["poses","1"],25,430],[3,["poses","2"],25,431],[3,["poses","3"],25,432],[3,["poses","4"],25,433],[1,null,["poses","5"],25],[1,null,["poses","6"],25],[1,null,["poses","7"],25]],[[0,["8dt/KCiu1GOJ6DGYai+gUP"]]]],[[15,["mainRenderer"],[0,["0b8pE5sPNepqN6zgbDPnqa"]]]],405]],[13,0,10,[29,"969XNiWY5HsaEzSoCn2x/3",-681,[6,"3f3SK3yLxMa4/1lLQNYwSv",1,[[1,"obstacle_nonjumpable",["_name"],-677],[2,["_lpos"],-678,[1,2,0,-12]],[2,["_lrot"],-679,[3,0,0,0,1]],[2,["_euler"],-680,[1,0,0,0]]]],[[5,["mainRenderer"],-671,[0,["8dt/KCiu1GOJ6DGYai+gUP"]],-670,[0,["3ew1Vo2adBpqZ739+OrPkj"]]],[20,["graphicNode"],-672,[0,["e3hqu0HdxNq4e2nv3hKDvO"]]],[23,-674,-673,[0,["8fFvIyGEBFCqgGREWfd/YJ"]]],[21,["mainRenderer"],-676,-675,[0,["3ew1Vo2adBpqZ739+OrPkj"]]]],[-669],442],[{},"mountedRoot",1,10]],[19,0,{},[18,"Parent",69,[-688],[4,"acUtatGuVN06wkU24sOluQ",null,null,null,1,0]],[12,"e892RDjrxNZISjs1LC/QQv",null,-687,[24,"1cVaU83N5Md67JoqqCBd5z",69,[[26,[0,["e892RDjrxNZISjs1LC/QQv"]],[-686]]],[[1,"Crowd",["_name"],-682],[2,["_lpos"],-683,[1,0,0.181,0.644]],[2,["_lrot"],-684,[3,0,0,0,1]],[2,["_euler"],-685,[1,0,0,0]],[1,true,["isRunwayNPC"],26],[1,true,["shouldGetRandomPose"],26],[1,2,["tripTexture","length"],26],[3,["tripTexture","0"],26,465],[3,["tripTexture","1"],26,466],[1,8,["poses","length"],26],[3,["poses","0"],26,467],[3,["poses","1"],26,468],[3,["poses","2"],26,469],[3,["poses","3"],26,470],[3,["poses","4"],26,471],[1,null,["poses","5"],26],[1,null,["poses","6"],26],[1,null,["poses","7"],26]],[[0,["8dt/KCiu1GOJ6DGYai+gUP"]]]],[[15,["mainRenderer"],[0,["0b8pE5sPNepqN6zgbDPnqa"]]]],443]],[13,0,10,[29,"969XNiWY5HsaEzSoCn2x/3",-701,[6,"4fcmRDc2BEqoP6779mnI3M",1,[[1,"obstacle_nonjumpable-001",["_name"],-697],[2,["_lpos"],-698,[1,-2,0,-12]],[2,["_lrot"],-699,[3,0,0,0,1]],[2,["_euler"],-700,[1,0,0,0]]]],[[5,["mainRenderer"],-691,[0,["8dt/KCiu1GOJ6DGYai+gUP"]],-690,[0,["3ew1Vo2adBpqZ739+OrPkj"]]],[20,["graphicNode"],-692,[0,["e3hqu0HdxNq4e2nv3hKDvO"]]],[23,-694,-693,[0,["8fFvIyGEBFCqgGREWfd/YJ"]]],[21,["mainRenderer"],-696,-695,[0,["3ew1Vo2adBpqZ739+OrPkj"]]]],[-689],472],[{},"mountedRoot",1,10]],[19,0,{},[18,"Parent",71,[-708],[4,"acUtatGuVN06wkU24sOluQ",null,null,null,1,0]],[12,"e892RDjrxNZISjs1LC/QQv",null,-707,[24,"1cVaU83N5Md67JoqqCBd5z",71,[[26,[0,["e892RDjrxNZISjs1LC/QQv"]],[-706]]],[[1,"Crowd",["_name"],-702],[2,["_lpos"],-703,[1,0,0.181,0.644]],[2,["_lrot"],-704,[3,0,0,0,1]],[2,["_euler"],-705,[1,0,0,0]],[1,true,["isRunwayNPC"],27],[1,true,["shouldGetRandomPose"],27],[1,2,["tripTexture","length"],27],[3,["tripTexture","0"],27,495],[3,["tripTexture","1"],27,496],[1,8,["poses","length"],27],[3,["poses","0"],27,497],[3,["poses","1"],27,498],[3,["poses","2"],27,499],[3,["poses","3"],27,500],[3,["poses","4"],27,501],[1,null,["poses","5"],27],[1,null,["poses","6"],27],[1,null,["poses","7"],27]],[[0,["8dt/KCiu1GOJ6DGYai+gUP"]]]],[[15,["mainRenderer"],[0,["0b8pE5sPNepqN6zgbDPnqa"]]]],473]],[13,0,11,[29,"969XNiWY5HsaEzSoCn2x/3",-721,[6,"66dK0CI8NPSZVPe/OJ3gAK",1,[[1,"obstacle_nonjumpable",["_name"],-717],[2,["_lpos"],-718,[1,2,0,-9]],[2,["_lrot"],-719,[3,0,0,0,1]],[2,["_euler"],-720,[1,0,0,0]]]],[[5,["mainRenderer"],-711,[0,["8dt/KCiu1GOJ6DGYai+gUP"]],-710,[0,["3ew1Vo2adBpqZ739+OrPkj"]]],[20,["graphicNode"],-712,[0,["e3hqu0HdxNq4e2nv3hKDvO"]]],[23,-714,-713,[0,["8fFvIyGEBFCqgGREWfd/YJ"]]],[21,["mainRenderer"],-716,-715,[0,["3ew1Vo2adBpqZ739+OrPkj"]]]],[-709],510],[{},"mountedRoot",1,11]],[19,0,{},[18,"Parent",73,[-728],[4,"acUtatGuVN06wkU24sOluQ",null,null,null,1,0]],[12,"e892RDjrxNZISjs1LC/QQv",null,-727,[24,"1cVaU83N5Md67JoqqCBd5z",73,[[26,[0,["e892RDjrxNZISjs1LC/QQv"]],[-726]]],[[1,"Crowd",["_name"],-722],[2,["_lpos"],-723,[1,0,0.181,0.644]],[2,["_lrot"],-724,[3,0,0,0,1]],[2,["_euler"],-725,[1,0,0,0]],[1,true,["isRunwayNPC"],28],[1,true,["shouldGetRandomPose"],28],[1,2,["tripTexture","length"],28],[3,["tripTexture","0"],28,533],[3,["tripTexture","1"],28,534],[1,8,["poses","length"],28],[3,["poses","0"],28,535],[3,["poses","1"],28,536],[3,["poses","2"],28,537],[3,["poses","3"],28,538],[3,["poses","4"],28,539],[1,null,["poses","5"],28],[1,null,["poses","6"],28],[1,null,["poses","7"],28]],[[0,["8dt/KCiu1GOJ6DGYai+gUP"]]]],[[15,["mainRenderer"],[0,["0b8pE5sPNepqN6zgbDPnqa"]]]],511]],[13,0,11,[29,"969XNiWY5HsaEzSoCn2x/3",-741,[6,"10DmUcYQxPEJSi7oDxSv4P",1,[[1,"obstacle_nonjumpable-001",["_name"],-737],[2,["_lpos"],-738,[1,-2,0,-12]],[2,["_lrot"],-739,[3,0,0,0,1]],[2,["_euler"],-740,[1,0,0,0]]]],[[5,["mainRenderer"],-731,[0,["8dt/KCiu1GOJ6DGYai+gUP"]],-730,[0,["3ew1Vo2adBpqZ739+OrPkj"]]],[20,["graphicNode"],-732,[0,["e3hqu0HdxNq4e2nv3hKDvO"]]],[23,-734,-733,[0,["8fFvIyGEBFCqgGREWfd/YJ"]]],[21,["mainRenderer"],-736,-735,[0,["3ew1Vo2adBpqZ739+OrPkj"]]]],[-729],540],[{},"mountedRoot",1,11]],[19,0,{},[18,"Parent",75,[-748],[4,"acUtatGuVN06wkU24sOluQ",null,null,null,1,0]],[12,"e892RDjrxNZISjs1LC/QQv",null,-747,[24,"1cVaU83N5Md67JoqqCBd5z",75,[[26,[0,["e892RDjrxNZISjs1LC/QQv"]],[-746]]],[[1,"Crowd",["_name"],-742],[2,["_lpos"],-743,[1,0,0.181,0.644]],[2,["_lrot"],-744,[3,0,0,0,1]],[2,["_euler"],-745,[1,0,0,0]],[1,true,["isRunwayNPC"],29],[1,true,["shouldGetRandomPose"],29],[1,2,["tripTexture","length"],29],[3,["tripTexture","0"],29,563],[3,["tripTexture","1"],29,564],[1,8,["poses","length"],29],[3,["poses","0"],29,565],[3,["poses","1"],29,566],[3,["poses","2"],29,567],[3,["poses","3"],29,568],[3,["poses","4"],29,569],[1,null,["poses","5"],29],[1,null,["poses","6"],29],[1,null,["poses","7"],29]],[[0,["8dt/KCiu1GOJ6DGYai+gUP"]]]],[[15,["mainRenderer"],[0,["0b8pE5sPNepqN6zgbDPnqa"]]]],541]],[13,0,12,[29,"969XNiWY5HsaEzSoCn2x/3",-761,[6,"83T1ZxukpDaImXNS3/t+lD",1,[[1,"obstacle_nonjumpable",["_name"],-757],[2,["_lpos"],-758,[1,2,0,-9]],[2,["_lrot"],-759,[3,0,0,0,1]],[2,["_euler"],-760,[1,0,0,0]]]],[[5,["mainRenderer"],-751,[0,["8dt/KCiu1GOJ6DGYai+gUP"]],-750,[0,["3ew1Vo2adBpqZ739+OrPkj"]]],[20,["graphicNode"],-752,[0,["e3hqu0HdxNq4e2nv3hKDvO"]]],[23,-754,-753,[0,["8fFvIyGEBFCqgGREWfd/YJ"]]],[21,["mainRenderer"],-756,-755,[0,["3ew1Vo2adBpqZ739+OrPkj"]]]],[-749],576],[{},"mountedRoot",1,12]],[19,0,{},[18,"Parent",77,[-768],[4,"acUtatGuVN06wkU24sOluQ",null,null,null,1,0]],[12,"e892RDjrxNZISjs1LC/QQv",null,-767,[24,"1cVaU83N5Md67JoqqCBd5z",77,[[26,[0,["e892RDjrxNZISjs1LC/QQv"]],[-766]]],[[1,"Crowd",["_name"],-762],[2,["_lpos"],-763,[1,0,0.181,0.644]],[2,["_lrot"],-764,[3,0,0,0,1]],[2,["_euler"],-765,[1,0,0,0]],[1,true,["isRunwayNPC"],30],[1,true,["shouldGetRandomPose"],30],[1,2,["tripTexture","length"],30],[3,["tripTexture","0"],30,599],[3,["tripTexture","1"],30,600],[1,8,["poses","length"],30],[3,["poses","0"],30,601],[3,["poses","1"],30,602],[3,["poses","2"],30,603],[3,["poses","3"],30,604],[3,["poses","4"],30,605],[1,null,["poses","5"],30],[1,null,["poses","6"],30],[1,null,["poses","7"],30]],[[0,["8dt/KCiu1GOJ6DGYai+gUP"]]]],[[15,["mainRenderer"],[0,["0b8pE5sPNepqN6zgbDPnqa"]]]],577]],[13,0,12,[29,"969XNiWY5HsaEzSoCn2x/3",-781,[6,"f0Z1RVtotMapXjny/fIHU4",1,[[1,"obstacle_nonjumpable-001",["_name"],-777],[2,["_lpos"],-778,[1,2,0,-24]],[2,["_lrot"],-779,[3,0,0,0,1]],[2,["_euler"],-780,[1,0,0,0]]]],[[5,["mainRenderer"],-771,[0,["8dt/KCiu1GOJ6DGYai+gUP"]],-770,[0,["3ew1Vo2adBpqZ739+OrPkj"]]],[20,["graphicNode"],-772,[0,["e3hqu0HdxNq4e2nv3hKDvO"]]],[23,-774,-773,[0,["8fFvIyGEBFCqgGREWfd/YJ"]]],[21,["mainRenderer"],-776,-775,[0,["3ew1Vo2adBpqZ739+OrPkj"]]]],[-769],606],[{},"mountedRoot",1,12]],[19,0,{},[18,"Parent",79,[-788],[4,"acUtatGuVN06wkU24sOluQ",null,null,null,1,0]],[12,"e892RDjrxNZISjs1LC/QQv",null,-787,[24,"1cVaU83N5Md67JoqqCBd5z",79,[[26,[0,["e892RDjrxNZISjs1LC/QQv"]],[-786]]],[[1,"Crowd",["_name"],-782],[2,["_lpos"],-783,[1,0,0.181,0.644]],[2,["_lrot"],-784,[3,0,0,0,1]],[2,["_euler"],-785,[1,0,0,0]],[1,true,["isRunwayNPC"],31],[1,true,["shouldGetRandomPose"],31],[1,2,["tripTexture","length"],31],[3,["tripTexture","0"],31,629],[3,["tripTexture","1"],31,630],[1,8,["poses","length"],31],[3,["poses","0"],31,631],[3,["poses","1"],31,632],[3,["poses","2"],31,633],[3,["poses","3"],31,634],[3,["poses","4"],31,635],[1,null,["poses","5"],31],[1,null,["poses","6"],31],[1,null,["poses","7"],31]],[[0,["8dt/KCiu1GOJ6DGYai+gUP"]]]],[[15,["mainRenderer"],[0,["0b8pE5sPNepqN6zgbDPnqa"]]]],607]],[13,0,12,[29,"969XNiWY5HsaEzSoCn2x/3",-801,[6,"7fEubfT3BMmb9DhSL3ARtO",1,[[1,"obstacle_nonjumpable-002",["_name"],-797],[2,["_lpos"],-798,[1,-2,0,-24]],[2,["_lrot"],-799,[3,0,0,0,1]],[2,["_euler"],-800,[1,0,0,0]]]],[[5,["mainRenderer"],-791,[0,["8dt/KCiu1GOJ6DGYai+gUP"]],-790,[0,["3ew1Vo2adBpqZ739+OrPkj"]]],[20,["graphicNode"],-792,[0,["e3hqu0HdxNq4e2nv3hKDvO"]]],[23,-794,-793,[0,["8fFvIyGEBFCqgGREWfd/YJ"]]],[21,["mainRenderer"],-796,-795,[0,["3ew1Vo2adBpqZ739+OrPkj"]]]],[-789],636],[{},"mountedRoot",1,12]],[19,0,{},[18,"Parent",81,[-808],[4,"acUtatGuVN06wkU24sOluQ",null,null,null,1,0]],[12,"e892RDjrxNZISjs1LC/QQv",null,-807,[24,"1cVaU83N5Md67JoqqCBd5z",81,[[26,[0,["e892RDjrxNZISjs1LC/QQv"]],[-806]]],[[1,"Crowd",["_name"],-802],[2,["_lpos"],-803,[1,0,0.181,0.644]],[2,["_lrot"],-804,[3,0,0,0,1]],[2,["_euler"],-805,[1,0,0,0]],[1,true,["isRunwayNPC"],32],[1,true,["shouldGetRandomPose"],32],[1,2,["tripTexture","length"],32],[3,["tripTexture","0"],32,659],[3,["tripTexture","1"],32,660],[1,8,["poses","length"],32],[3,["poses","0"],32,661],[3,["poses","1"],32,662],[3,["poses","2"],32,663],[3,["poses","3"],32,664],[3,["poses","4"],32,665],[1,null,["poses","5"],32],[1,null,["poses","6"],32],[1,null,["poses","7"],32]],[[0,["8dt/KCiu1GOJ6DGYai+gUP"]]]],[[15,["mainRenderer"],[0,["0b8pE5sPNepqN6zgbDPnqa"]]]],637]],[13,0,2,[29,"969XNiWY5HsaEzSoCn2x/3",-821,[6,"9bQO+gortF5o/3XHIVFtOT",1,[[1,"obstacle_nonjumpable",["_name"],-817],[2,["_lpos"],-818,[1,-2,0,-9]],[2,["_lrot"],-819,[3,0,0,0,1]],[2,["_euler"],-820,[1,0,0,0]]]],[[5,["mainRenderer"],-811,[0,["8dt/KCiu1GOJ6DGYai+gUP"]],-810,[0,["3ew1Vo2adBpqZ739+OrPkj"]]],[20,["graphicNode"],-812,[0,["e3hqu0HdxNq4e2nv3hKDvO"]]],[23,-814,-813,[0,["8fFvIyGEBFCqgGREWfd/YJ"]]],[21,["mainRenderer"],-816,-815,[0,["3ew1Vo2adBpqZ739+OrPkj"]]]],[-809],676],[{},"mountedRoot",1,2]],[19,0,{},[18,"Parent",83,[-828],[4,"acUtatGuVN06wkU24sOluQ",null,null,null,1,0]],[12,"e892RDjrxNZISjs1LC/QQv",null,-827,[24,"1cVaU83N5Md67JoqqCBd5z",83,[[26,[0,["e892RDjrxNZISjs1LC/QQv"]],[-826]]],[[1,"Crowd",["_name"],-822],[2,["_lpos"],-823,[1,0,0.181,0.644]],[2,["_lrot"],-824,[3,0,0,0,1]],[2,["_euler"],-825,[1,0,0,0]],[1,true,["isRunwayNPC"],33],[1,true,["shouldGetRandomPose"],33],[1,2,["tripTexture","length"],33],[3,["tripTexture","0"],33,699],[3,["tripTexture","1"],33,700],[1,8,["poses","length"],33],[3,["poses","0"],33,701],[3,["poses","1"],33,702],[3,["poses","2"],33,703],[3,["poses","3"],33,704],[3,["poses","4"],33,705],[1,null,["poses","5"],33],[1,null,["poses","6"],33],[1,null,["poses","7"],33]],[[0,["8dt/KCiu1GOJ6DGYai+gUP"]]]],[[15,["mainRenderer"],[0,["0b8pE5sPNepqN6zgbDPnqa"]]]],677]],[13,0,2,[29,"969XNiWY5HsaEzSoCn2x/3",-841,[6,"0brogmbqpPErmiOD9yJAwg",1,[[1,"obstacle_nonjumpable-001",["_name"],-837],[2,["_lpos"],-838,[1,0,0,-23]],[2,["_lrot"],-839,[3,0,0,0,1]],[2,["_euler"],-840,[1,0,0,0]]]],[[5,["mainRenderer"],-831,[0,["8dt/KCiu1GOJ6DGYai+gUP"]],-830,[0,["3ew1Vo2adBpqZ739+OrPkj"]]],[20,["graphicNode"],-832,[0,["e3hqu0HdxNq4e2nv3hKDvO"]]],[23,-834,-833,[0,["8fFvIyGEBFCqgGREWfd/YJ"]]],[21,["mainRenderer"],-836,-835,[0,["3ew1Vo2adBpqZ739+OrPkj"]]]],[-829],706],[{},"mountedRoot",1,2]],[19,0,{},[18,"Parent",85,[-848],[4,"acUtatGuVN06wkU24sOluQ",null,null,null,1,0]],[12,"e892RDjrxNZISjs1LC/QQv",null,-847,[24,"1cVaU83N5Md67JoqqCBd5z",85,[[26,[0,["e892RDjrxNZISjs1LC/QQv"]],[-846]]],[[1,"Crowd",["_name"],-842],[2,["_lpos"],-843,[1,0,0.181,0.644]],[2,["_lrot"],-844,[3,0,0,0,1]],[2,["_euler"],-845,[1,0,0,0]],[1,true,["isRunwayNPC"],34],[1,true,["shouldGetRandomPose"],34],[1,2,["tripTexture","length"],34],[3,["tripTexture","0"],34,729],[3,["tripTexture","1"],34,730],[1,8,["poses","length"],34],[3,["poses","0"],34,731],[3,["poses","1"],34,732],[3,["poses","2"],34,733],[3,["poses","3"],34,734],[3,["poses","4"],34,735],[1,null,["poses","5"],34],[1,null,["poses","6"],34],[1,null,["poses","7"],34]],[[0,["8dt/KCiu1GOJ6DGYai+gUP"]]]],[[15,["mainRenderer"],[0,["0b8pE5sPNepqN6zgbDPnqa"]]]],707]],[13,0,2,[29,"969XNiWY5HsaEzSoCn2x/3",-861,[6,"e3XtyYz9tL55/WPLRKdFSW",1,[[1,"obstacle_nonjumpable-003",["_name"],-857],[2,["_lpos"],-858,[1,-2,0,-20]],[2,["_lrot"],-859,[3,0,0,0,1]],[2,["_euler"],-860,[1,0,0,0]]]],[[5,["mainRenderer"],-851,[0,["8dt/KCiu1GOJ6DGYai+gUP"]],-850,[0,["3ew1Vo2adBpqZ739+OrPkj"]]],[20,["graphicNode"],-852,[0,["e3hqu0HdxNq4e2nv3hKDvO"]]],[23,-854,-853,[0,["8fFvIyGEBFCqgGREWfd/YJ"]]],[21,["mainRenderer"],-856,-855,[0,["3ew1Vo2adBpqZ739+OrPkj"]]]],[-849],736],[{},"mountedRoot",1,2]],[19,0,{},[18,"Parent",87,[-868],[4,"acUtatGuVN06wkU24sOluQ",null,null,null,1,0]],[12,"e892RDjrxNZISjs1LC/QQv",null,-867,[24,"1cVaU83N5Md67JoqqCBd5z",87,[[26,[0,["e892RDjrxNZISjs1LC/QQv"]],[-866]]],[[1,"Crowd",["_name"],-862],[2,["_lpos"],-863,[1,0,0.181,0.644]],[2,["_lrot"],-864,[3,0,0,0,1]],[2,["_euler"],-865,[1,0,0,0]],[1,true,["isRunwayNPC"],35],[1,true,["shouldGetRandomPose"],35],[1,2,["tripTexture","length"],35],[3,["tripTexture","0"],35,759],[3,["tripTexture","1"],35,760],[1,8,["poses","length"],35],[3,["poses","0"],35,761],[3,["poses","1"],35,762],[3,["poses","2"],35,763],[3,["poses","3"],35,764],[3,["poses","4"],35,765],[1,null,["poses","5"],35],[1,null,["poses","6"],35],[1,null,["poses","7"],35]],[[0,["8dt/KCiu1GOJ6DGYai+gUP"]]]],[[15,["mainRenderer"],[0,["0b8pE5sPNepqN6zgbDPnqa"]]]],737]],[13,0,3,[29,"969XNiWY5HsaEzSoCn2x/3",-881,[6,"9ffbUKdKlJ0rupYmB5IVL0",1,[[1,"obstacle_nonjumpable",["_name"],-877],[2,["_lpos"],-878,[1,2,0,-9]],[2,["_lrot"],-879,[3,0,0,0,1]],[2,["_euler"],-880,[1,0,0,0]]]],[[5,["mainRenderer"],-871,[0,["8dt/KCiu1GOJ6DGYai+gUP"]],-870,[0,["3ew1Vo2adBpqZ739+OrPkj"]]],[20,["graphicNode"],-872,[0,["e3hqu0HdxNq4e2nv3hKDvO"]]],[23,-874,-873,[0,["8fFvIyGEBFCqgGREWfd/YJ"]]],[21,["mainRenderer"],-876,-875,[0,["3ew1Vo2adBpqZ739+OrPkj"]]]],[-869],776],[{},"mountedRoot",1,3]],[19,0,{},[18,"Parent",89,[-888],[4,"acUtatGuVN06wkU24sOluQ",null,null,null,1,0]],[12,"e892RDjrxNZISjs1LC/QQv",null,-887,[24,"1cVaU83N5Md67JoqqCBd5z",89,[[26,[0,["e892RDjrxNZISjs1LC/QQv"]],[-886]]],[[1,"Crowd",["_name"],-882],[2,["_lpos"],-883,[1,0,0.181,0.644]],[2,["_lrot"],-884,[3,0,0,0,1]],[2,["_euler"],-885,[1,0,0,0]],[1,true,["isRunwayNPC"],36],[1,true,["shouldGetRandomPose"],36],[1,2,["tripTexture","length"],36],[3,["tripTexture","0"],36,799],[3,["tripTexture","1"],36,800],[1,8,["poses","length"],36],[3,["poses","0"],36,801],[3,["poses","1"],36,802],[3,["poses","2"],36,803],[3,["poses","3"],36,804],[3,["poses","4"],36,805],[1,null,["poses","5"],36],[1,null,["poses","6"],36],[1,null,["poses","7"],36]],[[0,["8dt/KCiu1GOJ6DGYai+gUP"]]]],[[15,["mainRenderer"],[0,["0b8pE5sPNepqN6zgbDPnqa"]]]],777]],[13,0,3,[29,"969XNiWY5HsaEzSoCn2x/3",-901,[6,"1ek2jmyapJQrpI+qWafGyu",1,[[1,"obstacle_nonjumpable-001",["_name"],-897],[2,["_lpos"],-898,[1,2,0,-20]],[2,["_lrot"],-899,[3,0,0,0,1]],[2,["_euler"],-900,[1,0,0,0]]]],[[5,["mainRenderer"],-891,[0,["8dt/KCiu1GOJ6DGYai+gUP"]],-890,[0,["3ew1Vo2adBpqZ739+OrPkj"]]],[20,["graphicNode"],-892,[0,["e3hqu0HdxNq4e2nv3hKDvO"]]],[23,-894,-893,[0,["8fFvIyGEBFCqgGREWfd/YJ"]]],[21,["mainRenderer"],-896,-895,[0,["3ew1Vo2adBpqZ739+OrPkj"]]]],[-889],806],[{},"mountedRoot",1,3]],[19,0,{},[18,"Parent",91,[-908],[4,"acUtatGuVN06wkU24sOluQ",null,null,null,1,0]],[12,"e892RDjrxNZISjs1LC/QQv",null,-907,[24,"1cVaU83N5Md67JoqqCBd5z",91,[[26,[0,["e892RDjrxNZISjs1LC/QQv"]],[-906]]],[[1,"Crowd",["_name"],-902],[2,["_lpos"],-903,[1,0,0.181,0.644]],[2,["_lrot"],-904,[3,0,0,0,1]],[2,["_euler"],-905,[1,0,0,0]],[1,true,["isRunwayNPC"],37],[1,true,["shouldGetRandomPose"],37],[1,2,["tripTexture","length"],37],[3,["tripTexture","0"],37,829],[3,["tripTexture","1"],37,830],[1,8,["poses","length"],37],[3,["poses","0"],37,831],[3,["poses","1"],37,832],[3,["poses","2"],37,833],[3,["poses","3"],37,834],[3,["poses","4"],37,835],[1,null,["poses","5"],37],[1,null,["poses","6"],37],[1,null,["poses","7"],37]],[[0,["8dt/KCiu1GOJ6DGYai+gUP"]]]],[[15,["mainRenderer"],[0,["0b8pE5sPNepqN6zgbDPnqa"]]]],807]],[13,0,3,[29,"969XNiWY5HsaEzSoCn2x/3",-921,[6,"a6U3vBsJRLF4OKTp0A+tJ0",1,[[1,"obstacle_nonjumpable-002",["_name"],-917],[2,["_lpos"],-918,[1,0,0,-23]],[2,["_lrot"],-919,[3,0,0,0,1]],[2,["_euler"],-920,[1,0,0,0]]]],[[5,["mainRenderer"],-911,[0,["8dt/KCiu1GOJ6DGYai+gUP"]],-910,[0,["3ew1Vo2adBpqZ739+OrPkj"]]],[20,["graphicNode"],-912,[0,["e3hqu0HdxNq4e2nv3hKDvO"]]],[23,-914,-913,[0,["8fFvIyGEBFCqgGREWfd/YJ"]]],[21,["mainRenderer"],-916,-915,[0,["3ew1Vo2adBpqZ739+OrPkj"]]]],[-909],836],[{},"mountedRoot",1,3]],[19,0,{},[18,"Parent",93,[-928],[4,"acUtatGuVN06wkU24sOluQ",null,null,null,1,0]],[12,"e892RDjrxNZISjs1LC/QQv",null,-927,[24,"1cVaU83N5Md67JoqqCBd5z",93,[[26,[0,["e892RDjrxNZISjs1LC/QQv"]],[-926]]],[[1,"Crowd",["_name"],-922],[2,["_lpos"],-923,[1,0,0.181,0.644]],[2,["_lrot"],-924,[3,0,0,0,1]],[2,["_euler"],-925,[1,0,0,0]],[1,true,["isRunwayNPC"],38],[1,true,["shouldGetRandomPose"],38],[1,2,["tripTexture","length"],38],[3,["tripTexture","0"],38,859],[3,["tripTexture","1"],38,860],[1,8,["poses","length"],38],[3,["poses","0"],38,861],[3,["poses","1"],38,862],[3,["poses","2"],38,863],[3,["poses","3"],38,864],[3,["poses","4"],38,865],[1,null,["poses","5"],38],[1,null,["poses","6"],38],[1,null,["poses","7"],38]],[[0,["8dt/KCiu1GOJ6DGYai+gUP"]]]],[[15,["mainRenderer"],[0,["0b8pE5sPNepqN6zgbDPnqa"]]]],837]],[13,0,4,[29,"969XNiWY5HsaEzSoCn2x/3",-941,[6,"e3rnCtNcxOAaeWaWLIDdn9",1,[[1,"obstacle_nonjumpable",["_name"],-937],[2,["_lpos"],-938,[1,2,0,-9]],[2,["_lrot"],-939,[3,0,0,0,1]],[2,["_euler"],-940,[1,0,0,0]]]],[[5,["mainRenderer"],-931,[0,["8dt/KCiu1GOJ6DGYai+gUP"]],-930,[0,["3ew1Vo2adBpqZ739+OrPkj"]]],[20,["graphicNode"],-932,[0,["e3hqu0HdxNq4e2nv3hKDvO"]]],[23,-934,-933,[0,["8fFvIyGEBFCqgGREWfd/YJ"]]],[21,["mainRenderer"],-936,-935,[0,["3ew1Vo2adBpqZ739+OrPkj"]]]],[-929],874],[{},"mountedRoot",1,4]],[19,0,{},[18,"Parent",95,[-948],[4,"acUtatGuVN06wkU24sOluQ",null,null,null,1,0]],[12,"e892RDjrxNZISjs1LC/QQv",null,-947,[24,"1cVaU83N5Md67JoqqCBd5z",95,[[26,[0,["e892RDjrxNZISjs1LC/QQv"]],[-946]]],[[1,"Crowd",["_name"],-942],[2,["_lpos"],-943,[1,0,0.181,0.644]],[2,["_lrot"],-944,[3,0,0,0,1]],[2,["_euler"],-945,[1,0,0,0]],[1,true,["isRunwayNPC"],39],[1,true,["shouldGetRandomPose"],39],[1,2,["tripTexture","length"],39],[3,["tripTexture","0"],39,897],[3,["tripTexture","1"],39,898],[1,8,["poses","length"],39],[3,["poses","0"],39,899],[3,["poses","1"],39,900],[3,["poses","2"],39,901],[3,["poses","3"],39,902],[3,["poses","4"],39,903],[1,null,["poses","5"],39],[1,null,["poses","6"],39],[1,null,["poses","7"],39]],[[0,["8dt/KCiu1GOJ6DGYai+gUP"]]]],[[15,["mainRenderer"],[0,["0b8pE5sPNepqN6zgbDPnqa"]]]],875]],[13,0,4,[29,"969XNiWY5HsaEzSoCn2x/3",-961,[6,"f9G4VfnX1DWZPGk4g9Kcqt",1,[[1,"obstacle_nonjumpable-001",["_name"],-957],[2,["_lpos"],-958,[1,-2,0,-20]],[2,["_lrot"],-959,[3,0,0,0,1]],[2,["_euler"],-960,[1,0,0,0]]]],[[5,["mainRenderer"],-951,[0,["8dt/KCiu1GOJ6DGYai+gUP"]],-950,[0,["3ew1Vo2adBpqZ739+OrPkj"]]],[20,["graphicNode"],-952,[0,["e3hqu0HdxNq4e2nv3hKDvO"]]],[23,-954,-953,[0,["8fFvIyGEBFCqgGREWfd/YJ"]]],[21,["mainRenderer"],-956,-955,[0,["3ew1Vo2adBpqZ739+OrPkj"]]]],[-949],904],[{},"mountedRoot",1,4]],[19,0,{},[18,"Parent",97,[-968],[4,"acUtatGuVN06wkU24sOluQ",null,null,null,1,0]],[12,"e892RDjrxNZISjs1LC/QQv",null,-967,[24,"1cVaU83N5Md67JoqqCBd5z",97,[[26,[0,["e892RDjrxNZISjs1LC/QQv"]],[-966]]],[[1,"Crowd",["_name"],-962],[2,["_lpos"],-963,[1,0,0.181,0.644]],[2,["_lrot"],-964,[3,0,0,0,1]],[2,["_euler"],-965,[1,0,0,0]],[1,true,["isRunwayNPC"],40],[1,true,["shouldGetRandomPose"],40],[1,2,["tripTexture","length"],40],[3,["tripTexture","0"],40,927],[3,["tripTexture","1"],40,928],[1,8,["poses","length"],40],[3,["poses","0"],40,929],[3,["poses","1"],40,930],[3,["poses","2"],40,931],[3,["poses","3"],40,932],[3,["poses","4"],40,933],[1,null,["poses","5"],40],[1,null,["poses","6"],40],[1,null,["poses","7"],40]],[[0,["8dt/KCiu1GOJ6DGYai+gUP"]]]],[[15,["mainRenderer"],[0,["0b8pE5sPNepqN6zgbDPnqa"]]]],905]],[13,0,4,[29,"969XNiWY5HsaEzSoCn2x/3",-981,[6,"60OxDKGLZOx732jDUTiHXj",1,[[1,"obstacle_nonjumpable-002",["_name"],-977],[2,["_lpos"],-978,[1,2,0,-20]],[2,["_lrot"],-979,[3,0,0,0,1]],[2,["_euler"],-980,[1,0,0,0]]]],[[5,["mainRenderer"],-971,[0,["8dt/KCiu1GOJ6DGYai+gUP"]],-970,[0,["3ew1Vo2adBpqZ739+OrPkj"]]],[20,["graphicNode"],-972,[0,["e3hqu0HdxNq4e2nv3hKDvO"]]],[23,-974,-973,[0,["8fFvIyGEBFCqgGREWfd/YJ"]]],[21,["mainRenderer"],-976,-975,[0,["3ew1Vo2adBpqZ739+OrPkj"]]]],[-969],934],[{},"mountedRoot",1,4]],[19,0,{},[18,"Parent",99,[-988],[4,"acUtatGuVN06wkU24sOluQ",null,null,null,1,0]],[12,"e892RDjrxNZISjs1LC/QQv",null,-987,[24,"1cVaU83N5Md67JoqqCBd5z",99,[[26,[0,["e892RDjrxNZISjs1LC/QQv"]],[-986]]],[[1,"Crowd",["_name"],-982],[2,["_lpos"],-983,[1,0,0.181,0.644]],[2,["_lrot"],-984,[3,0,0,0,1]],[2,["_euler"],-985,[1,0,0,0]],[1,true,["isRunwayNPC"],41],[1,true,["shouldGetRandomPose"],41],[1,2,["tripTexture","length"],41],[3,["tripTexture","0"],41,957],[3,["tripTexture","1"],41,958],[1,8,["poses","length"],41],[3,["poses","0"],41,959],[3,["poses","1"],41,960],[3,["poses","2"],41,961],[3,["poses","3"],41,962],[3,["poses","4"],41,963],[1,null,["poses","5"],41],[1,null,["poses","6"],41],[1,null,["poses","7"],41]],[[0,["8dt/KCiu1GOJ6DGYai+gUP"]]]],[[15,["mainRenderer"],[0,["0b8pE5sPNepqN6zgbDPnqa"]]]],935]],[13,0,42,[29,"969XNiWY5HsaEzSoCn2x/3",-995,[6,"c93hWthHtCdI9TwQK8Y0mZ",1,[[1,"obstacle_jumpable",["_name"],-991],[2,["_lpos"],-992,[1,-2,0,-14]],[2,["_lrot"],-993,[3,0,0,0,1]],[2,["_euler"],-994,[1,0,0,0]]]],[[20,["graphicNode"],-990,[0,["854tChFohKeYSTZmJTQ80q"]]]],[-989],3],[{},"mountedRoot",1,42]],[13,0,7,[29,"969XNiWY5HsaEzSoCn2x/3",-1002,[6,"7c3JaUG2NDmanIwgHyhMMX",1,[[1,"obstacle_jumpable",["_name"],-998],[2,["_lpos"],-999,[1,2,0,-10]],[2,["_lrot"],-1000,[3,0,0,0,1]],[2,["_euler"],-1001,[1,0,0,0]]]],[[20,["graphicNode"],-997,[0,["854tChFohKeYSTZmJTQ80q"]]]],[-996],70],[{},"mountedRoot",1,7]],[13,0,8,[29,"969XNiWY5HsaEzSoCn2x/3",-1009,[6,"57lFpxkwlDZJUrt/6jMlMr",1,[[1,"obstacle_jumpable",["_name"],-1005],[2,["_lpos"],-1006,[1,2,0,-12]],[2,["_lrot"],-1007,[3,0,0,0,1]],[2,["_euler"],-1008,[1,0,0,0]]]],[[20,["graphicNode"],-1004,[0,["854tChFohKeYSTZmJTQ80q"]]]],[-1003],167],[{},"mountedRoot",1,8]],[13,0,5,[29,"969XNiWY5HsaEzSoCn2x/3",-1016,[6,"4fE1iPj5hCaraXetNNSsJX",1,[[1,"obstacle_jumpable",["_name"],-1012],[2,["_lpos"],-1013,[1,0,0,-12]],[2,["_lrot"],-1014,[3,0,0,0,1]],[2,["_euler"],-1015,[1,0,0,0]]]],[[20,["graphicNode"],-1011,[0,["854tChFohKeYSTZmJTQ80q"]]]],[-1010],232],[{},"mountedRoot",1,5]],[13,0,6,[29,"969XNiWY5HsaEzSoCn2x/3",-1023,[6,"c4h3qj9yxLVrWRTYt2EJhY",1,[[1,"obstacle_jumpable",["_name"],-1019],[2,["_lpos"],-1020,[1,-2,0,-12]],[2,["_lrot"],-1021,[3,0,0,0,1]],[2,["_euler"],-1022,[1,0,0,0]]]],[[20,["graphicNode"],-1018,[0,["854tChFohKeYSTZmJTQ80q"]]]],[-1017],300],[{},"mountedRoot",1,6]],[13,0,9,[29,"969XNiWY5HsaEzSoCn2x/3",-1030,[6,"90VcAjV01DBJkM+iK4SGF0",1,[[1,"obstacle_jumpable",["_name"],-1026],[2,["_lpos"],-1027,[1,2,0,-23]],[2,["_lrot"],-1028,[3,0,0,0,1]],[2,["_euler"],-1029,[1,0,0,0]]]],[[20,["graphicNode"],-1025,[0,["854tChFohKeYSTZmJTQ80q"]]]],[-1024],372],[{},"mountedRoot",1,9]],[13,0,10,[29,"969XNiWY5HsaEzSoCn2x/3",-1037,[6,"2aYXooUMlHXpKRONKknlQC",1,[[1,"obstacle_jumpable",["_name"],-1033],[2,["_lpos"],-1034,[1,0,0,-19]],[2,["_lrot"],-1035,[3,0,0,0,1]],[2,["_euler"],-1036,[1,0,0,0]]]],[[20,["graphicNode"],-1032,[0,["854tChFohKeYSTZmJTQ80q"]]]],[-1031],440],[{},"mountedRoot",1,10]],[13,0,11,[29,"969XNiWY5HsaEzSoCn2x/3",-1044,[6,"0dWla7bpxFmbXti8Ha/zN9",1,[[1,"obstacle_jumpable",["_name"],-1040],[2,["_lpos"],-1041,[1,-2,0,-24]],[2,["_lrot"],-1042,[3,0,0,0,1]],[2,["_euler"],-1043,[1,0,0,0]]]],[[20,["graphicNode"],-1039,[0,["854tChFohKeYSTZmJTQ80q"]]]],[-1038],508],[{},"mountedRoot",1,11]],[13,0,12,[29,"969XNiWY5HsaEzSoCn2x/3",-1051,[6,"29HhZpEoxO46eyHAoAakjc",1,[[1,"obstacle_jumpable",["_name"],-1047],[2,["_lpos"],-1048,[1,-2,0,-12]],[2,["_lrot"],-1049,[3,0,0,0,1]],[2,["_euler"],-1050,[1,0,0,0]]]],[[20,["graphicNode"],-1046,[0,["854tChFohKeYSTZmJTQ80q"]]]],[-1045],574],[{},"mountedRoot",1,12]],[13,0,2,[29,"969XNiWY5HsaEzSoCn2x/3",-1058,[6,"fdTWw0089NJa+1AgTIsXUv",1,[[1,"obstacle_jumpable",["_name"],-1054],[2,["_lpos"],-1055,[1,2,0,-8]],[2,["_lrot"],-1056,[3,0,0,0,1]],[2,["_euler"],-1057,[1,0,0,0]]]],[[20,["graphicNode"],-1053,[0,["854tChFohKeYSTZmJTQ80q"]]]],[-1052],674],[{},"mountedRoot",1,2]],[13,0,3,[29,"969XNiWY5HsaEzSoCn2x/3",-1065,[6,"42L45OHGdJLpaWh/NldhxI",1,[[1,"obstacle_jumpable",["_name"],-1061],[2,["_lpos"],-1062,[1,-2,0,-8]],[2,["_lrot"],-1063,[3,0,0,0,1]],[2,["_euler"],-1064,[1,0,0,0]]]],[[20,["graphicNode"],-1060,[0,["854tChFohKeYSTZmJTQ80q"]]]],[-1059],774],[{},"mountedRoot",1,3]],[13,0,4,[29,"969XNiWY5HsaEzSoCn2x/3",-1072,[6,"c42IK/h89FlIBFPHTmm8Q6",1,[[1,"obstacle_jumpable",["_name"],-1068],[2,["_lpos"],-1069,[1,-2,0,-8]],[2,["_lrot"],-1070,[3,0,0,0,1]],[2,["_euler"],-1071,[1,0,0,0]]]],[[20,["graphicNode"],-1067,[0,["854tChFohKeYSTZmJTQ80q"]]]],[-1066],872],[{},"mountedRoot",1,4]],[0,["7f7WjHcwRBCY/EdrI6zFjb"]],[0,["99XOIpw/tEtZYaNHTD56XL"]],[0,["99XOIpw/tEtZYaNHTD56XL"]],[0,["969XNiWY5HsaEzSoCn2x/3"]],[19,0,{},[18,"Parent",101,[-1078],[4,"12InrzwKdCEKrV07dQs4zX",null,null,null,1,0]],[10,"c1A9sG8V1OlqPhhySK/Coe",null,null,-1077,[6,"76om5tMkJAELdAAefMkO6v",101,[[1,"obstacle_graphic",["_name"],-1073],[2,["_lpos"],-1074,[1,0,0,0]],[2,["_lrot"],-1075,[3,0,0,0,1]],[2,["_euler"],-1076,[1,0,0,0]]]],4]],[0,["c1A9sG8V1OlqPhhySK/Coe"]],[0,["969XNiWY5HsaEzSoCn2x/3"]],[0,["e892RDjrxNZISjs1LC/QQv"]],[0,["969XNiWY5HsaEzSoCn2x/3"]],[0,["e892RDjrxNZISjs1LC/QQv"]],[0,["7f7WjHcwRBCY/EdrI6zFjb"]],[0,["99XOIpw/tEtZYaNHTD56XL"]],[0,["99XOIpw/tEtZYaNHTD56XL"]],[0,["99XOIpw/tEtZYaNHTD56XL"]],[0,["99XOIpw/tEtZYaNHTD56XL"]],[0,["969XNiWY5HsaEzSoCn2x/3"]],[19,0,{},[18,"Parent",102,[-1084],[4,"12InrzwKdCEKrV07dQs4zX",null,null,null,1,0]],[10,"c1A9sG8V1OlqPhhySK/Coe",null,null,-1083,[6,"76om5tMkJAELdAAefMkO6v",102,[[1,"obstacle_graphic",["_name"],-1079],[2,["_lpos"],-1080,[1,0,0,0]],[2,["_lrot"],-1081,[3,0,0,0,1]],[2,["_euler"],-1082,[1,0,0,0]]]],71]],[0,["c1A9sG8V1OlqPhhySK/Coe"]],[0,["969XNiWY5HsaEzSoCn2x/3"]],[0,["e892RDjrxNZISjs1LC/QQv"]],[0,["969XNiWY5HsaEzSoCn2x/3"]],[0,["e892RDjrxNZISjs1LC/QQv"]],[0,["969XNiWY5HsaEzSoCn2x/3"]],[0,["e892RDjrxNZISjs1LC/QQv"]],[0,["7f7WjHcwRBCY/EdrI6zFjb"]],[0,["99XOIpw/tEtZYaNHTD56XL"]],[0,["99XOIpw/tEtZYaNHTD56XL"]],[0,["99XOIpw/tEtZYaNHTD56XL"]],[0,["66Ba72ak1JOYCB5CSozCYH"]],[0,["969XNiWY5HsaEzSoCn2x/3"]],[19,0,{},[18,"Parent",103,[-1090],[4,"12InrzwKdCEKrV07dQs4zX",null,null,null,1,0]],[10,"c1A9sG8V1OlqPhhySK/Coe",null,null,-1089,[6,"76om5tMkJAELdAAefMkO6v",103,[[1,"obstacle_graphic",["_name"],-1085],[2,["_lpos"],-1086,[1,0,0,0]],[2,["_lrot"],-1087,[3,0,0,0,1]],[2,["_euler"],-1088,[1,0,0,0]]]],168]],[0,["c1A9sG8V1OlqPhhySK/Coe"]],[0,["969XNiWY5HsaEzSoCn2x/3"]],[0,["e892RDjrxNZISjs1LC/QQv"]],[0,["969XNiWY5HsaEzSoCn2x/3"]],[0,["e892RDjrxNZISjs1LC/QQv"]],[0,["99XOIpw/tEtZYaNHTD56XL"]],[0,["99XOIpw/tEtZYaNHTD56XL"]],[0,["969XNiWY5HsaEzSoCn2x/3"]],[19,0,{},[18,"Parent",104,[-1096],[4,"12InrzwKdCEKrV07dQs4zX",null,null,null,1,0]],[10,"c1A9sG8V1OlqPhhySK/Coe",null,null,-1095,[6,"76om5tMkJAELdAAefMkO6v",104,[[1,"obstacle_graphic",["_name"],-1091],[2,["_lpos"],-1092,[1,0,0,0]],[2,["_lrot"],-1093,[3,0,0,0,1]],[2,["_euler"],-1094,[1,0,0,0]]]],233]],[0,["c1A9sG8V1OlqPhhySK/Coe"]],[0,["969XNiWY5HsaEzSoCn2x/3"]],[0,["e892RDjrxNZISjs1LC/QQv"]],[0,["969XNiWY5HsaEzSoCn2x/3"]],[0,["e892RDjrxNZISjs1LC/QQv"]],[0,["99XOIpw/tEtZYaNHTD56XL"]],[0,["99XOIpw/tEtZYaNHTD56XL"]],[0,["99XOIpw/tEtZYaNHTD56XL"]],[0,["99XOIpw/tEtZYaNHTD56XL"]],[0,["7f7WjHcwRBCY/EdrI6zFjb"]],[0,["c3cWwkhP5He5dmsvAVgOFv"]],[0,["969XNiWY5HsaEzSoCn2x/3"]],[19,0,{},[18,"Parent",105,[-1102],[4,"12InrzwKdCEKrV07dQs4zX",null,null,null,1,0]],[10,"c1A9sG8V1OlqPhhySK/Coe",null,null,-1101,[6,"76om5tMkJAELdAAefMkO6v",105,[[1,"obstacle_graphic",["_name"],-1097],[2,["_lpos"],-1098,[1,0,0,0]],[2,["_lrot"],-1099,[3,0,0,0,1]],[2,["_euler"],-1100,[1,0,0,0]]]],301]],[0,["c1A9sG8V1OlqPhhySK/Coe"]],[0,["969XNiWY5HsaEzSoCn2x/3"]],[0,["e892RDjrxNZISjs1LC/QQv"]],[0,["969XNiWY5HsaEzSoCn2x/3"]],[0,["e892RDjrxNZISjs1LC/QQv"]],[0,["99XOIpw/tEtZYaNHTD56XL"]],[0,["99XOIpw/tEtZYaNHTD56XL"]],[0,["99XOIpw/tEtZYaNHTD56XL"]],[0,["99XOIpw/tEtZYaNHTD56XL"]],[0,["7f7WjHcwRBCY/EdrI6zFjb"]],[0,["99XOIpw/tEtZYaNHTD56XL"]],[0,["99XOIpw/tEtZYaNHTD56XL"]],[0,["99XOIpw/tEtZYaNHTD56XL"]],[0,["66Ba72ak1JOYCB5CSozCYH"]],[0,["99XOIpw/tEtZYaNHTD56XL"]],[0,["969XNiWY5HsaEzSoCn2x/3"]],[19,0,{},[18,"Parent",106,[-1108],[4,"12InrzwKdCEKrV07dQs4zX",null,null,null,1,0]],[10,"c1A9sG8V1OlqPhhySK/Coe",null,null,-1107,[6,"76om5tMkJAELdAAefMkO6v",106,[[1,"obstacle_graphic",["_name"],-1103],[2,["_lpos"],-1104,[1,0,0,0]],[2,["_lrot"],-1105,[3,0,0,0,1]],[2,["_euler"],-1106,[1,0,0,0]]]],373]],[0,["c1A9sG8V1OlqPhhySK/Coe"]],[0,["969XNiWY5HsaEzSoCn2x/3"]],[0,["e892RDjrxNZISjs1LC/QQv"]],[0,["969XNiWY5HsaEzSoCn2x/3"]],[0,["e892RDjrxNZISjs1LC/QQv"]],[0,["7f7WjHcwRBCY/EdrI6zFjb"]],[0,["99XOIpw/tEtZYaNHTD56XL"]],[0,["99XOIpw/tEtZYaNHTD56XL"]],[0,["99XOIpw/tEtZYaNHTD56XL"]],[0,["99XOIpw/tEtZYaNHTD56XL"]],[0,["99XOIpw/tEtZYaNHTD56XL"]],[0,["969XNiWY5HsaEzSoCn2x/3"]],[19,0,{},[18,"Parent",107,[-1114],[4,"12InrzwKdCEKrV07dQs4zX",null,null,null,1,0]],[10,"c1A9sG8V1OlqPhhySK/Coe",null,null,-1113,[6,"76om5tMkJAELdAAefMkO6v",107,[[1,"obstacle_graphic",["_name"],-1109],[2,["_lpos"],-1110,[1,0,0,0]],[2,["_lrot"],-1111,[3,0,0,0,1]],[2,["_euler"],-1112,[1,0,0,0]]]],441]],[0,["c1A9sG8V1OlqPhhySK/Coe"]],[0,["969XNiWY5HsaEzSoCn2x/3"]],[0,["e892RDjrxNZISjs1LC/QQv"]],[0,["969XNiWY5HsaEzSoCn2x/3"]],[0,["e892RDjrxNZISjs1LC/QQv"]],[0,["7f7WjHcwRBCY/EdrI6zFjb"]],[0,["99XOIpw/tEtZYaNHTD56XL"]],[0,["99XOIpw/tEtZYaNHTD56XL"]],[0,["99XOIpw/tEtZYaNHTD56XL"]],[0,["99XOIpw/tEtZYaNHTD56XL"]],[0,["66Ba72ak1JOYCB5CSozCYH"]],[0,["969XNiWY5HsaEzSoCn2x/3"]],[19,0,{},[18,"Parent",108,[-1120],[4,"12InrzwKdCEKrV07dQs4zX",null,null,null,1,0]],[10,"c1A9sG8V1OlqPhhySK/Coe",null,null,-1119,[6,"76om5tMkJAELdAAefMkO6v",108,[[1,"obstacle_graphic",["_name"],-1115],[2,["_lpos"],-1116,[1,0,0,0]],[2,["_lrot"],-1117,[3,0,0,0,1]],[2,["_euler"],-1118,[1,0,0,0]]]],509]],[0,["c1A9sG8V1OlqPhhySK/Coe"]],[0,["969XNiWY5HsaEzSoCn2x/3"]],[0,["e892RDjrxNZISjs1LC/QQv"]],[0,["969XNiWY5HsaEzSoCn2x/3"]],[0,["e892RDjrxNZISjs1LC/QQv"]],[0,["7f7WjHcwRBCY/EdrI6zFjb"]],[0,["99XOIpw/tEtZYaNHTD56XL"]],[0,["99XOIpw/tEtZYaNHTD56XL"]],[0,["99XOIpw/tEtZYaNHTD56XL"]],[0,["969XNiWY5HsaEzSoCn2x/3"]],[19,0,{},[18,"Parent",109,[-1126],[4,"12InrzwKdCEKrV07dQs4zX",null,null,null,1,0]],[10,"c1A9sG8V1OlqPhhySK/Coe",null,null,-1125,[6,"76om5tMkJAELdAAefMkO6v",109,[[1,"obstacle_graphic",["_name"],-1121],[2,["_lpos"],-1122,[1,0,0,0]],[2,["_lrot"],-1123,[3,0,0,0,1]],[2,["_euler"],-1124,[1,0,0,0]]]],575]],[0,["c1A9sG8V1OlqPhhySK/Coe"]],[0,["969XNiWY5HsaEzSoCn2x/3"]],[0,["e892RDjrxNZISjs1LC/QQv"]],[0,["969XNiWY5HsaEzSoCn2x/3"]],[0,["e892RDjrxNZISjs1LC/QQv"]],[0,["969XNiWY5HsaEzSoCn2x/3"]],[0,["e892RDjrxNZISjs1LC/QQv"]],[0,["7f7WjHcwRBCY/EdrI6zFjb"]],[0,["99XOIpw/tEtZYaNHTD56XL"]],[0,["99XOIpw/tEtZYaNHTD56XL"]],[0,["99XOIpw/tEtZYaNHTD56XL"]],[0,["99XOIpw/tEtZYaNHTD56XL"]],[0,["99XOIpw/tEtZYaNHTD56XL"]],[0,["99XOIpw/tEtZYaNHTD56XL"]],[0,["66Ba72ak1JOYCB5CSozCYH"]],[0,["969XNiWY5HsaEzSoCn2x/3"]],[19,0,{},[18,"Parent",110,[-1132],[4,"12InrzwKdCEKrV07dQs4zX",null,null,null,1,0]],[10,"c1A9sG8V1OlqPhhySK/Coe",null,null,-1131,[6,"76om5tMkJAELdAAefMkO6v",110,[[1,"obstacle_graphic",["_name"],-1127],[2,["_lpos"],-1128,[1,0,0,0]],[2,["_lrot"],-1129,[3,0,0,0,1]],[2,["_euler"],-1130,[1,0,0,0]]]],675]],[0,["c1A9sG8V1OlqPhhySK/Coe"]],[0,["969XNiWY5HsaEzSoCn2x/3"]],[0,["e892RDjrxNZISjs1LC/QQv"]],[0,["969XNiWY5HsaEzSoCn2x/3"]],[0,["e892RDjrxNZISjs1LC/QQv"]],[0,["969XNiWY5HsaEzSoCn2x/3"]],[0,["e892RDjrxNZISjs1LC/QQv"]],[0,["7f7WjHcwRBCY/EdrI6zFjb"]],[0,["99XOIpw/tEtZYaNHTD56XL"]],[0,["99XOIpw/tEtZYaNHTD56XL"]],[0,["99XOIpw/tEtZYaNHTD56XL"]],[0,["99XOIpw/tEtZYaNHTD56XL"]],[0,["99XOIpw/tEtZYaNHTD56XL"]],[0,["99XOIpw/tEtZYaNHTD56XL"]],[0,["99XOIpw/tEtZYaNHTD56XL"]],[0,["969XNiWY5HsaEzSoCn2x/3"]],[19,0,{},[18,"Parent",111,[-1138],[4,"12InrzwKdCEKrV07dQs4zX",null,null,null,1,0]],[10,"c1A9sG8V1OlqPhhySK/Coe",null,null,-1137,[6,"76om5tMkJAELdAAefMkO6v",111,[[1,"obstacle_graphic",["_name"],-1133],[2,["_lpos"],-1134,[1,0,0,0]],[2,["_lrot"],-1135,[3,0,0,0,1]],[2,["_euler"],-1136,[1,0,0,0]]]],775]],[0,["c1A9sG8V1OlqPhhySK/Coe"]],[0,["969XNiWY5HsaEzSoCn2x/3"]],[0,["e892RDjrxNZISjs1LC/QQv"]],[0,["969XNiWY5HsaEzSoCn2x/3"]],[0,["e892RDjrxNZISjs1LC/QQv"]],[0,["969XNiWY5HsaEzSoCn2x/3"]],[0,["e892RDjrxNZISjs1LC/QQv"]],[0,["7f7WjHcwRBCY/EdrI6zFjb"]],[0,["99XOIpw/tEtZYaNHTD56XL"]],[0,["99XOIpw/tEtZYaNHTD56XL"]],[0,["99XOIpw/tEtZYaNHTD56XL"]],[0,["99XOIpw/tEtZYaNHTD56XL"]],[0,["66Ba72ak1JOYCB5CSozCYH"]],[0,["969XNiWY5HsaEzSoCn2x/3"]],[19,0,{},[18,"Parent",112,[-1144],[4,"12InrzwKdCEKrV07dQs4zX",null,null,null,1,0]],[10,"c1A9sG8V1OlqPhhySK/Coe",null,null,-1143,[6,"76om5tMkJAELdAAefMkO6v",112,[[1,"obstacle_graphic",["_name"],-1139],[2,["_lpos"],-1140,[1,0,0,0]],[2,["_lrot"],-1141,[3,0,0,0,1]],[2,["_euler"],-1142,[1,0,0,0]]]],873]],[0,["c1A9sG8V1OlqPhhySK/Coe"]],[0,["969XNiWY5HsaEzSoCn2x/3"]],[0,["e892RDjrxNZISjs1LC/QQv"]],[0,["969XNiWY5HsaEzSoCn2x/3"]],[0,["e892RDjrxNZISjs1LC/QQv"]],[0,["969XNiWY5HsaEzSoCn2x/3"]],[0,["e892RDjrxNZISjs1LC/QQv"]],[0,["7f7WjHcwRBCY/EdrI6zFjb"]],[27,44,[7,"8fFvIyGEBFCqgGREWfd/YJ"],[8,9,10,11,12,13,14,15,16,17],[18,19,20,21,22,23,24,25,26,27]],[27,46,[7,"8fFvIyGEBFCqgGREWfd/YJ"],[38,39,40,41,42,43,44,45,46,47],[48,49,50,51,52,53,54,55,56,57]],[27,48,[7,"8fFvIyGEBFCqgGREWfd/YJ"],[75,76,77,78,79,80,81,82,83,84],[85,86,87,88,89,90,91,92,93,94]],[27,50,[7,"8fFvIyGEBFCqgGREWfd/YJ"],[105,106,107,108,109,110,111,112,113,114],[115,116,117,118,119,120,121,122,123,124]],[27,52,[7,"8fFvIyGEBFCqgGREWfd/YJ"],[135,136,137,138,139,140,141,142,143,144],[145,146,147,148,149,150,151,152,153,154]],[27,54,[7,"8fFvIyGEBFCqgGREWfd/YJ"],[172,173,174,175,176,177,178,179,180,181],[182,183,184,185,186,187,188,189,190,191]],[27,56,[7,"8fFvIyGEBFCqgGREWfd/YJ"],[202,203,204,205,206,207,208,209,210,211],[212,213,214,215,216,217,218,219,220,221]],[27,58,[7,"8fFvIyGEBFCqgGREWfd/YJ"],[237,238,239,240,241,242,243,244,245,246],[247,248,249,250,251,252,253,254,255,256]],[27,60,[7,"8fFvIyGEBFCqgGREWfd/YJ"],[267,268,269,270,271,272,273,274,275,276],[277,278,279,280,281,282,283,284,285,286]],[27,62,[7,"8fFvIyGEBFCqgGREWfd/YJ"],[305,306,307,308,309,310,311,312,313,314],[315,316,317,318,319,320,321,322,323,324]],[27,64,[7,"8fFvIyGEBFCqgGREWfd/YJ"],[335,336,337,338,339,340,341,342,343,344],[345,346,347,348,349,350,351,352,353,354]],[27,66,[7,"8fFvIyGEBFCqgGREWfd/YJ"],[377,378,379,380,381,382,383,384,385,386],[387,388,389,390,391,392,393,394,395,396]],[27,68,[7,"8fFvIyGEBFCqgGREWfd/YJ"],[407,408,409,410,411,412,413,414,415,416],[417,418,419,420,421,422,423,424,425,426]],[27,70,[7,"8fFvIyGEBFCqgGREWfd/YJ"],[445,446,447,448,449,450,451,452,453,454],[455,456,457,458,459,460,461,462,463,464]],[27,72,[7,"8fFvIyGEBFCqgGREWfd/YJ"],[475,476,477,478,479,480,481,482,483,484],[485,486,487,488,489,490,491,492,493,494]],[27,74,[7,"8fFvIyGEBFCqgGREWfd/YJ"],[513,514,515,516,517,518,519,520,521,522],[523,524,525,526,527,528,529,530,531,532]],[27,76,[7,"8fFvIyGEBFCqgGREWfd/YJ"],[543,544,545,546,547,548,549,550,551,552],[553,554,555,556,557,558,559,560,561,562]],[27,78,[7,"8fFvIyGEBFCqgGREWfd/YJ"],[579,580,581,582,583,584,585,586,587,588],[589,590,591,592,593,594,595,596,597,598]],[27,80,[7,"8fFvIyGEBFCqgGREWfd/YJ"],[609,610,611,612,613,614,615,616,617,618],[619,620,621,622,623,624,625,626,627,628]],[27,82,[7,"8fFvIyGEBFCqgGREWfd/YJ"],[639,640,641,642,643,644,645,646,647,648],[649,650,651,652,653,654,655,656,657,658]],[27,84,[7,"8fFvIyGEBFCqgGREWfd/YJ"],[679,680,681,682,683,684,685,686,687,688],[689,690,691,692,693,694,695,696,697,698]],[27,86,[7,"8fFvIyGEBFCqgGREWfd/YJ"],[709,710,711,712,713,714,715,716,717,718],[719,720,721,722,723,724,725,726,727,728]],[27,88,[7,"8fFvIyGEBFCqgGREWfd/YJ"],[739,740,741,742,743,744,745,746,747,748],[749,750,751,752,753,754,755,756,757,758]],[27,90,[7,"8fFvIyGEBFCqgGREWfd/YJ"],[779,780,781,782,783,784,785,786,787,788],[789,790,791,792,793,794,795,796,797,798]],[27,92,[7,"8fFvIyGEBFCqgGREWfd/YJ"],[809,810,811,812,813,814,815,816,817,818],[819,820,821,822,823,824,825,826,827,828]],[27,94,[7,"8fFvIyGEBFCqgGREWfd/YJ"],[839,840,841,842,843,844,845,846,847,848],[849,850,851,852,853,854,855,856,857,858]],[27,96,[7,"8fFvIyGEBFCqgGREWfd/YJ"],[877,878,879,880,881,882,883,884,885,886],[887,888,889,890,891,892,893,894,895,896]],[27,98,[7,"8fFvIyGEBFCqgGREWfd/YJ"],[907,908,909,910,911,912,913,914,915,916],[917,918,919,920,921,922,923,924,925,926]],[27,100,[7,"8fFvIyGEBFCqgGREWfd/YJ"],[937,938,939,940,941,942,943,944,945,946],[947,948,949,950,951,952,953,954,955,956]],[13,0,42,[10,"99XOIpw/tEtZYaNHTD56XL",null,null,-1145,[6,"0fYQT9cOpGiZ86aWGBE68h",1,[[1,"basic_collectible-004",["_name"],114],[2,["_lpos"],114,[1,0,1,-14]],[2,["_lrot"],114,[3,0,0,0,1]],[2,["_euler"],114,[1,0,0,0]],[17,["_lpos"],[0,["68kW3uhlJDxJxe3kV3iMqw"]],[1,0,0,-0.093]]]],1],[{},"mountedRoot",1,42]],[13,0,42,[10,"99XOIpw/tEtZYaNHTD56XL",null,null,-1146,[6,"4cjubjahJNj6LBYoNBi7+5",1,[[1,"basic_collectible-007",["_name"],115],[2,["_lpos"],115,[1,2,1,-20]],[2,["_lrot"],115,[3,0,0,0,1]],[2,["_euler"],115,[1,0,0,0]],[17,["_lpos"],[0,["68kW3uhlJDxJxe3kV3iMqw"]],[1,0,0,0]]]],2],[{},"mountedRoot",1,42]],[28,"Quad<ModelComponent>",[22,"Quad",44,[-1147],[4,"e3hqu0HdxNq4e2nv3hKDvO",null,null,null,1,0],[1,0,1.45,0],[1,2.7,2.7,2.7]],[7,"3ew1Vo2adBpqZ739+OrPkj"],[7],[9]],[28,"Quad<ModelComponent>",[22,"Quad",46,[-1148],[4,"e3hqu0HdxNq4e2nv3hKDvO",null,null,null,1,0],[1,0,1.45,0],[1,2.7,2.7,2.7]],[7,"3ew1Vo2adBpqZ739+OrPkj"],[37],[9]],[13,0,7,[10,"99XOIpw/tEtZYaNHTD56XL",null,null,-1149,[6,"5evAkL1yhLZYGE5EzN5RO1",1,[[1,"basic_collectible-002",["_name"],124],[2,["_lpos"],124,[1,-2,1,-13]],[2,["_lrot"],124,[3,0,0,0,1]],[2,["_euler"],124,[1,0,0,0]],[17,["_lpos"],[0,["68kW3uhlJDxJxe3kV3iMqw"]],[1,0,0,0]]]],66],[{},"mountedRoot",1,7]],[13,0,7,[10,"99XOIpw/tEtZYaNHTD56XL",null,null,-1150,[6,"15n/pebdBO26oWKSDmKAdV",1,[[1,"basic_collectible-006",["_name"],125],[2,["_lpos"],125,[1,0,1,-9]],[2,["_lrot"],125,[3,0,0,0,1]],[2,["_euler"],125,[1,0,0,0]],[17,["_lpos"],[0,["68kW3uhlJDxJxe3kV3iMqw"]],[1,0,0,0]]]],67],[{},"mountedRoot",1,7]],[13,0,7,[10,"99XOIpw/tEtZYaNHTD56XL",null,null,-1151,[6,"31Qb9quSJJpICE8nm9KCT5",1,[[1,"basic_collectible-004",["_name"],126],[2,["_lpos"],126,[1,-2,1,-17]],[2,["_lrot"],126,[3,0,0,0,1]],[2,["_euler"],126,[1,0,0,0]],[17,["_lpos"],[0,["68kW3uhlJDxJxe3kV3iMqw"]],[1,0,0,0]]]],68],[{},"mountedRoot",1,7]],[13,0,7,[10,"99XOIpw/tEtZYaNHTD56XL",null,null,-1152,[6,"b2UO35w8pMN5tJQ1bNbxiQ",1,[[1,"basic_collectible-010",["_name"],127],[2,["_lpos"],127,[1,2,1,-1]],[2,["_lrot"],127,[3,0,0,0,1]],[2,["_euler"],127,[1,0,0,0]],[17,["_lpos"],[0,["68kW3uhlJDxJxe3kV3iMqw"]],[1,0,0,0]]]],69],[{},"mountedRoot",1,7]],[28,"Quad<ModelComponent>",[22,"Quad",48,[-1153],[4,"e3hqu0HdxNq4e2nv3hKDvO",null,null,null,1,0],[1,0,1.45,0],[1,2.7,2.7,2.7]],[7,"3ew1Vo2adBpqZ739+OrPkj"],[74],[9]],[28,"Quad<ModelComponent>",[22,"Quad",50,[-1154],[4,"e3hqu0HdxNq4e2nv3hKDvO",null,null,null,1,0],[1,0,1.45,0],[1,2.7,2.7,2.7]],[7,"3ew1Vo2adBpqZ739+OrPkj"],[104],[9]],[28,"Quad<ModelComponent>",[22,"Quad",52,[-1155],[4,"e3hqu0HdxNq4e2nv3hKDvO",null,null,null,1,0],[1,0,1.45,0],[1,2.7,2.7,2.7]],[7,"3ew1Vo2adBpqZ739+OrPkj"],[134],[9]],[13,0,8,[10,"99XOIpw/tEtZYaNHTD56XL",null,null,-1156,[6,"7ckgHJTgNJS5roXCexKNM2",1,[[1,"basic_collectible-003",["_name"],138],[2,["_lpos"],138,[1,2,2.5,-14]],[2,["_lrot"],138,[3,0,0,0,1]],[2,["_euler"],138,[1,0,0,0]],[17,["_lpos"],[0,["68kW3uhlJDxJxe3kV3iMqw"]],[1,0,0,0]],[17,["_lpos"],[0,["7bQsG5pNJIOaV8UqJkPq/8"]],[1,0,-0.655,-0.024]]]],163],[{},"mountedRoot",1,8]],[13,0,8,[10,"99XOIpw/tEtZYaNHTD56XL",null,null,-1157,[6,"8eEnQHjAVNuYPF6rT0I8Y+",1,[[1,"basic_collectible-009",["_name"],139],[2,["_lpos"],139,[1,2,1,-8]],[2,["_lrot"],139,[3,0,0,0,1]],[2,["_euler"],139,[1,0,0,0]],[17,["_lpos"],[0,["68kW3uhlJDxJxe3kV3iMqw"]],[1,0,0,0]]]],164],[{},"mountedRoot",1,8]],[13,0,8,[10,"99XOIpw/tEtZYaNHTD56XL",null,null,-1158,[6,"31Qb9quSJJpICE8nm9KCT5",1,[[1,"basic_collectible-004",["_name"],140],[2,["_lpos"],140,[1,2,1,-16]],[2,["_lrot"],140,[3,0,0,0,1]],[2,["_euler"],140,[1,0,0,0]],[17,["_lpos"],[0,["68kW3uhlJDxJxe3kV3iMqw"]],[1,0,0,0]],[17,["_lpos"],[0,["7bQsG5pNJIOaV8UqJkPq/8"]],[1,0,-0.656,-0.024]]]],165],[{},"mountedRoot",1,8]],[13,0,8,[10,"66Ba72ak1JOYCB5CSozCYH",null,null,-1159,[6,"39Yt3QO/FFxr2N0Y+Ay4/6",1,[[1,"special_collectible-003",["_name"],141],[2,["_lpos"],141,[1,2,3.5,-12]],[2,["_lrot"],141,[3,0,0,0,1]],[2,["_euler"],141,[1,0,0,0]]]],166],[{},"mountedRoot",1,8]],[28,"Quad<ModelComponent>",[22,"Quad",54,[-1160],[4,"e3hqu0HdxNq4e2nv3hKDvO",null,null,null,1,0],[1,0,1.45,0],[1,2.7,2.7,2.7]],[7,"3ew1Vo2adBpqZ739+OrPkj"],[171],[9]],[28,"Quad<ModelComponent>",[22,"Quad",56,[-1161],[4,"e3hqu0HdxNq4e2nv3hKDvO",null,null,null,1,0],[1,0,1.45,0],[1,2.7,2.7,2.7]],[7,"3ew1Vo2adBpqZ739+OrPkj"],[201],[9]],[13,0,8,[10,"99XOIpw/tEtZYaNHTD56XL",null,null,-1162,[6,"9dWO7V7jlO+KUcYyZKwdmy",1,[[1,"basic_collectible-005",["_name"],149],[2,["_lpos"],149,[1,2,2.5,-10]],[2,["_lrot"],149,[3,0,0,0,1]],[2,["_euler"],149,[1,0,0,0]],[17,["_lpos"],[0,["68kW3uhlJDxJxe3kV3iMqw"]],[1,0,0,0]],[17,["_lpos"],[0,["7bQsG5pNJIOaV8UqJkPq/8"]],[1,0,-0.655,-0.024]]]],229],[{},"mountedRoot",1,8]],[13,0,5,[10,"99XOIpw/tEtZYaNHTD56XL",null,null,-1163,[6,"3a28f7KH9BrIu2MM7d+mMM",1,[[1,"basic_collectible-005",["_name"],150],[2,["_lpos"],150,[1,0,3.5,-12]],[2,["_lrot"],150,[3,0,0,0,1]],[2,["_euler"],150,[1,0,0,0]],[17,["_lpos"],[0,["68kW3uhlJDxJxe3kV3iMqw"]],[1,0,0,0]]]],231],[{},"mountedRoot",1,5]],[28,"Quad<ModelComponent>",[22,"Quad",58,[-1164],[4,"e3hqu0HdxNq4e2nv3hKDvO",null,null,null,1,0],[1,0,1.45,0],[1,2.7,2.7,2.7]],[7,"3ew1Vo2adBpqZ739+OrPkj"],[236],[9]],[28,"Quad<ModelComponent>",[22,"Quad",60,[-1165],[4,"e3hqu0HdxNq4e2nv3hKDvO",null,null,null,1,0],[1,0,1.45,0],[1,2.7,2.7,2.7]],[7,"3ew1Vo2adBpqZ739+OrPkj"],[266],[9]],[13,0,5,[10,"99XOIpw/tEtZYaNHTD56XL",null,null,-1166,[6,"a6mkNUst5OoqkpWoPmBGNO",5,[[1,"basic_collectible",["_name"],158],[2,["_lpos"],158,[1,0,2.5,-10]],[2,["_lrot"],158,[3,0,0,0,1]],[2,["_euler"],158,[1,0,0,0]]]],294],[{},"mountedRoot",1,5]],[13,0,5,[10,"99XOIpw/tEtZYaNHTD56XL",null,null,-1167,[6,"61xhJ4Vz9OqqK40Nji3EP2",1,[[1,"basic_collectible-001",["_name"],159],[2,["_lpos"],159,[1,0,1,-8]],[2,["_lrot"],159,[3,0,0,0,1]],[2,["_euler"],159,[1,0,0,0]]]],295],[{},"mountedRoot",1,5]],[13,0,5,[10,"99XOIpw/tEtZYaNHTD56XL",null,null,-1168,[6,"a4TzpFQmhO/4fuzwtBOn57",1,[[1,"basic_collectible-002",["_name"],160],[2,["_lpos"],160,[1,0,1,-16]],[2,["_lrot"],160,[3,0,0,0,1]],[2,["_euler"],160,[1,0,0,0]]]],296],[{},"mountedRoot",1,5]],[13,0,5,[10,"99XOIpw/tEtZYaNHTD56XL",null,null,-1169,[6,"06nX5H+mJPRIvfKZZQtrlt",1,[[1,"basic_collectible-003",["_name"],161],[2,["_lpos"],161,[1,0,2.5,-14]],[2,["_lrot"],161,[3,0,0,0,1]],[2,["_euler"],161,[1,0,0,0]]]],297],[{},"mountedRoot",1,5]],[13,0,6,[10,"c3cWwkhP5He5dmsvAVgOFv",null,null,-1170,[6,"a9uo3NH55Nq7rQQ1uRxcTh",1,[[1,"power_up-001",["_name"],163],[2,["_lpos"],163,[1,-2,3.5,-12]],[2,["_lrot"],163,[3,0,0,0,1]],[2,["_euler"],163,[1,0,0,0]]]],299],[{},"mountedRoot",1,6]],[28,"Quad<ModelComponent>",[22,"Quad",62,[-1171],[4,"e3hqu0HdxNq4e2nv3hKDvO",null,null,null,1,0],[1,0,1.45,0],[1,2.7,2.7,2.7]],[7,"3ew1Vo2adBpqZ739+OrPkj"],[304],[9]],[28,"Quad<ModelComponent>",[22,"Quad",64,[-1172],[4,"e3hqu0HdxNq4e2nv3hKDvO",null,null,null,1,0],[1,0,1.45,0],[1,2.7,2.7,2.7]],[7,"3ew1Vo2adBpqZ739+OrPkj"],[334],[9]],[13,0,6,[10,"99XOIpw/tEtZYaNHTD56XL",null,null,-1173,[6,"45FLxvCVxDk6ZBzJDZ3Kc5",6,[[1,"basic_collectible",["_name"],171],[2,["_lpos"],171,[1,-2,3,-10]],[2,["_lrot"],171,[3,0,0,0,1]],[2,["_euler"],171,[1,0,0,0]]]],362],[{},"mountedRoot",1,6]],[13,0,6,[10,"99XOIpw/tEtZYaNHTD56XL",null,null,-1174,[6,"80dJif8WZDT47oBwpEX5Ow",1,[[1,"basic_collectible-001",["_name"],172],[2,["_lpos"],172,[1,-2,1,-8]],[2,["_lrot"],172,[3,0,0,0,1]],[2,["_euler"],172,[1,0,0,0]]]],363],[{},"mountedRoot",1,6]],[13,0,6,[10,"99XOIpw/tEtZYaNHTD56XL",null,null,-1175,[6,"a4rpc9h2hIN6bNj/811+hb",1,[[1,"basic_collectible-002",["_name"],173],[2,["_lpos"],173,[1,-2,1,-16]],[2,["_lrot"],173,[3,0,0,0,1]],[2,["_euler"],173,[1,0,0,0]]]],364],[{},"mountedRoot",1,6]],[13,0,6,[10,"99XOIpw/tEtZYaNHTD56XL",null,null,-1176,[6,"bf0H8itKJGYKHlN4IOUrNU",1,[[1,"basic_collectible-003",["_name"],174],[2,["_lpos"],174,[1,-2,2.5,-14]],[2,["_lrot"],174,[3,0,0,0,1]],[2,["_euler"],174,[1,0,0,0]]]],365],[{},"mountedRoot",1,6]],[13,0,9,[10,"99XOIpw/tEtZYaNHTD56XL",null,null,-1177,[6,"5evAkL1yhLZYGE5EzN5RO1",1,[[1,"basic_collectible-002",["_name"],176],[2,["_lpos"],176,[1,0,1,-16]],[2,["_lrot"],176,[3,0,0,0,1]],[2,["_euler"],176,[1,0,0,0]],[17,["_lpos"],[0,["68kW3uhlJDxJxe3kV3iMqw"]],[1,0,0,0]]]],367],[{},"mountedRoot",1,9]],[13,0,9,[10,"99XOIpw/tEtZYaNHTD56XL",null,null,-1178,[6,"8eEnQHjAVNuYPF6rT0I8Y+",1,[[1,"basic_collectible-009",["_name"],177],[2,["_lpos"],177,[1,-2,1,-8]],[2,["_lrot"],177,[3,0,0,0,1]],[2,["_euler"],177,[1,0,0,0]],[17,["_lpos"],[0,["68kW3uhlJDxJxe3kV3iMqw"]],[1,0,0,0]]]],368],[{},"mountedRoot",1,9]],[13,0,9,[10,"99XOIpw/tEtZYaNHTD56XL",null,null,-1179,[6,"d8FFrsna5Kc52V2ZcNiD1t",1,[[1,"basic_collectible-005",["_name"],178],[2,["_lpos"],178,[1,0,1,-24]],[2,["_lrot"],178,[3,0,0,0,1]],[2,["_euler"],178,[1,0,0,0]],[17,["_lpos"],[0,["68kW3uhlJDxJxe3kV3iMqw"]],[1,0,0,0]]]],369],[{},"mountedRoot",1,9]],[13,0,9,[10,"66Ba72ak1JOYCB5CSozCYH",null,null,-1180,[6,"fam6jGozZNvbxuZ3QkCXjR",1,[[1,"special_collectible-005",["_name"],179],[2,["_lpos"],179,[1,0,1,-12]],[2,["_lrot"],179,[3,0,0,0,1]],[2,["_euler"],179,[1,0,0,0]]]],370],[{},"mountedRoot",1,9]],[13,0,9,[10,"99XOIpw/tEtZYaNHTD56XL",null,null,-1181,[6,"d2OkS4SY1NRLJBokeUBoOP",1,[[1,"basic_collectible-006",["_name"],180],[2,["_lpos"],180,[1,2,1,-20]],[2,["_lrot"],180,[3,0,0,0,1]],[2,["_euler"],180,[1,0,0,0]],[17,["_lpos"],[0,["68kW3uhlJDxJxe3kV3iMqw"]],[1,0,0,0]]]],371],[{},"mountedRoot",1,9]],[28,"Quad<ModelComponent>",[22,"Quad",66,[-1182],[4,"e3hqu0HdxNq4e2nv3hKDvO",null,null,null,1,0],[1,0,1.45,0],[1,2.7,2.7,2.7]],[7,"3ew1Vo2adBpqZ739+OrPkj"],[376],[9]],[28,"Quad<ModelComponent>",[22,"Quad",68,[-1183],[4,"e3hqu0HdxNq4e2nv3hKDvO",null,null,null,1,0],[1,0,1.45,0],[1,2.7,2.7,2.7]],[7,"3ew1Vo2adBpqZ739+OrPkj"],[406],[9]],[13,0,10,[10,"99XOIpw/tEtZYaNHTD56XL",null,null,-1184,[6,"5evAkL1yhLZYGE5EzN5RO1",1,[[1,"basic_collectible-002",["_name"],189],[2,["_lpos"],189,[1,0,1,-10]],[2,["_lrot"],189,[3,0,0,0,1]],[2,["_euler"],189,[1,0,0,0]],[17,["_lpos"],[0,["68kW3uhlJDxJxe3kV3iMqw"]],[1,0,0,0]]]],435],[{},"mountedRoot",1,10]],[13,0,10,[10,"99XOIpw/tEtZYaNHTD56XL",null,null,-1185,[6,"8eEnQHjAVNuYPF6rT0I8Y+",1,[[1,"basic_collectible-009",["_name"],190],[2,["_lpos"],190,[1,2,1,-6]],[2,["_lrot"],190,[3,0,0,0,1]],[2,["_euler"],190,[1,0,0,0]],[17,["_lpos"],[0,["68kW3uhlJDxJxe3kV3iMqw"]],[1,0,0,0]]]],436],[{},"mountedRoot",1,10]],[13,0,10,[10,"99XOIpw/tEtZYaNHTD56XL",null,null,-1186,[6,"31Qb9quSJJpICE8nm9KCT5",1,[[1,"basic_collectible-004",["_name"],191],[2,["_lpos"],191,[1,0,1,-14]],[2,["_lrot"],191,[3,0,0,0,1]],[2,["_euler"],191,[1,0,0,0]],[17,["_lpos"],[0,["68kW3uhlJDxJxe3kV3iMqw"]],[1,0,0,0]]]],437],[{},"mountedRoot",1,10]],[13,0,10,[10,"99XOIpw/tEtZYaNHTD56XL",null,null,-1187,[6,"f2oAVobKdAOLruKYKtrwOO",1,[[1,"basic_collectible-006",["_name"],192],[2,["_lpos"],192,[1,-2,1,-18]],[2,["_lrot"],192,[3,0,0,0,1]],[2,["_euler"],192,[1,0,0,0]],[17,["_lpos"],[0,["68kW3uhlJDxJxe3kV3iMqw"]],[1,0,0,0]]]],438],[{},"mountedRoot",1,10]],[13,0,10,[10,"99XOIpw/tEtZYaNHTD56XL",null,null,-1188,[6,"bbJHmPTEJI6buNuyAi44hD",1,[[1,"basic_collectible-010",["_name"],193],[2,["_lpos"],193,[1,-2,1,-22]],[2,["_lrot"],193,[3,0,0,0,1]],[2,["_euler"],193,[1,0,0,0]],[17,["_lpos"],[0,["68kW3uhlJDxJxe3kV3iMqw"]],[1,0,0,0]]]],439],[{},"mountedRoot",1,10]],[28,"Quad<ModelComponent>",[22,"Quad",70,[-1189],[4,"e3hqu0HdxNq4e2nv3hKDvO",null,null,null,1,0],[1,0,1.45,0],[1,2.7,2.7,2.7]],[7,"3ew1Vo2adBpqZ739+OrPkj"],[444],[9]],[28,"Quad<ModelComponent>",[22,"Quad",72,[-1190],[4,"e3hqu0HdxNq4e2nv3hKDvO",null,null,null,1,0],[1,0,1.45,0],[1,2.7,2.7,2.7]],[7,"3ew1Vo2adBpqZ739+OrPkj"],[474],[9]],[13,0,11,[10,"99XOIpw/tEtZYaNHTD56XL",null,null,-1191,[6,"d3ysaSveFLZLEPwxeo/Zfb",1,[[1,"basic_collectible-008",["_name"],202],[2,["_lpos"],202,[1,-2,1,-9]],[2,["_lrot"],202,[3,0,0,0,1]],[2,["_euler"],202,[1,0,0,0]],[17,["_lpos"],[0,["68kW3uhlJDxJxe3kV3iMqw"]],[1,0,0,0]]]],503],[{},"mountedRoot",1,11]],[13,0,11,[10,"99XOIpw/tEtZYaNHTD56XL",null,null,-1192,[6,"8eEnQHjAVNuYPF6rT0I8Y+",1,[[1,"basic_collectible-009",["_name"],203],[2,["_lpos"],203,[1,-2,1,-6]],[2,["_lrot"],203,[3,0,0,0,1]],[2,["_euler"],203,[1,0,0,0]],[17,["_lpos"],[0,["68kW3uhlJDxJxe3kV3iMqw"]],[1,0,0,0]]]],504],[{},"mountedRoot",1,11]],[13,0,11,[10,"99XOIpw/tEtZYaNHTD56XL",null,null,-1193,[6,"f2oAVobKdAOLruKYKtrwOO",1,[[1,"basic_collectible-006",["_name"],204],[2,["_lpos"],204,[1,-2,1,-19]],[2,["_lrot"],204,[3,0,0,0,1]],[2,["_euler"],204,[1,0,0,0]],[17,["_lpos"],[0,["68kW3uhlJDxJxe3kV3iMqw"]],[1,0,0,0]]]],505],[{},"mountedRoot",1,11]],[13,0,11,[10,"99XOIpw/tEtZYaNHTD56XL",null,null,-1194,[6,"bbJHmPTEJI6buNuyAi44hD",1,[[1,"basic_collectible-010",["_name"],205],[2,["_lpos"],205,[1,0,1,-22]],[2,["_lrot"],205,[3,0,0,0,1]],[2,["_euler"],205,[1,0,0,0]],[17,["_lpos"],[0,["68kW3uhlJDxJxe3kV3iMqw"]],[1,0,0,0]]]],506],[{},"mountedRoot",1,11]],[13,0,11,[10,"66Ba72ak1JOYCB5CSozCYH",null,null,-1195,[6,"53uCcEPktIGI36J9EEmABG",1,[[1,"special_collectible-003",["_name"],206],[2,["_lpos"],206,[1,0,1,-14]],[2,["_lrot"],206,[3,0,0,0,1]],[2,["_euler"],206,[1,0,0,0]]]],507],[{},"mountedRoot",1,11]],[28,"Quad<ModelComponent>",[22,"Quad",74,[-1196],[4,"e3hqu0HdxNq4e2nv3hKDvO",null,null,null,1,0],[1,0,1.45,0],[1,2.7,2.7,2.7]],[7,"3ew1Vo2adBpqZ739+OrPkj"],[512],[9]],[28,"Quad<ModelComponent>",[22,"Quad",76,[-1197],[4,"e3hqu0HdxNq4e2nv3hKDvO",null,null,null,1,0],[1,0,1.45,0],[1,2.7,2.7,2.7]],[7,"3ew1Vo2adBpqZ739+OrPkj"],[542],[9]],[13,0,12,[10,"99XOIpw/tEtZYaNHTD56XL",null,null,-1198,[6,"d3ysaSveFLZLEPwxeo/Zfb",1,[[1,"basic_collectible-008",["_name"],215],[2,["_lpos"],215,[1,-2,1,-9]],[2,["_lrot"],215,[3,0,0,0,1]],[2,["_euler"],215,[1,0,0,0]],[17,["_lpos"],[0,["68kW3uhlJDxJxe3kV3iMqw"]],[1,0,0,0]]]],571],[{},"mountedRoot",1,12]],[13,0,12,[10,"99XOIpw/tEtZYaNHTD56XL",null,null,-1199,[6,"8eEnQHjAVNuYPF6rT0I8Y+",1,[[1,"basic_collectible-009",["_name"],216],[2,["_lpos"],216,[1,-2,1,-6]],[2,["_lrot"],216,[3,0,0,0,1]],[2,["_euler"],216,[1,0,0,0]],[17,["_lpos"],[0,["68kW3uhlJDxJxe3kV3iMqw"]],[1,0,0,0]]]],572],[{},"mountedRoot",1,12]],[13,0,12,[10,"99XOIpw/tEtZYaNHTD56XL",null,null,-1200,[6,"f2oAVobKdAOLruKYKtrwOO",1,[[1,"basic_collectible-006",["_name"],217],[2,["_lpos"],217,[1,0,3.5,-18]],[2,["_lrot"],217,[3,0,0,0,1]],[2,["_euler"],217,[1,0,0,0]],[17,["_lpos"],[0,["68kW3uhlJDxJxe3kV3iMqw"]],[1,0,0,0]]]],573],[{},"mountedRoot",1,12]],[28,"Quad<ModelComponent>",[22,"Quad",78,[-1201],[4,"e3hqu0HdxNq4e2nv3hKDvO",null,null,null,1,0],[1,0,1.45,0],[1,2.7,2.7,2.7]],[7,"3ew1Vo2adBpqZ739+OrPkj"],[578],[9]],[28,"Quad<ModelComponent>",[22,"Quad",80,[-1202],[4,"e3hqu0HdxNq4e2nv3hKDvO",null,null,null,1,0],[1,0,1.45,0],[1,2.7,2.7,2.7]],[7,"3ew1Vo2adBpqZ739+OrPkj"],[608],[9]],[28,"Quad<ModelComponent>",[22,"Quad",82,[-1203],[4,"e3hqu0HdxNq4e2nv3hKDvO",null,null,null,1,0],[1,0,1.45,0],[1,2.7,2.7,2.7]],[7,"3ew1Vo2adBpqZ739+OrPkj"],[638],[9]],[13,0,2,[10,"99XOIpw/tEtZYaNHTD56XL",null,null,-1204,[6,"d3ysaSveFLZLEPwxeo/Zfb",1,[[1,"basic_collectible-008",["_name"],228],[2,["_lpos"],228,[1,0,1,-10]],[2,["_lrot"],228,[3,0,0,0,1]],[2,["_euler"],228,[1,0,0,0]],[17,["_lpos"],[0,["68kW3uhlJDxJxe3kV3iMqw"]],[1,0,0,0]]]],667],[{},"mountedRoot",1,2]],[13,0,2,[10,"99XOIpw/tEtZYaNHTD56XL",null,null,-1205,[6,"8eEnQHjAVNuYPF6rT0I8Y+",1,[[1,"basic_collectible-009",["_name"],229],[2,["_lpos"],229,[1,0,1,-6]],[2,["_lrot"],229,[3,0,0,0,1]],[2,["_euler"],229,[1,0,0,0]],[17,["_lpos"],[0,["68kW3uhlJDxJxe3kV3iMqw"]],[1,0,0,0]]]],668],[{},"mountedRoot",1,2]],[13,0,2,[10,"99XOIpw/tEtZYaNHTD56XL",null,null,-1206,[6,"31Qb9quSJJpICE8nm9KCT5",1,[[1,"basic_collectible-004",["_name"],230],[2,["_lpos"],230,[1,2,1,-14]],[2,["_lrot"],230,[3,0,0,0,1]],[2,["_euler"],230,[1,0,0,0]],[17,["_lpos"],[0,["68kW3uhlJDxJxe3kV3iMqw"]],[1,0,0,0]]]],669],[{},"mountedRoot",1,2]],[13,0,2,[10,"99XOIpw/tEtZYaNHTD56XL",null,null,-1207,[6,"d8FFrsna5Kc52V2ZcNiD1t",1,[[1,"basic_collectible-005",["_name"],231],[2,["_lpos"],231,[1,2,2.5,-16]],[2,["_lrot"],231,[3,0,0,0,1]],[2,["_euler"],231,[1,0,0,0]],[17,["_lpos"],[0,["68kW3uhlJDxJxe3kV3iMqw"]],[1,0,0,0]]]],670],[{},"mountedRoot",1,2]],[13,0,2,[10,"99XOIpw/tEtZYaNHTD56XL",null,null,-1208,[6,"bbJHmPTEJI6buNuyAi44hD",1,[[1,"basic_collectible-010",["_name"],232],[2,["_lpos"],232,[1,2,2.5,-20]],[2,["_lrot"],232,[3,0,0,0,1]],[2,["_euler"],232,[1,0,0,0]],[17,["_lpos"],[0,["68kW3uhlJDxJxe3kV3iMqw"]],[1,0,0,0]]]],671],[{},"mountedRoot",1,2]],[13,0,2,[10,"99XOIpw/tEtZYaNHTD56XL",null,null,-1209,[6,"b8qfEy6/RLFL54btSYniAV",1,[[1,"basic_collectible-011",["_name"],233],[2,["_lpos"],233,[1,2,1,-22]],[2,["_lrot"],233,[3,0,0,0,1]],[2,["_euler"],233,[1,0,0,0]],[17,["_lpos"],[0,["68kW3uhlJDxJxe3kV3iMqw"]],[1,0,0,0]]]],672],[{},"mountedRoot",1,2]],[13,0,2,[10,"66Ba72ak1JOYCB5CSozCYH",null,null,-1210,[6,"f6JfNhjLlG7LT9iXvFvSc2",1,[[1,"special_collectible-004",["_name"],234],[2,["_lpos"],234,[1,2,3.5,-18]],[2,["_lrot"],234,[3,0,0,0,1]],[2,["_euler"],234,[1,0,0,0]]]],673],[{},"mountedRoot",1,2]],[28,"Quad<ModelComponent>",[22,"Quad",84,[-1211],[4,"e3hqu0HdxNq4e2nv3hKDvO",null,null,null,1,0],[1,0,1.45,0],[1,2.7,2.7,2.7]],[7,"3ew1Vo2adBpqZ739+OrPkj"],[678],[9]],[28,"Quad<ModelComponent>",[22,"Quad",86,[-1212],[4,"e3hqu0HdxNq4e2nv3hKDvO",null,null,null,1,0],[1,0,1.45,0],[1,2.7,2.7,2.7]],[7,"3ew1Vo2adBpqZ739+OrPkj"],[708],[9]],[28,"Quad<ModelComponent>",[22,"Quad",88,[-1213],[4,"e3hqu0HdxNq4e2nv3hKDvO",null,null,null,1,0],[1,0,1.45,0],[1,2.7,2.7,2.7]],[7,"3ew1Vo2adBpqZ739+OrPkj"],[738],[9]],[13,0,3,[10,"99XOIpw/tEtZYaNHTD56XL",null,null,-1214,[6,"d3ysaSveFLZLEPwxeo/Zfb",1,[[1,"basic_collectible-008",["_name"],245],[2,["_lpos"],245,[1,0,1,-10]],[2,["_lrot"],245,[3,0,0,0,1]],[2,["_euler"],245,[1,0,0,0]],[17,["_lpos"],[0,["68kW3uhlJDxJxe3kV3iMqw"]],[1,0,0,0]]]],767],[{},"mountedRoot",1,3]],[13,0,3,[10,"99XOIpw/tEtZYaNHTD56XL",null,null,-1215,[6,"8eEnQHjAVNuYPF6rT0I8Y+",1,[[1,"basic_collectible-009",["_name"],246],[2,["_lpos"],246,[1,0,1,-6]],[2,["_lrot"],246,[3,0,0,0,1]],[2,["_euler"],246,[1,0,0,0]],[17,["_lpos"],[0,["68kW3uhlJDxJxe3kV3iMqw"]],[1,0,0,0]]]],768],[{},"mountedRoot",1,3]],[13,0,3,[10,"99XOIpw/tEtZYaNHTD56XL",null,null,-1216,[6,"31Qb9quSJJpICE8nm9KCT5",1,[[1,"basic_collectible-004",["_name"],247],[2,["_lpos"],247,[1,-2,1,-14]],[2,["_lrot"],247,[3,0,0,0,1]],[2,["_euler"],247,[1,0,0,0]],[17,["_lpos"],[0,["68kW3uhlJDxJxe3kV3iMqw"]],[1,0,0,0]]]],769],[{},"mountedRoot",1,3]],[13,0,3,[10,"99XOIpw/tEtZYaNHTD56XL",null,null,-1217,[6,"d8FFrsna5Kc52V2ZcNiD1t",1,[[1,"basic_collectible-005",["_name"],248],[2,["_lpos"],248,[1,-2,2.5,-16]],[2,["_lrot"],248,[3,0,0,0,1]],[2,["_euler"],248,[1,0,0,0]],[17,["_lpos"],[0,["68kW3uhlJDxJxe3kV3iMqw"]],[1,0,0,0]]]],770],[{},"mountedRoot",1,3]],[13,0,3,[10,"99XOIpw/tEtZYaNHTD56XL",null,null,-1218,[6,"f2oAVobKdAOLruKYKtrwOO",1,[[1,"basic_collectible-006",["_name"],249],[2,["_lpos"],249,[1,-2,3.5,-18]],[2,["_lrot"],249,[3,0,0,0,1]],[2,["_euler"],249,[1,0,0,0]],[17,["_lpos"],[0,["68kW3uhlJDxJxe3kV3iMqw"]],[1,0,0,0]]]],771],[{},"mountedRoot",1,3]],[13,0,3,[10,"99XOIpw/tEtZYaNHTD56XL",null,null,-1219,[6,"bbJHmPTEJI6buNuyAi44hD",1,[[1,"basic_collectible-010",["_name"],250],[2,["_lpos"],250,[1,-2,2.5,-20]],[2,["_lrot"],250,[3,0,0,0,1]],[2,["_euler"],250,[1,0,0,0]],[17,["_lpos"],[0,["68kW3uhlJDxJxe3kV3iMqw"]],[1,0,0,0]]]],772],[{},"mountedRoot",1,3]],[13,0,3,[10,"99XOIpw/tEtZYaNHTD56XL",null,null,-1220,[6,"b8qfEy6/RLFL54btSYniAV",1,[[1,"basic_collectible-011",["_name"],251],[2,["_lpos"],251,[1,-2,1,-22]],[2,["_lrot"],251,[3,0,0,0,1]],[2,["_euler"],251,[1,0,0,0]],[17,["_lpos"],[0,["68kW3uhlJDxJxe3kV3iMqw"]],[1,0,0,0]]]],773],[{},"mountedRoot",1,3]],[28,"Quad<ModelComponent>",[22,"Quad",90,[-1221],[4,"e3hqu0HdxNq4e2nv3hKDvO",null,null,null,1,0],[1,0,1.45,0],[1,2.7,2.7,2.7]],[7,"3ew1Vo2adBpqZ739+OrPkj"],[778],[9]],[28,"Quad<ModelComponent>",[22,"Quad",92,[-1222],[4,"e3hqu0HdxNq4e2nv3hKDvO",null,null,null,1,0],[1,0,1.45,0],[1,2.7,2.7,2.7]],[7,"3ew1Vo2adBpqZ739+OrPkj"],[808],[9]],[28,"Quad<ModelComponent>",[22,"Quad",94,[-1223],[4,"e3hqu0HdxNq4e2nv3hKDvO",null,null,null,1,0],[1,0,1.45,0],[1,2.7,2.7,2.7]],[7,"3ew1Vo2adBpqZ739+OrPkj"],[838],[9]],[13,0,4,[10,"99XOIpw/tEtZYaNHTD56XL",null,null,-1224,[6,"4cjubjahJNj6LBYoNBi7+5",1,[[1,"basic_collectible-007",["_name"],262],[2,["_lpos"],262,[1,0,1,-10]],[2,["_lrot"],262,[3,0,0,0,1]],[2,["_euler"],262,[1,0,0,0]],[17,["_lpos"],[0,["68kW3uhlJDxJxe3kV3iMqw"]],[1,0,0,0]]]],867],[{},"mountedRoot",1,4]],[13,0,4,[10,"99XOIpw/tEtZYaNHTD56XL",null,null,-1225,[6,"8eEnQHjAVNuYPF6rT0I8Y+",1,[[1,"basic_collectible-009",["_name"],263],[2,["_lpos"],263,[1,0,1,-6]],[2,["_lrot"],263,[3,0,0,0,1]],[2,["_euler"],263,[1,0,0,0]],[17,["_lpos"],[0,["68kW3uhlJDxJxe3kV3iMqw"]],[1,0,0,0]]]],868],[{},"mountedRoot",1,4]],[13,0,4,[10,"99XOIpw/tEtZYaNHTD56XL",null,null,-1226,[6,"31Qb9quSJJpICE8nm9KCT5",1,[[1,"basic_collectible-004",["_name"],264],[2,["_lpos"],264,[1,0,1,-14]],[2,["_lrot"],264,[3,0,0,0,1]],[2,["_euler"],264,[1,0,0,0]],[17,["_lpos"],[0,["68kW3uhlJDxJxe3kV3iMqw"]],[1,0,0,0]]]],869],[{},"mountedRoot",1,4]],[13,0,4,[10,"99XOIpw/tEtZYaNHTD56XL",null,null,-1227,[6,"f2oAVobKdAOLruKYKtrwOO",1,[[1,"basic_collectible-006",["_name"],265],[2,["_lpos"],265,[1,0,1,-18]],[2,["_lrot"],265,[3,0,0,0,1]],[2,["_euler"],265,[1,0,0,0]],[17,["_lpos"],[0,["68kW3uhlJDxJxe3kV3iMqw"]],[1,0,0,0]]]],870],[{},"mountedRoot",1,4]],[13,0,4,[10,"66Ba72ak1JOYCB5CSozCYH",null,null,-1228,[6,"6e+dbHm0RN9LrQgbJvYNcZ",1,[[1,"special_collectible-005",["_name"],266],[2,["_lpos"],266,[1,0,1,-20]],[2,["_lrot"],266,[3,0,0,0,1]],[2,["_euler"],266,[1,0,0,0]]]],871],[{},"mountedRoot",1,4]],[28,"Quad<ModelComponent>",[22,"Quad",96,[-1229],[4,"e3hqu0HdxNq4e2nv3hKDvO",null,null,null,1,0],[1,0,1.45,0],[1,2.7,2.7,2.7]],[7,"3ew1Vo2adBpqZ739+OrPkj"],[876],[9]],[28,"Quad<ModelComponent>",[22,"Quad",98,[-1230],[4,"e3hqu0HdxNq4e2nv3hKDvO",null,null,null,1,0],[1,0,1.45,0],[1,2.7,2.7,2.7]],[7,"3ew1Vo2adBpqZ739+OrPkj"],[906],[9]],[28,"Quad<ModelComponent>",[22,"Quad",100,[-1231],[4,"e3hqu0HdxNq4e2nv3hKDvO",null,null,null,1,0],[1,0,1.45,0],[1,2.7,2.7,2.7]],[7,"3ew1Vo2adBpqZ739+OrPkj"],[936],[9]]],0,[0,-1,4,0,-2,3,0,-3,2,0,-4,12,0,-5,11,0,-6,10,0,-7,9,0,-8,6,0,-9,5,0,-10,8,0,-11,7,0,-12,42,0,3,43,0,5,43,0,3,43,0,5,43,0,3,45,0,5,45,0,3,45,0,5,45,0,3,47,0,5,47,0,3,47,0,5,47,0,3,49,0,5,49,0,3,49,0,5,49,0,3,51,0,5,51,0,3,51,0,5,51,0,3,53,0,5,53,0,3,53,0,5,53,0,3,55,0,5,55,0,3,55,0,5,55,0,3,57,0,5,57,0,3,57,0,5,57,0,3,59,0,5,59,0,3,59,0,5,59,0,3,61,0,5,61,0,3,61,0,5,61,0,3,63,0,5,63,0,3,63,0,5,63,0,3,65,0,5,65,0,3,65,0,5,65,0,3,67,0,5,67,0,3,67,0,5,67,0,3,69,0,5,69,0,3,69,0,5,69,0,3,71,0,5,71,0,3,71,0,5,71,0,3,73,0,5,73,0,3,73,0,5,73,0,3,75,0,5,75,0,3,75,0,5,75,0,3,77,0,5,77,0,3,77,0,5,77,0,3,79,0,5,79,0,3,79,0,5,79,0,3,81,0,5,81,0,3,81,0,5,81,0,3,83,0,5,83,0,3,83,0,5,83,0,3,85,0,5,85,0,3,85,0,5,85,0,3,87,0,5,87,0,3,87,0,5,87,0,3,89,0,5,89,0,3,89,0,5,89,0,3,91,0,5,91,0,3,91,0,5,91,0,3,93,0,5,93,0,3,93,0,5,93,0,3,95,0,5,95,0,3,95,0,5,95,0,3,97,0,5,97,0,3,97,0,5,97,0,3,99,0,5,99,0,3,99,0,5,99,0,3,101,0,5,101,0,3,101,0,5,101,0,3,43,0,5,43,0,3,45,0,5,45,0,3,102,0,5,102,0,3,102,0,5,102,0,3,47,0,5,47,0,3,49,0,5,49,0,3,51,0,5,51,0,3,103,0,5,103,0,3,103,0,5,103,0,3,53,0,5,53,0,3,55,0,5,55,0,3,104,0,5,104,0,3,104,0,5,104,0,3,57,0,5,57,0,3,59,0,5,59,0,3,105,0,5,105,0,3,105,0,5,105,0,3,61,0,5,61,0,3,63,0,5,63,0,3,106,0,5,106,0,3,106,0,5,106,0,3,65,0,5,65,0,3,67,0,5,67,0,3,107,0,5,107,0,3,107,0,5,107,0,3,69,0,5,69,0,3,71,0,5,71,0,3,108,0,5,108,0,3,108,0,5,108,0,3,73,0,5,73,0,3,75,0,5,75,0,3,109,0,5,109,0,3,109,0,5,109,0,3,77,0,5,77,0,3,79,0,5,79,0,3,81,0,5,81,0,3,110,0,5,110,0,3,110,0,5,110,0,3,83,0,5,83,0,3,85,0,5,85,0,3,87,0,5,87,0,3,111,0,5,111,0,3,111,0,5,111,0,3,89,0,5,89,0,3,91,0,5,91,0,3,93,0,5,93,0,3,112,0,5,112,0,3,112,0,5,112,0,3,95,0,5,95,0,3,97,0,5,97,0,3,99,0,5,99,0,4,1,0,2,1,0,-1,42,0,-2,7,0,-3,8,0,-4,5,0,-5,6,0,-6,9,0,-7,10,0,-8,11,0,-9,12,0,-10,2,0,-11,3,0,-12,4,0,1,244,0,1,244,0,1,244,0,1,244,0,-1,365,0,-2,366,0,-3,367,0,-4,368,0,-5,369,0,-6,370,0,-7,371,0,-8,110,0,-9,83,0,-10,85,0,-11,87,0,4,2,0,1,261,0,1,261,0,1,261,0,1,261,0,-1,375,0,-2,376,0,-3,377,0,-4,378,0,-5,379,0,-6,380,0,-7,381,0,-8,111,0,-9,89,0,-10,91,0,-11,93,0,4,3,0,1,276,0,1,276,0,1,276,0,1,276,0,-1,385,0,-2,386,0,-3,387,0,-4,388,0,-5,389,0,-6,112,0,-7,95,0,-8,97,0,-9,99,0,4,4,0,1,162,0,1,162,0,1,162,0,1,162,0,-1,324,0,-2,104,0,-3,57,0,-4,59,0,-5,327,0,-6,328,0,-7,329,0,-8,330,0,4,5,0,1,175,0,1,175,0,1,175,0,1,175,0,-1,331,0,-2,105,0,-3,61,0,-4,63,0,-5,334,0,-6,335,0,-7,336,0,-8,337,0,4,6,0,1,137,0,1,137,0,1,137,0,1,137,0,-1,310,0,-2,311,0,-3,312,0,-4,313,0,-5,102,0,-6,47,0,-7,49,0,-8,51,0,4,7,0,1,113,0,1,113,0,1,113,0,1,113,0,1,113,0,-1,317,0,-2,318,0,-3,319,0,-4,320,0,-5,103,0,-6,53,0,-7,55,0,-8,323,0,4,8,0,1,188,0,1,188,0,1,188,0,1,188,0,-1,338,0,-2,339,0,-3,340,0,-4,341,0,-5,342,0,-6,106,0,-7,65,0,-8,67,0,4,9,0,1,201,0,1,201,0,1,201,0,1,201,0,-1,345,0,-2,346,0,-3,347,0,-4,348,0,-5,349,0,-6,107,0,-7,69,0,-8,71,0,4,10,0,1,214,0,1,214,0,1,214,0,1,214,0,-1,352,0,-2,353,0,-3,354,0,-4,355,0,-5,356,0,-6,108,0,-7,73,0,-8,75,0,4,11,0,1,227,0,1,227,0,1,227,0,1,227,0,-1,359,0,-2,360,0,-3,361,0,-4,109,0,-5,77,0,-6,79,0,-7,81,0,4,12,0,1,123,0,1,123,0,1,123,0,1,123,0,-1,306,0,-2,307,0,-3,101,0,-4,43,0,-5,45,0,4,42,0,-1,44,0,3,44,0,5,44,0,3,44,0,3,44,0,5,277,0,3,44,0,5,277,0,1,119,0,1,119,0,1,119,0,1,119,0,4,43,0,1,120,0,1,120,0,1,120,0,1,120,0,-1,277,0,4,44,0,-1,44,0,-1,46,0,3,46,0,5,46,0,3,46,0,3,46,0,5,278,0,3,46,0,5,278,0,1,121,0,1,121,0,1,121,0,1,121,0,4,45,0,1,122,0,1,122,0,1,122,0,1,122,0,-1,278,0,4,46,0,-1,46,0,-1,48,0,3,48,0,5,48,0,3,48,0,3,48,0,5,279,0,3,48,0,5,279,0,1,131,0,1,131,0,1,131,0,1,131,0,4,47,0,1,132,0,1,132,0,1,132,0,1,132,0,-1,279,0,4,48,0,-1,48,0,-1,50,0,3,50,0,5,50,0,3,50,0,3,50,0,5,280,0,3,50,0,5,280,0,1,133,0,1,133,0,1,133,0,1,133,0,4,49,0,1,134,0,1,134,0,1,134,0,1,134,0,-1,280,0,4,50,0,-1,50,0,-1,52,0,3,52,0,5,52,0,3,52,0,3,52,0,5,281,0,3,52,0,5,281,0,1,135,0,1,135,0,1,135,0,1,135,0,4,51,0,1,136,0,1,136,0,1,136,0,1,136,0,-1,281,0,4,52,0,-1,52,0,-1,54,0,3,54,0,5,54,0,3,54,0,3,54,0,5,282,0,3,54,0,5,282,0,1,145,0,1,145,0,1,145,0,1,145,0,4,53,0,1,146,0,1,146,0,1,146,0,1,146,0,-1,282,0,4,54,0,-1,54,0,-1,56,0,3,56,0,5,56,0,3,56,0,3,56,0,5,283,0,3,56,0,5,283,0,1,147,0,1,147,0,1,147,0,1,147,0,4,55,0,1,148,0,1,148,0,1,148,0,1,148,0,-1,283,0,4,56,0,-1,56,0,-1,58,0,3,58,0,5,58,0,3,58,0,3,58,0,5,284,0,3,58,0,5,284,0,1,154,0,1,154,0,1,154,0,1,154,0,4,57,0,1,155,0,1,155,0,1,155,0,1,155,0,-1,284,0,4,58,0,-1,58,0,-1,60,0,3,60,0,5,60,0,3,60,0,3,60,0,5,285,0,3,60,0,5,285,0,1,156,0,1,156,0,1,156,0,1,156,0,4,59,0,1,157,0,1,157,0,1,157,0,1,157,0,-1,285,0,4,60,0,-1,60,0,-1,62,0,3,62,0,5,62,0,3,62,0,3,62,0,5,286,0,3,62,0,5,286,0,1,167,0,1,167,0,1,167,0,1,167,0,4,61,0,1,168,0,1,168,0,1,168,0,1,168,0,-1,286,0,4,62,0,-1,62,0,-1,64,0,3,64,0,5,64,0,3,64,0,3,64,0,5,287,0,3,64,0,5,287,0,1,169,0,1,169,0,1,169,0,1,169,0,4,63,0,1,170,0,1,170,0,1,170,0,1,170,0,-1,287,0,4,64,0,-1,64,0,-1,66,0,3,66,0,5,66,0,3,66,0,3,66,0,5,288,0,3,66,0,5,288,0,1,184,0,1,184,0,1,184,0,1,184,0,4,65,0,1,185,0,1,185,0,1,185,0,1,185,0,-1,288,0,4,66,0,-1,66,0,-1,68,0,3,68,0,5,68,0,3,68,0,3,68,0,5,289,0,3,68,0,5,289,0,1,186,0,1,186,0,1,186,0,1,186,0,4,67,0,1,187,0,1,187,0,1,187,0,1,187,0,-1,289,0,4,68,0,-1,68,0,-1,70,0,3,70,0,5,70,0,3,70,0,3,70,0,5,290,0,3,70,0,5,290,0,1,197,0,1,197,0,1,197,0,1,197,0,4,69,0,1,198,0,1,198,0,1,198,0,1,198,0,-1,290,0,4,70,0,-1,70,0,-1,72,0,3,72,0,5,72,0,3,72,0,3,72,0,5,291,0,3,72,0,5,291,0,1,199,0,1,199,0,1,199,0,1,199,0,4,71,0,1,200,0,1,200,0,1,200,0,1,200,0,-1,291,0,4,72,0,-1,72,0,-1,74,0,3,74,0,5,74,0,3,74,0,3,74,0,5,292,0,3,74,0,5,292,0,1,210,0,1,210,0,1,210,0,1,210,0,4,73,0,1,211,0,1,211,0,1,211,0,1,211,0,-1,292,0,4,74,0,-1,74,0,-1,76,0,3,76,0,5,76,0,3,76,0,3,76,0,5,293,0,3,76,0,5,293,0,1,212,0,1,212,0,1,212,0,1,212,0,4,75,0,1,213,0,1,213,0,1,213,0,1,213,0,-1,293,0,4,76,0,-1,76,0,-1,78,0,3,78,0,5,78,0,3,78,0,3,78,0,5,294,0,3,78,0,5,294,0,1,221,0,1,221,0,1,221,0,1,221,0,4,77,0,1,222,0,1,222,0,1,222,0,1,222,0,-1,294,0,4,78,0,-1,78,0,-1,80,0,3,80,0,5,80,0,3,80,0,3,80,0,5,295,0,3,80,0,5,295,0,1,223,0,1,223,0,1,223,0,1,223,0,4,79,0,1,224,0,1,224,0,1,224,0,1,224,0,-1,295,0,4,80,0,-1,80,0,-1,82,0,3,82,0,5,82,0,3,82,0,3,82,0,5,296,0,3,82,0,5,296,0,1,225,0,1,225,0,1,225,0,1,225,0,4,81,0,1,226,0,1,226,0,1,226,0,1,226,0,-1,296,0,4,82,0,-1,82,0,-1,84,0,3,84,0,5,84,0,3,84,0,3,84,0,5,297,0,3,84,0,5,297,0,1,238,0,1,238,0,1,238,0,1,238,0,4,83,0,1,239,0,1,239,0,1,239,0,1,239,0,-1,297,0,4,84,0,-1,84,0,-1,86,0,3,86,0,5,86,0,3,86,0,3,86,0,5,298,0,3,86,0,5,298,0,1,240,0,1,240,0,1,240,0,1,240,0,4,85,0,1,241,0,1,241,0,1,241,0,1,241,0,-1,298,0,4,86,0,-1,86,0,-1,88,0,3,88,0,5,88,0,3,88,0,3,88,0,5,299,0,3,88,0,5,299,0,1,242,0,1,242,0,1,242,0,1,242,0,4,87,0,1,243,0,1,243,0,1,243,0,1,243,0,-1,299,0,4,88,0,-1,88,0,-1,90,0,3,90,0,5,90,0,3,90,0,3,90,0,5,300,0,3,90,0,5,300,0,1,255,0,1,255,0,1,255,0,1,255,0,4,89,0,1,256,0,1,256,0,1,256,0,1,256,0,-1,300,0,4,90,0,-1,90,0,-1,92,0,3,92,0,5,92,0,3,92,0,3,92,0,5,301,0,3,92,0,5,301,0,1,257,0,1,257,0,1,257,0,1,257,0,4,91,0,1,258,0,1,258,0,1,258,0,1,258,0,-1,301,0,4,92,0,-1,92,0,-1,94,0,3,94,0,5,94,0,3,94,0,3,94,0,5,302,0,3,94,0,5,302,0,1,259,0,1,259,0,1,259,0,1,259,0,4,93,0,1,260,0,1,260,0,1,260,0,1,260,0,-1,302,0,4,94,0,-1,94,0,-1,96,0,3,96,0,5,96,0,3,96,0,3,96,0,5,303,0,3,96,0,5,303,0,1,270,0,1,270,0,1,270,0,1,270,0,4,95,0,1,271,0,1,271,0,1,271,0,1,271,0,-1,303,0,4,96,0,-1,96,0,-1,98,0,3,98,0,5,98,0,3,98,0,3,98,0,5,304,0,3,98,0,5,304,0,1,272,0,1,272,0,1,272,0,1,272,0,4,97,0,1,273,0,1,273,0,1,273,0,1,273,0,-1,304,0,4,98,0,-1,98,0,-1,100,0,3,100,0,5,100,0,3,100,0,3,100,0,5,305,0,3,100,0,5,305,0,1,274,0,1,274,0,1,274,0,1,274,0,4,99,0,1,275,0,1,275,0,1,275,0,1,275,0,-1,305,0,4,100,0,-1,100,0,-1,117,0,3,117,0,1,116,0,1,116,0,1,116,0,1,116,0,4,101,0,-1,129,0,3,129,0,1,128,0,1,128,0,1,128,0,1,128,0,4,102,0,-1,143,0,3,143,0,1,142,0,1,142,0,1,142,0,1,142,0,4,103,0,-1,152,0,3,152,0,1,151,0,1,151,0,1,151,0,1,151,0,4,104,0,-1,165,0,3,165,0,1,164,0,1,164,0,1,164,0,1,164,0,4,105,0,-1,182,0,3,182,0,1,181,0,1,181,0,1,181,0,1,181,0,4,106,0,-1,195,0,3,195,0,1,194,0,1,194,0,1,194,0,1,194,0,4,107,0,-1,208,0,3,208,0,1,207,0,1,207,0,1,207,0,1,207,0,4,108,0,-1,219,0,3,219,0,1,218,0,1,218,0,1,218,0,1,218,0,4,109,0,-1,236,0,3,236,0,1,235,0,1,235,0,1,235,0,1,235,0,4,110,0,-1,253,0,3,253,0,1,252,0,1,252,0,1,252,0,1,252,0,4,111,0,-1,268,0,3,268,0,1,267,0,1,267,0,1,267,0,1,267,0,4,112,0,1,118,0,1,118,0,1,118,0,1,118,0,4,117,0,-1,117,0,1,130,0,1,130,0,1,130,0,1,130,0,4,129,0,-1,129,0,1,144,0,1,144,0,1,144,0,1,144,0,4,143,0,-1,143,0,1,153,0,1,153,0,1,153,0,1,153,0,4,152,0,-1,152,0,1,166,0,1,166,0,1,166,0,1,166,0,4,165,0,-1,165,0,1,183,0,1,183,0,1,183,0,1,183,0,4,182,0,-1,182,0,1,196,0,1,196,0,1,196,0,1,196,0,4,195,0,-1,195,0,1,209,0,1,209,0,1,209,0,1,209,0,4,208,0,-1,208,0,1,220,0,1,220,0,1,220,0,1,220,0,4,219,0,-1,219,0,1,237,0,1,237,0,1,237,0,1,237,0,4,236,0,-1,236,0,1,254,0,1,254,0,1,254,0,1,254,0,4,253,0,-1,253,0,1,269,0,1,269,0,1,269,0,1,269,0,4,268,0,-1,268,0,4,306,0,4,307,0,-1,308,0,-1,309,0,4,310,0,4,311,0,4,312,0,4,313,0,-1,314,0,-1,315,0,-1,316,0,4,317,0,4,318,0,4,319,0,4,320,0,-1,321,0,-1,322,0,4,323,0,4,324,0,-1,325,0,-1,326,0,4,327,0,4,328,0,4,329,0,4,330,0,4,331,0,-1,332,0,-1,333,0,4,334,0,4,335,0,4,336,0,4,337,0,4,338,0,4,339,0,4,340,0,4,341,0,4,342,0,-1,343,0,-1,344,0,4,345,0,4,346,0,4,347,0,4,348,0,4,349,0,-1,350,0,-1,351,0,4,352,0,4,353,0,4,354,0,4,355,0,4,356,0,-1,357,0,-1,358,0,4,359,0,4,360,0,4,361,0,-1,362,0,-1,363,0,-1,364,0,4,365,0,4,366,0,4,367,0,4,368,0,4,369,0,4,370,0,4,371,0,-1,372,0,-1,373,0,-1,374,0,4,375,0,4,376,0,4,377,0,4,378,0,4,379,0,4,380,0,4,381,0,-1,382,0,-1,383,0,-1,384,0,4,385,0,4,386,0,4,387,0,4,388,0,4,389,0,-1,390,0,-1,391,0,-1,392,0,14,1,277,9,308,278,9,309,279,9,314,280,9,315,281,9,316,282,9,321,283,9,322,284,9,325,285,9,326,286,9,332,287,9,333,288,9,343,289,9,344,290,9,350,291,9,351,292,9,357,293,9,358,294,9,362,295,9,363,296,9,364,297,9,372,298,9,373,299,9,374,300,9,382,301,9,383,302,9,384,303,9,390,304,9,391,305,9,392,1231],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,308,309,314,315,316,321,322,325,326,332,333,343,344,350,351,357,358,362,363,364,372,373,374,382,383,384,390,391,392],[6,6,6,6,6,6,6,-1,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,0,0,0,0,0,0,0,6,6,-1,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,0,0,0,0,0,0,0,6,6,6,6,6,6,6,6,6,-1,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,0,0,0,0,0,0,0,6,6,-1,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,0,0,0,0,0,0,0,6,6,-1,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,0,0,0,0,0,0,0,6,6,6,6,6,6,6,6,6,-1,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,0,0,0,0,0,0,0,6,6,-1,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,0,0,0,0,0,0,0,6,6,6,6,6,6,6,-1,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,0,0,0,0,0,0,0,6,6,-1,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,0,0,0,0,0,0,0,6,6,6,6,6,6,6,6,6,6,-1,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,0,0,0,0,0,0,0,6,6,-1,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,0,0,0,0,0,0,0,6,6,6,6,6,6,6,6,6,6,6,6,6,6,-1,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,0,0,0,0,0,0,0,6,6,-1,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,0,0,0,0,0,0,0,6,6,6,6,6,6,6,6,6,6,-1,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,0,0,0,0,0,0,0,6,6,-1,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,0,0,0,0,0,0,0,6,6,6,6,6,6,6,6,6,6,-1,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,0,0,0,0,0,0,0,6,6,-1,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,0,0,0,0,0,0,0,6,6,6,6,6,6,6,6,-1,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,0,0,0,0,0,0,0,6,6,-1,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,0,0,0,0,0,0,0,6,6,-1,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,0,0,0,0,0,0,0,6,6,6,6,6,6,6,6,6,6,6,6,-1,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,0,0,0,0,0,0,0,6,6,-1,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,0,0,0,0,0,0,0,6,6,-1,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,0,0,0,0,0,0,0,6,6,6,6,6,6,6,6,6,6,6,6,-1,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,0,0,0,0,0,0,0,6,6,-1,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,0,0,0,0,0,0,0,6,6,-1,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,0,0,0,0,0,0,0,6,6,6,6,6,6,6,6,6,6,-1,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,0,0,0,0,0,0,0,6,6,-1,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,0,0,0,0,0,0,0,6,6,-1,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,0,0,0,0,0,0,0,31,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],[35,9,9,21,20,16,6,7,8,11,12,13,14,1,2,3,4,5,8,0,0,0,0,0,0,0,0,0,15,0,1,2,3,4,5,16,6,7,8,11,12,13,14,1,2,3,4,5,8,0,0,0,0,0,0,0,0,0,15,0,1,2,3,4,5,35,9,9,9,9,21,20,16,6,7,8,11,12,13,14,1,2,3,4,5,8,0,0,0,0,0,0,0,0,0,15,0,1,2,3,4,5,16,6,7,8,11,12,13,14,1,2,3,4,5,8,0,0,0,0,0,0,0,0,0,15,0,1,2,3,4,5,16,6,7,8,11,12,13,14,1,2,3,4,5,8,0,0,0,0,0,0,0,0,0,15,0,1,2,3,4,5,35,9,9,9,39,21,20,16,6,7,8,11,12,13,14,1,2,3,4,5,8,0,0,0,0,0,0,0,0,0,15,0,1,2,3,4,5,16,6,7,8,11,12,13,14,1,2,3,4,5,8,0,0,0,0,0,0,0,0,0,15,0,1,2,3,4,5,9,35,9,21,20,16,6,7,8,11,12,13,14,1,2,3,4,5,8,0,0,0,0,0,0,0,0,0,15,0,1,2,3,4,5,16,6,7,8,11,12,13,14,1,2,3,4,5,8,0,0,0,0,0,0,0,0,0,15,0,1,2,3,4,5,9,9,9,9,35,85,21,20,16,6,7,8,11,12,13,14,1,2,3,4,5,8,0,0,0,0,0,0,0,0,0,15,0,1,2,3,4,5,16,6,7,8,11,12,13,14,1,2,3,4,5,8,0,0,0,0,0,0,0,0,0,15,0,1,2,3,4,5,9,9,9,9,35,9,9,9,39,9,21,20,16,6,7,8,11,12,13,14,1,2,3,4,5,8,0,0,0,0,0,0,0,0,0,15,0,1,2,3,4,5,16,6,7,8,11,12,13,14,1,2,3,4,5,8,0,0,0,0,0,0,0,0,0,15,0,1,2,3,4,5,35,9,9,9,9,9,21,20,16,6,7,8,11,12,13,14,1,2,3,4,5,8,0,0,0,0,0,0,0,0,0,15,0,1,2,3,4,5,16,6,7,8,11,12,13,14,1,2,3,4,5,8,0,0,0,0,0,0,0,0,0,15,0,1,2,3,4,5,35,9,9,9,9,39,21,20,16,6,7,8,11,12,13,14,1,2,3,4,5,8,0,0,0,0,0,0,0,0,0,15,0,1,2,3,4,5,16,6,7,8,11,12,13,14,1,2,3,4,5,8,0,0,0,0,0,0,0,0,0,15,0,1,2,3,4,5,35,9,9,9,21,20,16,6,7,8,11,12,13,14,1,2,3,4,5,8,0,0,0,0,0,0,0,0,0,15,0,1,2,3,4,5,16,6,7,8,11,12,13,14,1,2,3,4,5,8,0,0,0,0,0,0,0,0,0,15,0,1,2,3,4,5,16,6,7,8,11,12,13,14,1,2,3,4,5,8,0,0,0,0,0,0,0,0,0,15,0,1,2,3,4,5,35,9,9,9,9,9,9,39,21,20,16,6,7,8,11,12,13,14,1,2,3,4,5,8,0,0,0,0,0,0,0,0,0,15,0,1,2,3,4,5,16,6,7,8,11,12,13,14,1,2,3,4,5,8,0,0,0,0,0,0,0,0,0,15,0,1,2,3,4,5,16,6,7,8,11,12,13,14,1,2,3,4,5,8,0,0,0,0,0,0,0,0,0,15,0,1,2,3,4,5,35,9,9,9,9,9,9,9,21,20,16,6,7,8,11,12,13,14,1,2,3,4,5,8,0,0,0,0,0,0,0,0,0,15,0,1,2,3,4,5,16,6,7,8,11,12,13,14,1,2,3,4,5,8,0,0,0,0,0,0,0,0,0,15,0,1,2,3,4,5,16,6,7,8,11,12,13,14,1,2,3,4,5,8,0,0,0,0,0,0,0,0,0,15,0,1,2,3,4,5,35,9,9,9,9,39,21,20,16,6,7,8,11,12,13,14,1,2,3,4,5,8,0,0,0,0,0,0,0,0,0,15,0,1,2,3,4,5,16,6,7,8,11,12,13,14,1,2,3,4,5,8,0,0,0,0,0,0,0,0,0,15,0,1,2,3,4,5,16,6,7,8,11,12,13,14,1,2,3,4,5,8,0,0,0,0,0,0,0,0,0,15,0,1,2,3,4,5,74,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10]],[[[54,"placeholder_mat_runway",1,[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{"USE_INSTANCING":true,"USE_TEXTURE":true}],[[[{"timeOffset":2.9},"mainTexture",6,0,"alphaTexture",6,1]],11]]],0,0,[0,0,0],[13,33,11],[191,192,193]],[[[155,"util/dcc/imported-metallic-roughness",[{"hash":2664252233,"name":"util/dcc/imported-metallic-roughness|standard-vs|standard-fs","blocks":[{"name":"Constants","stageFlags":17,"binding":0,"members":[{"name":"tilingOffset","type":16,"count":1},{"name":"albedo","type":16,"count":1},{"name":"albedoScaleAndCutoff","type":16,"count":1},{"name":"emissive","type":16,"count":1},{"name":"emissiveScale","type":13,"count":1},{"name":"occlusion","type":13,"count":1},{"name":"roughness","type":13,"count":1},{"name":"metallic","type":13,"count":1},{"name":"normalStrength","type":13,"count":1},{"name":"alphaSource","type":13,"count":1},{"name":"albedoScale","type":13,"count":1}],"defines":[]}],"samplerTextures":[{"name":"albedoMap","type":28,"count":1,"stageFlags":16,"binding":1,"defines":["USE_ALBEDO_MAP"]},{"name":"baseWeightMap","type":28,"count":1,"stageFlags":16,"binding":2,"defines":["USE_WEIGHT_MAP"]},{"name":"metallicMap","type":28,"count":1,"stageFlags":16,"binding":3,"defines":["USE_METALLIC_MAP"]},{"name":"roughnessMap","type":28,"count":1,"stageFlags":16,"binding":4,"defines":["USE_ROUGHNESS_MAP"]},{"name":"occlusionMap","type":28,"count":1,"stageFlags":16,"binding":5,"defines":["USE_OCCLUSION_MAP"]},{"name":"transparencyMap","type":28,"count":1,"stageFlags":16,"binding":6,"defines":["USE_TRANSPARENCY_MAP"]},{"name":"transparencyColorMap","type":28,"count":1,"stageFlags":16,"binding":7,"defines":["USE_TRANSPARENCYCOLOR_MAP"]},{"name":"emissiveMap","type":28,"count":1,"stageFlags":16,"binding":8,"defines":["USE_EMISSIVE_MAP"]},{"name":"emissiveScaleMap","type":28,"count":1,"stageFlags":16,"binding":9,"defines":["USE_EMISSIVESCALE_MAP"]},{"name":"alphaSourceMap","type":28,"count":1,"stageFlags":16,"binding":10,"defines":["USE_OPACITY_MAP"]},{"name":"normalMap","type":28,"count":1,"stageFlags":16,"binding":11,"defines":["USE_NORMAL_MAP"]}],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[],"attributes":[{"name":"a_position","format":32,"location":0,"defines":[]},{"name":"a_normal","format":32,"location":1,"defines":[]},{"name":"a_texCoord","format":21,"location":2,"defines":[]},{"name":"a_tangent","format":44,"location":3,"defines":[]},{"name":"a_color","format":44,"location":6,"defines":["USE_VERTEX_COLOR"]},{"name":"a_texCoord1","format":21,"location":7,"defines":[]},{"name":"a_joints","location":4,"defines":["CC_USE_SKINNING"]},{"name":"a_weights","format":44,"location":5,"defines":["CC_USE_SKINNING"]},{"name":"a_jointAnimInfo","format":44,"isInstanced":true,"location":8,"defines":["USE_INSTANCING","CC_USE_BAKED_ANIMATION"]},{"name":"a_matWorld0","format":44,"isInstanced":true,"location":9,"defines":["USE_INSTANCING"]},{"name":"a_matWorld1","format":44,"isInstanced":true,"location":10,"defines":["USE_INSTANCING"]},{"name":"a_matWorld2","format":44,"isInstanced":true,"location":11,"defines":["USE_INSTANCING"]},{"name":"a_lightingMapUVParam","format":44,"isInstanced":true,"location":12,"defines":["USE_INSTANCING","CC_USE_LIGHTMAP"]},{"name":"a_localShadowBiasAndProbeId","format":44,"isInstanced":true,"location":13,"defines":["USE_INSTANCING"]},{"name":"a_sh_linear_const_r","format":44,"isInstanced":true,"location":14,"defines":["USE_INSTANCING","CC_USE_LIGHT_PROBE"]},{"name":"a_sh_linear_const_g","format":44,"isInstanced":true,"location":15,"defines":["USE_INSTANCING","CC_USE_LIGHT_PROBE"]},{"name":"a_sh_linear_const_b","format":44,"isInstanced":true,"location":16,"defines":["USE_INSTANCING","CC_USE_LIGHT_PROBE"]},{"name":"a_vertexId","format":11,"location":17,"defines":["CC_USE_MORPH"]}],"fragColors":[{"name":"fragColorX","typename":"vec4","type":16,"count":1,"stageFlags":16,"location":0,"tags":[],"defines":[]},{"name":"fragColor0","typename":"vec4","type":16,"count":1,"stageFlags":16,"location":1,"tags":["CC_PIPELINE_TYPE"],"defines":["CC_PIPELINE_TYPE"]},{"name":"fragColor1","typename":"vec4","type":16,"count":1,"stageFlags":16,"location":2,"defines":["CC_PIPELINE_TYPE"]},{"name":"fragColor2","typename":"vec4","type":16,"count":1,"stageFlags":16,"location":3,"defines":["CC_PIPELINE_TYPE"]}],"descriptors":[{"rate":0,"blocks":[{"name":"CCLocal","stageFlags":17,"tags":{"builtin":"local"},"members":[{"name":"cc_matWorld","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matWorldIT","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_lightingMapUVParam","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_localShadowBias","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_reflectionProbeData1","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_reflectionProbeData2","typename":"vec4","type":16,"count":1,"precision":"highp "}],"defines":["!USE_INSTANCING"]},{"name":"CCMorph","stageFlags":1,"tags":{"builtin":"local"},"members":[{"name":"cc_displacementWeights","typename":"vec4","type":16,"count":15,"isArray":true},{"name":"cc_displacementTextureInfo","typename":"vec4","type":16,"count":1}],"defines":["CC_USE_MORPH"]},{"name":"CCSkinningTexture","stageFlags":1,"tags":{"builtin":"local"},"members":[{"name":"cc_jointTextureInfo","typename":"vec4","type":16,"count":1,"precision":"highp "}],"defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"CCSkinningAnimation","stageFlags":1,"tags":{"builtin":"local"},"members":[{"name":"cc_jointAnimInfo","typename":"vec4","type":16,"count":1,"precision":"highp "}],"defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"CCSkinning","stageFlags":1,"tags":{"builtin":"local"},"members":[{"name":"cc_joints","typename":"vec4","type":16,"count":0,"precision":"highp ","isArray":true}],"defines":["CC_USE_SKINNING","!CC_USE_BAKED_ANIMATION","!CC_USE_REAL_TIME_JOINT_TEXTURE"]},{"name":"CCForwardLight","stageFlags":16,"tags":{"builtin":"local"},"members":[{"name":"cc_lightPos","typename":"vec4","type":16,"count":0,"precision":"highp ","isArray":true},{"name":"cc_lightColor","typename":"vec4","type":16,"count":0,"isArray":true},{"name":"cc_lightSizeRangeAngle","typename":"vec4","type":16,"count":0,"isArray":true},{"name":"cc_lightDir","typename":"vec4","type":16,"count":0,"isArray":true}],"defines":["CC_FORWARD_ADD","CC_ENABLE_CLUSTERED_LIGHT_CULLING"]},{"name":"CCSH","stageFlags":16,"tags":{"builtin":"local"},"members":[{"name":"cc_sh_linear_const_r","typename":"vec4","type":16,"count":1},{"name":"cc_sh_linear_const_g","typename":"vec4","type":16,"count":1},{"name":"cc_sh_linear_const_b","typename":"vec4","type":16,"count":1},{"name":"cc_sh_quadratic_r","typename":"vec4","type":16,"count":1},{"name":"cc_sh_quadratic_g","typename":"vec4","type":16,"count":1},{"name":"cc_sh_quadratic_b","typename":"vec4","type":16,"count":1},{"name":"cc_sh_quadratic_a","typename":"vec4","type":16,"count":1}],"defines":["CC_USE_LIGHT_PROBE","!USE_INSTANCING"]}],"samplerTextures":[{"name":"cc_PositionDisplacements","typename":"sampler2D","type":28,"count":1,"stageFlags":1,"tags":{"builtin":"local"},"defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_POSITION"]},{"name":"cc_NormalDisplacements","typename":"sampler2D","type":28,"count":1,"stageFlags":1,"tags":{"builtin":"local"},"defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_NORMAL"]},{"name":"cc_TangentDisplacements","typename":"sampler2D","type":28,"count":1,"stageFlags":1,"tags":{"builtin":"local"},"defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_TANGENT"]},{"name":"cc_jointTexture","typename":"sampler2D","type":28,"count":1,"precision":"highp ","stageFlags":1,"tags":{"builtin":"local"},"defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"cc_realtimeJoint","typename":"sampler2D","type":28,"count":1,"precision":"highp ","stageFlags":1,"tags":{"builtin":"local"},"defines":["CC_USE_SKINNING","!CC_USE_BAKED_ANIMATION","CC_USE_REAL_TIME_JOINT_TEXTURE"]},{"name":"cc_reflectionProbeCubemap","typename":"samplerCube","type":31,"count":1,"stageFlags":16,"tags":{"builtin":"local"},"defines":["CC_USE_REFLECTION_PROBE"]},{"name":"cc_reflectionProbePlanarMap","typename":"sampler2D","type":28,"count":1,"stageFlags":16,"tags":{"builtin":"local"},"defines":["CC_USE_REFLECTION_PROBE"]},{"name":"cc_reflectionProbeDataMap","typename":"sampler2D","type":28,"count":1,"stageFlags":16,"tags":{"builtin":"local"},"defines":["CC_USE_REFLECTION_PROBE"]},{"name":"cc_lightingMap","typename":"sampler2D","type":28,"count":1,"stageFlags":16,"tags":{"builtin":"local"},"defines":["CC_USE_LIGHTMAP","!CC_FORWARD_ADD"]}],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[]},{"rate":1,"blocks":[{"name":"Constants","stageFlags":17,"binding":0,"members":[{"name":"tilingOffset","type":16,"count":1},{"name":"albedo","type":16,"count":1},{"name":"albedoScaleAndCutoff","type":16,"count":1},{"name":"emissive","type":16,"count":1},{"name":"emissiveScale","type":13,"count":1},{"name":"occlusion","type":13,"count":1},{"name":"roughness","type":13,"count":1},{"name":"metallic","type":13,"count":1},{"name":"normalStrength","type":13,"count":1},{"name":"alphaSource","type":13,"count":1},{"name":"albedoScale","type":13,"count":1}],"defines":[]}],"samplerTextures":[{"name":"albedoMap","type":28,"count":1,"stageFlags":16,"binding":1,"defines":["USE_ALBEDO_MAP"]},{"name":"baseWeightMap","type":28,"count":1,"stageFlags":16,"binding":2,"defines":["USE_WEIGHT_MAP"]},{"name":"metallicMap","type":28,"count":1,"stageFlags":16,"binding":3,"defines":["USE_METALLIC_MAP"]},{"name":"roughnessMap","type":28,"count":1,"stageFlags":16,"binding":4,"defines":["USE_ROUGHNESS_MAP"]},{"name":"occlusionMap","type":28,"count":1,"stageFlags":16,"binding":5,"defines":["USE_OCCLUSION_MAP"]},{"name":"transparencyMap","type":28,"count":1,"stageFlags":16,"binding":6,"defines":["USE_TRANSPARENCY_MAP"]},{"name":"transparencyColorMap","type":28,"count":1,"stageFlags":16,"binding":7,"defines":["USE_TRANSPARENCYCOLOR_MAP"]},{"name":"emissiveMap","type":28,"count":1,"stageFlags":16,"binding":8,"defines":["USE_EMISSIVE_MAP"]},{"name":"emissiveScaleMap","type":28,"count":1,"stageFlags":16,"binding":9,"defines":["USE_EMISSIVESCALE_MAP"]},{"name":"alphaSourceMap","type":28,"count":1,"stageFlags":16,"binding":10,"defines":["USE_OPACITY_MAP"]},{"name":"normalMap","type":28,"count":1,"stageFlags":16,"binding":11,"defines":["USE_NORMAL_MAP"]}],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[]},{"rate":2,"blocks":[],"samplerTextures":[],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[]},{"rate":3,"blocks":[{"name":"CCGlobal","stageFlags":17,"tags":{"builtin":"global"},"members":[{"name":"cc_time","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_screenSize","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_nativeSize","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_probeInfo","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_debug_view_mode","typename":"vec4","type":16,"count":1,"precision":"mediump "}],"defines":[]},{"name":"CCCamera","stageFlags":17,"tags":{"builtin":"global"},"members":[{"name":"cc_matView","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matViewInv","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matProj","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matProjInv","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matViewProj","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matViewProjInv","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_cameraPos","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_surfaceTransform","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_screenScale","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_exposure","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_mainLitDir","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_mainLitColor","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_ambientSky","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_ambientGround","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_fogColor","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_fogBase","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_fogAdd","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_nearFar","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_viewPort","typename":"vec4","type":16,"count":1,"precision":"mediump "}],"defines":[]},{"name":"CCShadow","stageFlags":17,"tags":{"builtin":"global"},"members":[{"name":"cc_matLightView","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matLightViewProj","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_shadowInvProjDepthInfo","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_shadowProjDepthInfo","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_shadowProjInfo","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_shadowNFLSInfo","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_shadowWHPBInfo","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_shadowLPNNInfo","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_shadowColor","typename":"vec4","type":16,"count":1,"precision":"lowp "},{"name":"cc_planarNDInfo","typename":"vec4","type":16,"count":1,"precision":"mediump "}],"defines":[]},{"name":"CCCSM","stageFlags":16,"tags":{"builtin":"global"},"members":[{"name":"cc_csmViewDir0","typename":"vec4","type":16,"count":4,"precision":"highp ","isArray":true},{"name":"cc_csmViewDir1","typename":"vec4","type":16,"count":4,"precision":"highp ","isArray":true},{"name":"cc_csmViewDir2","typename":"vec4","type":16,"count":4,"precision":"highp ","isArray":true},{"name":"cc_csmAtlas","typename":"vec4","type":16,"count":4,"precision":"highp ","isArray":true},{"name":"cc_matCSMViewProj","typename":"mat4","type":25,"count":4,"precision":"highp ","isArray":true},{"name":"cc_csmProjDepthInfo","typename":"vec4","type":16,"count":4,"precision":"highp ","isArray":true},{"name":"cc_csmProjInfo","typename":"vec4","type":16,"count":4,"precision":"highp ","isArray":true},{"name":"cc_csmSplitsInfo","typename":"vec4","type":16,"count":1,"precision":"highp "}],"defines":["CC_SUPPORT_CASCADED_SHADOW_MAP"]}],"samplerTextures":[{"name":"cc_environment","typename":"samplerCube","type":31,"count":1,"stageFlags":16,"tags":{"builtin":"global"},"defines":[]},{"name":"cc_diffuseMap","typename":"samplerCube","type":31,"count":1,"stageFlags":16,"tags":{"builtin":"global"},"defines":["CC_USE_IBL","CC_USE_DIFFUSEMAP"]},{"name":"cc_shadowMap","typename":"sampler2D","type":28,"count":1,"precision":"highp ","stageFlags":16,"tags":{"builtin":"global"},"defines":["CC_RECEIVE_SHADOW"]},{"name":"cc_spotShadowMap","typename":"sampler2D","type":28,"count":1,"precision":"highp ","stageFlags":16,"tags":{"builtin":"global"},"defines":["CC_RECEIVE_SHADOW"]}],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[]}],"glsl3":{"vert":"\nprecision highp float;\n  #define CC_SURFACES_USE_SECOND_UV HAS_SECOND_UV\n  #define CC_SURFACES_USE_TWO_SIDED USE_TWOSIDE\n  #define CC_SURFACES_USE_REFLECTION_DENOISE USE_REFLECTION_DENOISE\n  #define CC_SURFACES_LIGHTING_ANISOTROPIC IS_ANISOTROPY\n  #define CC_SURFACES_USE_VERTEX_COLOR USE_VERTEX_COLOR\n  #define CC_SURFACES_USE_LEGACY_COMPATIBLE_LIGHTING USE_COMPATIBLE_LIGHTING\n#if IS_ANISOTROPY || USE_NORMAL_MAP\n  #define CC_SURFACES_USE_TANGENT_SPACE 1\n#endif\n  #define CC_SURFACES_LIGHTING_ANISOTROPIC_ENVCONVOLUTION_COUNT 31\n#ifndef CC_SURFACES_USE_SECOND_UV\n  #define CC_SURFACES_USE_SECOND_UV 0\n#endif\n#ifndef CC_SURFACES_USE_TANGENT_SPACE\n  #define CC_SURFACES_USE_TANGENT_SPACE 0\n#endif\n#ifndef CC_SURFACES_USE_VERTEX_COLOR\n  #define CC_SURFACES_USE_VERTEX_COLOR 0\n#endif\n#ifndef CC_SURFACES_TRANSFER_LOCAL_POS\n  #define CC_SURFACES_TRANSFER_LOCAL_POS 0\n#endif\n#ifndef CC_SURFACES_TRANSFER_CLIP_POS\n  #define CC_SURFACES_TRANSFER_CLIP_POS 0\n#endif\n#ifndef CC_SURFACES_USE_LIGHT_MAP\n  #ifdef CC_USE_LIGHTMAP\n    #define CC_SURFACES_USE_LIGHT_MAP CC_USE_LIGHTMAP\n  #else\n    #define CC_SURFACES_USE_LIGHT_MAP 0\n  #endif\n#endif\n#ifndef CC_SURFACES_FLIP_UV\n  #define CC_SURFACES_FLIP_UV 0\n#endif\n#ifndef CC_SURFACES_USE_TWO_SIDED\n  #define CC_SURFACES_USE_TWO_SIDED 0\n#endif\n#ifndef CC_SURFACES_USE_REFLECTION_DENOISE\n  #define CC_SURFACES_USE_REFLECTION_DENOISE 0\n#endif\n#ifndef CC_SURFACES_LIGHTING_ANISOTROPIC\n  #define CC_SURFACES_LIGHTING_ANISOTROPIC 0\n#endif\n#ifndef CC_SURFACES_LIGHTING_ANISOTROPIC_ENVCONVOLUTION_COUNT\n  #define CC_SURFACES_LIGHTING_ANISOTROPIC_ENVCONVOLUTION_COUNT 0\n#endif\n#ifndef CC_SURFACES_USE_LEGACY_COMPATIBLE_LIGHTING\n  #define CC_SURFACES_USE_LEGACY_COMPATIBLE_LIGHTING 0\n#endif\n#ifndef CC_SURFACES_LIGHTING_USE_FRESNEL\n  #define CC_SURFACES_LIGHTING_USE_FRESNEL 0\n#endif\n#ifndef CC_SURFACES_LIGHTING_TRANSMIT_SPECULAR\n  #define CC_SURFACES_LIGHTING_TRANSMIT_SPECULAR 0\n#endif\n#ifndef CC_SURFACES_LIGHTING_TRANSMIT_DIFFUSE\n  #define CC_SURFACES_LIGHTING_TRANSMIT_DIFFUSE 0\n#endif\n#ifndef CC_SURFACES_LIGHTING_USE_SHADOWMAP_TRANSMIT\n  #define CC_SURFACES_LIGHTING_USE_SHADOWMAP_TRANSMIT 0\n#endif\n#ifndef CC_SURFACES_LIGHTING_TRT\n  #define CC_SURFACES_LIGHTING_TRT 0\n#endif\n#ifndef CC_SURFACES_LIGHTING_TT\n  #define CC_SURFACES_LIGHTING_TT 0\n#endif\n#ifndef CC_SURFACES_ENABLE_DEBUG_VIEW\n  #define CC_SURFACES_ENABLE_DEBUG_VIEW 1\n#endif\n#ifndef CC_SURFACES_LIGHTING_CALCULATE_DIFFUSE\n  #define CC_SURFACES_LIGHTING_CALCULATE_DIFFUSE 1\n#endif\n#ifndef CC_SURFACES_LIGHTING_CALCULATE_SPECULAR\n  #define CC_SURFACES_LIGHTING_CALCULATE_SPECULAR 1\n#endif\n#define CC_USE_SURFACE_SHADER 1\nin vec3 a_position;\nin vec3 a_normal;\nin vec2 a_texCoord;\n#if CC_SURFACES_USE_TANGENT_SPACE\n  in vec4 a_tangent;\n#endif\n#if CC_SURFACES_USE_VERTEX_COLOR\n  in vec4 a_color;\n#endif\n#if CC_SURFACES_USE_SECOND_UV || CC_USE_LIGHTMAP\n  in vec2 a_texCoord1;\n#endif\n#if CC_USE_SKINNING\n    in vec4 a_joints;\n  in vec4 a_weights;\n#endif\n#if USE_INSTANCING\n  #if CC_USE_BAKED_ANIMATION\n    in highp vec4 a_jointAnimInfo;\n  #endif\n  in vec4 a_matWorld0;\n  in vec4 a_matWorld1;\n  in vec4 a_matWorld2;\n  #if CC_USE_LIGHTMAP\n    in vec4 a_lightingMapUVParam;\n  #endif\n  #if CC_RECEIVE_SHADOW || CC_USE_REFLECTION_PROBE\n    in vec4 a_localShadowBiasAndProbeId;\n  #endif\n  #if CC_USE_LIGHT_PROBE\n    in vec4 a_sh_linear_const_r;\n    in vec4 a_sh_linear_const_g;\n    in vec4 a_sh_linear_const_b;\n  #endif\n#endif\n#if CC_USE_MORPH\n    in float a_vertexId;\n#endif\nout highp vec3 v_worldPos;\nout mediump vec4 v_normal;\nout vec2 v_uv;\n#if CC_SURFACES_USE_VERTEX_COLOR\n  out lowp vec4 v_color;\n#endif\n#if CC_SURFACES_USE_TANGENT_SPACE\n  out mediump vec4 v_tangent;\n#endif\n#if CC_SURFACES_USE_SECOND_UV\n  out mediump vec2 v_uv1;\n#endif\n#if CC_USE_LIGHTMAP && !CC_FORWARD_ADD\n  out mediump vec3 v_luv;\n#endif\n#if CC_RECEIVE_SHADOW || CC_USE_REFLECTION_PROBE\n  out mediump vec4 v_shadowBiasAndProbeId;\n#endif\n#if CC_USE_FOG != 4 && !CC_USE_ACCURATE_FOG\n  out mediump float v_fogFactor;\n#endif\n#if CC_SURFACES_TRANSFER_LOCAL_POS\n  out highp vec4 v_localPos;\n#endif\n#if CC_SURFACES_TRANSFER_CLIP_POS\n  out highp vec4 v_clipPos;\n#endif\n#if CC_USE_LIGHT_PROBE\n  #if USE_INSTANCING\n    out mediump vec4 v_sh_linear_const_r;\n    out mediump vec4 v_sh_linear_const_g;\n    out mediump vec4 v_sh_linear_const_b;\n  #endif\n#endif\n#define VSOutput_worldPos v_worldPos\n#define VSOutput_worldNormal v_normal.xyz\n#define VSOutput_faceSideSign v_normal.w\n#define VSOutput_texcoord v_uv\n#if CC_SURFACES_USE_VERTEX_COLOR\n  #define VSOutput_vertexColor v_color\n#endif\n#if CC_SURFACES_USE_TANGENT_SPACE\n  #define VSOutput_worldTangent v_tangent.xyz\n  #define VSOutput_mirrorNormal v_tangent.w\n#endif\n#if CC_SURFACES_USE_SECOND_UV\n  #define VSOutput_texcoord1 v_uv1\n#endif\n#if CC_USE_LIGHTMAP && !CC_FORWARD_ADD\n  #define VSOutput_lightMapUV v_luv\n#endif\n#if CC_RECEIVE_SHADOW\n  #define VSOutput_shadowBias v_shadowBiasAndProbeId.xy\n#endif\n#if CC_USE_REFLECTION_PROBE\n  #define VSOutput_reflectionProbeId v_shadowBiasAndProbeId.z\n#endif\n#if CC_USE_FOG != 4 && !CC_USE_ACCURATE_FOG\n  #define VSOutput_fogFactor v_fogFactor\n#endif\n#if CC_SURFACES_TRANSFER_LOCAL_POS\n  #define VSOutput_localPos v_localPos\n#endif\n#if CC_SURFACES_TRANSFER_CLIP_POS\n  #define VSOutput_clipPos v_clipPos\n#endif\nstruct SurfacesStandardVertexIntermediate\n{\n  highp vec4 position;\n  vec3 normal;\n#if CC_SURFACES_USE_TANGENT_SPACE\n  vec4 tangent;\n#endif\n#if CC_SURFACES_USE_VERTEX_COLOR\n  vec4 color;\n#endif\n  vec2 texCoord;\n#if CC_SURFACES_USE_SECOND_UV\n  vec2 texCoord1;\n#endif\n  highp vec4 clipPos;\n  highp vec3 worldPos;\n  vec4 worldNormal;\n  #if CC_SURFACES_USE_TANGENT_SPACE\n    vec3 worldTangent, worldBinormal;\n  #endif\n#if CC_RECEIVE_SHADOW || CC_USE_REFLECTION_PROBE\n  vec4 shadowBiasAndProbeId;\n#endif\n#if CC_USE_FOG != 4 && !CC_USE_ACCURATE_FOG\n  float fogFactor;\n#endif\n#if CC_USE_LIGHTMAP && !CC_FORWARD_ADD\n  vec3 lightmapUV;\n#endif\n};\n#if CC_USE_MORPH\n    int getVertexId() {\n      return int(a_vertexId);\n    }\n#endif\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n  mediump vec4 cc_probeInfo;\n  mediump vec4 cc_debug_view_mode;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_surfaceTransform;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\nlayout(std140) uniform CCShadow {\n  highp mat4 cc_matLightView;\n  highp mat4 cc_matLightViewProj;\n  highp vec4 cc_shadowInvProjDepthInfo;\n  highp vec4 cc_shadowProjDepthInfo;\n  highp vec4 cc_shadowProjInfo;\n  mediump vec4 cc_shadowNFLSInfo;\n  mediump vec4 cc_shadowWHPBInfo;\n  mediump vec4 cc_shadowLPNNInfo;\n  lowp vec4 cc_shadowColor;\n  mediump vec4 cc_planarNDInfo;\n};\n#define QUATER_PI         0.78539816340\n#define HALF_PI           1.57079632679\n#define PI                3.14159265359\n#define PI2               6.28318530718\n#define PI4               12.5663706144\n#define INV_QUATER_PI     1.27323954474\n#define INV_HALF_PI       0.63661977237\n#define INV_PI            0.31830988618\n#define INV_PI2           0.15915494309\n#define INV_PI4           0.07957747155\n#define EPSILON           1e-6\n#define EPSILON_LOWP      1e-4\n#define LOG2              1.442695\n#define EXP_VALUE         2.71828183f\n#define FP_MAX            65504.0\n#define FP_SCALE          0.0009765625\n#define FP_SCALE_INV      1024.0\n#define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\n#define LIGHT_MAP_TYPE_DISABLED 0\n#define LIGHT_MAP_TYPE_ALL_IN_ONE 1\n#define LIGHT_MAP_TYPE_INDIRECT_OCCLUSION 2\n#define REFLECTION_PROBE_TYPE_NONE 0\n#define REFLECTION_PROBE_TYPE_CUBE 1\n#define REFLECTION_PROBE_TYPE_PLANAR 2\n#define LIGHT_TYPE_DIRECTIONAL 0.0\n#define LIGHT_TYPE_POINT 1.0\n#define LIGHT_TYPE_SPOT 2.0\n#define LIGHT_TYPE_SPHERE 3.0\n#define LIGHT_TYPE_RANGED_DIRECTIONAL 4.0\n#define IS_DIRECTIONAL_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_DIRECTIONAL)) < EPSILON_LOWP)\n#define IS_SPHERE_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_SPHERE)) < EPSILON_LOWP)\n#define IS_SPOT_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_SPOT)) < EPSILON_LOWP)\n#define IS_POINT_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_POINT)) < EPSILON_LOWP)\n#define IS_RANGED_DIRECTIONAL_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_RANGED_DIRECTIONAL)) < EPSILON_LOWP)\nhighp float decode32 (highp vec4 rgba) {\n  rgba = rgba * 255.0;\n  highp float Sign = 1.0 - (step(128.0, (rgba[3]) + 0.5)) * 2.0;\n  highp float Exponent = 2.0 * (mod(float(int((rgba[3]) + 0.5)), 128.0)) + (step(128.0, (rgba[2]) + 0.5)) - 127.0;\n  highp float Mantissa = (mod(float(int((rgba[2]) + 0.5)), 128.0)) * 65536.0 + rgba[1] * 256.0 + rgba[0] + 8388608.0;\n  return Sign * exp2(Exponent - 23.0) * Mantissa;\n}\n#if !USE_INSTANCING\n  layout(std140) uniform CCLocal {\n    highp mat4 cc_matWorld;\n    highp mat4 cc_matWorldIT;\n    highp vec4 cc_lightingMapUVParam;\n    highp vec4 cc_localShadowBias;\n    highp vec4 cc_reflectionProbeData1;\n    highp vec4 cc_reflectionProbeData2;\n  };\n#endif\nvoid CCGetWorldMatrixFull(out mat4 matWorld, out mat4 matWorldIT)\n{\n  #if USE_INSTANCING\n    matWorld = mat4(\n      vec4(a_matWorld0.xyz, 0.0),\n      vec4(a_matWorld1.xyz, 0.0),\n      vec4(a_matWorld2.xyz, 0.0),\n      vec4(a_matWorld0.w, a_matWorld1.w, a_matWorld2.w, 1.0)\n    );\n    matWorldIT = matWorld;\n  #else\n    matWorld = cc_matWorld;\n    matWorldIT = cc_matWorldIT;\n  #endif\n}\n#if CC_USE_MORPH\n  layout(std140) uniform CCMorph {\n    vec4 cc_displacementWeights[15];\n    vec4 cc_displacementTextureInfo;\n  };\n  #if CC_MORPH_TARGET_HAS_POSITION\n    uniform sampler2D cc_PositionDisplacements;\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    uniform sampler2D cc_NormalDisplacements;\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    uniform sampler2D cc_TangentDisplacements;\n  #endif\n  vec2 getPixelLocation(vec2 textureResolution, int pixelIndex) {\n    float pixelIndexF = float(pixelIndex);\n    float x = mod(pixelIndexF, textureResolution.x);\n    float y = floor(pixelIndexF / textureResolution.x);\n    return vec2(x, y);\n  }\n  vec2 getPixelCoordFromLocation(vec2 location, vec2 textureResolution) {\n    return (vec2(location.x, location.y) + .5) / textureResolution;\n  }\n  #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      vec4 fetchVec3ArrayFromTexture(sampler2D tex, int pixelIndex) {\n        ivec2 texSize = textureSize(tex, 0);\n        return texelFetch(tex, ivec2(pixelIndex % texSize.x, pixelIndex / texSize.x), 0);\n      }\n  #else\n    vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n      int pixelIndex = elementIndex * 4;\n      vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n      vec2 x = getPixelCoordFromLocation(location + vec2(0.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 y = getPixelCoordFromLocation(location + vec2(1.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 z = getPixelCoordFromLocation(location + vec2(2.0, 0.0), cc_displacementTextureInfo.xy);\n      return vec4(\n        decode32(texture(tex, x)),\n        decode32(texture(tex, y)),\n        decode32(texture(tex, z)),\n        1.0\n      );\n    }\n  #endif\n  float getDisplacementWeight(int index) {\n    int quot = index / 4;\n    int remainder = index - quot * 4;\n    if (remainder == 0) {\n      return cc_displacementWeights[quot].x;\n    } else if (remainder == 1) {\n      return cc_displacementWeights[quot].y;\n    } else if (remainder == 2) {\n      return cc_displacementWeights[quot].z;\n    } else {\n      return cc_displacementWeights[quot].w;\n    }\n  }\n  vec3 getVec3DisplacementFromTexture(sampler2D tex, int vertexIndex) {\n  #if CC_MORPH_PRECOMPUTED\n    return fetchVec3ArrayFromTexture(tex, vertexIndex).rgb;\n  #else\n    vec3 result = vec3(0, 0, 0);\n    int nVertices = int(cc_displacementTextureInfo.z);\n    for (int iTarget = 0; iTarget < CC_MORPH_TARGET_COUNT; ++iTarget) {\n      result += (fetchVec3ArrayFromTexture(tex, nVertices * iTarget + vertexIndex).rgb * getDisplacementWeight(iTarget));\n    }\n    return result;\n  #endif\n  }\n  #if CC_MORPH_TARGET_HAS_POSITION\n  vec3 getPositionDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_PositionDisplacements, vertexId);\n  }\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n  vec3 getNormalDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_NormalDisplacements, vertexId);\n  }\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n  vec3 getTangentDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_TangentDisplacements, vertexId);\n  }\n  #endif\n  void applyMorph (inout vec4 position, inout vec3 normal, inout vec4 tangent) {\n    int vertexId = getVertexId();\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    normal.xyz = normal.xyz + getNormalDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    tangent.xyz = tangent.xyz + getTangentDisplacement(vertexId);\n  #endif\n  }\n  void applyMorph (inout vec4 position) {\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(getVertexId());\n  #endif\n  }\n#endif\n#if CC_USE_SKINNING\n  #if CC_USE_BAKED_ANIMATION\n    layout(std140) uniform CCSkinningTexture {\n      highp vec4 cc_jointTextureInfo;\n    };\n    layout(std140) uniform CCSkinningAnimation {\n      highp vec4 cc_jointAnimInfo;\n    };\n    uniform highp sampler2D cc_jointTexture;\n    void CCGetJointTextureCoords(float pixelsPerJoint, float jointIdx, out highp float x, out highp float y, out highp float invSize)\n    {\n      #if USE_INSTANCING\n        highp float temp = pixelsPerJoint * (a_jointAnimInfo.x * a_jointAnimInfo.y + jointIdx) + a_jointAnimInfo.z;\n      #else\n        highp float temp = pixelsPerJoint * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + jointIdx) + cc_jointTextureInfo.z;\n      #endif\n      invSize = cc_jointTextureInfo.w;\n      highp float tempY = floor(temp * invSize);\n      x = floor(temp - tempY * cc_jointTextureInfo.x);\n      y = (tempY + 0.5) * invSize;\n    }\n  #else\n    #if CC_USE_REAL_TIME_JOINT_TEXTURE\n      uniform highp sampler2D cc_realtimeJoint;\n    #else\n      layout(std140) uniform CCSkinning {\n        highp vec4 cc_joints[CC_JOINT_UNIFORM_CAPACITY * 3];\n      };\n    #endif\n  #endif\n  #if CC_USE_BAKED_ANIMATION\n    #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      mat4 getJointMatrix (float i) {\n        highp float x, y, invSize;\n        CCGetJointTextureCoords(3.0, i, x, y, invSize);\n        vec4 v1 = texture(cc_jointTexture, vec2((x + 0.5) * invSize, y));\n        vec4 v2 = texture(cc_jointTexture, vec2((x + 1.5) * invSize, y));\n        vec4 v3 = texture(cc_jointTexture, vec2((x + 2.5) * invSize, y));\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #else\n      mat4 getJointMatrix (float i) {\n        highp float x, y, invSize;\n        CCGetJointTextureCoords(12.0, i, x, y, invSize);\n        vec4 v1 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 0.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 1.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 2.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 3.5) * invSize, y)))\n        );\n        vec4 v2 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 4.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 5.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 6.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 7.5) * invSize, y)))\n        );\n        vec4 v3 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 8.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 9.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 10.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 11.5) * invSize, y)))\n        );\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #else\n    #if CC_USE_REAL_TIME_JOINT_TEXTURE\n      #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n        mat4 getJointMatrix (float i) {\n          float x = i;\n          vec4 v1 = texture(cc_realtimeJoint, vec2( x / 256.0, 0.5 / 3.0));\n          vec4 v2 = texture(cc_realtimeJoint, vec2( x / 256.0, 1.5 / 3.0));\n          vec4 v3 = texture(cc_realtimeJoint, vec2( x / 256.0, 2.5 / 3.0));\n          return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n        }\n      #else\n        mat4 getJointMatrix (float i) {\n         float x = 4.0 * i;\n          vec4 v1 = vec4(\n            decode32(texture(cc_realtimeJoint, vec2((x + 0.5)/ 1024.0, 0.5 / 3.0))),\n            decode32(texture(cc_realtimeJoint, vec2((x + 1.5)/ 1024.0, 0.5 / 3.0))),\n            decode32(texture(cc_realtimeJoint, vec2((x + 2.5)/ 1024.0, 0.5 / 3.0))),\n            decode32(texture(cc_realtimeJoint, vec2((x + 3.5)/ 1024.0, 0.5 / 3.0)))\n          );\n          vec4 v2 = vec4(\n            decode32(texture(cc_realtimeJoint, vec2((x + 0.5)/ 1024.0, 1.5 / 3.0))),\n            decode32(texture(cc_realtimeJoint, vec2((x + 1.5)/ 1024.0, 1.5 / 3.0))),\n            decode32(texture(cc_realtimeJoint, vec2((x + 2.5)/ 1024.0, 1.5 / 3.0))),\n            decode32(texture(cc_realtimeJoint, vec2((x + 3.5)/ 1024.0, 1.5 / 3.0)))\n          );\n          vec4 v3 = vec4(\n            decode32(texture(cc_realtimeJoint, vec2((x + 0.5)/ 1024.0, 2.5 / 3.0))),\n            decode32(texture(cc_realtimeJoint, vec2((x + 1.5)/ 1024.0, 2.5 / 3.0))),\n            decode32(texture(cc_realtimeJoint, vec2((x + 2.5)/ 1024.0, 2.5 / 3.0))),\n            decode32(texture(cc_realtimeJoint, vec2((x + 3.5)/ 1024.0, 2.5 / 3.0)))\n          );\n          return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n        }\n      #endif\n    #else\n      mat4 getJointMatrix (float i) {\n        int idx = int(i);\n        vec4 v1 = cc_joints[idx * 3];\n        vec4 v2 = cc_joints[idx * 3 + 1];\n        vec4 v3 = cc_joints[idx * 3 + 2];\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #endif\n  mat4 skinMatrix () {\n    vec4 joints = vec4(a_joints);\n    return getJointMatrix(joints.x) * a_weights.x\n         + getJointMatrix(joints.y) * a_weights.y\n         + getJointMatrix(joints.z) * a_weights.z\n         + getJointMatrix(joints.w) * a_weights.w;\n  }\n  void CCSkin (inout vec4 position) {\n    mat4 m = skinMatrix();\n    position = m * position;\n  }\n  void CCSkin (inout vec4 position, inout vec3 normal, inout vec4 tangent) {\n    mat4 m = skinMatrix();\n    position = m * position;\n    normal = (m * vec4(normal, 0.0)).xyz;\n    tangent.xyz = (m * vec4(tangent.xyz, 0.0)).xyz;\n  }\n#endif\n#if CC_USE_FOG != 4 && !CC_USE_ACCURATE_FOG\n  #if CC_USE_FOG != 4\n    float LinearFog(vec4 pos, vec3 cameraPos, float fogStart, float fogEnd) {\n        vec4 wPos = pos;\n        float cam_dis = distance(cameraPos, wPos.xyz);\n        return clamp((fogEnd - cam_dis) / (fogEnd - fogStart), 0., 1.);\n    }\n    float ExpFog(vec4 pos, vec3 cameraPos, float fogStart, float fogDensity, float fogAtten) {\n        vec4 wPos = pos;\n        float cam_dis = max(distance(cameraPos, wPos.xyz) - fogStart, 0.0) / fogAtten * 4.;\n        float f = exp(-cam_dis * fogDensity);\n        return f;\n    }\n    float ExpSquaredFog(vec4 pos, vec3 cameraPos, float fogStart, float fogDensity, float fogAtten) {\n        vec4 wPos = pos;\n        float cam_dis = max(distance(cameraPos, wPos.xyz) - fogStart, 0.0) / fogAtten * 4.;\n        float f = exp(-cam_dis * cam_dis * fogDensity * fogDensity);\n        return f;\n    }\n    float LayeredFog(vec4 pos, vec3 cameraPos, float fogTop, float fogRange, float fogAtten) {\n        vec4 wPos = pos;\n        vec3 camWorldProj = cameraPos.xyz;\n        camWorldProj.y = 0.;\n        vec3 worldPosProj = wPos.xyz;\n        worldPosProj.y = 0.;\n        float fDeltaD = distance(worldPosProj, camWorldProj) / fogAtten * 2.0;\n        float fDeltaY, fDensityIntegral;\n        if (cameraPos.y > fogTop) {\n            if (wPos.y < fogTop) {\n                fDeltaY = (fogTop - wPos.y) / fogRange * 2.0;\n                fDensityIntegral = fDeltaY * fDeltaY * 0.5;\n            }\n            else {\n                fDeltaY = 0.;\n                fDensityIntegral = 0.;\n            }\n        }\n        else {\n            if (wPos.y < fogTop) {\n                float fDeltaA = (fogTop - cameraPos.y) / fogRange * 2.;\n                float fDeltaB = (fogTop - wPos.y) / fogRange * 2.;\n                fDeltaY = abs(fDeltaA - fDeltaB);\n                fDensityIntegral = abs((fDeltaA * fDeltaA * 0.5) - (fDeltaB * fDeltaB * 0.5));\n            }\n            else {\n                fDeltaY = abs(fogTop - cameraPos.y) / fogRange * 2.;\n                fDensityIntegral = abs(fDeltaY * fDeltaY * 0.5);\n            }\n        }\n        float fDensity;\n        if (fDeltaY != 0.) {\n            fDensity = (sqrt(1.0 + ((fDeltaD / fDeltaY) * (fDeltaD / fDeltaY)))) * fDensityIntegral;\n        }\n        else {\n            fDensity = 0.;\n        }\n        float f = exp(-fDensity);\n        return f;\n    }\n  #endif\n  void CC_TRANSFER_FOG_BASE(vec4 pos, out float factor)\n  {\n  #if CC_USE_FOG == 0\n  \tfactor = LinearFog(pos, cc_cameraPos.xyz, cc_fogBase.x, cc_fogBase.y);\n  #elif CC_USE_FOG == 1\n  \tfactor = ExpFog(pos, cc_cameraPos.xyz, cc_fogBase.x, cc_fogBase.z, cc_fogAdd.z);\n  #elif CC_USE_FOG == 2\n  \tfactor = ExpSquaredFog(pos, cc_cameraPos.xyz, cc_fogBase.x, cc_fogBase.z, cc_fogAdd.z);\n  #elif CC_USE_FOG == 3\n  \tfactor = LayeredFog(pos, cc_cameraPos.xyz, cc_fogAdd.x, cc_fogAdd.y, cc_fogAdd.z);\n  #else\n  \tfactor = 1.0;\n  #endif\n  }\n#endif\nlayout(std140) uniform Constants {\n  vec4 tilingOffset;\n  vec4 albedo;\n  vec4 albedoScaleAndCutoff;\n  vec4 emissive;\n  float emissiveScale;\n  float occlusion;\n  float roughness;\n  float metallic;\n  float normalStrength;\n  float alphaSource;\n  float albedoScale;\n};\n#define CC_SURFACES_VERTEX_MODIFY_UV\nvoid SurfacesVertexModifyUV(inout SurfacesStandardVertexIntermediate In)\n{\n  In.texCoord = In.texCoord * tilingOffset.xy + tilingOffset.zw;\n#if CC_SURFACES_USE_SECOND_UV\n  In.texCoord1 = In.texCoord1 * tilingOffset.xy + tilingOffset.zw;\n#endif\n}\n#ifndef CC_SURFACES_VERTEX_MODIFY_LOCAL_POS\nvec3 SurfacesVertexModifyLocalPos(in SurfacesStandardVertexIntermediate In)\n{\n  return In.position.xyz;\n}\n#endif\n#ifndef CC_SURFACES_VERTEX_MODIFY_LOCAL_NORMAL\nvec3 SurfacesVertexModifyLocalNormal(in SurfacesStandardVertexIntermediate In)\n{\n  return In.normal.xyz;\n}\n#endif\n#ifndef CC_SURFACES_VERTEX_MODIFY_LOCAL_TANGENT\n  #if CC_SURFACES_USE_TANGENT_SPACE\n  vec4 SurfacesVertexModifyLocalTangent(in SurfacesStandardVertexIntermediate In)\n    {\n      return In.tangent;\n    }\n  #endif\n#endif\n#ifndef CC_SURFACES_VERTEX_MODIFY_LOCAL_SHARED_DATA\nvoid SurfacesVertexModifyLocalSharedData(inout SurfacesStandardVertexIntermediate In)\n{\n}\n#endif\n#ifndef CC_SURFACES_VERTEX_MODIFY_WORLD_POS\nvec3 SurfacesVertexModifyWorldPos(in SurfacesStandardVertexIntermediate In)\n{\n  return In.worldPos;\n}\n#endif\n#ifndef CC_SURFACES_VERTEX_MODIFY_CLIP_POS\nvec4 SurfacesVertexModifyClipPos(in SurfacesStandardVertexIntermediate In)\n{\n  return In.clipPos;\n}\n#endif\n#ifndef CC_SURFACES_VERTEX_MODIFY_UV\nvoid SurfacesVertexModifyUV(inout SurfacesStandardVertexIntermediate In)\n{\n}\n#endif\n#ifndef CC_SURFACES_VERTEX_MODIFY_WORLD_NORMAL\nvec3 SurfacesVertexModifyWorldNormal(in SurfacesStandardVertexIntermediate In)\n{\n    vec3 worldNormal = In.worldNormal.xyz;\n  #if CC_SURFACES_USE_TWO_SIDED\n      worldNormal.xyz *= In.worldNormal.w;\n  #endif\n  return worldNormal;\n}\n#endif\n#ifndef CC_SURFACES_VERTEX_MODIFY_SHARED_DATA\nvoid SurfacesVertexModifySharedData(inout SurfacesStandardVertexIntermediate In)\n{\n}\n#endif\nvoid CCSurfacesVertexInput(out SurfacesStandardVertexIntermediate In)\n{\n  In.position = vec4(a_position, 1.0);\n  In.normal = a_normal;\n#if CC_SURFACES_USE_TANGENT_SPACE\n  In.tangent = a_tangent;\n#endif\n#if CC_SURFACES_USE_VERTEX_COLOR\n  In.color = a_color;\n#endif\n  In.texCoord = a_texCoord;\n#if CC_SURFACES_USE_SECOND_UV\n  In.texCoord1 = a_texCoord1;\n#endif\n}\nvoid CCSurfacesVertexOutput(in SurfacesStandardVertexIntermediate In)\n{\n  gl_Position = In.clipPos;\n  VSOutput_worldNormal = In.worldNormal.xyz;\n  VSOutput_faceSideSign = In.worldNormal.w;\n  VSOutput_worldPos = In.worldPos;\n#if CC_SURFACES_USE_TANGENT_SPACE\n  VSOutput_worldTangent = In.worldTangent.xyz;\n  VSOutput_mirrorNormal = In.tangent.w > 0.0 ? 1.0 : -1.0;\n#endif\n#if CC_SURFACES_USE_VERTEX_COLOR\n  VSOutput_vertexColor = In.color;\n#endif\n  VSOutput_texcoord = In.texCoord;\n#if CC_SURFACES_USE_SECOND_UV\n  VSOutput_texcoord1 = In.texCoord1;\n#endif\n#if CC_USE_FOG != 4 && !CC_USE_ACCURATE_FOG\n  VSOutput_fogFactor = In.fogFactor;\n#endif\n#if CC_RECEIVE_SHADOW\n  VSOutput_shadowBias = In.shadowBiasAndProbeId.xy;\n#endif\n#if CC_USE_REFLECTION_PROBE\n  VSOutput_reflectionProbeId = In.shadowBiasAndProbeId.z;\n#endif\n#if CC_USE_LIGHTMAP && !CC_FORWARD_ADD\n  VSOutput_lightMapUV = In.lightmapUV;\n#endif\n#if CC_SURFACES_TRANSFER_LOCAL_POS\n  VSOutput_localPos = In.position;\n#endif\n#if CC_SURFACES_TRANSFER_CLIP_POS\n  VSOutput_clipPos = In.clipPos;\n#endif\n#if CC_USE_LIGHT_PROBE\n  #if USE_INSTANCING\n    v_sh_linear_const_r = a_sh_linear_const_r;\n    v_sh_linear_const_g = a_sh_linear_const_g;\n    v_sh_linear_const_b = a_sh_linear_const_b;\n  #endif\n#endif\n}\nvoid CCSurfacesVertexAnimation(inout SurfacesStandardVertexIntermediate In)\n{\nvec4 temp = vec4(0.0);\n#if CC_USE_MORPH\n  #if CC_SURFACES_USE_TANGENT_SPACE\n    applyMorph(In.position, In.normal, In.tangent);\n  #else\n    applyMorph(In.position, In.normal, temp);\n  #endif\n#endif\n#if CC_USE_SKINNING\n  #if CC_SURFACES_USE_TANGENT_SPACE\n    CCSkin(In.position, In.normal, In.tangent);\n  #else\n    CCSkin(In.position, In.normal, temp);\n  #endif\n#endif\n}\nvoid CCSurfacesVertexWorldTransform(inout SurfacesStandardVertexIntermediate In)\n{\n    mat4 matWorld, matWorldIT;\n    CCGetWorldMatrixFull(matWorld, matWorldIT);\n    In.worldPos = (matWorld * In.position).xyz;\n    In.worldNormal.xyz = normalize((matWorldIT * vec4(In.normal.xyz, 0.0)).xyz);\n    #if CC_SURFACES_USE_TANGENT_SPACE\n      In.worldTangent = normalize((matWorld * vec4(In.tangent.xyz, 0.0)).xyz);\n      In.worldBinormal = cross(In.worldNormal.xyz, In.worldTangent) * In.tangent.w;\n    #endif\n}\nvoid CCSurfacesVertexTransformUV(inout SurfacesStandardVertexIntermediate In)\n{\n  #if CC_SURFACES_FLIP_UV\n    In.texCoord = cc_cameraPos.w > 1.0 ? vec2(In.texCoord.x, 1.0 - In.texCoord.y) : In.texCoord;\n    #if CC_SURFACES_USE_SECOND_UV\n      In.texCoord1 = cc_cameraPos.w > 1.0 ? vec2(In.texCoord1.x, 1.0 - In.texCoord1.y) : In.texCoord1;\n    #endif\n  #endif\n}\nvoid CCSurfacesVertexTransferFog(inout SurfacesStandardVertexIntermediate In)\n{\n#if CC_USE_FOG != 4 && !CC_USE_ACCURATE_FOG\n    CC_TRANSFER_FOG_BASE(vec4(In.worldPos, 1.0), In.fogFactor);\n#endif\n}\nvoid CCSurfacesVertexTransferShadow(inout SurfacesStandardVertexIntermediate In)\n{\n  #if CC_RECEIVE_SHADOW || CC_USE_REFLECTION_PROBE\n    In.shadowBiasAndProbeId = vec4(0.0);\n  #endif\n  #if CC_RECEIVE_SHADOW\n    In.shadowBiasAndProbeId.xy = vec2(cc_shadowWHPBInfo.w, cc_shadowLPNNInfo.z);\n    #if USE_INSTANCING\n      In.shadowBiasAndProbeId.xy += a_localShadowBiasAndProbeId.xy;\n    #else\n      In.shadowBiasAndProbeId.xy += cc_localShadowBias.xy;\n    #endif\n  #endif\n  #if CC_USE_REFLECTION_PROBE\n    #if USE_INSTANCING\n      In.shadowBiasAndProbeId.zw = a_localShadowBiasAndProbeId.zw;\n    #else\n      In.shadowBiasAndProbeId.zw = cc_localShadowBias.zw;\n    #endif\n  #endif\n}\nvoid CCSurfacesVertexTransferLightMapUV(inout SurfacesStandardVertexIntermediate In)\n{\n#if CC_USE_LIGHTMAP && !CC_FORWARD_ADD\n  #if USE_INSTANCING\n    In.lightmapUV.xy = a_lightingMapUVParam.xy + a_texCoord1 * a_lightingMapUVParam.z;\n    In.lightmapUV.z = a_lightingMapUVParam.w;\n  #else\n    In.lightmapUV.xy = cc_lightingMapUVParam.xy + a_texCoord1 * cc_lightingMapUVParam.z;\n    In.lightmapUV.z = cc_lightingMapUVParam.w;\n  #endif\n#endif\n}\nvoid main()\n{\n  SurfacesStandardVertexIntermediate In;\n  CCSurfacesVertexInput(In);\n  CCSurfacesVertexAnimation(In);\n  In.position.xyz = SurfacesVertexModifyLocalPos(In);\n  In.normal.xyz = SurfacesVertexModifyLocalNormal(In);\n  #if CC_SURFACES_USE_TANGENT_SPACE\n    In.tangent = SurfacesVertexModifyLocalTangent(In);\n  #endif\n  SurfacesVertexModifyLocalSharedData(In);\n  CCSurfacesVertexWorldTransform(In);\n  In.worldPos = SurfacesVertexModifyWorldPos(In);\n  In.clipPos = cc_matProj * cc_matView * vec4(In.worldPos, 1.0);\n  In.clipPos = SurfacesVertexModifyClipPos(In);\n  vec3 viewDirect = normalize(cc_cameraPos.xyz - In.worldPos);\n  In.worldNormal.w = dot(In.worldNormal.xyz, viewDirect) < 0.0 ? -1.0 : 1.0;\n  In.worldNormal.xyz = SurfacesVertexModifyWorldNormal(In);\n  SurfacesVertexModifyUV(In);\n  SurfacesVertexModifySharedData(In);\n  CCSurfacesVertexTransformUV(In);\n  CCSurfacesVertexTransferFog(In);\n  CCSurfacesVertexTransferShadow(In);\n  CCSurfacesVertexTransferLightMapUV(In);\n  CCSurfacesVertexOutput(In);\n}","frag":"\nprecision highp float;\n  #define CC_SURFACES_USE_SECOND_UV HAS_SECOND_UV\n  #define CC_SURFACES_USE_TWO_SIDED USE_TWOSIDE\n  #define CC_SURFACES_USE_REFLECTION_DENOISE USE_REFLECTION_DENOISE\n  #define CC_SURFACES_LIGHTING_ANISOTROPIC IS_ANISOTROPY\n  #define CC_SURFACES_USE_VERTEX_COLOR USE_VERTEX_COLOR\n  #define CC_SURFACES_USE_LEGACY_COMPATIBLE_LIGHTING USE_COMPATIBLE_LIGHTING\n#if IS_ANISOTROPY || USE_NORMAL_MAP\n  #define CC_SURFACES_USE_TANGENT_SPACE 1\n#endif\n  #define CC_SURFACES_LIGHTING_ANISOTROPIC_ENVCONVOLUTION_COUNT 31\n#ifndef CC_SURFACES_USE_SECOND_UV\n  #define CC_SURFACES_USE_SECOND_UV 0\n#endif\n#ifndef CC_SURFACES_USE_TANGENT_SPACE\n  #define CC_SURFACES_USE_TANGENT_SPACE 0\n#endif\n#ifndef CC_SURFACES_USE_VERTEX_COLOR\n  #define CC_SURFACES_USE_VERTEX_COLOR 0\n#endif\n#ifndef CC_SURFACES_TRANSFER_LOCAL_POS\n  #define CC_SURFACES_TRANSFER_LOCAL_POS 0\n#endif\n#ifndef CC_SURFACES_TRANSFER_CLIP_POS\n  #define CC_SURFACES_TRANSFER_CLIP_POS 0\n#endif\n#ifndef CC_SURFACES_USE_LIGHT_MAP\n  #ifdef CC_USE_LIGHTMAP\n    #define CC_SURFACES_USE_LIGHT_MAP CC_USE_LIGHTMAP\n  #else\n    #define CC_SURFACES_USE_LIGHT_MAP 0\n  #endif\n#endif\n#ifndef CC_SURFACES_FLIP_UV\n  #define CC_SURFACES_FLIP_UV 0\n#endif\n#ifndef CC_SURFACES_USE_TWO_SIDED\n  #define CC_SURFACES_USE_TWO_SIDED 0\n#endif\n#ifndef CC_SURFACES_USE_REFLECTION_DENOISE\n  #define CC_SURFACES_USE_REFLECTION_DENOISE 0\n#endif\n#ifndef CC_SURFACES_LIGHTING_ANISOTROPIC\n  #define CC_SURFACES_LIGHTING_ANISOTROPIC 0\n#endif\n#ifndef CC_SURFACES_LIGHTING_ANISOTROPIC_ENVCONVOLUTION_COUNT\n  #define CC_SURFACES_LIGHTING_ANISOTROPIC_ENVCONVOLUTION_COUNT 0\n#endif\n#ifndef CC_SURFACES_USE_LEGACY_COMPATIBLE_LIGHTING\n  #define CC_SURFACES_USE_LEGACY_COMPATIBLE_LIGHTING 0\n#endif\n#ifndef CC_SURFACES_LIGHTING_USE_FRESNEL\n  #define CC_SURFACES_LIGHTING_USE_FRESNEL 0\n#endif\n#ifndef CC_SURFACES_LIGHTING_TRANSMIT_SPECULAR\n  #define CC_SURFACES_LIGHTING_TRANSMIT_SPECULAR 0\n#endif\n#ifndef CC_SURFACES_LIGHTING_TRANSMIT_DIFFUSE\n  #define CC_SURFACES_LIGHTING_TRANSMIT_DIFFUSE 0\n#endif\n#ifndef CC_SURFACES_LIGHTING_USE_SHADOWMAP_TRANSMIT\n  #define CC_SURFACES_LIGHTING_USE_SHADOWMAP_TRANSMIT 0\n#endif\n#ifndef CC_SURFACES_LIGHTING_TRT\n  #define CC_SURFACES_LIGHTING_TRT 0\n#endif\n#ifndef CC_SURFACES_LIGHTING_TT\n  #define CC_SURFACES_LIGHTING_TT 0\n#endif\n#ifndef CC_SURFACES_ENABLE_DEBUG_VIEW\n  #define CC_SURFACES_ENABLE_DEBUG_VIEW 1\n#endif\n#ifndef CC_SURFACES_LIGHTING_CALCULATE_DIFFUSE\n  #define CC_SURFACES_LIGHTING_CALCULATE_DIFFUSE 1\n#endif\n#ifndef CC_SURFACES_LIGHTING_CALCULATE_SPECULAR\n  #define CC_SURFACES_LIGHTING_CALCULATE_SPECULAR 1\n#endif\n#define CC_USE_SURFACE_SHADER 1\nin highp vec3 v_worldPos;\nin mediump vec4 v_normal;\nin vec2 v_uv;\n#if CC_SURFACES_USE_VERTEX_COLOR\n  in lowp vec4 v_color;\n#endif\n#if CC_SURFACES_USE_TANGENT_SPACE\n  in mediump vec4 v_tangent;\n#endif\n#if CC_SURFACES_USE_SECOND_UV\n  in mediump vec2 v_uv1;\n#endif\n#if CC_USE_LIGHTMAP && !CC_FORWARD_ADD\n  in mediump vec3 v_luv;\n#endif\n#if CC_RECEIVE_SHADOW || CC_USE_REFLECTION_PROBE\n  in mediump vec4 v_shadowBiasAndProbeId;\n#endif\n#if CC_USE_FOG != 4 && !CC_USE_ACCURATE_FOG\n  in mediump float v_fogFactor;\n#endif\n#if CC_SURFACES_TRANSFER_LOCAL_POS\n  in highp vec4 v_localPos;\n#endif\n#if CC_SURFACES_TRANSFER_CLIP_POS\n  in highp vec4 v_clipPos;\n#endif\n#if CC_USE_LIGHT_PROBE\n  #if USE_INSTANCING\n    in mediump vec4 v_sh_linear_const_r;\n    in mediump vec4 v_sh_linear_const_g;\n    in mediump vec4 v_sh_linear_const_b;\n  #endif\n#endif\n#define FSInput_worldPos v_worldPos\n#define FSInput_worldNormal v_normal.xyz\n#define FSInput_faceSideSign v_normal.w\n#define FSInput_texcoord v_uv\n#if CC_SURFACES_USE_VERTEX_COLOR\n  #define FSInput_vertexColor v_color\n#else\n  #define FSInput_vertexColor vec4(1.0)\n#endif\n#if CC_SURFACES_USE_TANGENT_SPACE\n  #define FSInput_worldTangent v_tangent.xyz\n  #define FSInput_mirrorNormal v_tangent.w\n#else\n  #define FSInput_worldTangent vec3(0.0, 0.0, 0.0)\n  #define FSInput_mirrorNormal 1.0\n#endif\n#if CC_SURFACES_USE_SECOND_UV\n  #define FSInput_texcoord1 v_uv1\n#else\n  #define FSInput_texcoord1 vec2(0.0, 0.0)\n#endif\n#if CC_USE_LIGHTMAP && !CC_FORWARD_ADD\n  #define FSInput_lightMapUV v_luv\n#endif\n#if CC_RECEIVE_SHADOW\n  #define FSInput_shadowBias v_shadowBiasAndProbeId.xy\n#endif\n#if CC_USE_REFLECTION_PROBE\n  #define FSInput_reflectionProbeId v_shadowBiasAndProbeId.z\n#endif\n#if CC_USE_FOG != 4 && !CC_USE_ACCURATE_FOG\n  #define FSInput_fogFactor v_fogFactor\n#endif\n#if CC_SURFACES_TRANSFER_LOCAL_POS\n  #define FSInput_localPos v_localPos\n#endif\n#if CC_SURFACES_TRANSFER_CLIP_POS\n  #define FSInput_clipPos v_clipPos\n#endif\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n  mediump vec4 cc_probeInfo;\n  mediump vec4 cc_debug_view_mode;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_surfaceTransform;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\n#define CC_SURFACES_DEBUG_VIEW_VERTEX_COLOR 1\n#define CC_SURFACES_DEBUG_VIEW_VERTEX_NORMAL CC_SURFACES_DEBUG_VIEW_VERTEX_COLOR + 1\n#define CC_SURFACES_DEBUG_VIEW_VERTEX_TANGENT CC_SURFACES_DEBUG_VIEW_VERTEX_NORMAL + 1\n#define CC_SURFACES_DEBUG_VIEW_WORLD_POS CC_SURFACES_DEBUG_VIEW_VERTEX_TANGENT + 1\n#define CC_SURFACES_DEBUG_VIEW_VERTEX_MIRROR CC_SURFACES_DEBUG_VIEW_WORLD_POS + 1\n#define CC_SURFACES_DEBUG_VIEW_FACE_SIDE CC_SURFACES_DEBUG_VIEW_VERTEX_MIRROR + 1\n#define CC_SURFACES_DEBUG_VIEW_UV0 CC_SURFACES_DEBUG_VIEW_FACE_SIDE + 1\n#define CC_SURFACES_DEBUG_VIEW_UV1 CC_SURFACES_DEBUG_VIEW_UV0 + 1\n#define CC_SURFACES_DEBUG_VIEW_UVLIGHTMAP CC_SURFACES_DEBUG_VIEW_UV1 + 1\n#define CC_SURFACES_DEBUG_VIEW_PROJ_DEPTH CC_SURFACES_DEBUG_VIEW_UVLIGHTMAP + 1\n#define CC_SURFACES_DEBUG_VIEW_LINEAR_DEPTH CC_SURFACES_DEBUG_VIEW_PROJ_DEPTH + 1\n#define CC_SURFACES_DEBUG_VIEW_FRAGMENT_NORMAL CC_SURFACES_DEBUG_VIEW_LINEAR_DEPTH + 1\n#define CC_SURFACES_DEBUG_VIEW_FRAGMENT_TANGENT CC_SURFACES_DEBUG_VIEW_FRAGMENT_NORMAL + 1\n#define CC_SURFACES_DEBUG_VIEW_FRAGMENT_BINORMAL CC_SURFACES_DEBUG_VIEW_FRAGMENT_TANGENT + 1\n#define CC_SURFACES_DEBUG_VIEW_BASE_COLOR CC_SURFACES_DEBUG_VIEW_FRAGMENT_BINORMAL + 1\n#define CC_SURFACES_DEBUG_VIEW_DIFFUSE_COLOR CC_SURFACES_DEBUG_VIEW_BASE_COLOR + 1\n#define CC_SURFACES_DEBUG_VIEW_SPECULAR_COLOR CC_SURFACES_DEBUG_VIEW_DIFFUSE_COLOR + 1\n#define CC_SURFACES_DEBUG_VIEW_TRANSPARENCY CC_SURFACES_DEBUG_VIEW_SPECULAR_COLOR + 1\n#define CC_SURFACES_DEBUG_VIEW_METALLIC CC_SURFACES_DEBUG_VIEW_TRANSPARENCY + 1\n#define CC_SURFACES_DEBUG_VIEW_ROUGHNESS CC_SURFACES_DEBUG_VIEW_METALLIC + 1\n#define CC_SURFACES_DEBUG_VIEW_SPECULAR_INTENSITY CC_SURFACES_DEBUG_VIEW_ROUGHNESS + 1\n#define CC_SURFACES_DEBUG_VIEW_IOR CC_SURFACES_DEBUG_VIEW_SPECULAR_INTENSITY + 1\n#define CC_SURFACES_DEBUG_VIEW_DIRECT_DIFFUSE CC_SURFACES_DEBUG_VIEW_IOR + 1\n#define CC_SURFACES_DEBUG_VIEW_DIRECT_SPECULAR CC_SURFACES_DEBUG_VIEW_DIRECT_DIFFUSE + 1\n#define CC_SURFACES_DEBUG_VIEW_DIRECT_ALL CC_SURFACES_DEBUG_VIEW_DIRECT_SPECULAR + 1\n#define CC_SURFACES_DEBUG_VIEW_ENV_DIFFUSE CC_SURFACES_DEBUG_VIEW_DIRECT_ALL + 1\n#define CC_SURFACES_DEBUG_VIEW_ENV_SPECULAR CC_SURFACES_DEBUG_VIEW_ENV_DIFFUSE + 1\n#define CC_SURFACES_DEBUG_VIEW_ENV_ALL CC_SURFACES_DEBUG_VIEW_ENV_SPECULAR + 1\n#define CC_SURFACES_DEBUG_VIEW_EMISSIVE CC_SURFACES_DEBUG_VIEW_ENV_ALL + 1\n#define CC_SURFACES_DEBUG_VIEW_LIGHT_MAP CC_SURFACES_DEBUG_VIEW_EMISSIVE + 1\n#define CC_SURFACES_DEBUG_VIEW_SHADOW CC_SURFACES_DEBUG_VIEW_LIGHT_MAP + 1\n#define CC_SURFACES_DEBUG_VIEW_AO CC_SURFACES_DEBUG_VIEW_SHADOW + 1\n#define CC_SURFACES_DEBUG_VIEW_FRESNEL CC_SURFACES_DEBUG_VIEW_AO + 1\n#define CC_SURFACES_DEBUG_VIEW_TRANSMIT_DIRECT_DIFFUSE CC_SURFACES_DEBUG_VIEW_FRESNEL + 1\n#define CC_SURFACES_DEBUG_VIEW_TRANSMIT_DIRECT_SPECULAR CC_SURFACES_DEBUG_VIEW_TRANSMIT_DIRECT_DIFFUSE + 1\n#define CC_SURFACES_DEBUG_VIEW_TRANSMIT_ENV_DIFFUSE CC_SURFACES_DEBUG_VIEW_TRANSMIT_DIRECT_SPECULAR + 1\n#define CC_SURFACES_DEBUG_VIEW_TRANSMIT_ENV_SPECULAR CC_SURFACES_DEBUG_VIEW_TRANSMIT_ENV_DIFFUSE + 1\n#define CC_SURFACES_DEBUG_VIEW_TRANSMIT_ALL CC_SURFACES_DEBUG_VIEW_TRANSMIT_ENV_SPECULAR + 1\n#define CC_SURFACES_DEBUG_VIEW_TRT_DIRECT CC_SURFACES_DEBUG_VIEW_TRANSMIT_ALL + 1\n#define CC_SURFACES_DEBUG_VIEW_TRT_ENVIRONMENT CC_SURFACES_DEBUG_VIEW_TRT_DIRECT + 1\n#define CC_SURFACES_DEBUG_VIEW_TRT_ALL CC_SURFACES_DEBUG_VIEW_TRT_ENVIRONMENT + 1\n#define CC_SURFACES_DEBUG_VIEW_FOG CC_SURFACES_DEBUG_VIEW_TRT_ALL + 1\n#define CC_SURFACES_DEBUG_VIEW_SINGLE 1\n#define CC_SURFACES_DEBUG_VIEW_COMPOSITE_AND_MISC 2\n#define IS_DEBUG_VIEW_ENABLE_WITH_CAMERA (cc_surfaceTransform.y != 3.0)\n#define IS_DEBUG_VIEW_LIGHTING_ENABLE_WITH_ALBEDO (UnpackBitFromFloat(cc_debug_view_mode.w, 6) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_MISC_ENABLE_CSM_LAYER_COLORATION (UnpackBitFromFloat(cc_debug_view_mode.w, 7) && IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_DIRECT_DIFFUSE (UnpackBitFromFloat(cc_debug_view_mode.y, 0) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_DIRECT_SPECULAR (UnpackBitFromFloat(cc_debug_view_mode.y, 1) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_ENV_DIFFUSE (UnpackBitFromFloat(cc_debug_view_mode.y, 2) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_ENV_SPECULAR (UnpackBitFromFloat(cc_debug_view_mode.y, 3) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_EMISSIVE (UnpackBitFromFloat(cc_debug_view_mode.y, 4) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_LIGHT_MAP (UnpackBitFromFloat(cc_debug_view_mode.y, 5) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_SHADOW (UnpackBitFromFloat(cc_debug_view_mode.y, 6) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_AO (UnpackBitFromFloat(cc_debug_view_mode.y, 7) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_NORMAL_MAP (UnpackBitFromFloat(cc_debug_view_mode.z, 0) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_FOG (UnpackBitFromFloat(cc_debug_view_mode.z, 1) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_TONE_MAPPING (UnpackBitFromFloat(cc_debug_view_mode.z, 2) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_GAMMA_CORRECTION (UnpackBitFromFloat(cc_debug_view_mode.z, 3) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_FRESNEL (UnpackBitFromFloat(cc_debug_view_mode.z, 4) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_TRANSMIT_DIFFUSE (UnpackBitFromFloat(cc_debug_view_mode.z, 5) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_TRANSMIT_SPECULAR (UnpackBitFromFloat(cc_debug_view_mode.z, 6) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_TRT (UnpackBitFromFloat(cc_debug_view_mode.z, 7) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_TT (UnpackBitFromFloat(cc_debug_view_mode.w, 0) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#if (CC_PIPELINE_TYPE == 0 || CC_FORCE_FORWARD_SHADING)\n  #if CC_FORWARD_ADD\n    #if CC_PIPELINE_TYPE == 0\n      #define LIGHTS_PER_PASS 1\n    #else\n      #define LIGHTS_PER_PASS 10\n    #endif\n    #if CC_ENABLE_CLUSTERED_LIGHT_CULLING == 0\n    layout(std140) uniform CCForwardLight {\n      highp vec4 cc_lightPos[LIGHTS_PER_PASS];\n      vec4 cc_lightColor[LIGHTS_PER_PASS];\n      vec4 cc_lightSizeRangeAngle[LIGHTS_PER_PASS];\n      vec4 cc_lightDir[LIGHTS_PER_PASS];\n    };\n    #endif\n  #endif\n#endif\n#if CC_USE_LIGHT_PROBE\n  #if !USE_INSTANCING\n    layout(std140) uniform CCSH {\n      vec4 cc_sh_linear_const_r;\n      vec4 cc_sh_linear_const_g;\n      vec4 cc_sh_linear_const_b;\n      vec4 cc_sh_quadratic_r;\n      vec4 cc_sh_quadratic_g;\n      vec4 cc_sh_quadratic_b;\n      vec4 cc_sh_quadratic_a;\n    };\n  #endif\n#endif\nlayout(std140) uniform CCShadow {\n  highp mat4 cc_matLightView;\n  highp mat4 cc_matLightViewProj;\n  highp vec4 cc_shadowInvProjDepthInfo;\n  highp vec4 cc_shadowProjDepthInfo;\n  highp vec4 cc_shadowProjInfo;\n  mediump vec4 cc_shadowNFLSInfo;\n  mediump vec4 cc_shadowWHPBInfo;\n  mediump vec4 cc_shadowLPNNInfo;\n  lowp vec4 cc_shadowColor;\n  mediump vec4 cc_planarNDInfo;\n};\n#if CC_SUPPORT_CASCADED_SHADOW_MAP\n  layout(std140) uniform CCCSM {\n    highp vec4 cc_csmViewDir0[4];\n    highp vec4 cc_csmViewDir1[4];\n    highp vec4 cc_csmViewDir2[4];\n    highp vec4 cc_csmAtlas[4];\n    highp mat4 cc_matCSMViewProj[4];\n    highp vec4 cc_csmProjDepthInfo[4];\n    highp vec4 cc_csmProjInfo[4];\n    highp vec4 cc_csmSplitsInfo;\n  };\n#endif\nuniform samplerCube cc_environment;\n#if CC_USE_IBL\n  #if CC_USE_DIFFUSEMAP\n    uniform samplerCube cc_diffuseMap;\n  #endif\n#endif\n#if CC_USE_REFLECTION_PROBE\n  uniform samplerCube cc_reflectionProbeCubemap;\n  uniform sampler2D cc_reflectionProbePlanarMap;\n  uniform sampler2D cc_reflectionProbeDataMap;\n#endif\n#define QUATER_PI         0.78539816340\n#define HALF_PI           1.57079632679\n#define PI                3.14159265359\n#define PI2               6.28318530718\n#define PI4               12.5663706144\n#define INV_QUATER_PI     1.27323954474\n#define INV_HALF_PI       0.63661977237\n#define INV_PI            0.31830988618\n#define INV_PI2           0.15915494309\n#define INV_PI4           0.07957747155\n#define EPSILON           1e-6\n#define EPSILON_LOWP      1e-4\n#define LOG2              1.442695\n#define EXP_VALUE         2.71828183f\n#define FP_MAX            65504.0\n#define FP_SCALE          0.0009765625\n#define FP_SCALE_INV      1024.0\n#define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\n#define LIGHT_MAP_TYPE_DISABLED 0\n#define LIGHT_MAP_TYPE_ALL_IN_ONE 1\n#define LIGHT_MAP_TYPE_INDIRECT_OCCLUSION 2\n#define REFLECTION_PROBE_TYPE_NONE 0\n#define REFLECTION_PROBE_TYPE_CUBE 1\n#define REFLECTION_PROBE_TYPE_PLANAR 2\n#define LIGHT_TYPE_DIRECTIONAL 0.0\n#define LIGHT_TYPE_POINT 1.0\n#define LIGHT_TYPE_SPOT 2.0\n#define LIGHT_TYPE_SPHERE 3.0\n#define LIGHT_TYPE_RANGED_DIRECTIONAL 4.0\n#define IS_DIRECTIONAL_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_DIRECTIONAL)) < EPSILON_LOWP)\n#define IS_SPHERE_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_SPHERE)) < EPSILON_LOWP)\n#define IS_SPOT_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_SPOT)) < EPSILON_LOWP)\n#define IS_POINT_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_POINT)) < EPSILON_LOWP)\n#define IS_RANGED_DIRECTIONAL_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_RANGED_DIRECTIONAL)) < EPSILON_LOWP)\nvec4 fragTextureLod (sampler2D tex, vec2 coord, float lod) {\n    return textureLod(tex, coord, lod);\n}\nvec4 fragTextureLod (samplerCube tex, vec3 coord, float lod) {\n    return textureLod(tex, coord, lod);\n}\n#define UnpackBitFromFloat(value, bit) (mod(floor(value / pow(10.0, float(bit))), 10.0) > 0.0)\nhighp float unpackHighpData (float mainPart, float modPart) {\n  highp float data = mainPart;\n  return data + modPart;\n}\nvoid packHighpData (out float mainPart, out float modPart, highp float data) {\n  mainPart = fract(data);\n  modPart = data - mainPart;\n}\nhighp float unpackHighpData (float mainPart, float modPart, const float modValue) {\n  highp float data = mainPart * modValue;\n  return data + modPart * modValue;\n}\nvoid packHighpData (out float mainPart, out float modPart, highp float data, const float modValue) {\n  highp float divide = data / modValue;\n  mainPart = floor(divide);\n  modPart = (data - mainPart * modValue) / modValue;\n}\nhighp vec2 unpackHighpData (vec2 mainPart, vec2 modPart) {\n  highp vec2 data = mainPart;\n  return data + modPart;\n}\nvoid packHighpData (out vec2 mainPart, out vec2 modPart, highp vec2 data) {\n  mainPart = fract(data);\n  modPart = data - mainPart;\n}\nhighp vec2 unpackHighpData (vec2 mainPart, vec2 modPart, const float modValue) {\n  highp vec2 data = mainPart * modValue;\n  return data + modPart * modValue;\n}\nvoid packHighpData (out vec2 mainPart, out vec2 modPart, highp vec2 data, const float modValue) {\n  highp vec2 divide = data / modValue;\n  mainPart = floor(divide);\n  modPart = (data - mainPart * modValue) / modValue;\n}\nhighp vec3 unpackHighpData (vec3 mainPart, vec3 modPart) {\n  highp vec3 data = mainPart;\n  return data + modPart;\n}\nvoid packHighpData (out vec3 mainPart, out vec3 modPart, highp vec3 data) {\n  mainPart = fract(data);\n  modPart = data - mainPart;\n}\nhighp vec3 unpackHighpData (vec3 mainPart, vec3 modPart, const float modValue) {\n  highp vec3 data = mainPart * modValue;\n  return data + modPart * modValue;\n}\nvoid packHighpData (out vec3 mainPart, out vec3 modPart, highp vec3 data, const float modValue) {\n  highp vec3 divide = data / modValue;\n  mainPart = floor(divide);\n  modPart = (data - mainPart * modValue) / modValue;\n}\nhighp vec4 unpackHighpData (vec4 mainPart, vec4 modPart) {\n  highp vec4 data = mainPart;\n  return data + modPart;\n}\nvoid packHighpData (out vec4 mainPart, out vec4 modPart, highp vec4 data) {\n  mainPart = fract(data);\n  modPart = data - mainPart;\n}\nhighp vec4 unpackHighpData (vec4 mainPart, vec4 modPart, const float modValue) {\n  highp vec4 data = mainPart * modValue;\n  return data + modPart * modValue;\n}\nvoid packHighpData (out vec4 mainPart, out vec4 modPart, highp vec4 data, const float modValue) {\n  highp vec4 divide = data / modValue;\n  mainPart = floor(divide);\n  modPart = (data - mainPart * modValue) / modValue;\n}\nhighp float decode32 (highp vec4 rgba) {\n  rgba = rgba * 255.0;\n  highp float Sign = 1.0 - (step(128.0, (rgba[3]) + 0.5)) * 2.0;\n  highp float Exponent = 2.0 * (mod(float(int((rgba[3]) + 0.5)), 128.0)) + (step(128.0, (rgba[2]) + 0.5)) - 127.0;\n  highp float Mantissa = (mod(float(int((rgba[2]) + 0.5)), 128.0)) * 65536.0 + rgba[1] * 256.0 + rgba[0] + 8388608.0;\n  return Sign * exp2(Exponent - 23.0) * Mantissa;\n}\nvec4 packRGBE (vec3 rgb) {\n  highp float maxComp = max(max(rgb.r, rgb.g), rgb.b);\n  highp float e = 128.0;\n  if (maxComp > 0.0001) {\n    e = log(maxComp) / log(1.1);\n    e = ceil(e);\n    e = clamp(e + 128.0, 0.0, 255.0);\n  }\n  highp float sc = 1.0 / pow(1.1, e - 128.0);\n  vec3 encode = clamp(rgb * sc, vec3(0.0), vec3(1.0)) * 255.0;\n  vec3 encode_rounded = floor(encode) + step(encode - floor(encode), vec3(0.5));\n  return vec4(encode_rounded, e) / 255.0;\n}\nvec3 unpackRGBE (vec4 rgbe) {\n  return rgbe.rgb * pow(1.1, rgbe.a * 255.0 - 128.0);\n}\nvec3 ACESToneMap (vec3 color) {\n  color = min(color, vec3(8.0));\n  const float A = 2.51;\n  const float B = 0.03;\n  const float C = 2.43;\n  const float D = 0.59;\n  const float E = 0.14;\n  return (color * (A * color + B)) / (color * (C * color + D) + E);\n}\nvec3 SRGBToLinear (vec3 gamma) {\n#ifdef CC_USE_SURFACE_SHADER\n  #if CC_USE_DEBUG_VIEW == CC_SURFACES_DEBUG_VIEW_COMPOSITE_AND_MISC\n    if (!IS_DEBUG_VIEW_COMPOSITE_ENABLE_GAMMA_CORRECTION) {\n      return gamma;\n    }\n  #endif\n#endif\n  return gamma * gamma;\n}\nvec3 LinearToSRGB(vec3 linear) {\n#ifdef CC_USE_SURFACE_SHADER\n  #if CC_USE_DEBUG_VIEW == CC_SURFACES_DEBUG_VIEW_COMPOSITE_AND_MISC\n    if (!IS_DEBUG_VIEW_COMPOSITE_ENABLE_GAMMA_CORRECTION) {\n      return linear;\n    }\n  #endif\n#endif\n  return sqrt(linear);\n}\nbool isnans(vec2 val) {\n    return isnan(val.x) || isnan(val.y);\n}\nbool isnans(vec3 val) {\n    return isnan(val.x) || isnan(val.y) || isnan(val.z);\n}\nbool isnans(vec4 val) {\n    return isnan(val.x) || isnan(val.y) || isnan(val.z) || isnan(val.w);\n}\nbool isinfs(vec2 val) {\n    return isinf(val.x) || isinf(val.y);\n}\nbool isinfs(vec3 val) {\n    return isinf(val.x) || isinf(val.y) || isinf(val.z);\n}\nbool isinfs(vec4 val) {\n    return isinf(val.x) || isinf(val.y) || isinf(val.z) || isinf(val.w);\n}\nfloat saturate(float value) {\n    return min(max(value, 0.0), 1.0);\n}\nvec2 saturate(vec2 value) { return vec2(saturate(value.x), saturate(value.y)); }\nvec3 saturate(vec3 value) { return vec3(saturate(value.x), saturate(value.y), saturate(value.z)); }\nvec4 saturate(vec4 value) { return vec4(saturate(value.x), saturate(value.y), saturate(value.z), saturate(value.w)); }\nvec2 GetPlanarReflectScreenUV(vec3 worldPos, mat4 matVirtualCameraViewProj, float flipNDCSign, vec3 viewDir, vec3 reflectDir)\n{\n  vec4 clipPos = matVirtualCameraViewProj * vec4(worldPos, 1.0);\n  vec2 screenUV = clipPos.xy / clipPos.w * 0.5 + 0.5;\n  screenUV = vec2(1.0 - screenUV.x, screenUV.y);\n  screenUV = flipNDCSign == 1.0 ? vec2(screenUV.x, 1.0 - screenUV.y) : screenUV;\n  return screenUV;\n}\nfloat GetLinearDepthFromViewSpace(vec3 viewPos, float near, float far) {\n  float dist = length(viewPos);\n  return (dist - near) / (far - near);\n}\nvec3 CalculateBinormal(vec3 normal, vec3 tangent, float mirrorNormal)\n{\n    return cross(normal.xyz, tangent) * mirrorNormal;\n}\nvec3 CalculateNormalFromTangentSpace(vec3 normalFromTangentSpace, float normalStrength, vec3 normal, vec3 tangent, float mirrorNormal)\n{\n    vec3 binormal = CalculateBinormal(normal, tangent, mirrorNormal);\n    return (normalFromTangentSpace.x * normalStrength) * normalize(tangent) +\n           (normalFromTangentSpace.y * normalStrength) * normalize(binormal) +\n            normalFromTangentSpace.z * normalize(normal);\n}\nvec3 RotationVecFromAxisY(vec3 v, float cosTheta, float sinTheta)\n{\n    vec3 result;\n    result.x = dot(v, vec3(cosTheta, 0.0, -sinTheta));\n    result.y = v.y;\n    result.z = dot(v, vec3(sinTheta, 0.0,  cosTheta));\n    return result;\n}\nvoid RotateTangentAndBinormal(inout vec3 tangent, inout vec3 binormal, vec3 normal, float rotationAngle)\n{\n    float cosTheta = cos(rotationAngle), sinTheta = sin(rotationAngle);\n    vec3 B = RotationVecFromAxisY(vec3(1.0, 0.0, 0.0), cosTheta, sinTheta);\n    vec3 T = RotationVecFromAxisY(vec3(0.0, 0.0, 1.0), cosTheta, sinTheta);\n    vec3 tangentNew, binormalNew;\n    binormalNew = B.x * binormal + B.y * normal + B.z * tangent;\n    binormal = normalize(binormalNew);\n    tangentNew = T.x * binormal + T.y * normal + T.z * tangent;\n    tangent = normalize(tangentNew);\n}\nvec2 signNotZero(vec2 v) {\n  return vec2((v.x >= 0.0) ? +1.0 : -1.0, (v.y >= 0.0) ? +1.0 : -1.0);\n}\nvec2 float32x3_to_oct(in vec3 v) {\n  vec2 p = v.xy * (1.0 / (abs(v.x) + abs(v.y) + abs(v.z)));\n  return (v.z <= 0.0) ? ((1.0 - abs(p.yx)) * signNotZero(p)) : p;\n}\n  vec3 EnvReflectionWithMipFiltering(vec3 R, float roughness, float mipCount, float denoiseIntensity) {\n    #if CC_USE_IBL\n      #if !CC_SURFACES_USE_LEGACY_COMPATIBLE_LIGHTING && !CC_IBL_CONVOLUTED\n        roughness = pow(roughness, 0.5);\n      #endif\n    \tfloat mip = roughness * (mipCount - 1.0);\n    \tfloat delta = (dot(dFdx(R), dFdy(R))) * 1000.0;\n    \tfloat mipBias = mix(0.0, 5.0, clamp(delta, 0.0, 1.0));\n      vec3 rotationDir = RotationVecFromAxisY(R.xyz, cc_surfaceTransform.z, cc_surfaceTransform.w);\n    \tvec4 biased = fragTextureLod(cc_environment, rotationDir, mip + mipBias);\n     \tvec4 filtered = texture(cc_environment, rotationDir);\n      #if CC_USE_IBL == 2\n      \tbiased.rgb = unpackRGBE(biased);\n      \tfiltered.rgb = unpackRGBE(filtered);\n      #else\n      \tbiased.rgb = SRGBToLinear(biased.rgb);\n      \tfiltered.rgb = SRGBToLinear(filtered.rgb);\n      #endif\n      return mix(biased.rgb, filtered.rgb, denoiseIntensity);\n    #else\n      return vec3(0.0, 0.0, 0.0);\n    #endif\n  }\n  vec3 EnvReflection(samplerCube tex, vec3 R, float roughness, float mipCount) {\n    #if !CC_SURFACES_USE_LEGACY_COMPATIBLE_LIGHTING && !CC_IBL_CONVOLUTED\n      roughness = pow(roughness, 0.5);\n    #endif\n    vec3 rotationDir = RotationVecFromAxisY(R.xyz, cc_surfaceTransform.z, cc_surfaceTransform.w);\n    vec4 envmap = fragTextureLod(tex, rotationDir, roughness * (mipCount - 1.0));\n    #if CC_USE_IBL == 2 || CC_USE_REFLECTION_PROBE != REFLECTION_PROBE_TYPE_NONE\n      return unpackRGBE(envmap);\n    #else\n      return SRGBToLinear(envmap.rgb);\n    #endif\n  }\n#if CC_SUPPORT_CASCADED_SHADOW_MAP\n#endif\nfloat CCGetLinearDepth(vec3 worldPos, float viewSpaceBias) {\n\tvec4 viewPos = cc_matLightView * vec4(worldPos.xyz, 1.0);\n  viewPos.z += viewSpaceBias;\n\treturn GetLinearDepthFromViewSpace(viewPos.xyz, cc_shadowNFLSInfo.x, cc_shadowNFLSInfo.y);\n}\nfloat CCGetLinearDepth(vec3 worldPos) {\n\treturn CCGetLinearDepth(worldPos, 0.0);\n}\n#if CC_RECEIVE_SHADOW\n  uniform highp sampler2D cc_shadowMap;\n  uniform highp sampler2D cc_spotShadowMap;\n  float SampleShadowMap (vec3 shadowNDCPos, highp sampler2D shadowMap)\n  {\n    #if CC_SHADOWMAP_FORMAT == 1\n      return dot(texture(shadowMap, shadowNDCPos.xy), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0));\n    #else\n      return texture(shadowMap, shadowNDCPos.xy).x;\n    #endif\n  }\n  float NativePCFShadowFactorHard (vec3 shadowNDCPos, highp sampler2D shadowMap, vec2 shadowMapResolution)\n  {\n    #if CC_SHADOWMAP_FORMAT == 1\n      return step(shadowNDCPos.z, dot(texture(shadowMap, shadowNDCPos.xy), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n    #else\n      return step(shadowNDCPos.z, texture(shadowMap, shadowNDCPos.xy).x);\n    #endif\n  }\n  float NativePCFShadowFactorSoft (vec3 shadowNDCPos, highp sampler2D shadowMap, vec2 shadowMapResolution)\n  {\n    vec2 oneTap = 1.0 / shadowMapResolution;\n    vec2 shadowNDCPos_offset = shadowNDCPos.xy + oneTap;\n    float block0, block1, block2, block3;\n    #if CC_SHADOWMAP_FORMAT == 1\n      block0 = step(shadowNDCPos.z, dot(texture(shadowMap, vec2(shadowNDCPos.x, shadowNDCPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block1 = step(shadowNDCPos.z, dot(texture(shadowMap, vec2(shadowNDCPos_offset.x, shadowNDCPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block2 = step(shadowNDCPos.z, dot(texture(shadowMap, vec2(shadowNDCPos.x, shadowNDCPos_offset.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block3 = step(shadowNDCPos.z, dot(texture(shadowMap, vec2(shadowNDCPos_offset.x, shadowNDCPos_offset.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n    #else\n      block0 = step(shadowNDCPos.z, texture(shadowMap, vec2(shadowNDCPos.x, shadowNDCPos.y)).x);\n      block1 = step(shadowNDCPos.z, texture(shadowMap, vec2(shadowNDCPos_offset.x, shadowNDCPos.y)).x);\n      block2 = step(shadowNDCPos.z, texture(shadowMap, vec2(shadowNDCPos.x, shadowNDCPos_offset.y)).x);\n      block3 = step(shadowNDCPos.z, texture(shadowMap, vec2(shadowNDCPos_offset.x, shadowNDCPos_offset.y)).x);\n    #endif\n    float coefX   = mod(shadowNDCPos.x, oneTap.x) * shadowMapResolution.x;\n    float resultX = mix(block0, block1, coefX);\n    float resultY = mix(block2, block3, coefX);\n    float coefY   = mod(shadowNDCPos.y, oneTap.y) * shadowMapResolution.y;\n    return mix(resultX, resultY, coefY);\n  }\n  float NativePCFShadowFactorSoft3X (vec3 shadowNDCPos, highp sampler2D shadowMap, vec2 shadowMapResolution)\n  {\n    vec2 oneTap = 1.0 / shadowMapResolution;\n    float shadowNDCPos_offset_L = shadowNDCPos.x - oneTap.x;\n    float shadowNDCPos_offset_R = shadowNDCPos.x + oneTap.x;\n    float shadowNDCPos_offset_U = shadowNDCPos.y - oneTap.y;\n    float shadowNDCPos_offset_D = shadowNDCPos.y + oneTap.y;\n    float block0, block1, block2, block3, block4, block5, block6, block7, block8;\n    #if CC_SHADOWMAP_FORMAT == 1\n      block0 = step(shadowNDCPos.z, dot(texture(shadowMap, vec2(shadowNDCPos_offset_L, shadowNDCPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block1 = step(shadowNDCPos.z, dot(texture(shadowMap, vec2(shadowNDCPos.x, shadowNDCPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block2 = step(shadowNDCPos.z, dot(texture(shadowMap, vec2(shadowNDCPos_offset_R, shadowNDCPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block3 = step(shadowNDCPos.z, dot(texture(shadowMap, vec2(shadowNDCPos_offset_L, shadowNDCPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block4 = step(shadowNDCPos.z, dot(texture(shadowMap, vec2(shadowNDCPos.x, shadowNDCPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block5 = step(shadowNDCPos.z, dot(texture(shadowMap, vec2(shadowNDCPos_offset_R, shadowNDCPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block6 = step(shadowNDCPos.z, dot(texture(shadowMap, vec2(shadowNDCPos_offset_L, shadowNDCPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block7 = step(shadowNDCPos.z, dot(texture(shadowMap, vec2(shadowNDCPos.x, shadowNDCPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block8 = step(shadowNDCPos.z, dot(texture(shadowMap, vec2(shadowNDCPos_offset_R, shadowNDCPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n    #else\n      block0 = step(shadowNDCPos.z, texture(shadowMap, vec2(shadowNDCPos_offset_L, shadowNDCPos_offset_U)).x);\n      block1 = step(shadowNDCPos.z, texture(shadowMap, vec2(shadowNDCPos.x, shadowNDCPos_offset_U)).x);\n      block2 = step(shadowNDCPos.z, texture(shadowMap, vec2(shadowNDCPos_offset_R, shadowNDCPos_offset_U)).x);\n      block3 = step(shadowNDCPos.z, texture(shadowMap, vec2(shadowNDCPos_offset_L, shadowNDCPos.y)).x);\n      block4 = step(shadowNDCPos.z, texture(shadowMap, vec2(shadowNDCPos.x, shadowNDCPos.y)).x);\n      block5 = step(shadowNDCPos.z, texture(shadowMap, vec2(shadowNDCPos_offset_R, shadowNDCPos.y)).x);\n      block6 = step(shadowNDCPos.z, texture(shadowMap, vec2(shadowNDCPos_offset_L, shadowNDCPos_offset_D)).x);\n      block7 = step(shadowNDCPos.z, texture(shadowMap, vec2(shadowNDCPos.x, shadowNDCPos_offset_D)).x);\n      block8 = step(shadowNDCPos.z, texture(shadowMap, vec2(shadowNDCPos_offset_R, shadowNDCPos_offset_D)).x);\n    #endif\n    float coefX = mod(shadowNDCPos.x, oneTap.x) * shadowMapResolution.x;\n    float coefY = mod(shadowNDCPos.y, oneTap.y) * shadowMapResolution.y;\n    float shadow = 0.0;\n    float resultX = mix(block0, block1, coefX);\n    float resultY = mix(block3, block4, coefX);\n    shadow += mix(resultX , resultY, coefY);\n    resultX = mix(block1, block2, coefX);\n    resultY = mix(block4, block5, coefX);\n    shadow += mix(resultX , resultY, coefY);\n    resultX = mix(block3, block4, coefX);\n    resultY = mix(block6, block7, coefX);\n    shadow += mix(resultX, resultY, coefY);\n    resultX = mix(block4, block5, coefX);\n    resultY = mix(block7, block8, coefX);\n    shadow += mix(resultX, resultY, coefY);\n    return shadow * 0.25;\n  }\n  float NativePCFShadowFactorSoft5X (vec3 shadowNDCPos, highp sampler2D shadowMap, vec2 shadowMapResolution)\n  {\n    vec2 oneTap = 1.0 / shadowMapResolution;\n    vec2 twoTap = oneTap * 2.0;\n    vec2 offset1 = shadowNDCPos.xy + vec2(-twoTap.x, -twoTap.y);\n    vec2 offset2 = shadowNDCPos.xy + vec2(-oneTap.x, -twoTap.y);\n    vec2 offset3 = shadowNDCPos.xy + vec2(0.0, -twoTap.y);\n    vec2 offset4 = shadowNDCPos.xy + vec2(oneTap.x, -twoTap.y);\n    vec2 offset5 = shadowNDCPos.xy + vec2(twoTap.x, -twoTap.y);\n    vec2 offset6 = shadowNDCPos.xy + vec2(-twoTap.x, -oneTap.y);\n    vec2 offset7 = shadowNDCPos.xy + vec2(-oneTap.x, -oneTap.y);\n    vec2 offset8 = shadowNDCPos.xy + vec2(0.0, -oneTap.y);\n    vec2 offset9 = shadowNDCPos.xy + vec2(oneTap.x, -oneTap.y);\n    vec2 offset10 = shadowNDCPos.xy + vec2(twoTap.x, -oneTap.y);\n    vec2 offset11 = shadowNDCPos.xy + vec2(-twoTap.x, 0.0);\n    vec2 offset12 = shadowNDCPos.xy + vec2(-oneTap.x, 0.0);\n    vec2 offset13 = shadowNDCPos.xy + vec2(0.0, 0.0);\n    vec2 offset14 = shadowNDCPos.xy + vec2(oneTap.x, 0.0);\n    vec2 offset15 = shadowNDCPos.xy + vec2(twoTap.x, 0.0);\n    vec2 offset16 = shadowNDCPos.xy + vec2(-twoTap.x, oneTap.y);\n    vec2 offset17 = shadowNDCPos.xy + vec2(-oneTap.x, oneTap.y);\n    vec2 offset18 = shadowNDCPos.xy + vec2(0.0, oneTap.y);\n    vec2 offset19 = shadowNDCPos.xy + vec2(oneTap.x, oneTap.y);\n    vec2 offset20 = shadowNDCPos.xy + vec2(twoTap.x, oneTap.y);\n    vec2 offset21 = shadowNDCPos.xy + vec2(-twoTap.x, twoTap.y);\n    vec2 offset22 = shadowNDCPos.xy + vec2(-oneTap.x, twoTap.y);\n    vec2 offset23 = shadowNDCPos.xy + vec2(0.0, twoTap.y);\n    vec2 offset24 = shadowNDCPos.xy + vec2(oneTap.x, twoTap.y);\n    vec2 offset25 = shadowNDCPos.xy + vec2(twoTap.x, twoTap.y);\n    float block1, block2, block3, block4, block5, block6, block7, block8, block9, block10, block11, block12, block13, block14, block15, block16, block17, block18, block19, block20, block21, block22, block23, block24, block25;\n    #if CC_SHADOWMAP_FORMAT == 1\n      block1 = step(shadowNDCPos.z, dot(texture(shadowMap, offset1), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block2 = step(shadowNDCPos.z, dot(texture(shadowMap, offset2), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block3 = step(shadowNDCPos.z, dot(texture(shadowMap, offset3), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block4 = step(shadowNDCPos.z, dot(texture(shadowMap, offset4), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block5 = step(shadowNDCPos.z, dot(texture(shadowMap, offset5), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block6 = step(shadowNDCPos.z, dot(texture(shadowMap, offset6), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block7 = step(shadowNDCPos.z, dot(texture(shadowMap, offset7), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block8 = step(shadowNDCPos.z, dot(texture(shadowMap, offset8), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block9 = step(shadowNDCPos.z, dot(texture(shadowMap, offset9), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block10 = step(shadowNDCPos.z, dot(texture(shadowMap, offset10), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block11 = step(shadowNDCPos.z, dot(texture(shadowMap, offset11), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block12 = step(shadowNDCPos.z, dot(texture(shadowMap, offset12), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block13 = step(shadowNDCPos.z, dot(texture(shadowMap, offset13), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block14 = step(shadowNDCPos.z, dot(texture(shadowMap, offset14), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block15 = step(shadowNDCPos.z, dot(texture(shadowMap, offset15), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block16 = step(shadowNDCPos.z, dot(texture(shadowMap, offset16), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block17 = step(shadowNDCPos.z, dot(texture(shadowMap, offset17), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block18 = step(shadowNDCPos.z, dot(texture(shadowMap, offset18), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block19 = step(shadowNDCPos.z, dot(texture(shadowMap, offset19), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block20 = step(shadowNDCPos.z, dot(texture(shadowMap, offset20), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block21 = step(shadowNDCPos.z, dot(texture(shadowMap, offset21), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block22 = step(shadowNDCPos.z, dot(texture(shadowMap, offset22), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block23 = step(shadowNDCPos.z, dot(texture(shadowMap, offset23), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block24 = step(shadowNDCPos.z, dot(texture(shadowMap, offset24), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block25 = step(shadowNDCPos.z, dot(texture(shadowMap, offset25), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n    #else\n      block1 = step(shadowNDCPos.z, texture(shadowMap, offset1).x);\n      block2 = step(shadowNDCPos.z, texture(shadowMap, offset2).x);\n      block3 = step(shadowNDCPos.z, texture(shadowMap, offset3).x);\n      block4 = step(shadowNDCPos.z, texture(shadowMap, offset4).x);\n      block5 = step(shadowNDCPos.z, texture(shadowMap, offset5).x);\n      block6 = step(shadowNDCPos.z, texture(shadowMap, offset6).x);\n      block7 = step(shadowNDCPos.z, texture(shadowMap, offset7).x);\n      block8 = step(shadowNDCPos.z, texture(shadowMap, offset8).x);\n      block9 = step(shadowNDCPos.z, texture(shadowMap, offset9).x);\n      block10 = step(shadowNDCPos.z, texture(shadowMap, offset10).x);\n      block11 = step(shadowNDCPos.z, texture(shadowMap, offset11).x);\n      block12 = step(shadowNDCPos.z, texture(shadowMap, offset12).x);\n      block13 = step(shadowNDCPos.z, texture(shadowMap, offset13).x);\n      block14 = step(shadowNDCPos.z, texture(shadowMap, offset14).x);\n      block15 = step(shadowNDCPos.z, texture(shadowMap, offset15).x);\n      block16 = step(shadowNDCPos.z, texture(shadowMap, offset16).x);\n      block17 = step(shadowNDCPos.z, texture(shadowMap, offset17).x);\n      block18 = step(shadowNDCPos.z, texture(shadowMap, offset18).x);\n      block19 = step(shadowNDCPos.z, texture(shadowMap, offset19).x);\n      block20 = step(shadowNDCPos.z, texture(shadowMap, offset20).x);\n      block21 = step(shadowNDCPos.z, texture(shadowMap, offset21).x);\n      block22 = step(shadowNDCPos.z, texture(shadowMap, offset22).x);\n      block23 = step(shadowNDCPos.z, texture(shadowMap, offset23).x);\n      block24 = step(shadowNDCPos.z, texture(shadowMap, offset24).x);\n      block25 = step(shadowNDCPos.z, texture(shadowMap, offset25).x);\n    #endif\n    vec2 coef = fract(shadowNDCPos.xy * shadowMapResolution);\n    vec2 v1X1 = mix(vec2(block1, block6), vec2(block2, block7), coef.xx);\n    vec2 v1X2 = mix(vec2(block2, block7), vec2(block3, block8), coef.xx);\n    vec2 v1X3 = mix(vec2(block3, block8), vec2(block4, block9), coef.xx);\n    vec2 v1X4 = mix(vec2(block4, block9), vec2(block5, block10), coef.xx);\n    float v1 = mix(v1X1.x, v1X1.y, coef.y) + mix(v1X2.x, v1X2.y, coef.y) + mix(v1X3.x, v1X3.y, coef.y) + mix(v1X4.x, v1X4.y, coef.y);\n    vec2 v2X1 = mix(vec2(block6, block11), vec2(block7, block12), coef.xx);\n    vec2 v2X2 = mix(vec2(block7, block12), vec2(block8, block13), coef.xx);\n    vec2 v2X3 = mix(vec2(block8, block13), vec2(block9, block14), coef.xx);\n    vec2 v2X4 = mix(vec2(block9, block14), vec2(block10, block15), coef.xx);\n    float v2 = mix(v2X1.x, v2X1.y, coef.y) + mix(v2X2.x, v2X2.y, coef.y) + mix(v2X3.x, v2X3.y, coef.y) + mix(v2X4.x, v2X4.y, coef.y);\n    vec2 v3X1 = mix(vec2(block11, block16), vec2(block12, block17), coef.xx);\n    vec2 v3X2 = mix(vec2(block12, block17), vec2(block13, block18), coef.xx);\n    vec2 v3X3 = mix(vec2(block13, block18), vec2(block14, block19), coef.xx);\n    vec2 v3X4 = mix(vec2(block14, block19), vec2(block15, block20), coef.xx);\n    float v3 = mix(v3X1.x, v3X1.y, coef.y) + mix(v3X2.x, v3X2.y, coef.y) + mix(v3X3.x, v3X3.y, coef.y) + mix(v3X4.x, v3X4.y, coef.y);\n    vec2 v4X1 = mix(vec2(block16, block21), vec2(block17, block22), coef.xx);\n    vec2 v4X2 = mix(vec2(block17, block22), vec2(block18, block23), coef.xx);\n    vec2 v4X3 = mix(vec2(block18, block23), vec2(block19, block24), coef.xx);\n    vec2 v4X4 = mix(vec2(block19, block24), vec2(block20, block25), coef.xx);\n    float v4 = mix(v4X1.x, v4X1.y, coef.y) + mix(v4X2.x, v4X2.y, coef.y) + mix(v4X3.x, v4X3.y, coef.y) + mix(v4X4.x, v4X4.y, coef.y);\n    float fAvg = (v1 + v2 + v3 + v4) * 0.0625;\n    return fAvg;\n  }\n  bool GetShadowNDCPos(out vec3 shadowNDCPos, vec4 shadowPosWithDepthBias)\n  {\n  \tshadowNDCPos = shadowPosWithDepthBias.xyz / shadowPosWithDepthBias.w * 0.5 + 0.5;\n  \tif (shadowNDCPos.x < 0.0 || shadowNDCPos.x > 1.0 ||\n  \t\tshadowNDCPos.y < 0.0 || shadowNDCPos.y > 1.0 ||\n  \t\tshadowNDCPos.z < 0.0 || shadowNDCPos.z > 1.0) {\n  \t\treturn false;\n  \t}\n  \tshadowNDCPos.xy = cc_cameraPos.w == 1.0 ? vec2(shadowNDCPos.xy.x, 1.0 - shadowNDCPos.xy.y) : shadowNDCPos.xy;\n  \treturn true;\n  }\n  vec4 ApplyShadowDepthBias_FaceNormal(vec4 shadowPos, vec3 worldNormal, float normalBias, vec3 matViewDir0, vec3 matViewDir1, vec3 matViewDir2, vec2 projScaleXY)\n  {\n    vec4 newShadowPos = shadowPos;\n    if (normalBias > EPSILON_LOWP)\n    {\n      vec3 viewNormal = vec3(dot(matViewDir0, worldNormal), dot(matViewDir1, worldNormal), dot(matViewDir2, worldNormal));\n      if (viewNormal.z < 0.1)\n        newShadowPos.xy += viewNormal.xy * projScaleXY * normalBias * clamp(viewNormal.z, 0.001, 0.1);\n    }\n    return newShadowPos;\n  }\n  vec4 ApplyShadowDepthBias_FaceNormal(vec4 shadowPos, vec3 worldNormal, float normalBias, mat4 matLightView, vec2 projScaleXY)\n  {\n  \tvec4 newShadowPos = shadowPos;\n  \tif (normalBias > EPSILON_LOWP)\n  \t{\n  \t\tvec4 viewNormal = matLightView * vec4(worldNormal, 0.0);\n  \t\tif (viewNormal.z < 0.1)\n  \t\t\tnewShadowPos.xy += viewNormal.xy * projScaleXY * normalBias * clamp(viewNormal.z, 0.001, 0.1);\n  \t}\n  \treturn newShadowPos;\n  }\n  float GetViewSpaceDepthFromNDCDepth_Orthgraphic(float NDCDepth, float projScaleZ, float projBiasZ)\n  {\n  \treturn (NDCDepth - projBiasZ) / projScaleZ;\n  }\n  float GetViewSpaceDepthFromNDCDepth_Perspective(float NDCDepth, float homogenousDividW, float invProjScaleZ, float invProjBiasZ)\n  {\n  \treturn NDCDepth * invProjScaleZ + homogenousDividW * invProjBiasZ;\n  }\n  vec4 ApplyShadowDepthBias_Perspective(vec4 shadowPos, float viewspaceDepthBias)\n  {\n  \tvec3 viewSpacePos;\n  \tviewSpacePos.xy = shadowPos.xy * cc_shadowProjInfo.zw;\n  \tviewSpacePos.z = GetViewSpaceDepthFromNDCDepth_Perspective(shadowPos.z, shadowPos.w, cc_shadowInvProjDepthInfo.x, cc_shadowInvProjDepthInfo.y);\n  \tviewSpacePos.xyz += cc_shadowProjDepthInfo.z * normalize(viewSpacePos.xyz) * viewspaceDepthBias;\n  \tvec4 clipSpacePos;\n  \tclipSpacePos.xy = viewSpacePos.xy * cc_shadowProjInfo.xy;\n  \tclipSpacePos.zw = viewSpacePos.z * cc_shadowProjDepthInfo.xz + vec2(cc_shadowProjDepthInfo.y, 0.0);\n  \t#if CC_SHADOWMAP_USE_LINEAR_DEPTH\n  \t\tclipSpacePos.z = GetLinearDepthFromViewSpace(viewSpacePos.xyz, cc_shadowNFLSInfo.x, cc_shadowNFLSInfo.y);\n  \t\tclipSpacePos.z = (clipSpacePos.z * 2.0 - 1.0) * clipSpacePos.w;\n  \t#endif\n  \treturn clipSpacePos;\n  }\n  vec4 ApplyShadowDepthBias_Orthographic(vec4 shadowPos, float viewspaceDepthBias, float projScaleZ, float projBiasZ)\n  {\n  \tfloat coeffA = projScaleZ;\n  \tfloat coeffB = projBiasZ;\n  \tfloat viewSpacePos_z = GetViewSpaceDepthFromNDCDepth_Orthgraphic(shadowPos.z, projScaleZ, projBiasZ);\n  \tviewSpacePos_z += viewspaceDepthBias;\n  \tvec4 result = shadowPos;\n  \tresult.z = viewSpacePos_z * coeffA + coeffB;\n  \treturn result;\n  }\n  vec4 ApplyShadowDepthBias_PerspectiveLinearDepth(vec4 shadowPos, float viewspaceDepthBias, vec3 worldPos)\n  {\n    shadowPos.z = CCGetLinearDepth(worldPos, viewspaceDepthBias) * 2.0 - 1.0;\n    shadowPos.z *= shadowPos.w;\n    return shadowPos;\n  }\n  float CCGetDirLightShadowFactorHard (vec4 shadowPosWithDepthBias) {\n\t  vec3 shadowNDCPos;\n\t  if (!GetShadowNDCPos(shadowNDCPos, shadowPosWithDepthBias)) {\n\t\t  return 1.0;\n\t  }\n    return NativePCFShadowFactorHard(shadowNDCPos, cc_shadowMap, cc_shadowWHPBInfo.xy);\n  }\n  float CCGetDirLightShadowFactorSoft (vec4 shadowPosWithDepthBias) {\n\t  vec3 shadowNDCPos;\n\t  if (!GetShadowNDCPos(shadowNDCPos, shadowPosWithDepthBias)) {\n\t\t  return 1.0;\n\t  }\n    return NativePCFShadowFactorSoft(shadowNDCPos, cc_shadowMap, cc_shadowWHPBInfo.xy);\n  }\n  float CCGetDirLightShadowFactorSoft3X (vec4 shadowPosWithDepthBias) {\n\t  vec3 shadowNDCPos;\n\t  if (!GetShadowNDCPos(shadowNDCPos, shadowPosWithDepthBias)) {\n\t\t  return 1.0;\n\t  }\n    return NativePCFShadowFactorSoft3X(shadowNDCPos, cc_shadowMap, cc_shadowWHPBInfo.xy);\n  }\n  float CCGetDirLightShadowFactorSoft5X (vec4 shadowPosWithDepthBias) {\n\t  vec3 shadowNDCPos;\n\t  if (!GetShadowNDCPos(shadowNDCPos, shadowPosWithDepthBias)) {\n\t\t  return 1.0;\n\t  }\n    return NativePCFShadowFactorSoft5X(shadowNDCPos, cc_shadowMap, cc_shadowWHPBInfo.xy);\n  }\n  float CCGetSpotLightShadowFactorHard (vec4 shadowPosWithDepthBias, vec3 worldPos) {\n\t  vec3 shadowNDCPos;\n\t  if (!GetShadowNDCPos(shadowNDCPos, shadowPosWithDepthBias)) {\n\t\t  return 1.0;\n\t  }\n    return NativePCFShadowFactorHard(shadowNDCPos, cc_spotShadowMap, cc_shadowWHPBInfo.xy);\n  }\n  float CCGetSpotLightShadowFactorSoft (vec4 shadowPosWithDepthBias, vec3 worldPos) {\n\t  vec3 shadowNDCPos;\n\t  if (!GetShadowNDCPos(shadowNDCPos, shadowPosWithDepthBias)) {\n\t\t  return 1.0;\n\t  }\n    return NativePCFShadowFactorSoft(shadowNDCPos, cc_spotShadowMap, cc_shadowWHPBInfo.xy);\n  }\n  float CCGetSpotLightShadowFactorSoft3X (vec4 shadowPosWithDepthBias, vec3 worldPos) {\n\t  vec3 shadowNDCPos;\n\t  if (!GetShadowNDCPos(shadowNDCPos, shadowPosWithDepthBias)) {\n\t\t  return 1.0;\n\t  }\n    return NativePCFShadowFactorSoft3X(shadowNDCPos, cc_spotShadowMap, cc_shadowWHPBInfo.xy);\n  }\n  float CCGetSpotLightShadowFactorSoft5X (vec4 shadowPosWithDepthBias, vec3 worldPos) {\n\t  vec3 shadowNDCPos;\n\t  if (!GetShadowNDCPos(shadowNDCPos, shadowPosWithDepthBias)) {\n\t\t  return 1.0;\n\t  }\n    return NativePCFShadowFactorSoft5X(shadowNDCPos, cc_spotShadowMap, cc_shadowWHPBInfo.xy);\n  }\n  float CCSpotShadowFactorBase(out vec4 shadowNDCPosWithBias, vec4 shadowPos, vec3 worldPos, vec2 shadowBias)\n  {\n    float pcf = cc_shadowWHPBInfo.z;\n    vec4 pos = vec4(1.0);\n    #if CC_SHADOWMAP_USE_LINEAR_DEPTH\n      pos = ApplyShadowDepthBias_PerspectiveLinearDepth(shadowPos, shadowBias.x, worldPos);\n    #else\n      pos = ApplyShadowDepthBias_Perspective(shadowPos, shadowBias.x);\n    #endif\n    float realtimeShadow = 1.0;\n    if (pcf > 2.9) {\n      realtimeShadow = CCGetSpotLightShadowFactorSoft5X(pos, worldPos);\n    }else if (pcf > 1.9) {\n      realtimeShadow = CCGetSpotLightShadowFactorSoft3X(pos, worldPos);\n    }else if (pcf > 0.9) {\n      realtimeShadow = CCGetSpotLightShadowFactorSoft(pos, worldPos);\n    }else {\n      realtimeShadow = CCGetSpotLightShadowFactorHard(pos, worldPos);\n    }\n    shadowNDCPosWithBias = pos;\n    return mix(realtimeShadow, 1.0, cc_shadowNFLSInfo.w);\n  }\n  float CCShadowFactorBase(out vec4 shadowNDCPosWithBias, vec4 shadowPos, vec3 N, vec2 shadowBias)\n  {\n    vec4 pos = ApplyShadowDepthBias_FaceNormal(shadowPos, N, shadowBias.y, cc_matLightView, cc_shadowProjInfo.xy);\n    pos = ApplyShadowDepthBias_Orthographic(pos, shadowBias.x, cc_shadowProjDepthInfo.x, cc_shadowProjDepthInfo.y);\n    float realtimeShadow = 1.0;\n    #if CC_DIR_SHADOW_PCF_TYPE == 3\n      realtimeShadow = CCGetDirLightShadowFactorSoft5X(pos);\n    #endif\n    #if CC_DIR_SHADOW_PCF_TYPE == 2\n      realtimeShadow =  CCGetDirLightShadowFactorSoft3X(pos);\n    #endif\n    #if CC_DIR_SHADOW_PCF_TYPE == 1\n      realtimeShadow = CCGetDirLightShadowFactorSoft(pos);\n    #endif\n    #if CC_DIR_SHADOW_PCF_TYPE == 0\n      realtimeShadow = CCGetDirLightShadowFactorHard(pos);\n    #endif\n    shadowNDCPosWithBias = pos;\n    return mix(realtimeShadow, 1.0, cc_shadowNFLSInfo.w);\n  }\n  #if CC_SUPPORT_CASCADED_SHADOW_MAP\n    bool CCGetCSMLevelWithTransition(out highp float ratio, vec3 clipPos) {\n      highp float maxRange = 1.0 - cc_csmSplitsInfo.x;\n      highp float minRange = cc_csmSplitsInfo.x;\n      highp float thresholdInvert = 1.0 / cc_csmSplitsInfo.x;\n      ratio = 0.0;\n      if (clipPos.x <= minRange) {\n        ratio = clipPos.x * thresholdInvert;\n        return true;\n      }\n      if (clipPos.x >= maxRange) {\n        ratio = 1.0 - (clipPos.x - maxRange) * thresholdInvert;\n        return true;\n      }\n      if (clipPos.y <= minRange) {\n        ratio = clipPos.y  * thresholdInvert;\n        return true;\n      }\n      if (clipPos.y >= maxRange) {\n        ratio = 1.0 - (clipPos.y - maxRange) * thresholdInvert;\n        return true;\n      }\n      return false;\n    }\n    bool CCHasCSMLevel(int level, vec3 worldPos) {\n      highp float layerThreshold = cc_csmViewDir0[0].w;\n      bool hasLevel = false;\n      for (int i = 0; i < 4; i++) {\n        if (i == level) {\n          vec4 shadowPos = cc_matCSMViewProj[i] * vec4(worldPos.xyz, 1.0);\n          vec3 clipPos = shadowPos.xyz / shadowPos.w * 0.5 + 0.5;\n          if (clipPos.x >= layerThreshold && clipPos.x <= (1.0 - layerThreshold) &&\n              clipPos.y >= layerThreshold && clipPos.y <= (1.0 - layerThreshold) &&\n              clipPos.z >= 0.0 && clipPos.z <= 1.0) {\n            hasLevel = true;\n          }\n        }\n      }\n      return hasLevel;\n    }\n    void CCGetCSMLevel(out vec4 csmPos, out vec4 shadowProjDepthInfo, out vec4 shadowProjInfo, out vec3 shadowViewDir0, out vec3 shadowViewDir1, out vec3 shadowViewDir2, vec3 worldPos, int level) {\n      highp float layerThreshold = cc_csmViewDir0[0].w;\n      for (int i = 0; i < 4; i++) {\n        vec4 shadowPos = cc_matCSMViewProj[i] * vec4(worldPos.xyz, 1.0);\n        vec3 clipPos = shadowPos.xyz / shadowPos.w * 0.5 + 0.5;\n        if (clipPos.x >= layerThreshold && clipPos.x <= (1.0 - layerThreshold) &&\n            clipPos.y >= layerThreshold && clipPos.y <= (1.0 - layerThreshold) &&\n            clipPos.z >= 0.0 && clipPos.z <= 1.0 && i == level) {\n          csmPos = cc_matCSMViewProj[i] * vec4(worldPos.xyz, 1.0);\n          csmPos.xy = csmPos.xy * cc_csmAtlas[i].xy + cc_csmAtlas[i].zw;\n          shadowProjDepthInfo = cc_csmProjDepthInfo[i];\n          shadowProjInfo = cc_csmProjInfo[i];\n          shadowViewDir0 = cc_csmViewDir0[i].xyz;\n          shadowViewDir1 = cc_csmViewDir1[i].xyz;\n          shadowViewDir2 = cc_csmViewDir2[i].xyz;\n        }\n      }\n    }\n    int CCGetCSMLevel(out bool isTransitionArea, out highp float transitionRatio, out vec4 csmPos, out vec4 shadowProjDepthInfo, out vec4 shadowProjInfo, out vec3 shadowViewDir0, out vec3 shadowViewDir1, out vec3 shadowViewDir2, vec3 worldPos)\n    {\n      int level = -1;\n      highp float layerThreshold = cc_csmViewDir0[0].w;\n      for (int i = 0; i < 4; i++) {\n        vec4 shadowPos = cc_matCSMViewProj[i] * vec4(worldPos.xyz, 1.0);\n        vec3 clipPos = shadowPos.xyz / shadowPos.w * 0.5 + 0.5;\n        if (clipPos.x >= layerThreshold && clipPos.x <= (1.0 - layerThreshold) &&\n            clipPos.y >= layerThreshold && clipPos.y <= (1.0 - layerThreshold) &&\n            clipPos.z >= 0.0 && clipPos.z <= 1.0 && level < 0) {\n          #if CC_CASCADED_LAYERS_TRANSITION\n            isTransitionArea = CCGetCSMLevelWithTransition(transitionRatio, clipPos);\n          #endif\n          csmPos = cc_matCSMViewProj[i] * vec4(worldPos.xyz, 1.0);\n          csmPos.xy = csmPos.xy * cc_csmAtlas[i].xy + cc_csmAtlas[i].zw;\n          shadowProjDepthInfo = cc_csmProjDepthInfo[i];\n          shadowProjInfo = cc_csmProjInfo[i];\n          shadowViewDir0 = cc_csmViewDir0[i].xyz;\n          shadowViewDir1 = cc_csmViewDir1[i].xyz;\n          shadowViewDir2 = cc_csmViewDir2[i].xyz;\n          level = i;\n        }\n      }\n      return level;\n    }\n    int CCGetCSMLevel(out vec4 csmPos, out vec4 shadowProjDepthInfo, out vec4 shadowProjInfo, out vec3 shadowViewDir0, out vec3 shadowViewDir1, out vec3 shadowViewDir2, vec3 worldPos)\n    {\n      bool isTransitionArea = false;\n      highp float transitionRatio = 0.0;\n      return CCGetCSMLevel(isTransitionArea, transitionRatio, csmPos, shadowProjDepthInfo, shadowProjInfo, shadowViewDir0, shadowViewDir1, shadowViewDir2, worldPos);\n    }\n    float CCCSMFactorBase(out vec4 csmPos, out vec4 csmNDCPosWithBias, vec3 worldPos, vec3 N, vec2 shadowBias)\n    {\n      bool isTransitionArea = false;\n      highp float ratio = 0.0;\n      csmPos = vec4(1.0);\n      vec4 shadowProjDepthInfo, shadowProjInfo;\n      vec3 shadowViewDir0, shadowViewDir1, shadowViewDir2;\n      int level = -1;\n      #if CC_CASCADED_LAYERS_TRANSITION\n        level = CCGetCSMLevel(isTransitionArea, ratio, csmPos, shadowProjDepthInfo, shadowProjInfo, shadowViewDir0, shadowViewDir1, shadowViewDir2, worldPos);\n      #else\n        level = CCGetCSMLevel(csmPos, shadowProjDepthInfo, shadowProjInfo, shadowViewDir0, shadowViewDir1, shadowViewDir2, worldPos);\n      #endif\n      if (level < 0) { return 1.0; }\n      vec4 pos = ApplyShadowDepthBias_FaceNormal(csmPos, N, shadowBias.y, shadowViewDir0, shadowViewDir1, shadowViewDir2, shadowProjInfo.xy);\n      pos = ApplyShadowDepthBias_Orthographic(pos, shadowBias.x, shadowProjDepthInfo.x, shadowProjDepthInfo.y);\n      csmNDCPosWithBias = pos;\n      float realtimeShadow = 1.0;\n      #if CC_DIR_SHADOW_PCF_TYPE == 3\n        realtimeShadow = CCGetDirLightShadowFactorSoft5X(pos);\n      #endif\n      #if CC_DIR_SHADOW_PCF_TYPE == 2\n        realtimeShadow = CCGetDirLightShadowFactorSoft3X(pos);\n      #endif\n      #if CC_DIR_SHADOW_PCF_TYPE == 1\n        realtimeShadow = CCGetDirLightShadowFactorSoft(pos);\n      #endif\n      #if CC_DIR_SHADOW_PCF_TYPE == 0\n        realtimeShadow = CCGetDirLightShadowFactorHard(pos);\n      #endif\n      #if CC_CASCADED_LAYERS_TRANSITION\n        vec4 nextCSMPos = vec4(1.0);\n        vec4 nextShadowProjDepthInfo, nextShadowProjInfo;\n        vec3 nextShadowViewDir0, nextShadowViewDir1, nextShadowViewDir2;\n        float nextRealtimeShadow = 1.0;\n        CCGetCSMLevel(nextCSMPos, nextShadowProjDepthInfo, nextShadowProjInfo, nextShadowViewDir0, nextShadowViewDir1, nextShadowViewDir2, worldPos, level + 1);\n        bool hasNextLevel = CCHasCSMLevel(level + 1, worldPos);\n        if (hasNextLevel && isTransitionArea) {\n          vec4 nexPos = ApplyShadowDepthBias_FaceNormal(nextCSMPos, N, shadowBias.y, nextShadowViewDir0, nextShadowViewDir1, nextShadowViewDir2, nextShadowProjInfo.xy);\n          nexPos = ApplyShadowDepthBias_Orthographic(nexPos, shadowBias.x, nextShadowProjDepthInfo.x, nextShadowProjDepthInfo.y);\n          #if CC_DIR_SHADOW_PCF_TYPE == 3\n            nextRealtimeShadow = CCGetDirLightShadowFactorSoft5X(nexPos);\n          #endif\n          #if CC_DIR_SHADOW_PCF_TYPE == 2\n            nextRealtimeShadow = CCGetDirLightShadowFactorSoft3X(nexPos);\n          #endif\n          #if CC_DIR_SHADOW_PCF_TYPE == 1\n            nextRealtimeShadow = CCGetDirLightShadowFactorSoft(nexPos);\n          #endif\n          #if CC_DIR_SHADOW_PCF_TYPE == 0\n            nextRealtimeShadow = CCGetDirLightShadowFactorHard(nexPos);\n          #endif\n          return mix(mix(nextRealtimeShadow, realtimeShadow, ratio), 1.0, cc_shadowNFLSInfo.w);\n        }\n        return mix(realtimeShadow, 1.0, cc_shadowNFLSInfo.w);\n      #else\n        return mix(realtimeShadow, 1.0, cc_shadowNFLSInfo.w);\n      #endif\n    }\n  #else\n    int CCGetCSMLevel(out vec4 csmPos, out vec4 shadowProjDepthInfo, out vec4 shadowProjInfo, out vec3 shadowViewDir0, out vec3 shadowViewDir1, out vec3 shadowViewDir2, vec3 worldPos) {\n      return -1;\n    }\n    float CCCSMFactorBase(out vec4 csmPos, out vec4 csmNDCPosWithBias, vec3 worldPos, vec3 N, vec2 shadowBias) {\n      csmPos = cc_matLightViewProj * vec4(worldPos, 1.0);\n      return CCShadowFactorBase(csmNDCPosWithBias, csmPos, N, shadowBias);\n    }\n  #endif\n  float CCShadowFactorBase(vec4 shadowPos, vec3 N, vec2 shadowBias) {\n    vec4 shadowNDCPosWithBias;\n    return CCShadowFactorBase(shadowNDCPosWithBias, shadowPos, N, shadowBias);\n  }\n  float CCCSMFactorBase(vec3 worldPos, vec3 N, vec2 shadowBias) {\n    vec4 csmPos, csmNDCPosWithBias;\n    return CCCSMFactorBase(csmPos, csmNDCPosWithBias, worldPos, N, shadowBias);\n  }\n  float CCSpotShadowFactorBase(vec4 shadowPos, vec3 worldPos, vec2 shadowBias)\n  {\n    vec4 shadowNDCPosWithBias;\n    return CCSpotShadowFactorBase(shadowNDCPosWithBias, shadowPos, worldPos, shadowBias);\n  }\n#endif\n#if CC_USE_FOG != 4\n  float LinearFog(vec4 pos, vec3 cameraPos, float fogStart, float fogEnd) {\n      vec4 wPos = pos;\n      float cam_dis = distance(cameraPos, wPos.xyz);\n      return clamp((fogEnd - cam_dis) / (fogEnd - fogStart), 0., 1.);\n  }\n  float ExpFog(vec4 pos, vec3 cameraPos, float fogStart, float fogDensity, float fogAtten) {\n      vec4 wPos = pos;\n      float cam_dis = max(distance(cameraPos, wPos.xyz) - fogStart, 0.0) / fogAtten * 4.;\n      float f = exp(-cam_dis * fogDensity);\n      return f;\n  }\n  float ExpSquaredFog(vec4 pos, vec3 cameraPos, float fogStart, float fogDensity, float fogAtten) {\n      vec4 wPos = pos;\n      float cam_dis = max(distance(cameraPos, wPos.xyz) - fogStart, 0.0) / fogAtten * 4.;\n      float f = exp(-cam_dis * cam_dis * fogDensity * fogDensity);\n      return f;\n  }\n  float LayeredFog(vec4 pos, vec3 cameraPos, float fogTop, float fogRange, float fogAtten) {\n      vec4 wPos = pos;\n      vec3 camWorldProj = cameraPos.xyz;\n      camWorldProj.y = 0.;\n      vec3 worldPosProj = wPos.xyz;\n      worldPosProj.y = 0.;\n      float fDeltaD = distance(worldPosProj, camWorldProj) / fogAtten * 2.0;\n      float fDeltaY, fDensityIntegral;\n      if (cameraPos.y > fogTop) {\n          if (wPos.y < fogTop) {\n              fDeltaY = (fogTop - wPos.y) / fogRange * 2.0;\n              fDensityIntegral = fDeltaY * fDeltaY * 0.5;\n          }\n          else {\n              fDeltaY = 0.;\n              fDensityIntegral = 0.;\n          }\n      }\n      else {\n          if (wPos.y < fogTop) {\n              float fDeltaA = (fogTop - cameraPos.y) / fogRange * 2.;\n              float fDeltaB = (fogTop - wPos.y) / fogRange * 2.;\n              fDeltaY = abs(fDeltaA - fDeltaB);\n              fDensityIntegral = abs((fDeltaA * fDeltaA * 0.5) - (fDeltaB * fDeltaB * 0.5));\n          }\n          else {\n              fDeltaY = abs(fogTop - cameraPos.y) / fogRange * 2.;\n              fDensityIntegral = abs(fDeltaY * fDeltaY * 0.5);\n          }\n      }\n      float fDensity;\n      if (fDeltaY != 0.) {\n          fDensity = (sqrt(1.0 + ((fDeltaD / fDeltaY) * (fDeltaD / fDeltaY)))) * fDensityIntegral;\n      }\n      else {\n          fDensity = 0.;\n      }\n      float f = exp(-fDensity);\n      return f;\n  }\n#endif\nvoid CC_TRANSFER_FOG_BASE(vec4 pos, out float factor)\n{\n#if CC_USE_FOG == 0\n\tfactor = LinearFog(pos, cc_cameraPos.xyz, cc_fogBase.x, cc_fogBase.y);\n#elif CC_USE_FOG == 1\n\tfactor = ExpFog(pos, cc_cameraPos.xyz, cc_fogBase.x, cc_fogBase.z, cc_fogAdd.z);\n#elif CC_USE_FOG == 2\n\tfactor = ExpSquaredFog(pos, cc_cameraPos.xyz, cc_fogBase.x, cc_fogBase.z, cc_fogAdd.z);\n#elif CC_USE_FOG == 3\n\tfactor = LayeredFog(pos, cc_cameraPos.xyz, cc_fogAdd.x, cc_fogAdd.y, cc_fogAdd.z);\n#else\n\tfactor = 1.0;\n#endif\n}\nvoid CC_APPLY_FOG_BASE(inout vec4 color, float factor) {\n\tcolor = vec4(mix(cc_fogColor.rgb, color.rgb, factor), color.a);\n}\n#if CC_USE_LIGHT_PROBE\n  #if CC_USE_LIGHT_PROBE\n  vec3 SHEvaluate(vec3 normal)\n  {\n      vec3 result;\n  #if USE_INSTANCING\n      vec4 normal4 = vec4(normal, 1.0);\n      result.r = dot(v_sh_linear_const_r, normal4);\n      result.g = dot(v_sh_linear_const_g, normal4);\n      result.b = dot(v_sh_linear_const_b, normal4);\n  #else\n      vec4 normal4 = vec4(normal, 1.0);\n      result.r = dot(cc_sh_linear_const_r, normal4);\n      result.g = dot(cc_sh_linear_const_g, normal4);\n      result.b = dot(cc_sh_linear_const_b, normal4);\n      vec4 n14 = normal.xyzz * normal.yzzx;\n      float n5 = normal.x * normal.x - normal.y * normal.y;\n      result.r += dot(cc_sh_quadratic_r, n14);\n      result.g += dot(cc_sh_quadratic_g, n14);\n      result.b += dot(cc_sh_quadratic_b, n14);\n      result += (cc_sh_quadratic_a.rgb * n5);\n  #endif\n    #if CC_USE_HDR\n      result *= cc_exposure.w * cc_exposure.x;\n    #endif\n    return result;\n  }\n  #endif\n#endif\n#if CC_USE_REFLECTION_PROBE\n  layout(std140) uniform CCLocal {\n    highp mat4 cc_matWorld;\n    highp mat4 cc_matWorldIT;\n    highp vec4 cc_lightingMapUVParam;\n    highp vec4 cc_localShadowBias;\n    highp vec4 cc_reflectionProbeData1;\n    highp vec4 cc_reflectionProbeData2;\n  };\n  vec4 GetTexData(sampler2D dataMap, float dataMapWidth, float x, float uv_y)\n  {\n    return vec4(\n        decode32(texture(dataMap, vec2(((x + 0.5)/dataMapWidth), uv_y))),\n        decode32(texture(dataMap, vec2(((x + 1.5)/dataMapWidth), uv_y))),\n        decode32(texture(dataMap, vec2(((x + 2.5)/dataMapWidth), uv_y))),\n        decode32(texture(dataMap, vec2(((x + 3.5)/dataMapWidth), uv_y)))\n      );\n  }\n  void GetPlanarReflectionProbeData(out vec4 plane, out float planarReflectionDepthScale, out float mipCount, float probeId)\n  {\n      #if USE_INSTANCING\n        float uv_y = (probeId + 0.5) / cc_probeInfo.x;\n        float dataMapWidth = 12.0;\n        vec4 texData1 = GetTexData(cc_reflectionProbeDataMap, dataMapWidth, 0.0, uv_y);\n        vec4 texData2 = GetTexData(cc_reflectionProbeDataMap, dataMapWidth, 4.0, uv_y);\n        plane.xyz = texData1.xyz;\n        plane.w = texData2.x;\n        planarReflectionDepthScale = texData2.y;\n        mipCount = texData2.z;\n      #else\n        plane = cc_reflectionProbeData1;\n        planarReflectionDepthScale = cc_reflectionProbeData2.x;\n        mipCount = cc_reflectionProbeData2.w;\n      #endif\n  }\n  void GetCubeReflectionProbeData(out vec3 centerPos, out vec3 boxHalfSize, out float mipCount, float probeId)\n  {\n      #if USE_INSTANCING\n        float uv_y = (probeId + 0.5) / cc_probeInfo.x;\n        float dataMapWidth = 12.0;\n        vec4 texData1 = GetTexData(cc_reflectionProbeDataMap, dataMapWidth, 0.0, uv_y);\n        vec4 texData2 = GetTexData(cc_reflectionProbeDataMap, dataMapWidth, 4.0, uv_y);\n        vec4 texData3 = GetTexData(cc_reflectionProbeDataMap, dataMapWidth, 8.0, uv_y);\n        centerPos = texData1.xyz;\n        boxHalfSize = texData2.xyz;\n        mipCount = texData3.x;\n      #else\n        centerPos = cc_reflectionProbeData1.xyz;\n        boxHalfSize = cc_reflectionProbeData2.xyz;\n        mipCount = cc_reflectionProbeData2.w;\n      #endif\n  }\n#endif\n#if CC_USE_LIGHTMAP && !CC_FORWARD_ADD\n  uniform sampler2D cc_lightingMap;\n  void SampleAndDecodeLightMapColor(out vec3 lightmapColor, out float dirShadow, out float ao, sampler2D lightingMap, vec2 luv, float lum, vec3 worldNormal)\n  {\n  #if CC_LIGHT_MAP_VERSION > 2\n  #elif CC_LIGHT_MAP_VERSION > 1\n  \tvec4 dataLow = texture(lightingMap, luv);\n  \tvec4 dataHigh = texture(lightingMap, luv + vec2(0.5, 0.0));\n  \tlightmapColor.xyz = dataLow.xyz + dataHigh.xyz * 0.00392156862745098;\n      lightmapColor.rgb *= lum;\n  \tdirShadow = dataLow.a;\n  \tao = dataHigh.a;\n  #else\n      vec4 lightmap = texture(lightingMap, luv);\n      lightmapColor = lightmap.rgb * lum;\n  \tdirShadow = lightmap.a;\n  \tao = 1.0;\n  #endif\n  }\n  void GetLightMapColor(out vec3 lightmapColor, out float dirShadow, out float ao, sampler2D lightingMap, vec2 luv, float lum, vec3 worldNormal)\n  {\n  \tvec4 lightmap;\n  \tvec2 occlusion;\n  \tSampleAndDecodeLightMapColor(lightmapColor, dirShadow, ao, lightingMap, luv, lum, worldNormal);\n  #if CC_USE_HDR\n      lightmapColor.rgb *= cc_exposure.w * cc_exposure.x;\n  #endif\n  }\n#endif\nlayout(std140) uniform Constants {\n  vec4 tilingOffset;\n  vec4 albedo;\n  vec4 albedoScaleAndCutoff;\n  vec4 emissive;\n  float emissiveScale;\n  float occlusion;\n  float roughness;\n  float metallic;\n  float normalStrength;\n  float alphaSource;\n  float albedoScale;\n};\n#if USE_ALBEDO_MAP\n  uniform sampler2D albedoMap;\n#endif\n#if USE_WEIGHT_MAP\n  uniform sampler2D baseWeightMap;\n#endif\n#if USE_METALLIC_MAP\n  uniform sampler2D metallicMap;\n#endif\n#if USE_ROUGHNESS_MAP\n  uniform sampler2D roughnessMap;\n#endif\n#if USE_OCCLUSION_MAP\n  uniform sampler2D occlusionMap;\n#endif\n#if USE_TRANSPARENCY_MAP\n  uniform sampler2D transparencyMap;\n#endif\n#if USE_TRANSPARENCYCOLOR_MAP\n  uniform sampler2D transparencyColorMap;\n#endif\n#if USE_EMISSIVE_MAP\n  uniform sampler2D emissiveMap;\n#endif\n#if USE_EMISSIVESCALE_MAP\n  uniform sampler2D emissiveScaleMap;\n#endif\n#if USE_OPACITY_MAP\n  uniform sampler2D alphaSourceMap;\n#endif\n#if USE_NORMAL_MAP\n  uniform sampler2D normalMap;\n#endif\nfloat discolor(vec3 srcColor) {\n  return dot(GRAY_VECTOR, srcColor);\n}\n#define CC_SURFACES_FRAGMENT_MODIFY_BASECOLOR_AND_TRANSPARENCY\nvec4 SurfacesFragmentModifyBaseColorAndTransparency()\n{\n  vec4 baseColor = albedo;\n  #if USE_VERTEX_COLOR\n    baseColor.rgb *= SRGBToLinear(FSInput_vertexColor.rgb);\n    baseColor.a *= FSInput_vertexColor.a;\n  #endif\n  #if USE_ALBEDO_MAP\n    vec4 texColor = texture(albedoMap, TEXTURE_UV);\n    texColor.rgb = SRGBToLinear(texColor.rgb);\n    baseColor = texColor;\n  #endif\n  #if USE_WEIGHT_MAP\n      vec4 weightColor = texture(baseWeightMap, TEXTURE_UV);\n      weightColor.rgb = SRGBToLinear(weightColor.rgb);\n      baseColor.rgb *= weightColor.rgb;\n  #else\n      baseColor.rgb *= albedoScale;\n  #endif\n  #if ALPHA_SOURCE_IS_OPACITY\n    #if USE_OPACITY_MAP\n      baseColor.a = 1.0 - texture(alphaSourceMap, TEXTURE_UV).ALPHA_SOURCE_CHANNEL;\n    #else\n      baseColor.a = 1.0 - alphaSource;\n    #endif\n  #else\n    #if USE_OPACITY_MAP\n      baseColor.a = texture(alphaSourceMap, TEXTURE_UV).ALPHA_SOURCE_CHANNEL;\n    #else\n      baseColor.a = alphaSource;\n    #endif\n  #endif\n  #if USE_ALPHA_TEST\n    if (baseColor.a < albedoScaleAndCutoff.w) discard;\n  #endif\n  return baseColor;\n}\n#define CC_SURFACES_FRAGMENT_ALPHA_CLIP_ONLY\n#define CC_SURFACES_FRAGMENT_MODIFY_WORLD_NORMAL\nvec3 SurfacesFragmentModifyWorldNormal()\n{\n  vec3 normal = FSInput_worldNormal;\n  #if USE_NORMAL_MAP\n    vec3 nmmp = texture(normalMap, NORMAL_UV).xyz - vec3(0.5);\n    normal = CalculateNormalFromTangentSpace(nmmp, normalStrength, normal.xyz, FSInput_worldTangent, FSInput_mirrorNormal);\n  #endif\n  return normalize(normal);\n}\n#define CC_SURFACES_FRAGMENT_MODIFY_EMISSIVE\nvec3 SurfacesFragmentModifyEmissive()\n{\n  vec3 emissiveColor = emissive.rgb;\n  #if USE_EMISSIVE_MAP\n      emissiveColor.rgb = SRGBToLinear(texture(emissiveMap, TEXTURE_UV).rgb);\n  #endif\n  #if USE_EMISSIVESCALE_MAP\n      vec4 emissiveScaleColor = texture(emissiveScaleMap, TEXTURE_UV);\n      emissiveScaleColor.rgb = SRGBToLinear(emissiveScaleColor.rgb);\n      emissiveColor.rgb *= emissiveScaleColor.rgb;\n  #else\n      emissiveColor.rgb *= emissiveScale;\n  #endif\n  return emissiveColor.rgb;\n}\n#define CC_SURFACES_FRAGMENT_MODIFY_PBRPARAMS\nvec4 SurfacesFragmentModifyPBRParams()\n{\n  vec4 pbr = vec4(1.0,1.0,1.0,1.0);\n  float occlusionValue = 1.0;\n  #if USE_OCCLUSION_MAP\n     vec4 occlusionColor = texture(occlusionMap, TEXTURE_UV);\n     float occlusionColorValue = discolor(occlusionColor.rgb);\n     #if USE_OCCLUSION_CHANNEL\n         occlusionColor.rgb = SRGBToLinear(occlusionColor.rgb);\n         occlusionColorValue = occlusionColor.OCCLUSION_CHANNEL;\n     #endif\n     occlusionValue = mix(1.0, occlusionColorValue, occlusion);\n  #endif\n  pbr.x = occlusionValue;\n  float roughnessValue = roughness;\n  #if USE_ROUGHNESS_MAP\n     vec4 roughnessColor = texture(roughnessMap, TEXTURE_UV);\n     roughnessValue = discolor(roughnessColor.rgb);\n     #if USE_ROUGHNESS_CHANNEL\n         roughnessColor.rgb = SRGBToLinear(roughnessColor.rgb);\n         roughnessValue = roughnessColor.ROUGHNESS_CHANNEL;\n     #endif\n  #endif\n  pbr.y = max(0.02, roughnessValue);\n  float metallicValue = metallic;\n  #if USE_METALLIC_MAP\n     vec4 metallicColor = texture(metallicMap, TEXTURE_UV);\n     metallicValue = discolor(metallicColor.rgb);\n     #if USE_METALLIC_CHANNEL\n         metallicColor.rgb = SRGBToLinear(metallicColor.rgb);\n         metallicValue = metallicColor.METALLIC_CHANNEL;\n     #endif\n  #endif\n  pbr.z = metallicValue;\n  pbr.w = 0.5;\n  return pbr;\n}\nstruct LightingIntermediateData\n{\n  vec3 N, H, L, V;\n  float distToLight, distToLightSqr;\n  float distToCamera, distToCameraSqr;\n  float NoL, NoV, NoH;\n  float NoLSat, NoVSat, NoHSat;\n  float NoVAbsSat;\n  #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n  vec3 worldPosition, worldPosition_fract_part;\n  #else\n  vec3 worldPosition;\n  #endif\n  vec3 T, B;\n  float specularParam;\n  float ior;\n#if CC_SURFACES_LIGHTING_ANISOTROPIC\n  float anisotropyShape;\n#endif\n#if CC_SURFACES_LIGHTING_TRANSMIT_DIFFUSE\n  vec4 shadowPosAndDepth;\n  vec4 transmitDiffuseParams;\n#endif\n#if CC_SURFACES_LIGHTING_TRANSMIT_SPECULAR || CC_SURFACES_LIGHTING_TRANSMIT_DIFFUSE\n  vec4 transmitParams;\n  vec3 inScatteringLightColor;\n#endif\n#if CC_SURFACES_LIGHTING_TT\n  vec3 baseColorTT;\n  float ttIntensity, ttScatterCoef;\n#endif\n};\nvoid CCSurfacesLightingGetIntermediateData_PerPixel(inout LightingIntermediateData data, vec3 worldNormal, vec3 worldPos, vec3 worldTangent, vec3 worldBinormal\n#if CC_SURFACES_LIGHTING_ANISOTROPIC\n    , float anisotropyShape\n#endif\n)\n{\n  data.N = worldNormal;\n  data.V = cc_cameraPos.xyz - worldPos;\n  data.distToCameraSqr = dot(data.V, data.V);\n  data.distToCamera = sqrt(data.distToCameraSqr);\n  data.V /= data.distToCamera;\n  data.NoV = dot(data.N, data.V);\n  data.NoVSat = max(data.NoV, 0.0);\n  data.NoVAbsSat = max(abs(data.NoV), 0.0);\n  #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n  packHighpData(data.worldPosition, data.worldPosition_fract_part, worldPos);\n  #else\n  data.worldPosition = worldPos;\n  #endif\n  data.T = worldTangent;\n  data.B = worldBinormal;\n#if CC_SURFACES_LIGHTING_ANISOTROPIC\n  data.anisotropyShape = anisotropyShape;\n#endif\n#if CC_SURFACES_LIGHTING_TRANSMIT_SPECULAR || CC_SURFACES_LIGHTING_TRANSMIT_DIFFUSE\n  data.inScatteringLightColor = vec3(0.0);\n  data.transmitParams = vec4(0.0);\n#endif\n#if CC_SURFACES_LIGHTING_TRANSMIT_DIFFUSE\n  data.shadowPosAndDepth = vec4(0.0, 0.0, 999999.0, 999999.0);\n#endif\n#if CC_SURFACES_LIGHTING_TT\n  data.baseColorTT = vec3(0.0);\n  data.ttIntensity = data.ttScatterCoef = 0.0;\n#endif\n}\nvoid CCSurfacesLightingGetIntermediateData_PerLight(inout LightingIntermediateData data, vec3 lightDirWithDist)\n{\n  data.L = lightDirWithDist;\n  data.distToLightSqr = dot(data.L, data.L);\n  data.distToLight = sqrt(data.distToLightSqr);\n  data.L /= data.distToLight;\n  data.H = normalize(data.L + data.V);\n  data.NoL = dot(data.N, data.L);\n  data.NoH = dot(data.N, data.H);\n  data.NoLSat = max(data.NoL, 0.0);\n  data.NoHSat = max(data.NoH, 0.0);\n}\nstruct LightingResult\n{\n  vec3 diffuseColorWithLighting, specularColorWithLighting;\n  vec3 directDiffuse, directSpecular;\n  vec3 environmentDiffuse, environmentSpecular;\n  float shadow, ao;\n  vec3 lightmapColor;\n  vec3 emissive;\n#if CC_SURFACES_LIGHTING_USE_FRESNEL\n  float fresnel;\n#endif\n#if CC_SURFACES_LIGHTING_TRANSMIT_SPECULAR\n  vec3 directTransmitSpecular, environmentTransmitSpecular;\n#endif\n#if CC_SURFACES_LIGHTING_TRANSMIT_DIFFUSE\n  vec3 directTransmitDiffuse, environmentTransmitDiffuse;\n#endif\n#if CC_SURFACES_LIGHTING_TRT\n  vec3 directTRT, environmentTRT;\n  vec3 specularColorWithLightingTRT;\n#endif\n#if CC_SURFACES_LIGHTING_TT\n  vec3 directTT;\n  vec3 diffuseColorWithLightingTT;\n#endif\n};\nstruct LightingMiscData\n{\n  float lightType;\n  vec3 lightPos, lightDir;\n  vec4 lightColorAndIntensity;\n  vec4 lightSizeRangeAngle;\n};\nfloat D_GGX(float roughness, float NoH)\n{\n    float m = roughness * roughness;\n    float m2 = m * m;\n    float d = (NoH * m2 - NoH) * NoH + 1.0;\n    return m2 / max(EPSILON, d * d);\n}\nfloat D_GGXMobile(float roughness, float NoH) {\n  float OneMinusNoHSqr = 1.0 - NoH * NoH;\n  float a = roughness * roughness;\n  float n = NoH * a;\n  float p = a / max(EPSILON, OneMinusNoHSqr + n * n);\n  return p * p;\n}\nvoid GetAnisotropicRoughness(float roughness, float anisotropyShape, out float roughnessX, out float roughnessY)\n{\n    float shapeSign = sign(anisotropyShape);\n    anisotropyShape *= anisotropyShape;\n    float r1 = roughness, r2 = roughness;\n    float lerpedRoughness = mix(1.0, 10.0, anisotropyShape);\n    r2 *= shapeSign < 0.0 ? lerpedRoughness : 1.0;\n    r1 *= shapeSign > 0.0 ? lerpedRoughness : 1.0;\n    roughnessX = saturate(r1);\n    roughnessY = saturate(r2);\n}\nfloat D_GGXAniso(float RoughnessX, float RoughnessY, float NoH, vec3 H, vec3 X, vec3 Y)\n{\n    float mx = max(EPSILON_LOWP, RoughnessX * RoughnessX);\n    float my = max(EPSILON_LOWP, RoughnessY * RoughnessY);\n    float XoH = dot(X, H);\n    float YoH = dot(Y, H);\n    float d = XoH * XoH / (mx * mx) + YoH * YoH / (my * my) + NoH * NoH;\n    return 1.0 / max(EPSILON_LOWP, mx * my * d * d);\n}\nvec3 GetAnisotropicReflect(float roughness, float anisotropyShape, vec3 V, vec3 N, vec3 X, vec3 Y)\n{\n    float shapeSign = sign(anisotropyShape);\n    anisotropyShape *= anisotropyShape;\n    anisotropyShape = min(anisotropyShape, 0.4);\n    anisotropyShape *= smoothstep(0.0, 0.03, roughness);\n    vec3 reflectTarget = shapeSign < 0.0 ? mix(N, -Y, anisotropyShape) :\n                         shapeSign > 0.0 ? mix(N, -X, anisotropyShape) : N;\n    return reflect(-V, reflectTarget);\n}\nvec3 IntegratedGFApprox (vec3 specular, float roughness, float NoV) {\n  const vec4 c0 = vec4(-1.0, -0.0275, -0.572, 0.022);\n  const vec4 c1 = vec4(1.0, 0.0425, 1.04, -0.04);\n  vec4 r = roughness * c0 + c1;\n  float a004 = min(r.x * r.x, exp2(-9.28 * NoV)) * r.x + r.y;\n  vec2 AB = vec2(-1.04, 1.04) * a004 + r.zw;\n  AB.y *= clamp(50.0 * specular.g, 0.0, 1.0);\n  return max(vec3(0.0), specular * AB.x + AB.y);\n}\n#define DiffuseCoefficient_EnergyConservation INV_PI\nfloat CalculateFresnelCoefficient(float ior, float NoVSat)\n{\n\tfloat g, c, n, prev, next;\n\tn = ior;\n\tc = ior * NoVSat;\n\tg = sqrt(1.0 + c * c - c);\n\tprev = (g - c) / (g + c);\n\tnext = (c * (g+c) - n*n) / (c * (g-c) + n*n);\n\tprev *= prev;\n\tnext *= next;\n\treturn 0.5 * prev * (1.0 + next);\n}\nfloat SmoothDistAtt (float distSqr, float invSqrAttRadius) {\n  float factor = distSqr * invSqrAttRadius;\n  float smoothFactor = clamp(1.0 - factor * factor, 0.0, 1.0);\n  return smoothFactor * smoothFactor;\n}\nfloat GetDistAtt (float distSqr, float invSqrAttRadius) {\n  float attenuation = 1.0 / max(distSqr, 0.01*0.01);\n  attenuation *= SmoothDistAtt(distSqr , invSqrAttRadius);\n  return attenuation;\n}\nfloat GetAngleAtt (vec3 L, vec3 litDir, float litAngleScale, float litAngleOffset) {\n  float cd = dot(litDir, L);\n  float attenuation = clamp(cd * litAngleScale + litAngleOffset, 0.0, 1.0);\n  return (attenuation * attenuation);\n}\nfloat CalculateDistanceAttenuation(float distToLightSqr, float lightRadius, float lightRange)\n{\n  float litRadiusSqr = lightRadius * lightRadius;\n  float attRadiusSqrInv = 1.0 / max(lightRange, 0.01);\n  attRadiusSqrInv *= attRadiusSqrInv;\n  float edgeAttenuation = litRadiusSqr / max(litRadiusSqr, distToLightSqr);\n  return GetDistAtt(distToLightSqr, attRadiusSqrInv) * edgeAttenuation;\n}\nfloat CalculateAngleAttenuation(vec3 spotLightDir, vec3 L, float cosAngleOuter)\n{\n  float cosInner = max(dot(spotLightDir, L), 0.01);\n  float litAngleScale = 1.0 / max(0.001, cosInner - cosAngleOuter);\n  float litAngleOffset = -cosAngleOuter * litAngleScale;\n  return GetAngleAtt(L, spotLightDir, litAngleScale, litAngleOffset);\n}\nvec3 CalculateRefractDirection(vec3 N, vec3 V, float NoV, float ior)\n{\n  float NoVAbs = abs(NoV);\n  float sideSign = NoV < 0.0 ? -1.0 : 1.0;\n  N *= sideSign;\n  NoV *= sideSign;\n  float sinB = sqrt(1.0 - NoVAbs*NoVAbs) / ior;\n  vec3 X = normalize(-V + N * NoVAbs);\n  vec3 R = -N + X * sinB;\n  return R;\n}\nvec3 CalculateReflectDirection(vec3 N, vec3 V, float NoV)\n{\n  float sideSign = NoV < 0.0 ? -1.0 : 1.0;\n  N *= sideSign;\n  return reflect(-V, N);\n}\nvec3 CalculatePlanarReflectPositionOnPlane(vec3 N, vec3 V, vec3 worldPos, vec4 plane, vec3 cameraPos, float probeReflectedDepth)\n{\n  float distPixelToPlane = -dot(plane, vec4(worldPos, 1.0));\n  plane.w += distPixelToPlane;\n  float distCameraToPlane = abs(-dot(plane, vec4(cameraPos, 1.0)));\n  vec3 planeN = plane.xyz;\n  vec3 virtualCameraPos = cameraPos - 2.0 * distCameraToPlane * planeN;\n  vec3 bumpedR = normalize(reflect(-V, N));\n  vec3 reflectedPointPos = worldPos + probeReflectedDepth * bumpedR;\n  vec3 virtualCameraToReflectedPoint = normalize(reflectedPointPos - virtualCameraPos);\n  float y = distCameraToPlane / max(EPSILON_LOWP, dot(planeN, virtualCameraToReflectedPoint));\n  return virtualCameraPos + y * virtualCameraToReflectedPoint;\n}\nvec4 CalculateBoxProjectedDirection(vec3 R, vec3 worldPos, vec3 cubeCenterPos, vec3 cubeBoxHalfSize)\n{\n  vec3 W = worldPos - cubeCenterPos;\n  vec3 projectedLength = (sign(R) * cubeBoxHalfSize - W) / (R + vec3(EPSILON));\n  float len = min(min(projectedLength.x, projectedLength.y), projectedLength.z);\n  vec3 P = W + len * R;\n  float weight = len < 0.0 ? 0.0 : 1.0;\n  return vec4(P, weight);\n}\nvec3 CalculateDirectDiffuse(in LightingIntermediateData lightingData, in vec4 lightSourceColorAndIntensity)\n{\n    vec3 irradiance = vec3(lightingData.NoLSat) * lightSourceColorAndIntensity.rgb * lightSourceColorAndIntensity.w;\n    return irradiance * DiffuseCoefficient_EnergyConservation;\n}\nvec3 CalculateDirectSpecular(in LightingIntermediateData lightingData, in vec4 lightSourceColorAndIntensity)\n{\n    vec3 irradiance = vec3(lightingData.NoLSat) * lightSourceColorAndIntensity.rgb * lightSourceColorAndIntensity.w;\n    float roughness = lightingData.specularParam;\n  #if CC_SURFACES_LIGHTING_ANISOTROPIC\n      float rT, rB;\n      GetAnisotropicRoughness(roughness, lightingData.anisotropyShape, rT, rB);\n      float calcSpec = D_GGXAniso(rT, rB, lightingData.NoHSat, lightingData.H, lightingData.T, lightingData.B);\n  #else\n    #if CC_SURFACES_USE_LEGACY_COMPATIBLE_LIGHTING\n      float calcSpec = (roughness * 0.25 + 0.25) * D_GGXMobile(roughness, lightingData.NoHSat);\n    #else\n      float calcSpec = D_GGX(roughness, lightingData.NoHSat);\n    #endif\n  #endif\n    return irradiance * calcSpec;\n}\n#if CC_SURFACES_LIGHTING_ANISOTROPIC && CC_SURFACES_LIGHTING_ANISOTROPIC_ENVCONVOLUTION_COUNT\n  vec3 EnvAnisotropicReflection(samplerCube tex, vec3 R, float roughness, float mipCount, float anisotropyShape, vec3 V, vec3 N, vec3 T, vec3 B) {\n      R = normalize(R);\n      float integratedBRDF = 0.0;\n      vec3 envSpec = vec3(0.0);\n      const int SAMPLE_STEP_COUNT = CC_SURFACES_LIGHTING_ANISOTROPIC_ENVCONVOLUTION_COUNT;\n      float sampleAngleRange = PI * abs(anisotropyShape);\n      vec3 anisoDirection = anisotropyShape < 0.0 ? T : B;\n      vec3 ROnNormalPlane = normalize(R - anisoDirection * dot(R, anisoDirection));\n      vec3 stepOffset = normalize(ROnNormalPlane - N) * (sampleAngleRange / float(SAMPLE_STEP_COUNT * 2));\n      for (int i = -SAMPLE_STEP_COUNT; i <= SAMPLE_STEP_COUNT; ++i)\n      {\n          float rT, rB;\n          GetAnisotropicRoughness(roughness, anisotropyShape, rT, rB);\n          #if CC_IBL_CONVOLUTED\n            float coef = abs(float(i)) / float(SAMPLE_STEP_COUNT) * float(SAMPLE_STEP_COUNT);\n          #else\n            float coef = pow(abs(float(i)) / float(SAMPLE_STEP_COUNT), 1.3) * float(SAMPLE_STEP_COUNT);\n          #endif\n          vec3 H = normalize(N + stepOffset * sign(float(i)) * coef);\n          vec3 L = reflect(-V, H);\n          float NoHSat = saturate(dot(N, H));\n          float calcSpec = D_GGXAniso(rT, rB, NoHSat, H, T, B);\n          envSpec += calcSpec * EnvReflection(tex, L, roughness, mipCount);\n          integratedBRDF += calcSpec;\n      }\n      envSpec /= integratedBRDF;\n      return envSpec;\n  }\n#endif\nvec3 SampleEnvironmentSpecular(samplerCube tex, in LightingIntermediateData lightingData, float mipCount)\n{\n    vec3 envSpec = vec3(0.0);\n    float roughness = lightingData.specularParam;\n    #if CC_SURFACES_LIGHTING_ANISOTROPIC && !CC_SURFACES_LIGHTING_ANISOTROPIC_ENVCONVOLUTION_COUNT\n      vec3 R = GetAnisotropicReflect(roughness, lightingData.anisotropyShape, lightingData.V, lightingData.N, lightingData.T, lightingData.B);\n    #else\n      vec3 R = CalculateReflectDirection(lightingData.N, lightingData.V, lightingData.NoV);\n    #endif\n    #if CC_SURFACES_LIGHTING_ANISOTROPIC && CC_SURFACES_LIGHTING_ANISOTROPIC_ENVCONVOLUTION_COUNT\n      envSpec = EnvAnisotropicReflection(tex, R, roughness, mipCount, lightingData.anisotropyShape, lightingData.V, lightingData.N, lightingData.T, lightingData.B);\n    #else\n      #if CC_SURFACES_USE_REFLECTION_DENOISE && !CC_IBL_CONVOLUTED\n        envSpec = EnvReflectionWithMipFiltering(normalize(R), roughness, mipCount, 0.6);\n      #else\n        envSpec = EnvReflection(tex, R, roughness, mipCount);\n      #endif\n    #endif\n    return envSpec;\n}\nvec3 SampleEnvironmentSpecular(samplerCube tex, in LightingIntermediateData lightingData, float mipCount, vec3 worldPos, vec3 cubeCenterPos, vec3 boxHalfSize)\n{\n    vec3 envSpec = vec3(0.0);\n    float roughness = lightingData.specularParam;\n    #if CC_SURFACES_LIGHTING_ANISOTROPIC && !CC_SURFACES_LIGHTING_ANISOTROPIC_ENVCONVOLUTION_COUNT\n      vec3 R = GetAnisotropicReflect(roughness, lightingData.anisotropyShape, lightingData.V, lightingData.N, lightingData.T, lightingData.B);\n    #else\n      vec3 R = CalculateReflectDirection(lightingData.N, lightingData.V, lightingData.NoV);\n    #endif\n    vec4 fixedR = CalculateBoxProjectedDirection(R, worldPos, cubeCenterPos, boxHalfSize);\n    R = fixedR.xyz;\n    vec3 envmap = SampleEnvironmentSpecular(cc_environment, lightingData, cc_ambientGround.w).xyz;\n    #if CC_SURFACES_LIGHTING_ANISOTROPIC && CC_SURFACES_LIGHTING_ANISOTROPIC_ENVCONVOLUTION_COUNT\n      envSpec = EnvAnisotropicReflection(tex, fixedR.xyz, roughness, mipCount, lightingData.anisotropyShape, lightingData.V, lightingData.N, lightingData.T, lightingData.B);\n      envSpec = mix(envmap, envSpec, fixedR.w);\n    #else\n      #if CC_SURFACES_USE_REFLECTION_DENOISE && !CC_IBL_CONVOLUTED\n        envSpec = EnvReflectionWithMipFiltering(normalize(R), roughness, mipCount, 0.6);\n      #else\n        envSpec = mix(envmap, EnvReflection(tex, R, roughness, mipCount), fixedR.w);\n      #endif\n    #endif\n    return envSpec;\n}\nvec3 CalculateEnvironmentDiffuse(in LightingIntermediateData lightingData, float lightIntensity)\n{\n  float fAmb = max(EPSILON, 0.5 - lightingData.N.y * 0.5);\n  vec3 ambDiff = mix(cc_ambientSky.rgb, cc_ambientGround.rgb, fAmb);\n  #if CC_USE_IBL\n    #if CC_USE_DIFFUSEMAP && !CC_USE_LIGHT_PROBE\n      vec3 rotationDir = RotationVecFromAxisY(lightingData.N, cc_surfaceTransform.z, cc_surfaceTransform.w);\n      vec4 diffuseMap = texture(cc_diffuseMap, rotationDir);\n      #if CC_USE_DIFFUSEMAP == 2\n        ambDiff = unpackRGBE(diffuseMap);\n      #else\n        ambDiff = SRGBToLinear(diffuseMap.rgb);\n      #endif\n    #endif\n  #endif\n  ambDiff.rgb *= lightIntensity;\n  #if CC_USE_LIGHT_PROBE\n    ambDiff.rgb += SHEvaluate(lightingData.N);\n  #endif\n  return ambDiff.rgb;\n}\nvec3 CalculateEnvironmentSpecular(in LightingIntermediateData lightingData, float lightIntensity)\n{\n  vec3 envSpec = vec3(0.0);\n#if CC_USE_REFLECTION_PROBE\n    vec3 worldPos;\n    #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n    worldPos = unpackHighpData(lightingData.worldPosition, lightingData.worldPosition_fract_part);\n    #else\n    worldPos = lightingData.worldPosition;\n    #endif\n  #if CC_USE_REFLECTION_PROBE == REFLECTION_PROBE_TYPE_CUBE\n    if(FSInput_reflectionProbeId < 0.0){\n        envSpec = SampleEnvironmentSpecular(cc_reflectionProbeCubemap, lightingData, cc_ambientGround.w);\n    }else{\n      vec3 centerPos, boxHalfSize;\n      float mipCount;\n      GetCubeReflectionProbeData(centerPos, boxHalfSize, mipCount, FSInput_reflectionProbeId);\n      envSpec = SampleEnvironmentSpecular(cc_reflectionProbeCubemap, lightingData, mipCount, worldPos, centerPos, boxHalfSize);\n    }\n  #elif CC_USE_REFLECTION_PROBE == REFLECTION_PROBE_TYPE_PLANAR\n    vec3 R = normalize(CalculateReflectDirection(lightingData.N, lightingData.V, lightingData.NoV));\n    if(FSInput_reflectionProbeId < 0.0){\n        vec2 screenUV = GetPlanarReflectScreenUV(worldPos, cc_matViewProj, cc_cameraPos.w, lightingData.V, R);\n        envSpec = unpackRGBE(fragTextureLod(cc_reflectionProbePlanarMap, screenUV, 1.0)).xyz;\n    }else{\n        vec4 plane;\n        float planarReflectionDepthScale, mipCount;\n        GetPlanarReflectionProbeData(plane, planarReflectionDepthScale, mipCount, FSInput_reflectionProbeId);\n        vec3 worldPosOffset = CalculatePlanarReflectPositionOnPlane(lightingData.N, lightingData.V, worldPos, plane, cc_cameraPos.xyz, planarReflectionDepthScale);\n        vec2 screenUV = GetPlanarReflectScreenUV(worldPosOffset, cc_matViewProj, cc_cameraPos.w, lightingData.V, R);\n        envSpec = unpackRGBE(fragTextureLod(cc_reflectionProbePlanarMap, screenUV, mipCount)).xyz;\n    }\n  #endif\n#elif CC_USE_IBL\n    envSpec = SampleEnvironmentSpecular(cc_environment, lightingData, cc_ambientGround.w);\n#endif\n  return envSpec * lightIntensity;\n}\nbool CCSurfacesLightingEnableShadow(in float NoL)\n{\n  return NoL > 0.0;\n}\nfloat CCSurfacesLightingCalculateDistanceAttenuation(in LightingIntermediateData lightingData, in vec4 lightSizeRangeAngle)\n{\n  return CalculateDistanceAttenuation(lightingData.distToLightSqr, lightSizeRangeAngle.x, lightSizeRangeAngle.y);\n}\nfloat CCSurfacesLightingCalculateAngleAttenuation(in LightingIntermediateData lightingData, in vec4 lightSizeRangeAngle, in vec3 spotLightDir)\n{\n  return CalculateAngleAttenuation(spotLightDir, lightingData.L, lightSizeRangeAngle.z);\n}\nvoid CCSurfacesLightingCalculateDirect(out vec3 lightingDiffuse, out vec3 lightingSpecular, in LightingIntermediateData lightingData, in vec4 lightSourceColorAndIntensity)\n{\n#if CC_SURFACES_LIGHTING_CALCULATE_DIFFUSE\n  lightingDiffuse = CalculateDirectDiffuse(lightingData, lightSourceColorAndIntensity);\n#else\n  lightingDiffuse = vec3(0.0);\n#endif\n#if CC_SURFACES_LIGHTING_CALCULATE_SPECULAR\n  lightingSpecular = CalculateDirectSpecular(lightingData, lightSourceColorAndIntensity);\n#else\n  lightingSpecular = vec3(0.0);\n#endif\n}\nvoid CCSurfacesLightingCalculateEnvironment(out vec3 lightingDiffuse, out vec3 lightingSpecular, in LightingIntermediateData lightingData, float lightIntensity)\n{\n#if CC_SURFACES_LIGHTING_CALCULATE_DIFFUSE\n  lightingDiffuse = CalculateEnvironmentDiffuse(lightingData, lightIntensity);\n#else\n  lightingDiffuse = vec3(0.0);\n#endif\n#if CC_SURFACES_LIGHTING_CALCULATE_SPECULAR\n  lightingSpecular = CalculateEnvironmentSpecular(lightingData, lightIntensity);\n#else\n  lightingSpecular = vec3(0.0);\n#endif\n}\n#if CC_SURFACES_LIGHTING_USE_FRESNEL\n  float CCSurfaceLightingCalculateFresnel(in LightingIntermediateData lightingData)\n  {\n    return CalculateFresnelCoefficient(lightingData.ior, abs(lightingData.NoV));\n  }\n#endif\n#if CC_SURFACES_LIGHTING_TRANSMIT_SPECULAR\n  void CCSurfacesLightingCalculateDirectTransmitSpecular(out vec3 lightingSpecular, in LightingIntermediateData lightingData, in vec4 lightSourceColorAndIntensity)\n  {\n    float roughness = lightingData.specularParam;\n    float NoLSat = saturate(dot(lightingData.N, -lightingData.L));\n    vec3 irradiance = NoLSat * lightSourceColorAndIntensity.rgb * lightSourceColorAndIntensity.w;\n    vec3 R = CalculateRefractDirection(lightingData.N, lightingData.V, lightingData.NoV, lightingData.ior);\n    float RoL = dot(lightingData.L, normalize(R));\n    float calcSpec = D_GGX(roughness, saturate(RoL));\n    lightingSpecular = irradiance * calcSpec;\n  }\n  void CCSurfacesLightingCalculateEnvironmentTransmitSpecular(out vec3 lightingSpecular, in LightingIntermediateData lightingData, float lightIntensity)\n  {\n    vec3 envSpec = vec3(0.0);\n    vec3 R = CalculateRefractDirection(lightingData.N, lightingData.V, lightingData.NoV, lightingData.ior);\n    float roughness = lightingData.specularParam;\n  #if CC_USE_REFLECTION_PROBE\n    #if CC_USE_REFLECTION_PROBE == REFLECTION_PROBE_TYPE_CUBE\n      envSpec = EnvReflection(cc_reflectionProbeCubemap, R, roughness, cc_ambientGround.w);\n    #endif\n  #endif\n  #if CC_USE_IBL && CC_USE_REFLECTION_PROBE != REFLECTION_PROBE_TYPE_CUBE\n    envSpec = EnvReflection(cc_environment, R, roughness, cc_ambientGround.w);\n  #endif\n    lightingSpecular = envSpec * lightIntensity;\n    float distance = lightingData.transmitParams.w, inScatterCoef = lightingData.transmitParams.z;\n    vec2 e = lightingData.transmitParams.xy;\n    vec2 extinction = exp(-e * distance * vec2(1.0, inScatterCoef));\n    vec3 inScattered = (1.0 - extinction.y) * lightingData.inScatteringLightColor.rgb;\n    lightingSpecular = lightingSpecular * extinction.x + inScattered;\n  }\n#endif\n#if CC_SURFACES_LIGHTING_TRANSMIT_DIFFUSE\n  void CCSurfacesLightingCalculateDirectTransmitDiffuse(out vec3 transmitDiffuse, in LightingResult lightingResult, in LightingIntermediateData lightingData, in vec4 lightSourceColorAndIntensity)\n  {\n    vec3 backIrradiance = vec3(saturate(-lightingData.NoL)) * lightSourceColorAndIntensity.rgb * lightSourceColorAndIntensity.w;\n    vec3 transmitDiffuse = backIrradiance * DiffuseCoefficient_EnergyConservation;\n    lightingData.transmitParams;\n    lightingData.transmitDiffuseParams;\n    transmitDiffuse = vec3(0.0);\n  }\n  void CCSurfacesLightingCalculateEnvironmentTransmitDiffuse(out vec3 transmitDiffuse, in LightingResult lightingResult, in LightingIntermediateData lightingData, float lightIntensity)\n  {\n    lightingData.N *= -1.0;\n    vec3 backIrradiance = CalculateEnvironmentDiffuse(lightingData, lightIntensity);\n    lightingData.transmitParams;\n    lightingData.transmitDiffuseParams;\n    transmitDiffuse = vec3(0.0);\n  }\n#endif\n#if CC_SURFACES_LIGHTING_TRT\n  #ifndef CC_SURFACES_FRAGMENT_MODIFY_TRT_SPECULAR_COLOR\n    vec3 SurfacesLightingGetTRTSpecularColor(float specBRDF, bool isSaturated)\n    {\n      return vec3(specBRDF);\n    }\n  #endif\n  void CCSurfacesLightingCalculateDirectTRT(out vec3 TRTLighting, in LightingIntermediateData lightingData, in vec4 lightSourceColorAndIntensity)\n  {\n    vec3 unused;\n    CCSurfacesLightingCalculateDirect(unused, TRTLighting, lightingData, vec4(1.0));\n    float brdf = TRTLighting.x;\n    vec3 Color = SurfacesLightingGetTRTSpecularColor(brdf, true);\n    TRTLighting *= Color * lightSourceColorAndIntensity.w;\n  }\n  void CCSurfacesLightingCalculateEnvironmentTRT(out vec3 TRTLighting, in LightingIntermediateData lightingData, float lightIntensity)\n  {\n    vec3 unused;\n    TRTLighting = CalculateEnvironmentSpecular(lightingData, 1.0);\n    float brdf = length(TRTLighting);\n    vec3 Color = SurfacesLightingGetTRTSpecularColor(brdf, false);\n    TRTLighting *= Color * lightIntensity;\n  }\n#endif\n#if CC_SURFACES_LIGHTING_TT\n  void CCSurfacesLightingCalculateDirectTT(inout LightingResult lightingResult, in LightingIntermediateData lightingData, in vec4 lightSourceColorAndIntensity)\n  {\n    lightingResult.diffuseColorWithLightingTT = lightingResult.diffuseColorWithLighting;\n    float w = lightingData.ttIntensity;\n    vec3 scatteredLighting = pow(saturate(lightingData.baseColorTT * w + lightingData.NoLSat) * lightingData.NoLSat, vec3(mix(0.5, 0.5 + lightingData.ttScatterCoef, w)));\n    vec3 ttLighting = scatteredLighting - lightingData.NoLSat;\n    lightingResult.directTT = ttLighting * DiffuseCoefficient_EnergyConservation * lightSourceColorAndIntensity.xyz* lightSourceColorAndIntensity.w;\n  }\n#endif\nstruct SurfacesMaterialData\n{\n  #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n  vec3 worldPos, worldPos_fract_part;\n  #else\n  vec3 worldPos;\n  #endif\n  vec4 baseColor;\n  vec3 worldNormal;\n  vec3 emissive;\n  float specularIntensity;\n  float roughness;\n  float metallic;\n  float ao;\n  vec3 worldTangent, worldBinormal;\n  float ior;\n#if CC_SURFACES_LIGHTING_ANISOTROPIC\n  float anisotropyShape;\n#endif\n#if CC_SURFACES_LIGHTING_TRANSMIT_SPECULAR || CC_SURFACES_LIGHTING_TRANSMIT_DIFFUSE\n  vec3 inScatteringLightColor;\n  vec4 transmitParams;\n#endif\n#if CC_SURFACES_LIGHTING_TRANSMIT_DIFFUSE\n  vec4 transmitDiffuseParams;\n#endif\n#if CC_SURFACES_LIGHTING_TRT\n  vec3 baseColorTRT;\n  float trtIntensity, roughnessTRT;\n  vec3 worldTangentTRT, worldBinormalTRT;\n#endif\n#if CC_SURFACES_LIGHTING_TT\n  vec3 baseColorTT;\n  float ttIntensity, ttScatterCoef;\n#endif\n};\n#ifndef CC_SURFACES_FRAGMENT_MODIFY_BASECOLOR_AND_TRANSPARENCY\nvec4 SurfacesFragmentModifyBaseColorAndTransparency()\n{\n    return FSInput_vertexColor;\n}\n#endif\n#ifndef CC_SURFACES_FRAGMENT_ALPHA_CLIP_ONLY\n#endif\n#ifndef CC_SURFACES_FRAGMENT_MODIFY_WORLD_NORMAL\nvec3 SurfacesFragmentModifyWorldNormal()\n{\n    return normalize(FSInput_worldNormal);\n}\n#endif\n#ifndef CC_SURFACES_FRAGMENT_MODIFY_WORLD_TANGENT_AND_BINORMAL\nvoid SurfacesFragmentModifyWorldTangentAndBinormal(inout vec3 worldTangent, inout vec3 worldBinormal, vec3 worldNormal)\n{\n    vec3 tangent = FSInput_worldTangent;\n#if CC_SURFACES_USE_TANGENT_SPACE\n    vec3 binormal = normalize(CalculateBinormal(worldNormal.xyz, tangent, FSInput_mirrorNormal));\n    tangent = normalize(cross(binormal, worldNormal));\n#else\n    vec3 binormal = vec3(0.0, 0.0, 0.0);\n#endif\n    worldTangent = tangent;\n    worldBinormal = binormal;\n}\n#endif\n#ifndef CC_SURFACES_FRAGMENT_MODIFY_IOR\nfloat SurfacesFragmentModifyIOR()\n{\n    return 1.0;\n}\n#endif\n#ifndef CC_SURFACES_FRAGMENT_MODIFY_ANISOTROPY_PARAMS\nvec4 SurfacesFragmentModifyAnisotropyParams(out float isRotation)\n{\n    isRotation = 1.0;\n    return vec4(1.0, 0.0, 0.0, 0.0);\n}\n#endif\n#ifndef CC_SURFACES_FRAGMENT_MODIFY_EMISSIVE\nvec3 SurfacesFragmentModifyEmissive()\n{\n    return vec3(0.0, 0.0, 0.0);\n}\n#endif\n#ifndef CC_SURFACES_FRAGMENT_MODIFY_PBRPARAMS\nvec4 SurfacesFragmentModifyPBRParams()\n{\n    return vec4(1.0, 0.5, 0.0, 0.5);\n}\n#endif\n#ifndef CC_SURFACES_FRAGMENT_MODIFY_TRANSMIT_PARAMS\nvoid SurfacesFragmentModifyTransmitParams(out vec4 transmitParams, out vec3 inScatteringLightColor)\n{\n    transmitParams = vec4(0.0, 0.0, 0.0, 0.0);\n    inScatteringLightColor = vec3(0.0);\n}\n#endif\n#ifndef CC_SURFACES_FRAGMENT_MODIFY_TRANSMIT_DIFFUSE_PARAMS\nvec4 SurfacesFragmentModifyTransmitDiffuseParams()\n{\n    return vec4(1.0, 0.0, 0.0, 0.0);\n}\n#endif\n#ifndef CC_SURFACES_FRAGMENT_MODIFY_TRT_PARAMS\nvec4 SurfacesFragmentModifyTRTParams()\n{\n    return vec4(0.2, 0.0, 0.0, 1.0);\n}\n#endif\n#ifndef CC_SURFACES_FRAGMENT_MODIFY_TRT_COLOR\nvec3 SurfacesFragmentModifyTRTColor()\n{\n    return vec3(1.0, 1.0, 1.0);\n}\n#endif\n#ifndef CC_SURFACES_FRAGMENT_MODIFY_TT_PARAMS\nvec4 SurfacesFragmentModifyTTParams()\n{\n    return vec4(0.0, 0.0, 0.0, 1.0);\n}\n#endif\n#ifndef CC_SURFACES_FRAGMENT_MODIFY_TT_COLOR\nvec3 SurfacesFragmentModifyTTColor(in vec3 baseColor, in vec3 trtColor)\n{\n    return vec3(1.0, 1.0, 1.0);\n}\n#endif\n#ifndef CC_SURFACES_FRAGMENT_MODIFY_SHARED_DATA\nvoid SurfacesFragmentModifySharedData(inout SurfacesMaterialData surfaceData)\n{\n}\n#endif\nvoid CCSurfacesFragmentGetMaterialData(inout SurfacesMaterialData surfaceData)\n{\n  #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n  packHighpData(surfaceData.worldPos, surfaceData.worldPos_fract_part, FSInput_worldPos);\n  #else\n  surfaceData.worldPos = FSInput_worldPos;\n  #endif\n  surfaceData.baseColor = SurfacesFragmentModifyBaseColorAndTransparency();\n  surfaceData.worldNormal = SurfacesFragmentModifyWorldNormal();\n  SurfacesFragmentModifyWorldTangentAndBinormal(surfaceData.worldTangent, surfaceData.worldBinormal, surfaceData.worldNormal);\n  surfaceData.ior = SurfacesFragmentModifyIOR();\n#if CC_SURFACES_LIGHTING_ANISOTROPIC\n  float isRotation;\n  vec4 anisotropyParams = SurfacesFragmentModifyAnisotropyParams(isRotation);\n  surfaceData.anisotropyShape = anisotropyParams.x;\n  if (isRotation > 0.0) {\n    RotateTangentAndBinormal(surfaceData.worldTangent, surfaceData.worldBinormal, surfaceData.worldNormal, anisotropyParams.y);\n  } else {\n    vec3 anisoDirTS = anisotropyParams.yzw;\n    vec3 tangentWS = anisoDirTS.x * surfaceData.worldTangent + anisoDirTS.y * surfaceData.worldBinormal + anisoDirTS.z * surfaceData.worldNormal;\n    surfaceData.worldTangent = normalize(tangentWS);\n    surfaceData.worldBinormal = cross(surfaceData.worldNormal, tangentWS);\n  }\n#endif\n  surfaceData.emissive = SurfacesFragmentModifyEmissive();\n  vec4 pbr = SurfacesFragmentModifyPBRParams();\n  surfaceData.ao = pbr.x;\n  surfaceData.roughness = pbr.y;\n  surfaceData.metallic = pbr.z;\n  surfaceData.specularIntensity = pbr.w;\n#if CC_SURFACES_LIGHTING_TRANSMIT_SPECULAR || CC_SURFACES_LIGHTING_TRANSMIT_DIFFUSE\n  SurfacesFragmentModifyTransmitParams(surfaceData.transmitParams, surfaceData.inScatteringLightColor);\n#endif\n#if CC_SURFACES_LIGHTING_TRANSMIT_DIFFUSE\n  surfaceData.transmitDiffuseParams = SurfacesFragmentModifyTransmitDiffuseParams();\n#endif\n  vec3 baseColorTRT = vec3(0.0);\n#if CC_SURFACES_LIGHTING_TRT\n  vec4 trtParams = SurfacesFragmentModifyTRTParams();\n  surfaceData.roughnessTRT = saturate(surfaceData.roughness + trtParams.x);\n  surfaceData.trtIntensity = trtParams.w;\n  surfaceData.baseColorTRT = baseColorTRT = SurfacesFragmentModifyTRTColor();\n  surfaceData.worldTangentTRT = surfaceData.worldTangent;\n  surfaceData.worldBinormalTRT = surfaceData.worldBinormal;\n  RotateTangentAndBinormal(surfaceData.worldTangentTRT, surfaceData.worldBinormalTRT, surfaceData.worldNormal, trtParams.y * PI);\n#endif\n#if CC_SURFACES_LIGHTING_TT\n  vec4 ttParams = SurfacesFragmentModifyTTParams();\n  surfaceData.ttScatterCoef = ttParams.x;\n  surfaceData.ttIntensity = ttParams.w;\n  surfaceData.baseColorTT = SurfacesFragmentModifyTTColor(surfaceData.baseColor.rgb, baseColorTRT);\n#endif\n  SurfacesFragmentModifySharedData(surfaceData);\n#if CC_USE_DEBUG_VIEW == CC_SURFACES_DEBUG_VIEW_COMPOSITE_AND_MISC\n  if (!IS_DEBUG_VIEW_COMPOSITE_ENABLE_NORMAL_MAP) {\n      surfaceData.worldNormal = FSInput_worldNormal;\n      surfaceData.worldTangent = FSInput_worldTangent;\n  }\n#endif\n#if CC_USE_DEBUG_VIEW\n  if (!IS_DEBUG_VIEW_LIGHTING_ENABLE_WITH_ALBEDO)\n  {\n      surfaceData.baseColor.rgb = vec3(1.0);\n      #if CC_SURFACES_LIGHTING_TRT\n        surfaceData.baseColorTRT.rgb = vec3(1.0);\n      #endif\n      #if CC_SURFACES_LIGHTING_TT\n        surfaceData.baseColorTT.rgb = vec3(1.0);\n      #endif\n  }\n#endif\n}\nvec3 CCSurfacesGetDiffuseColor(in SurfacesMaterialData surfaceData)\n{\n  return surfaceData.baseColor.rgb * (1.0 - surfaceData.metallic);\n}\nvec3 CCSurfacesGetSpecularColor(in SurfacesMaterialData surfaceData)\n{\n  float F0 = surfaceData.specularIntensity * 0.08;\n  return mix(vec3(F0), surfaceData.baseColor.rgb, surfaceData.metallic);\n}\nvoid CCSurfacesLightingInitializeColorWithLighting(inout vec3 diffuseColorWithLighting, inout vec3 specularColorWithLighting, in SurfacesMaterialData surfaceData, in LightingIntermediateData lightingData)\n{\n  diffuseColorWithLighting = CCSurfacesGetDiffuseColor(surfaceData);\n  specularColorWithLighting = IntegratedGFApprox(CCSurfacesGetSpecularColor(surfaceData).xyz, surfaceData.roughness, lightingData.NoVAbsSat);\n}\nvoid CCSurfacesLightingCalculateColorWithLighting(inout vec3 diffuseColorWithLighting, inout vec3 specularColorWithLighting, in SurfacesMaterialData surfaceData, in LightingIntermediateData lightingData)\n{\n}\nvoid CCSurfacesInitializeLightingIntermediateData(inout LightingIntermediateData lightingData, in SurfacesMaterialData surfaceData)\n{\n  vec3 worldPos;\n  #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n  worldPos = unpackHighpData(surfaceData.worldPos, surfaceData.worldPos_fract_part);\n  #else\n  worldPos = surfaceData.worldPos;\n  #endif\n  CCSurfacesLightingGetIntermediateData_PerPixel(lightingData, surfaceData.worldNormal, worldPos, surfaceData.worldTangent, surfaceData.worldBinormal\n#if CC_SURFACES_LIGHTING_ANISOTROPIC\n      , surfaceData.anisotropyShape\n#endif\n  );\n  lightingData.specularParam = surfaceData.roughness;\n  lightingData.ior = surfaceData.ior;\n#if CC_SURFACES_LIGHTING_TRANSMIT_SPECULAR || CC_SURFACES_LIGHTING_TRANSMIT_DIFFUSE\n  lightingData.transmitParams = surfaceData.transmitParams;\n  lightingData.inScatteringLightColor = surfaceData.inScatteringLightColor;\n#endif\n#if CC_SURFACES_LIGHTING_TRANSMIT_DIFFUSE\n  lightingData.transmitDiffuseParams = surfaceData.transmitDiffuseParams;\n#endif\n#if CC_SURFACES_LIGHTING_TT\n  lightingData.baseColorTT = surfaceData.baseColorTT;\n  lightingData.ttIntensity = surfaceData.ttIntensity;\n  lightingData.ttScatterCoef = surfaceData.ttScatterCoef;\n#endif\n}\nvoid CCSurfacesLightingCalculateIntermediateData_PerLight(inout LightingIntermediateData lightingData, in SurfacesMaterialData surfaceData, vec3 lightDirWithDist)\n{\n  CCSurfacesLightingGetIntermediateData_PerLight(lightingData, lightDirWithDist);\n}\n#if CC_SURFACES_LIGHTING_TRT\nvoid CCSurfacesGetLightingIntermediateDataTRT(inout LightingIntermediateData lightingDataTRT, in LightingIntermediateData lightingData, in SurfacesMaterialData surfaceData)\n{\n  lightingDataTRT = lightingData;\n  lightingDataTRT.specularParam = surfaceData.roughnessTRT;\n  lightingDataTRT.T = surfaceData.worldTangentTRT;\n  lightingDataTRT.B = surfaceData.worldBinormalTRT;\n}\nvoid CCSurfacesGetSurfacesMaterialDataTRT(inout SurfacesMaterialData surfaceDataTRT, in SurfacesMaterialData surfaceData)\n{\n  surfaceDataTRT = surfaceData;\n  surfaceDataTRT.baseColor = vec4(surfaceData.baseColorTRT, 1.0);\n}\n#endif\nvoid CCSurfacesInitializeLightingResult(inout LightingResult lightingResult, in SurfacesMaterialData surfaceData)\n{\n  lightingResult.ao = surfaceData.ao;\n  lightingResult.emissive = surfaceData.emissive;\n}\nvoid CCSurfacesInitializeLightingResult(inout LightingResult lightingResult)\n{\n  lightingResult.directDiffuse = lightingResult.directSpecular = vec3(0.0);\n#if CC_SURFACES_LIGHTING_TRANSMIT_SPECULAR\n  lightingResult.directTransmitSpecular = vec3(0.0);\n#endif\n#if CC_SURFACES_LIGHTING_TRANSMIT_DIFFUSE\n  lightingResult.directTransmitDiffuse = vec3(0.0);\n#endif\n#if CC_SURFACES_LIGHTING_TRT\n  lightingResult.directTRT = vec3(0.0);\n#endif\n#if CC_SURFACES_LIGHTING_TT\n  lightingResult.directTT = vec3(0.0);\n#endif\n}\nvoid CCSurfacesAccumulateLightingResult(inout LightingResult lightingResultAccumulated, in LightingResult lightingResult)\n{\n  lightingResultAccumulated.directDiffuse += lightingResult.directDiffuse * lightingResult.shadow;\n  lightingResultAccumulated.directSpecular += lightingResult.directSpecular * lightingResult.shadow;\n  #if CC_SURFACES_LIGHTING_TRANSMIT_SPECULAR\n    lightingResultAccumulated.directTransmitSpecular += lightingResult.directTransmitSpecular;\n  #endif\n  #if CC_SURFACES_LIGHTING_TRANSMIT_DIFFUSE\n    lightingResultAccumulated.directTransmitDiffuse += lightingResult.directTransmitDiffuse;\n  #endif\n  #if CC_SURFACES_LIGHTING_TRT\n    lightingResultAccumulated.directTRT += lightingResult.directTRT * lightingResult.shadow;\n  #endif\n  #if CC_SURFACES_LIGHTING_TT\n    lightingResultAccumulated.directTT += lightingResult.directTT * lightingResult.shadow;\n    lightingResultAccumulated.diffuseColorWithLightingTT = lightingResult.diffuseColorWithLightingTT;\n  #endif\n}\n#if CC_PIPELINE_TYPE == 1\n  vec4 CCSurfacesDeferredOutput0(in SurfacesMaterialData surfaceData)\n  {\n    return surfaceData.baseColor;\n  }\n  vec4 CCSurfacesDeferredOutput1(in SurfacesMaterialData surfaceData)\n  {\n    return vec4(float32x3_to_oct(surfaceData.worldNormal), surfaceData.roughness, surfaceData.metallic);\n  }\n  vec4 CCSurfacesDeferredOutput2(in SurfacesMaterialData surfaceData)\n  {\n    return vec4(surfaceData.emissive, surfaceData.ao);\n  }\n#endif\nvec4 CCSurfacesShading(in SurfacesMaterialData surfaceData, in LightingResult lightingResult)\n{\n  vec4 color = vec4(0.0, 0.0, 0.0, surfaceData.baseColor.a);\n#if CC_FORWARD_ADD\n  color.xyz += lightingResult.directDiffuse * lightingResult.diffuseColorWithLighting\n    + lightingResult.directSpecular * lightingResult.specularColorWithLighting;\n  #if CC_SURFACES_LIGHTING_TRANSMIT_SPECULAR\n    + lightingResult.directTransmitSpecular * lightingResult.specularColorWithLighting\n  #endif\n  ;\n#else\n  float fresnel = 1.0;\n  #if CC_SURFACES_LIGHTING_USE_FRESNEL\n    fresnel = lightingResult.fresnel;\n  #endif\n  float invFresnel = 1.0 - fresnel;\n  color.xyz +=\n    ( lightingResult.directDiffuse * lightingResult.diffuseColorWithLighting\n    + lightingResult.directSpecular * lightingResult.specularColorWithLighting * fresnel\n  #if CC_SURFACES_LIGHTING_TRANSMIT_SPECULAR\n    + lightingResult.directTransmitSpecular * lightingResult.specularColorWithLighting * invFresnel\n  #endif\n  #if CC_SURFACES_LIGHTING_TRANSMIT_DIFFUSE\n    + lightingResult.directTransmitDiffuse\n  #endif\n  #if CC_SURFACES_LIGHTING_TRT\n    + lightingResult.directTRT * lightingResult.specularColorWithLightingTRT * surfaceData.trtIntensity * surfaceData.baseColorTRT\n  #endif\n  #if CC_SURFACES_LIGHTING_TT\n    + lightingResult.directTT * lightingResult.diffuseColorWithLightingTT\n  #endif\n    )\n    * lightingResult.shadow;\n  #if CC_SURFACES_USE_LIGHT_MAP == LIGHT_MAP_TYPE_ALL_IN_ONE\n    color.xyz += lightingResult.lightmapColor * lightingResult.diffuseColorWithLighting * lightingResult.shadow;\n  #elif CC_SURFACES_USE_LIGHT_MAP == LIGHT_MAP_TYPE_INDIRECT_OCCLUSION\n    color.xyz += lightingResult.lightmapColor * lightingResult.diffuseColorWithLighting;\n  #endif\n  color.xyz +=\n    ( lightingResult.environmentDiffuse * lightingResult.diffuseColorWithLighting\n    + lightingResult.environmentSpecular * lightingResult.specularColorWithLighting * fresnel\n  #if CC_SURFACES_LIGHTING_TRANSMIT_SPECULAR\n    + lightingResult.environmentTransmitSpecular * lightingResult.specularColorWithLighting * invFresnel\n  #endif\n  #if CC_SURFACES_LIGHTING_TRANSMIT_DIFFUSE\n    + lightingResult.environmentTransmitDiffuse\n  #endif\n  #if CC_SURFACES_LIGHTING_TRT\n    + lightingResult.environmentTRT * lightingResult.specularColorWithLightingTRT * surfaceData.trtIntensity * surfaceData.baseColorTRT\n  #endif\n    )\n    * lightingResult.ao;\n  color.xyz += lightingResult.emissive;\n#endif\n  return color;\n}\n#if CC_USE_DEBUG_VIEW == CC_SURFACES_DEBUG_VIEW_SINGLE\nvoid CCSurfacesDebugViewSurfaceData(inout vec4 color, in SurfacesMaterialData surfaceData)\n{\n    vec4 black = vec4(0.0, 0.0, 0.0, 1.0);\n    float scalar;\n    if (((abs(float(cc_debug_view_mode.x) - float(CC_SURFACES_DEBUG_VIEW_FRAGMENT_NORMAL)) < EPSILON_LOWP) && (cc_surfaceTransform.y != 3.0)))\n        color = vec4(surfaceData.worldNormal * 0.5 + vec3(0.5), 1.0);\n    if (((abs(float(cc_debug_view_mode.x) - float(CC_SURFACES_DEBUG_VIEW_FRAGMENT_TANGENT)) < EPSILON_LOWP) && (cc_surfaceTransform.y != 3.0)))\n    {\n      #if CC_SURFACES_USE_TANGENT_SPACE\n        color = vec4(surfaceData.worldTangent * 0.5 + vec3(0.5), 1.0);\n      #else\n        color = black;\n      #endif\n    }\n    if (((abs(float(cc_debug_view_mode.x) - float(CC_SURFACES_DEBUG_VIEW_FRAGMENT_BINORMAL)) < EPSILON_LOWP) && (cc_surfaceTransform.y != 3.0)))\n    {\n      #if CC_SURFACES_USE_TANGENT_SPACE\n        color = vec4(surfaceData.worldBinormal * 0.5 + vec3(0.5), 1.0);\n      #else\n        color = black;\n      #endif\n    }\n    if (((abs(float(cc_debug_view_mode.x) - float(CC_SURFACES_DEBUG_VIEW_TRANSPARENCY)) < EPSILON_LOWP) && (cc_surfaceTransform.y != 3.0))) {\n        scalar = surfaceData.baseColor.a;\n        color = vec4(scalar, scalar, scalar, 1.0);\n    }\n    if (((abs(float(cc_debug_view_mode.x) - float(CC_SURFACES_DEBUG_VIEW_BASE_COLOR)) < EPSILON_LOWP) && (cc_surfaceTransform.y != 3.0)))\n        color = vec4(LinearToSRGB(surfaceData.baseColor.rgb), 1.0);\n    if (((abs(float(cc_debug_view_mode.x) - float(CC_SURFACES_DEBUG_VIEW_DIFFUSE_COLOR)) < EPSILON_LOWP) && (cc_surfaceTransform.y != 3.0)))\n        color = vec4(LinearToSRGB(CCSurfacesGetDiffuseColor(surfaceData)), 1.0);\n    if (((abs(float(cc_debug_view_mode.x) - float(CC_SURFACES_DEBUG_VIEW_SPECULAR_COLOR)) < EPSILON_LOWP) && (cc_surfaceTransform.y != 3.0)))\n        color = vec4(LinearToSRGB(CCSurfacesGetSpecularColor(surfaceData)), 1.0);\n    if (((abs(float(cc_debug_view_mode.x) - float(CC_SURFACES_DEBUG_VIEW_ROUGHNESS)) < EPSILON_LOWP) && (cc_surfaceTransform.y != 3.0))) {\n        scalar = surfaceData.roughness;\n        color = vec4(scalar, scalar, scalar, 1.0);\n    }\n    if (((abs(float(cc_debug_view_mode.x) - float(CC_SURFACES_DEBUG_VIEW_METALLIC)) < EPSILON_LOWP) && (cc_surfaceTransform.y != 3.0))) {\n        scalar = surfaceData.metallic;\n        color = vec4(scalar, scalar, scalar, 1.0);\n    }\n    if (((abs(float(cc_debug_view_mode.x) - float(CC_SURFACES_DEBUG_VIEW_SPECULAR_INTENSITY)) < EPSILON_LOWP) && (cc_surfaceTransform.y != 3.0))) {\n        scalar = surfaceData.specularIntensity;\n        color = vec4(scalar, scalar, scalar, 1.0);\n    }\n    if (((abs(float(cc_debug_view_mode.x) - float(CC_SURFACES_DEBUG_VIEW_IOR)) < EPSILON_LOWP) && (cc_surfaceTransform.y != 3.0))) {\n        scalar = surfaceData.ior - 1.0;\n        color = vec4(scalar, scalar, scalar, 1.0);\n    }\n}\n#endif\n#if (CC_PIPELINE_TYPE == 0 || CC_FORCE_FORWARD_SHADING)\n  #if CC_FORWARD_ADD && !CC_ENABLE_CLUSTERED_LIGHT_CULLING\n    void CCSurfacesLighting(inout LightingResult lightingResultAccumulated, in SurfacesMaterialData surfaceData, in vec2 shadowBias)\n    {\n      vec3 worldPos;\n      #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n      worldPos = unpackHighpData(surfaceData.worldPos, surfaceData.worldPos_fract_part);\n      #else\n      worldPos = surfaceData.worldPos;\n      #endif\n      CCSurfacesInitializeLightingResult(lightingResultAccumulated);\n      LightingIntermediateData lightingData;\n      CCSurfacesInitializeLightingIntermediateData(lightingData, surfaceData);\n      LightingResult lightingResult;\n      CCSurfacesLightingInitializeColorWithLighting(lightingResult.diffuseColorWithLighting, lightingResult.specularColorWithLighting, surfaceData, lightingData);\n      lightingResultAccumulated.diffuseColorWithLighting = lightingResult.diffuseColorWithLighting;\n      lightingResultAccumulated.specularColorWithLighting = lightingResult.specularColorWithLighting;\n      #if CC_SURFACES_LIGHTING_TRT\n        vec3 diff;\n        SurfacesMaterialData surfaceDataTRT;\n        CCSurfacesGetSurfacesMaterialDataTRT(surfaceDataTRT, surfaceData);\n        CCSurfacesLightingInitializeColorWithLighting(diff, lightingResultAccumulated.specularColorWithLightingTRT, surfaceDataTRT, lightingData);\n      #endif\n      int numLights = CC_PIPELINE_TYPE == 0 ? LIGHTS_PER_PASS : int(cc_lightDir[0].w);\n      for (int i = 0; i < LIGHTS_PER_PASS; i++) {\n        if (i >= numLights) break;\n        CCSurfacesLightingCalculateIntermediateData_PerLight(lightingData, surfaceData, cc_lightPos[i].xyz - worldPos);\n        CCSurfacesLightingCalculateColorWithLighting(lightingResult.diffuseColorWithLighting, lightingResult.specularColorWithLighting, surfaceData, lightingData);\n        vec3 diffuseLighting, specularLighting;\n        CCSurfacesLightingCalculateDirect(diffuseLighting, specularLighting, lightingData, cc_lightColor[i]);\n        float fresnel = 1.0;\n      #if CC_SURFACES_LIGHTING_USE_FRESNEL\n        fresnel = lightingResult.fresnel = CCSurfaceLightingCalculateFresnel(lightingData);\n      #endif\n        float shadow = 1.0;\n      #if CC_RECEIVE_SHADOW && CC_SHADOW_TYPE == 2\n        if (cc_lightPos[i].w > 0.0 && cc_lightSizeRangeAngle[i].w > 0.0) {\n          vec4 shadowPos = vec4(0.0), shadowNDCPosWithBias = vec4(0.0);\n          if (CCSurfacesLightingEnableShadow(lightingData.NoL)) {\n            shadowPos = cc_matLightViewProj * vec4(surfaceData.worldPos, 1.0);\n            shadow = CCSpotShadowFactorBase(shadowNDCPosWithBias, shadowPos, worldPos, shadowBias);\n          }\n          #if CC_SURFACES_LIGHTING_TRANSMIT_DIFFUSE\n            #if CC_SURFACES_LIGHTING_USE_SHADOWMAP_TRANSMIT\n              lightingData.shadowPosAndDepth.xy = shadowNDCPosWithBias.xy;\n              lightingData.shadowPosAndDepth.z = shadowPos.z;\n              lightingData.shadowPosAndDepth.w = GetViewSpaceDepthFromNDCDepth_Perspective(SampleShadowMap(shadowNDCPosWithBias.xyz, cc_spotShadowMap), shadowNDCPosWithBias.w, cc_shadowInvProjDepthInfo.x, cc_shadowInvProjDepthInfo.y);\n            #else\n              lightingData.transmitDiffuseParams.zw = vec2(0.0);\n            #endif\n          #endif\n        }\n      #endif\n      #if CC_USE_DEBUG_VIEW == CC_SURFACES_DEBUG_VIEW_COMPOSITE_AND_MISC\n        if (!IS_DEBUG_VIEW_COMPOSITE_ENABLE_SHADOW) {\n          shadow = 1.0;\n        }\n      #endif\n        lightingResult.shadow = shadow;\n        float distAtt = CCSurfacesLightingCalculateDistanceAttenuation(lightingData, cc_lightSizeRangeAngle[i]);\n        float angleAtt = 1.0;\n        if (cc_lightPos[i].w > 0.0) {\n          angleAtt = CCSurfacesLightingCalculateAngleAttenuation(lightingData, cc_lightSizeRangeAngle[i], -cc_lightDir[i].xyz);\n        }\n        float multiplier = distAtt * angleAtt;\n        lightingResult.directDiffuse = diffuseLighting * multiplier;\n        lightingResult.directSpecular = specularLighting * multiplier * fresnel;\n        #if CC_SURFACES_LIGHTING_TRANSMIT_SPECULAR\n          vec3 transmitSpecularLighting;\n          CCSurfacesLightingCalculateDirectTransmitSpecular(transmitSpecularLighting, lightingData, cc_lightColor[i]);\n          lightingResult.directTransmitSpecular = transmitSpecularLighting * multiplier * (1.0 - fresnel);\n        #endif\n        #if CC_SURFACES_LIGHTING_TRANSMIT_DIFFUSE\n          lightingResult.directTransmitDiffuse = CCSurfacesLightingCalculateDirectTransmitDiffuse(lightingResult, lightingData, cc_lightColor[i]);\n        #endif\n        #if CC_SURFACES_LIGHTING_TRT\n          LightingIntermediateData lightingDataTRT;\n          CCSurfacesGetLightingIntermediateDataTRT(lightingDataTRT, lightingData, surfaceData);\n          CCSurfacesLightingCalculateDirectTRT(lightingResult.directTRT, lightingDataTRT, cc_lightColor[i]);\n          lightingResult.directTRT *= multiplier * fresnel;\n        #endif\n        #if CC_SURFACES_LIGHTING_TT\n          CCSurfacesLightingCalculateDirectTT(lightingResult, lightingData, cc_lightColor[i]);\n        #endif\n        #ifdef CC_SURFACES_LIGHTING_MODIFY_FINAL_RESULT\n          LightingMiscData miscData;\n          miscData.lightType = cc_lightPos[i].w;\n          miscData.lightPos = cc_lightPos[i].xyz;\n          miscData.lightDir = cc_lightDir[i].xyz;\n          miscData.lightColorAndIntensity = cc_lightColor[i];\n          miscData.lightSizeRangeAngle = cc_lightSizeRangeAngle[i];\n          SurfacesLightingModifyFinalResult(lightingResult, lightingData, surfaceData, miscData);\n        #endif\n        CCSurfacesAccumulateLightingResult(lightingResultAccumulated, lightingResult);\n      }\n    }\n  #else\n    void CCSurfacesLighting(inout LightingResult lightingResult, in SurfacesMaterialData surfaceData, in vec2 shadowBias)\n    {\n      LightingIntermediateData lightingData;\n      CCSurfacesInitializeLightingIntermediateData(lightingData, surfaceData);\n      CCSurfacesInitializeLightingResult(lightingResult, surfaceData);\n      CCSurfacesLightingInitializeColorWithLighting(lightingResult.diffuseColorWithLighting, lightingResult.specularColorWithLighting, surfaceData, lightingData);\n      CCSurfacesLightingCalculateIntermediateData_PerLight(lightingData, surfaceData, -cc_mainLitDir.xyz);\n      lightingResult.shadow = 1.0;\n      #if CC_RECEIVE_SHADOW && CC_SHADOW_TYPE == 2\n        if (cc_mainLitDir.w > 0.0) {\n          vec4 shadowPos = vec4(0.0), shadowNDCPosWithBias = vec4(0.0);\n          if (CCSurfacesLightingEnableShadow(lightingData.NoL)) {\n            #if CC_DIR_LIGHT_SHADOW_TYPE == 2\n              lightingResult.shadow = CCCSMFactorBase(shadowPos, shadowNDCPosWithBias, surfaceData.worldPos, lightingData.N, shadowBias);\n            #endif\n            #if CC_DIR_LIGHT_SHADOW_TYPE == 1\n              shadowPos = cc_matLightViewProj * vec4(surfaceData.worldPos, 1.0);\n              lightingResult.shadow = CCShadowFactorBase(shadowPos, lightingData.N, shadowBias);\n            #endif\n          }\n          #if CC_SURFACES_LIGHTING_TRANSMIT_DIFFUSE\n            #if CC_SURFACES_LIGHTING_USE_SHADOWMAP_TRANSMIT\n              lightingData.shadowPosAndDepth.xy = shadowNDCPosWithBias.xy;\n              lightingData.shadowPosAndDepth.z = shadowPos.z;\n              lightingData.shadowPosAndDepth.w = GetViewSpaceDepthFromNDCDepth_Orthgraphic(SampleShadowMap(shadowNDCPosWithBias.xyz, cc_shadowMap), cc_shadowProjDepthInfo.x, cc_shadowProjDepthInfo.y);\n            #else\n              lightingData.transmitDiffuseParams.zw = vec2(0.0);\n            #endif\n          #endif\n        }\n      #endif\n      lightingResult.lightmapColor = vec3(0.0);\n      #if CC_SURFACES_USE_LIGHT_MAP && !CC_FORWARD_ADD\n\t\t    float lightmapShadow, lightmapAO;\n        GetLightMapColor(lightingResult.lightmapColor, lightmapShadow, lightmapAO, cc_lightingMap, FSInput_lightMapUV.xy, FSInput_lightMapUV.z, surfaceData.worldNormal);\n        #if CC_SURFACES_USE_LIGHT_MAP == LIGHT_MAP_TYPE_INDIRECT_OCCLUSION\n          lightingResult.shadow *= lightmapShadow;\n          lightingResult.ao *= lightmapAO;\n        #endif\n      #endif\n      lightingResult.directDiffuse = lightingResult.directSpecular = vec3(0.0);\n      #if !CC_DISABLE_DIRECTIONAL_LIGHT && !CC_FORWARD_ADD\n        CCSurfacesLightingCalculateColorWithLighting(lightingResult.diffuseColorWithLighting, lightingResult.specularColorWithLighting, surfaceData, lightingData);\n        CCSurfacesLightingCalculateDirect(lightingResult.directDiffuse, lightingResult.directSpecular, lightingData, cc_mainLitColor);\n      #endif\n      CCSurfacesLightingCalculateEnvironment(lightingResult.environmentDiffuse, lightingResult.environmentSpecular, lightingData, cc_ambientSky.w);\n      #if CC_SURFACES_LIGHTING_USE_FRESNEL\n        lightingResult.fresnel = CCSurfaceLightingCalculateFresnel(lightingData);\n      #endif\n      #if CC_SURFACES_LIGHTING_TRANSMIT_SPECULAR\n        CCSurfacesLightingCalculateDirectTransmitSpecular(lightingResult.directTransmitSpecular, lightingData, cc_mainLitColor);\n        CCSurfacesLightingCalculateEnvironmentTransmitSpecular(lightingResult.environmentTransmitSpecular, lightingData, cc_ambientSky.w);\n      #endif\n      #if CC_SURFACES_LIGHTING_TRANSMIT_DIFFUSE\n        CCSurfacesLightingCalculateDirectTransmitDiffuse(lightingResult.directTransmitDiffuse, lightingResult, lightingData, cc_mainLitColor);\n        CCSurfacesLightingCalculateEnvironmentTransmitDiffuse(lightingResult.environmentTransmitDiffuse, lightingResult, lightingData, cc_ambientSky.w);\n      #endif\n      #if CC_SURFACES_LIGHTING_TRT\n        LightingIntermediateData lightingDataTRT;\n        CCSurfacesGetLightingIntermediateDataTRT(lightingDataTRT, lightingData, surfaceData);\n        CCSurfacesLightingCalculateDirectTRT(lightingResult.directTRT, lightingDataTRT, cc_mainLitColor);\n        CCSurfacesLightingCalculateEnvironmentTRT(lightingResult.environmentTRT, lightingDataTRT, cc_ambientSky.w);\n        vec3 diff;\n        SurfacesMaterialData surfaceDataTRT;\n        CCSurfacesGetSurfacesMaterialDataTRT(surfaceDataTRT, surfaceData);\n        CCSurfacesLightingInitializeColorWithLighting(diff, lightingResult.specularColorWithLightingTRT, surfaceDataTRT, lightingDataTRT);\n      #endif\n      #if CC_SURFACES_LIGHTING_TT\n        CCSurfacesLightingCalculateDirectTT(lightingResult, lightingData, cc_mainLitColor);\n      #endif\n      #ifdef CC_SURFACES_LIGHTING_MODIFY_FINAL_RESULT\n        LightingMiscData miscData;\n        miscData.lightType = LIGHT_TYPE_DIRECTIONAL;\n        miscData.lightPos = vec3(0.0);\n        miscData.lightDir = cc_mainLitDir.xyz;\n        miscData.lightColorAndIntensity = cc_mainLitColor;\n        miscData.lightSizeRangeAngle = vec4(0.0, 0.0, 0.0, 0.0);\n        SurfacesLightingModifyFinalResult(lightingResult, lightingData, surfaceData, miscData);\n      #endif\n    }\n    #if CC_ENABLE_CLUSTERED_LIGHT_CULLING\n    #endif\n  #endif\n#endif\nvec4 CCSurfacesDebugDisplayInvalidNumber(vec4 color)\n{\n  float index = mod(cc_time.x * 10.0, 2.0);\n  vec4 error = index < 1.0 ? vec4(1.0, 0.0, 0.2, 1.0) : vec4(0.0, 1.0, 0.2, 1.0);\n  return (isnans(color.rgb) || isinfs(color.rgb)) ? error : color;\n}\nvec4 CCSurfacesDebugDisplayInvalidInputData(vec4 color, vec3 data)\n{\n  float index = mod(cc_time.x * 10.0, 2.0);\n  vec4 error = index < 1.0 ? vec4(1.0, 0.0, 0.2, 1.0) : vec4(0.0, 1.0, 0.2, 1.0);\n  return (isnans(data) || isinfs(data)) ? error : color;\n}\n#if CC_USE_DEBUG_VIEW == CC_SURFACES_DEBUG_VIEW_SINGLE && !CC_FORWARD_ADD\n  void CCSurfacesDebugViewMeshData(inout vec4 color)\n  {\n    vec4 white = vec4(1.0, 1.0, 1.0, 1.0);\n    vec4 black = vec4(0.0, 0.0, 0.0, 1.0);\n    if (((abs(float(cc_debug_view_mode.x) - float(CC_SURFACES_DEBUG_VIEW_VERTEX_COLOR)) < EPSILON_LOWP) && (cc_surfaceTransform.y != 3.0)))\n    {\n      #if CC_SURFACES_USE_VERTEX_COLOR\n        color = FSInput_vertexColor;\n      #else\n        color = white;\n      #endif\n    }\n    if (((abs(float(cc_debug_view_mode.x) - float(CC_SURFACES_DEBUG_VIEW_VERTEX_NORMAL)) < EPSILON_LOWP) && (cc_surfaceTransform.y != 3.0)))\n        color = vec4(FSInput_worldNormal * 0.5 + vec3(0.5), 1.0);\n    if (((abs(float(cc_debug_view_mode.x) - float(CC_SURFACES_DEBUG_VIEW_VERTEX_TANGENT)) < EPSILON_LOWP) && (cc_surfaceTransform.y != 3.0)))\n    {\n      #if CC_SURFACES_USE_TANGENT_SPACE\n        color = vec4(FSInput_worldTangent * 0.5 + vec3(0.5), 1.0);\n      #else\n        color = black;\n      #endif\n    }\n    if (((abs(float(cc_debug_view_mode.x) - float(CC_SURFACES_DEBUG_VIEW_VERTEX_MIRROR)) < EPSILON_LOWP) && (cc_surfaceTransform.y != 3.0)))\n    {\n      #if CC_SURFACES_USE_TANGENT_SPACE\n        float sign = FSInput_mirrorNormal * 0.5 + 0.5;\n        color = vec4(sign, sign, sign, 1.0);\n      #else\n        color = black;\n      #endif\n    }\n    if (((abs(float(cc_debug_view_mode.x) - float(CC_SURFACES_DEBUG_VIEW_FACE_SIDE)) < EPSILON_LOWP) && (cc_surfaceTransform.y != 3.0)))\n    {\n        float scalar = clamp(FSInput_faceSideSign, 0.0, 1.0);\n        color = vec4(scalar, scalar, scalar, 1.0);\n    }\n    if (((abs(float(cc_debug_view_mode.x) - float(CC_SURFACES_DEBUG_VIEW_UV0)) < EPSILON_LOWP) && (cc_surfaceTransform.y != 3.0)))\n        color = vec4(FSInput_texcoord.xy, 0.0, 1.0);\n    if (((abs(float(cc_debug_view_mode.x) - float(CC_SURFACES_DEBUG_VIEW_UV1)) < EPSILON_LOWP) && (cc_surfaceTransform.y != 3.0)))\n      color = vec4(FSInput_texcoord1.xy, 0.0, 1.0);\n    if (((abs(float(cc_debug_view_mode.x) - float(CC_SURFACES_DEBUG_VIEW_UVLIGHTMAP)) < EPSILON_LOWP) && (cc_surfaceTransform.y != 3.0)))\n    {\n      #if CC_USE_LIGHTMAP && !CC_FORWARD_ADD\n        color = vec4(FSInput_lightMapUV.xy, 0.0, 1.0);\n      #else\n        color = vec4(0.0, 0.0, 0.0, 1.0);\n      #endif\n    }\n    if (((abs(float(cc_debug_view_mode.x) - float(CC_SURFACES_DEBUG_VIEW_PROJ_DEPTH)) < EPSILON_LOWP) && (cc_surfaceTransform.y != 3.0)))\n    {\n      vec4 clipPos = cc_matProj * cc_matView * vec4(FSInput_worldPos.xyz, 1.0);\n      float depth = clipPos.z / clipPos.w;\n      color = vec4(depth, depth, depth, 1.0);\n    }\n    if (((abs(float(cc_debug_view_mode.x) - float(CC_SURFACES_DEBUG_VIEW_LINEAR_DEPTH)) < EPSILON_LOWP) && (cc_surfaceTransform.y != 3.0)))\n    {\n      vec4 viewPos = cc_matView * vec4(FSInput_worldPos.xyz, 1.0);\n      float depth = (-viewPos.z - cc_nearFar.x) / cc_nearFar.y;\n      color = vec4(depth, depth, depth, 1.0);\n    }\n    if (((abs(float(cc_debug_view_mode.x) - float(CC_SURFACES_DEBUG_VIEW_WORLD_POS)) < EPSILON_LOWP) && (cc_surfaceTransform.y != 3.0)))\n      color = vec4(FSInput_worldPos.xyz, 1.0);\n  }\n#endif\n#if CC_USE_DEBUG_VIEW == CC_SURFACES_DEBUG_VIEW_SINGLE\n  bool CCSurfacesDebugViewLightingResult(inout vec4 color, in LightingResult lightingResult)\n  {\n    bool isSRGBColor = false;\n    if (((abs(float(cc_debug_view_mode.x) - float(CC_SURFACES_DEBUG_VIEW_DIRECT_DIFFUSE)) < EPSILON_LOWP) && (cc_surfaceTransform.y != 3.0)))\n    {\n        color.rgb = lightingResult.directDiffuse * lightingResult.diffuseColorWithLighting;\n        isSRGBColor = true;\n    }\n    if (((abs(float(cc_debug_view_mode.x) - float(CC_SURFACES_DEBUG_VIEW_DIRECT_SPECULAR)) < EPSILON_LOWP) && (cc_surfaceTransform.y != 3.0)))\n    {\n        color.rgb = lightingResult.directSpecular * lightingResult.specularColorWithLighting;\n        isSRGBColor = true;\n    }\n    if (((abs(float(cc_debug_view_mode.x) - float(CC_SURFACES_DEBUG_VIEW_DIRECT_ALL)) < EPSILON_LOWP) && (cc_surfaceTransform.y != 3.0)))\n    {\n        color.rgb = lightingResult.directDiffuse * lightingResult.diffuseColorWithLighting + lightingResult.directSpecular * lightingResult.specularColorWithLighting;\n        isSRGBColor = true;\n    }\n    if (((abs(float(cc_debug_view_mode.x) - float(CC_SURFACES_DEBUG_VIEW_ENV_DIFFUSE)) < EPSILON_LOWP) && (cc_surfaceTransform.y != 3.0)))\n    {\n        color.rgb = lightingResult.environmentDiffuse * lightingResult.diffuseColorWithLighting;\n        isSRGBColor = true;\n    }\n    if (((abs(float(cc_debug_view_mode.x) - float(CC_SURFACES_DEBUG_VIEW_ENV_SPECULAR)) < EPSILON_LOWP) && (cc_surfaceTransform.y != 3.0)))\n    {\n        color.rgb = lightingResult.environmentSpecular * lightingResult.specularColorWithLighting;\n        isSRGBColor = true;\n    }\n    if (((abs(float(cc_debug_view_mode.x) - float(CC_SURFACES_DEBUG_VIEW_ENV_ALL)) < EPSILON_LOWP) && (cc_surfaceTransform.y != 3.0)))\n    {\n        color.rgb = lightingResult.environmentDiffuse * lightingResult.diffuseColorWithLighting + lightingResult.environmentSpecular * lightingResult.specularColorWithLighting;\n        isSRGBColor = true;\n    }\n    if (((abs(float(cc_debug_view_mode.x) - float(CC_SURFACES_DEBUG_VIEW_LIGHT_MAP)) < EPSILON_LOWP) && (cc_surfaceTransform.y != 3.0)))\n    {\n        color.rgb = lightingResult.lightmapColor;\n        isSRGBColor = true;\n    }\n    if (((abs(float(cc_debug_view_mode.x) - float(CC_SURFACES_DEBUG_VIEW_EMISSIVE)) < EPSILON_LOWP) && (cc_surfaceTransform.y != 3.0)))\n    {\n        color.rgb = lightingResult.emissive;\n        isSRGBColor = true;\n    }\n    if (((abs(float(cc_debug_view_mode.x) - float(CC_SURFACES_DEBUG_VIEW_AO)) < EPSILON_LOWP) && (cc_surfaceTransform.y != 3.0)))\n    {\n        color.rgb = vec3(lightingResult.ao);\n        isSRGBColor = false;\n    }\n    if (((abs(float(cc_debug_view_mode.x) - float(CC_SURFACES_DEBUG_VIEW_SHADOW)) < EPSILON_LOWP) && (cc_surfaceTransform.y != 3.0)))\n    {\n        color.rgb = vec3(lightingResult.shadow);\n        isSRGBColor = false;\n    }\n    float fresnel = 0.0;\n    vec3 directTransmitSpecular = vec3(0.0), environmentTransmitSpecular = vec3(0.0);\n    vec3 directTransmitDiffuse = vec3(0.0), environmentTransmitDiffuse = vec3(0.0);\n    vec3 diffuseColorWithLightingTT = vec3(0.0), specularColorWithLightingTRT = vec3(0.0);\n    vec3 directTRT = vec3(0.0), environmentTRT = vec3(0.0);\n  #if CC_SURFACES_LIGHTING_USE_FRESNEL\n    fresnel = lightingResult.fresnel;\n  #endif\n  #if CC_SURFACES_LIGHTING_TRANSMIT_SPECULAR\n    directTransmitSpecular = lightingResult.directTransmitSpecular;\n    environmentTransmitSpecular = lightingResult.environmentTransmitSpecular;\n  #endif\n  #if CC_SURFACES_LIGHTING_TRANSMIT_DIFFUSE\n    directTransmitDiffuse = lightingResult.directTransmitDiffuse;\n    environmentTransmitDiffuse = lightingResult.environmentTransmitDiffuse;\n  #endif\n  #if CC_SURFACES_LIGHTING_TRT\n    directTRT = lightingResult.directTRT;\n    environmentTRT = lightingResult.environmentTRT;\n    specularColorWithLightingTRT = lightingResult.specularColorWithLightingTRT;\n  #endif\n    if (((abs(float(cc_debug_view_mode.x) - float(CC_SURFACES_DEBUG_VIEW_FRESNEL)) < EPSILON_LOWP) && (cc_surfaceTransform.y != 3.0)))\n    {\n        color.rgb = vec3(fresnel);\n        isSRGBColor = false;\n    }\n    if (((abs(float(cc_debug_view_mode.x) - float(CC_SURFACES_DEBUG_VIEW_TRANSMIT_DIRECT_SPECULAR)) < EPSILON_LOWP) && (cc_surfaceTransform.y != 3.0)))\n    {\n        color.rgb = directTransmitSpecular;\n        isSRGBColor = true;\n    }\n    if (((abs(float(cc_debug_view_mode.x) - float(CC_SURFACES_DEBUG_VIEW_TRANSMIT_ENV_SPECULAR)) < EPSILON_LOWP) && (cc_surfaceTransform.y != 3.0)))\n    {\n        color.rgb = environmentTransmitSpecular;\n        isSRGBColor = true;\n    }\n    if (((abs(float(cc_debug_view_mode.x) - float(CC_SURFACES_DEBUG_VIEW_TRANSMIT_DIRECT_DIFFUSE)) < EPSILON_LOWP) && (cc_surfaceTransform.y != 3.0)))\n    {\n        color.rgb = directTransmitDiffuse;\n        isSRGBColor = true;\n    }\n    if (((abs(float(cc_debug_view_mode.x) - float(CC_SURFACES_DEBUG_VIEW_TRANSMIT_ENV_DIFFUSE)) < EPSILON_LOWP) && (cc_surfaceTransform.y != 3.0)))\n    {\n        color.rgb = environmentTransmitDiffuse;\n        isSRGBColor = true;\n    }\n    if (((abs(float(cc_debug_view_mode.x) - float(CC_SURFACES_DEBUG_VIEW_TRANSMIT_ALL)) < EPSILON_LOWP) && (cc_surfaceTransform.y != 3.0)))\n    {\n        color.rgb = directTransmitSpecular + environmentTransmitSpecular + directTransmitDiffuse + environmentTransmitDiffuse;\n        isSRGBColor = true;\n    }\n    if (((abs(float(cc_debug_view_mode.x) - float(CC_SURFACES_DEBUG_VIEW_TRT_DIRECT)) < EPSILON_LOWP) && (cc_surfaceTransform.y != 3.0)))\n    {\n        color.rgb = directTRT * specularColorWithLightingTRT;\n        isSRGBColor = true;\n    }\n    if (((abs(float(cc_debug_view_mode.x) - float(CC_SURFACES_DEBUG_VIEW_TRT_ENVIRONMENT)) < EPSILON_LOWP) && (cc_surfaceTransform.y != 3.0)))\n    {\n        color.rgb = environmentTRT * specularColorWithLightingTRT;\n        isSRGBColor = true;\n    }\n    if (((abs(float(cc_debug_view_mode.x) - float(CC_SURFACES_DEBUG_VIEW_TRT_ALL)) < EPSILON_LOWP) && (cc_surfaceTransform.y != 3.0)))\n    {\n        color.rgb = (directTRT + environmentTRT) * specularColorWithLightingTRT;\n        isSRGBColor = true;\n    }\n    return isSRGBColor;\n  }\n#endif\n#if CC_USE_DEBUG_VIEW == CC_SURFACES_DEBUG_VIEW_COMPOSITE_AND_MISC\n  void CCSurfacesDebugViewCompositeLightingResult(inout LightingResult lightingResult)\n  {\n    if (!IS_DEBUG_VIEW_COMPOSITE_ENABLE_DIRECT_DIFFUSE)\n      lightingResult.directDiffuse = vec3(0.0);\n    if (!IS_DEBUG_VIEW_COMPOSITE_ENABLE_DIRECT_SPECULAR)\n      lightingResult.directSpecular = vec3(0.0);\n    if (!IS_DEBUG_VIEW_COMPOSITE_ENABLE_ENV_DIFFUSE)\n      lightingResult.environmentDiffuse = vec3(0.0);\n    if (!IS_DEBUG_VIEW_COMPOSITE_ENABLE_ENV_SPECULAR)\n      lightingResult.environmentSpecular = vec3(0.0);\n  #if CC_SURFACES_LIGHTING_TRANSMIT_DIFFUSE\n    if (!IS_DEBUG_VIEW_COMPOSITE_ENABLE_TRANSMIT_DIFFUSE)\n      lightingResult.directTransmitDiffuse = lightingResult.environmentTransmitDiffuse = vec3(0.0);\n  #endif\n  #if CC_SURFACES_LIGHTING_TRANSMIT_SPECULAR\n    if (!IS_DEBUG_VIEW_COMPOSITE_ENABLE_TRANSMIT_SPECULAR)\n      lightingResult.directTransmitSpecular = lightingResult.environmentTransmitSpecular = vec3(0.0);\n  #endif\n  #if CC_SURFACES_LIGHTING_TRT\n    if (!IS_DEBUG_VIEW_COMPOSITE_ENABLE_TRT)\n        lightingResult.directTRT = lightingResult.environmentTRT = vec3(0.0);\n  #endif\n  #if CC_SURFACES_LIGHTING_TT\n    if (!IS_DEBUG_VIEW_COMPOSITE_ENABLE_TT)\n        lightingResult.directTT = vec3(0.0);\n  #endif\n    if (!IS_DEBUG_VIEW_COMPOSITE_ENABLE_EMISSIVE)\n      lightingResult.emissive = vec3(0.0);\n    if (!IS_DEBUG_VIEW_COMPOSITE_ENABLE_LIGHT_MAP)\n      lightingResult.lightmapColor = vec3(0.0);\n    if (!IS_DEBUG_VIEW_COMPOSITE_ENABLE_SHADOW)\n      lightingResult.shadow = 1.0;\n    if (!IS_DEBUG_VIEW_COMPOSITE_ENABLE_AO)\n      lightingResult.ao = 1.0;\n  #if CC_SURFACES_LIGHTING_USE_FRESNEL\n    if (!IS_DEBUG_VIEW_COMPOSITE_ENABLE_FRESNEL)\n      lightingResult.fresnel = 1.0;\n  #endif\n  }\n#endif\n#if (CC_PIPELINE_TYPE == 0 || CC_FORCE_FORWARD_SHADING)\n  layout(location = 0) out vec4 fragColorX;\n  void main()  {\n  #if CC_DISABLE_STRUCTURE_IN_FRAGMENT_SHADER\n    float NoL = dot(-cc_mainLitDir.xyz, FSInput_worldNormal.xyz);\n    vec4 color = SurfacesFragmentModifyBaseColorAndTransparency();\n  #else\n    SurfacesMaterialData surfaceData;\n    CCSurfacesFragmentGetMaterialData(surfaceData);\n    vec2 shadowBias = vec2(0.0);\n    vec3 colDebugCSMLayer = vec3(1.0);\n    #if CC_RECEIVE_SHADOW\n      shadowBias = FSInput_shadowBias;\n      #if !CC_FORWARD_ADD\n        #if CC_USE_DEBUG_VIEW && CC_SURFACES_ENABLE_DEBUG_VIEW\n          if (IS_DEBUG_VIEW_MISC_ENABLE_CSM_LAYER_COLORATION)\n          {\n              vec4 csmPos;\n              vec4 shadowProjDepthInfo, shadowProjInfo;\n              vec3 shadowViewDir0, shadowViewDir1, shadowViewDir2;\n              int csmLayer = -1;\n              csmLayer = CCGetCSMLevel(csmPos, shadowProjDepthInfo, shadowProjInfo, shadowViewDir0, shadowViewDir1, shadowViewDir2, surfaceData.worldPos);\n              bool OutOfRange = csmLayer < 0;\n              if (OutOfRange)\n                  colDebugCSMLayer = vec3(1.0);\n              else if (csmLayer == 0)\n                  colDebugCSMLayer = vec3(1.0, 0.0, 0.0);\n              else if (csmLayer == 1)\n                  colDebugCSMLayer = vec3(0.0, 1.0, 0.0);\n              else if (csmLayer == 2)\n                  colDebugCSMLayer = vec3(0.0, 0.0, 1.0);\n              else if (csmLayer == 3)\n                  colDebugCSMLayer = vec3(0.0, 1.0, 1.0);\n          }\n        #endif\n      #endif\n    #endif\n    #if !CC_FORWARD_ADD\n      float fogFactor = 1.0;\n      #if CC_USE_FOG != 4\n        #if !CC_USE_ACCURATE_FOG\n          fogFactor = FSInput_fogFactor;\n        #else\n          CC_TRANSFER_FOG_BASE(vec4(FSInput_worldPos, 1.0), fogFactor);\n        #endif\n      #endif\n      #if CC_USE_DEBUG_VIEW == CC_SURFACES_DEBUG_VIEW_COMPOSITE_AND_MISC && CC_SURFACES_ENABLE_DEBUG_VIEW\n        if (!IS_DEBUG_VIEW_COMPOSITE_ENABLE_FOG) {\n            fogFactor = 1.0;\n        }\n      #endif\n    #endif\n    LightingResult lightingResult;\n    CCSurfacesLighting(lightingResult, surfaceData, shadowBias);\n    #if CC_USE_DEBUG_VIEW == CC_SURFACES_DEBUG_VIEW_SINGLE && CC_SURFACES_ENABLE_DEBUG_VIEW\n      vec4 debugColor = vec4(0.0, 0.0, 0.0, 1.0);\n      float materialTransparency = CCSurfacesShading(surfaceData, lightingResult).a;\n      #if !CC_FORWARD_ADD\n        CCSurfacesDebugViewMeshData(debugColor);\n        CCSurfacesDebugViewSurfaceData(debugColor, surfaceData);\n        if (((abs(float(cc_debug_view_mode.x) - float(CC_SURFACES_DEBUG_VIEW_FOG)) < EPSILON_LOWP) && (cc_surfaceTransform.y != 3.0)))\n        {\n          debugColor.rgb = vec3(1.0 - fogFactor);\n        }\n      #endif\n      #if CC_FORWARD_ADD\n        if (((abs(float(cc_debug_view_mode.x) - float(CC_SURFACES_DEBUG_VIEW_DIRECT_DIFFUSE)) < EPSILON_LOWP) && (cc_surfaceTransform.y != 3.0)) || ((abs(float(cc_debug_view_mode.x) - float(CC_SURFACES_DEBUG_VIEW_DIRECT_SPECULAR)) < EPSILON_LOWP) && (cc_surfaceTransform.y != 3.0)) || ((abs(float(cc_debug_view_mode.x) - float(CC_SURFACES_DEBUG_VIEW_DIRECT_ALL)) < EPSILON_LOWP) && (cc_surfaceTransform.y != 3.0)))\n      #endif\n        {\n            if (CCSurfacesDebugViewLightingResult(debugColor, lightingResult))\n            {\n              debugColor.a = materialTransparency;\n              #if CC_USE_HDR\n                if (IS_DEBUG_VIEW_COMPOSITE_ENABLE_TONE_MAPPING)\n                    debugColor.rgb = ACESToneMap(debugColor.rgb);\n              #endif\n              if (IS_DEBUG_VIEW_COMPOSITE_ENABLE_GAMMA_CORRECTION)\n                  debugColor.rgb = LinearToSRGB(debugColor.rgb);\n            }\n        }\n      if (IS_DEBUG_VIEW_ENABLE_WITH_CAMERA) {\n        fragColorX = debugColor;\n        return;\n      }\n    #elif CC_USE_DEBUG_VIEW == CC_SURFACES_DEBUG_VIEW_COMPOSITE_AND_MISC && CC_SURFACES_ENABLE_DEBUG_VIEW\n      CCSurfacesDebugViewCompositeLightingResult(lightingResult);\n    #endif\n    vec4 color = CCSurfacesShading(surfaceData, lightingResult);\n    #if CC_USE_DEBUG_VIEW && CC_SURFACES_ENABLE_DEBUG_VIEW\n      if (IS_DEBUG_VIEW_MISC_ENABLE_CSM_LAYER_COLORATION) {\n          color.rgb *= colDebugCSMLayer.rgb;\n      }\n      #if CC_SURFACES_USE_TANGENT_SPACE\n        color = CCSurfacesDebugDisplayInvalidInputData(color, FSInput_worldTangent);\n      #endif\n    #endif\n  #endif\n    #if CC_USE_RGBE_OUTPUT\n      fragColorX = packRGBE(color.rgb);\n      return;\n    #endif\n    #if CC_USE_HDR\n      #if CC_USE_DEBUG_VIEW == CC_SURFACES_DEBUG_VIEW_COMPOSITE_AND_MISC && CC_SURFACES_ENABLE_DEBUG_VIEW\n        if (IS_DEBUG_VIEW_COMPOSITE_ENABLE_TONE_MAPPING)\n      #endif\n        color.rgb = ACESToneMap(color.rgb);\n    #endif\n    #if CC_USE_DEBUG_VIEW == CC_SURFACES_DEBUG_VIEW_COMPOSITE_AND_MISC\n      if (IS_DEBUG_VIEW_COMPOSITE_ENABLE_GAMMA_CORRECTION)\n    #endif\n    color.rgb = LinearToSRGB(color.rgb);\n    #if !CC_FORWARD_ADD && CC_USE_FOG != 4\n      CC_APPLY_FOG_BASE(color, fogFactor);\n    #endif\n    fragColorX = CCSurfacesDebugDisplayInvalidNumber(color);\n  }\n#elif CC_PIPELINE_TYPE == 1\n    layout(location = 0) out vec4 fragColor0;\n    layout(location = 1) out vec4 fragColor1;\n    layout(location = 2) out vec4 fragColor2;\n    void main () {\n      SurfacesMaterialData surfaceData;\n      CCSurfacesFragmentGetMaterialData(surfaceData);\n      fragColor0 = CCSurfacesDeferredOutput0(surfaceData);\n      fragColor1 = CCSurfacesDeferredOutput1(surfaceData);\n      fragColor2 = CCSurfacesDeferredOutput2(surfaceData);\n    #if CC_USE_DEBUG_VIEW == CC_SURFACES_DEBUG_VIEW_SINGLE && CC_SURFACES_ENABLE_DEBUG_VIEW\n      vec4 debugColor = vec4(0.0, 0.0, 0.0, 1.0);\n      CCSurfacesDebugViewMeshData(debugColor);\n      CCSurfacesDebugViewSurfaceData(debugColor, surfaceData);\n      if (IS_DEBUG_VIEW_ENABLE_WITH_CAMERA) {\n        fragColor0 = debugColor;\n      }\n    #endif\n    }\n#endif"},"glsl1":{"vert":"\nprecision highp float;\n  #define CC_SURFACES_USE_SECOND_UV HAS_SECOND_UV\n  #define CC_SURFACES_USE_TWO_SIDED USE_TWOSIDE\n  #define CC_SURFACES_USE_REFLECTION_DENOISE USE_REFLECTION_DENOISE\n  #define CC_SURFACES_LIGHTING_ANISOTROPIC IS_ANISOTROPY\n  #define CC_SURFACES_USE_VERTEX_COLOR USE_VERTEX_COLOR\n  #define CC_SURFACES_USE_LEGACY_COMPATIBLE_LIGHTING USE_COMPATIBLE_LIGHTING\n#if IS_ANISOTROPY || USE_NORMAL_MAP\n  #define CC_SURFACES_USE_TANGENT_SPACE 1\n#endif\n  #define CC_SURFACES_LIGHTING_ANISOTROPIC_ENVCONVOLUTION_COUNT 31\n#ifndef CC_SURFACES_USE_SECOND_UV\n  #define CC_SURFACES_USE_SECOND_UV 0\n#endif\n#ifndef CC_SURFACES_USE_TANGENT_SPACE\n  #define CC_SURFACES_USE_TANGENT_SPACE 0\n#endif\n#ifndef CC_SURFACES_USE_VERTEX_COLOR\n  #define CC_SURFACES_USE_VERTEX_COLOR 0\n#endif\n#ifndef CC_SURFACES_TRANSFER_LOCAL_POS\n  #define CC_SURFACES_TRANSFER_LOCAL_POS 0\n#endif\n#ifndef CC_SURFACES_TRANSFER_CLIP_POS\n  #define CC_SURFACES_TRANSFER_CLIP_POS 0\n#endif\n#ifndef CC_SURFACES_USE_LIGHT_MAP\n  #ifdef CC_USE_LIGHTMAP\n    #define CC_SURFACES_USE_LIGHT_MAP CC_USE_LIGHTMAP\n  #else\n    #define CC_SURFACES_USE_LIGHT_MAP 0\n  #endif\n#endif\n#ifndef CC_SURFACES_FLIP_UV\n  #define CC_SURFACES_FLIP_UV 0\n#endif\n#ifndef CC_SURFACES_USE_TWO_SIDED\n  #define CC_SURFACES_USE_TWO_SIDED 0\n#endif\n#ifndef CC_SURFACES_USE_REFLECTION_DENOISE\n  #define CC_SURFACES_USE_REFLECTION_DENOISE 0\n#endif\n#ifndef CC_SURFACES_LIGHTING_ANISOTROPIC\n  #define CC_SURFACES_LIGHTING_ANISOTROPIC 0\n#endif\n#ifndef CC_SURFACES_LIGHTING_ANISOTROPIC_ENVCONVOLUTION_COUNT\n  #define CC_SURFACES_LIGHTING_ANISOTROPIC_ENVCONVOLUTION_COUNT 0\n#endif\n#ifndef CC_SURFACES_USE_LEGACY_COMPATIBLE_LIGHTING\n  #define CC_SURFACES_USE_LEGACY_COMPATIBLE_LIGHTING 0\n#endif\n#ifndef CC_SURFACES_LIGHTING_USE_FRESNEL\n  #define CC_SURFACES_LIGHTING_USE_FRESNEL 0\n#endif\n#ifndef CC_SURFACES_LIGHTING_TRANSMIT_SPECULAR\n  #define CC_SURFACES_LIGHTING_TRANSMIT_SPECULAR 0\n#endif\n#ifndef CC_SURFACES_LIGHTING_TRANSMIT_DIFFUSE\n  #define CC_SURFACES_LIGHTING_TRANSMIT_DIFFUSE 0\n#endif\n#ifndef CC_SURFACES_LIGHTING_USE_SHADOWMAP_TRANSMIT\n  #define CC_SURFACES_LIGHTING_USE_SHADOWMAP_TRANSMIT 0\n#endif\n#ifndef CC_SURFACES_LIGHTING_TRT\n  #define CC_SURFACES_LIGHTING_TRT 0\n#endif\n#ifndef CC_SURFACES_LIGHTING_TT\n  #define CC_SURFACES_LIGHTING_TT 0\n#endif\n#ifndef CC_SURFACES_ENABLE_DEBUG_VIEW\n  #define CC_SURFACES_ENABLE_DEBUG_VIEW 1\n#endif\n#ifndef CC_SURFACES_LIGHTING_CALCULATE_DIFFUSE\n  #define CC_SURFACES_LIGHTING_CALCULATE_DIFFUSE 1\n#endif\n#ifndef CC_SURFACES_LIGHTING_CALCULATE_SPECULAR\n  #define CC_SURFACES_LIGHTING_CALCULATE_SPECULAR 1\n#endif\n#define CC_USE_SURFACE_SHADER 1\nattribute vec3 a_position;\nattribute vec3 a_normal;\nattribute vec2 a_texCoord;\n#if CC_SURFACES_USE_TANGENT_SPACE\n  attribute vec4 a_tangent;\n#endif\n#if CC_SURFACES_USE_VERTEX_COLOR\n  attribute vec4 a_color;\n#endif\n#if CC_SURFACES_USE_SECOND_UV || CC_USE_LIGHTMAP\n  attribute vec2 a_texCoord1;\n#endif\n#if CC_USE_SKINNING\n    attribute vec4 a_joints;\n  attribute vec4 a_weights;\n#endif\n#if USE_INSTANCING\n  #if CC_USE_BAKED_ANIMATION\n    attribute highp vec4 a_jointAnimInfo;\n  #endif\n  attribute vec4 a_matWorld0;\n  attribute vec4 a_matWorld1;\n  attribute vec4 a_matWorld2;\n  #if CC_USE_LIGHTMAP\n    attribute vec4 a_lightingMapUVParam;\n  #endif\n  #if CC_RECEIVE_SHADOW || CC_USE_REFLECTION_PROBE\n    attribute vec4 a_localShadowBiasAndProbeId;\n  #endif\n  #if CC_USE_LIGHT_PROBE\n    attribute vec4 a_sh_linear_const_r;\n    attribute vec4 a_sh_linear_const_g;\n    attribute vec4 a_sh_linear_const_b;\n  #endif\n#endif\n#if CC_USE_MORPH\n    attribute float a_vertexId;\n#endif\nvarying highp vec3 v_worldPos;\nvarying mediump vec4 v_normal;\nvarying vec2 v_uv;\n#if CC_SURFACES_USE_VERTEX_COLOR\n  varying lowp vec4 v_color;\n#endif\n#if CC_SURFACES_USE_TANGENT_SPACE\n  varying mediump vec4 v_tangent;\n#endif\n#if CC_SURFACES_USE_SECOND_UV\n  varying mediump vec2 v_uv1;\n#endif\n#if CC_USE_LIGHTMAP && !CC_FORWARD_ADD\n  varying mediump vec3 v_luv;\n#endif\n#if CC_RECEIVE_SHADOW || CC_USE_REFLECTION_PROBE\n  varying mediump vec4 v_shadowBiasAndProbeId;\n#endif\n#if CC_USE_FOG != 4 && !CC_USE_ACCURATE_FOG\n  varying mediump float v_fogFactor;\n#endif\n#if CC_SURFACES_TRANSFER_LOCAL_POS\n  varying highp vec4 v_localPos;\n#endif\n#if CC_SURFACES_TRANSFER_CLIP_POS\n  varying highp vec4 v_clipPos;\n#endif\n#if CC_USE_LIGHT_PROBE\n  #if USE_INSTANCING\n    varying mediump vec4 v_sh_linear_const_r;\n    varying mediump vec4 v_sh_linear_const_g;\n    varying mediump vec4 v_sh_linear_const_b;\n  #endif\n#endif\n#define VSOutput_worldPos v_worldPos\n#define VSOutput_worldNormal v_normal.xyz\n#define VSOutput_faceSideSign v_normal.w\n#define VSOutput_texcoord v_uv\n#if CC_SURFACES_USE_VERTEX_COLOR\n  #define VSOutput_vertexColor v_color\n#endif\n#if CC_SURFACES_USE_TANGENT_SPACE\n  #define VSOutput_worldTangent v_tangent.xyz\n  #define VSOutput_mirrorNormal v_tangent.w\n#endif\n#if CC_SURFACES_USE_SECOND_UV\n  #define VSOutput_texcoord1 v_uv1\n#endif\n#if CC_USE_LIGHTMAP && !CC_FORWARD_ADD\n  #define VSOutput_lightMapUV v_luv\n#endif\n#if CC_RECEIVE_SHADOW\n  #define VSOutput_shadowBias v_shadowBiasAndProbeId.xy\n#endif\n#if CC_USE_REFLECTION_PROBE\n  #define VSOutput_reflectionProbeId v_shadowBiasAndProbeId.z\n#endif\n#if CC_USE_FOG != 4 && !CC_USE_ACCURATE_FOG\n  #define VSOutput_fogFactor v_fogFactor\n#endif\n#if CC_SURFACES_TRANSFER_LOCAL_POS\n  #define VSOutput_localPos v_localPos\n#endif\n#if CC_SURFACES_TRANSFER_CLIP_POS\n  #define VSOutput_clipPos v_clipPos\n#endif\nstruct SurfacesStandardVertexIntermediate\n{\n  highp vec4 position;\n  vec3 normal;\n#if CC_SURFACES_USE_TANGENT_SPACE\n  vec4 tangent;\n#endif\n#if CC_SURFACES_USE_VERTEX_COLOR\n  vec4 color;\n#endif\n  vec2 texCoord;\n#if CC_SURFACES_USE_SECOND_UV\n  vec2 texCoord1;\n#endif\n  highp vec4 clipPos;\n  highp vec3 worldPos;\n  vec4 worldNormal;\n  #if CC_SURFACES_USE_TANGENT_SPACE\n    vec3 worldTangent, worldBinormal;\n  #endif\n#if CC_RECEIVE_SHADOW || CC_USE_REFLECTION_PROBE\n  vec4 shadowBiasAndProbeId;\n#endif\n#if CC_USE_FOG != 4 && !CC_USE_ACCURATE_FOG\n  float fogFactor;\n#endif\n#if CC_USE_LIGHTMAP && !CC_FORWARD_ADD\n  vec3 lightmapUV;\n#endif\n};\n#if CC_USE_MORPH\n    int getVertexId() {\n      return int(a_vertexId);\n    }\n#endif\nuniform highp mat4 cc_matView;\n  uniform highp mat4 cc_matProj;\n  uniform highp vec4 cc_cameraPos;\n  uniform mediump vec4 cc_fogBase;\n  uniform mediump vec4 cc_fogAdd;\nuniform mediump vec4 cc_shadowWHPBInfo;\n  uniform mediump vec4 cc_shadowLPNNInfo;\n#define QUATER_PI         0.78539816340\n#define HALF_PI           1.57079632679\n#define PI                3.14159265359\n#define PI2               6.28318530718\n#define PI4               12.5663706144\n#define INV_QUATER_PI     1.27323954474\n#define INV_HALF_PI       0.63661977237\n#define INV_PI            0.31830988618\n#define INV_PI2           0.15915494309\n#define INV_PI4           0.07957747155\n#define EPSILON           1e-6\n#define EPSILON_LOWP      1e-4\n#define LOG2              1.442695\n#define EXP_VALUE         2.71828183f\n#define FP_MAX            65504.0\n#define FP_SCALE          0.0009765625\n#define FP_SCALE_INV      1024.0\n#define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\n#define LIGHT_MAP_TYPE_DISABLED 0\n#define LIGHT_MAP_TYPE_ALL_IN_ONE 1\n#define LIGHT_MAP_TYPE_INDIRECT_OCCLUSION 2\n#define REFLECTION_PROBE_TYPE_NONE 0\n#define REFLECTION_PROBE_TYPE_CUBE 1\n#define REFLECTION_PROBE_TYPE_PLANAR 2\n#define LIGHT_TYPE_DIRECTIONAL 0.0\n#define LIGHT_TYPE_POINT 1.0\n#define LIGHT_TYPE_SPOT 2.0\n#define LIGHT_TYPE_SPHERE 3.0\n#define LIGHT_TYPE_RANGED_DIRECTIONAL 4.0\n#define IS_DIRECTIONAL_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_DIRECTIONAL)) < EPSILON_LOWP)\n#define IS_SPHERE_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_SPHERE)) < EPSILON_LOWP)\n#define IS_SPOT_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_SPOT)) < EPSILON_LOWP)\n#define IS_POINT_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_POINT)) < EPSILON_LOWP)\n#define IS_RANGED_DIRECTIONAL_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_RANGED_DIRECTIONAL)) < EPSILON_LOWP)\nhighp float decode32 (highp vec4 rgba) {\n  rgba = rgba * 255.0;\n  highp float Sign = 1.0 - (step(128.0, (rgba[3]) + 0.5)) * 2.0;\n  highp float Exponent = 2.0 * (mod(float(int((rgba[3]) + 0.5)), 128.0)) + (step(128.0, (rgba[2]) + 0.5)) - 127.0;\n  highp float Mantissa = (mod(float(int((rgba[2]) + 0.5)), 128.0)) * 65536.0 + rgba[1] * 256.0 + rgba[0] + 8388608.0;\n  return Sign * exp2(Exponent - 23.0) * Mantissa;\n}\n#if !USE_INSTANCING\n  uniform highp mat4 cc_matWorld;\n  uniform highp mat4 cc_matWorldIT;\n  uniform highp vec4 cc_lightingMapUVParam;\n  uniform highp vec4 cc_localShadowBias;\n#endif\nvoid CCGetWorldMatrixFull(out mat4 matWorld, out mat4 matWorldIT)\n{\n  #if USE_INSTANCING\n    matWorld = mat4(\n      vec4(a_matWorld0.xyz, 0.0),\n      vec4(a_matWorld1.xyz, 0.0),\n      vec4(a_matWorld2.xyz, 0.0),\n      vec4(a_matWorld0.w, a_matWorld1.w, a_matWorld2.w, 1.0)\n    );\n    matWorldIT = matWorld;\n  #else\n    matWorld = cc_matWorld;\n    matWorldIT = cc_matWorldIT;\n  #endif\n}\n#if CC_USE_MORPH\n  uniform vec4 cc_displacementWeights[15];\n  uniform vec4 cc_displacementTextureInfo;\n  #if CC_MORPH_TARGET_HAS_POSITION\n    uniform sampler2D cc_PositionDisplacements;\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    uniform sampler2D cc_NormalDisplacements;\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    uniform sampler2D cc_TangentDisplacements;\n  #endif\n  vec2 getPixelLocation(vec2 textureResolution, int pixelIndex) {\n    float pixelIndexF = float(pixelIndex);\n    float x = mod(pixelIndexF, textureResolution.x);\n    float y = floor(pixelIndexF / textureResolution.x);\n    return vec2(x, y);\n  }\n  vec2 getPixelCoordFromLocation(vec2 location, vec2 textureResolution) {\n    return (vec2(location.x, location.y) + .5) / textureResolution;\n  }\n  #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n        int pixelIndex = elementIndex;\n        vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n        vec2 uv = getPixelCoordFromLocation(location, cc_displacementTextureInfo.xy);\n        return texture2D(tex, uv);\n      }\n  #else\n    vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n      int pixelIndex = elementIndex * 4;\n      vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n      vec2 x = getPixelCoordFromLocation(location + vec2(0.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 y = getPixelCoordFromLocation(location + vec2(1.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 z = getPixelCoordFromLocation(location + vec2(2.0, 0.0), cc_displacementTextureInfo.xy);\n      return vec4(\n        decode32(texture2D(tex, x)),\n        decode32(texture2D(tex, y)),\n        decode32(texture2D(tex, z)),\n        1.0\n      );\n    }\n  #endif\n  float getDisplacementWeight(int index) {\n    int quot = index / 4;\n    int remainder = index - quot * 4;\n    if (remainder == 0) {\n      return cc_displacementWeights[quot].x;\n    } else if (remainder == 1) {\n      return cc_displacementWeights[quot].y;\n    } else if (remainder == 2) {\n      return cc_displacementWeights[quot].z;\n    } else {\n      return cc_displacementWeights[quot].w;\n    }\n  }\n  vec3 getVec3DisplacementFromTexture(sampler2D tex, int vertexIndex) {\n  #if CC_MORPH_PRECOMPUTED\n    return fetchVec3ArrayFromTexture(tex, vertexIndex).rgb;\n  #else\n    vec3 result = vec3(0, 0, 0);\n    int nVertices = int(cc_displacementTextureInfo.z);\n    for (int iTarget = 0; iTarget < CC_MORPH_TARGET_COUNT; ++iTarget) {\n      result += (fetchVec3ArrayFromTexture(tex, nVertices * iTarget + vertexIndex).rgb * getDisplacementWeight(iTarget));\n    }\n    return result;\n  #endif\n  }\n  #if CC_MORPH_TARGET_HAS_POSITION\n  vec3 getPositionDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_PositionDisplacements, vertexId);\n  }\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n  vec3 getNormalDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_NormalDisplacements, vertexId);\n  }\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n  vec3 getTangentDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_TangentDisplacements, vertexId);\n  }\n  #endif\n  void applyMorph (inout vec4 position, inout vec3 normal, inout vec4 tangent) {\n    int vertexId = getVertexId();\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    normal.xyz = normal.xyz + getNormalDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    tangent.xyz = tangent.xyz + getTangentDisplacement(vertexId);\n  #endif\n  }\n  void applyMorph (inout vec4 position) {\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(getVertexId());\n  #endif\n  }\n#endif\n#if CC_USE_SKINNING\n  #if CC_USE_BAKED_ANIMATION\n    uniform highp vec4 cc_jointTextureInfo;\n    uniform highp vec4 cc_jointAnimInfo;\n    uniform highp sampler2D cc_jointTexture;\n    void CCGetJointTextureCoords(float pixelsPerJoint, float jointIdx, out highp float x, out highp float y, out highp float invSize)\n    {\n      #if USE_INSTANCING\n        highp float temp = pixelsPerJoint * (a_jointAnimInfo.x * a_jointAnimInfo.y + jointIdx) + a_jointAnimInfo.z;\n      #else\n        highp float temp = pixelsPerJoint * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + jointIdx) + cc_jointTextureInfo.z;\n      #endif\n      invSize = cc_jointTextureInfo.w;\n      highp float tempY = floor(temp * invSize);\n      x = floor(temp - tempY * cc_jointTextureInfo.x);\n      y = (tempY + 0.5) * invSize;\n    }\n  #else\n    #if CC_USE_REAL_TIME_JOINT_TEXTURE\n      uniform highp sampler2D cc_realtimeJoint;\n    #else\n      uniform highp vec4 cc_joints[CC_JOINT_UNIFORM_CAPACITY * 3];\n    #endif\n  #endif\n  #if CC_USE_BAKED_ANIMATION\n    #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      mat4 getJointMatrix (float i) {\n        highp float x, y, invSize;\n        CCGetJointTextureCoords(3.0, i, x, y, invSize);\n        vec4 v1 = texture2D(cc_jointTexture, vec2((x + 0.5) * invSize, y));\n        vec4 v2 = texture2D(cc_jointTexture, vec2((x + 1.5) * invSize, y));\n        vec4 v3 = texture2D(cc_jointTexture, vec2((x + 2.5) * invSize, y));\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #else\n      mat4 getJointMatrix (float i) {\n        highp float x, y, invSize;\n        CCGetJointTextureCoords(12.0, i, x, y, invSize);\n        vec4 v1 = vec4(\n          decode32(texture2D(cc_jointTexture, vec2((x + 0.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 1.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 2.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 3.5) * invSize, y)))\n        );\n        vec4 v2 = vec4(\n          decode32(texture2D(cc_jointTexture, vec2((x + 4.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 5.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 6.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 7.5) * invSize, y)))\n        );\n        vec4 v3 = vec4(\n          decode32(texture2D(cc_jointTexture, vec2((x + 8.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 9.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 10.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 11.5) * invSize, y)))\n        );\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #else\n    #if CC_USE_REAL_TIME_JOINT_TEXTURE\n      #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n        mat4 getJointMatrix (float i) {\n          float x = i;\n          vec4 v1 = texture2D(cc_realtimeJoint, vec2( x / 256.0, 0.5 / 3.0));\n          vec4 v2 = texture2D(cc_realtimeJoint, vec2( x / 256.0, 1.5 / 3.0));\n          vec4 v3 = texture2D(cc_realtimeJoint, vec2( x / 256.0, 2.5 / 3.0));\n          return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n        }\n      #else\n        mat4 getJointMatrix (float i) {\n         float x = 4.0 * i;\n          vec4 v1 = vec4(\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 0.5)/ 1024.0, 0.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 1.5)/ 1024.0, 0.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 2.5)/ 1024.0, 0.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 3.5)/ 1024.0, 0.5 / 3.0)))\n          );\n          vec4 v2 = vec4(\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 0.5)/ 1024.0, 1.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 1.5)/ 1024.0, 1.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 2.5)/ 1024.0, 1.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 3.5)/ 1024.0, 1.5 / 3.0)))\n          );\n          vec4 v3 = vec4(\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 0.5)/ 1024.0, 2.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 1.5)/ 1024.0, 2.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 2.5)/ 1024.0, 2.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 3.5)/ 1024.0, 2.5 / 3.0)))\n          );\n          return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n        }\n      #endif\n    #else\n      mat4 getJointMatrix (float i) {\n        int idx = int(i);\n        vec4 v1 = cc_joints[idx * 3];\n        vec4 v2 = cc_joints[idx * 3 + 1];\n        vec4 v3 = cc_joints[idx * 3 + 2];\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #endif\n  mat4 skinMatrix () {\n    vec4 joints = vec4(a_joints);\n    return getJointMatrix(joints.x) * a_weights.x\n         + getJointMatrix(joints.y) * a_weights.y\n         + getJointMatrix(joints.z) * a_weights.z\n         + getJointMatrix(joints.w) * a_weights.w;\n  }\n  void CCSkin (inout vec4 position) {\n    mat4 m = skinMatrix();\n    position = m * position;\n  }\n  void CCSkin (inout vec4 position, inout vec3 normal, inout vec4 tangent) {\n    mat4 m = skinMatrix();\n    position = m * position;\n    normal = (m * vec4(normal, 0.0)).xyz;\n    tangent.xyz = (m * vec4(tangent.xyz, 0.0)).xyz;\n  }\n#endif\n#if CC_USE_FOG != 4 && !CC_USE_ACCURATE_FOG\n  #if CC_USE_FOG != 4\n    float LinearFog(vec4 pos, vec3 cameraPos, float fogStart, float fogEnd) {\n        vec4 wPos = pos;\n        float cam_dis = distance(cameraPos, wPos.xyz);\n        return clamp((fogEnd - cam_dis) / (fogEnd - fogStart), 0., 1.);\n    }\n    float ExpFog(vec4 pos, vec3 cameraPos, float fogStart, float fogDensity, float fogAtten) {\n        vec4 wPos = pos;\n        float cam_dis = max(distance(cameraPos, wPos.xyz) - fogStart, 0.0) / fogAtten * 4.;\n        float f = exp(-cam_dis * fogDensity);\n        return f;\n    }\n    float ExpSquaredFog(vec4 pos, vec3 cameraPos, float fogStart, float fogDensity, float fogAtten) {\n        vec4 wPos = pos;\n        float cam_dis = max(distance(cameraPos, wPos.xyz) - fogStart, 0.0) / fogAtten * 4.;\n        float f = exp(-cam_dis * cam_dis * fogDensity * fogDensity);\n        return f;\n    }\n    float LayeredFog(vec4 pos, vec3 cameraPos, float fogTop, float fogRange, float fogAtten) {\n        vec4 wPos = pos;\n        vec3 camWorldProj = cameraPos.xyz;\n        camWorldProj.y = 0.;\n        vec3 worldPosProj = wPos.xyz;\n        worldPosProj.y = 0.;\n        float fDeltaD = distance(worldPosProj, camWorldProj) / fogAtten * 2.0;\n        float fDeltaY, fDensityIntegral;\n        if (cameraPos.y > fogTop) {\n            if (wPos.y < fogTop) {\n                fDeltaY = (fogTop - wPos.y) / fogRange * 2.0;\n                fDensityIntegral = fDeltaY * fDeltaY * 0.5;\n            }\n            else {\n                fDeltaY = 0.;\n                fDensityIntegral = 0.;\n            }\n        }\n        else {\n            if (wPos.y < fogTop) {\n                float fDeltaA = (fogTop - cameraPos.y) / fogRange * 2.;\n                float fDeltaB = (fogTop - wPos.y) / fogRange * 2.;\n                fDeltaY = abs(fDeltaA - fDeltaB);\n                fDensityIntegral = abs((fDeltaA * fDeltaA * 0.5) - (fDeltaB * fDeltaB * 0.5));\n            }\n            else {\n                fDeltaY = abs(fogTop - cameraPos.y) / fogRange * 2.;\n                fDensityIntegral = abs(fDeltaY * fDeltaY * 0.5);\n            }\n        }\n        float fDensity;\n        if (fDeltaY != 0.) {\n            fDensity = (sqrt(1.0 + ((fDeltaD / fDeltaY) * (fDeltaD / fDeltaY)))) * fDensityIntegral;\n        }\n        else {\n            fDensity = 0.;\n        }\n        float f = exp(-fDensity);\n        return f;\n    }\n  #endif\n  void CC_TRANSFER_FOG_BASE(vec4 pos, out float factor)\n  {\n  #if CC_USE_FOG == 0\n  \tfactor = LinearFog(pos, cc_cameraPos.xyz, cc_fogBase.x, cc_fogBase.y);\n  #elif CC_USE_FOG == 1\n  \tfactor = ExpFog(pos, cc_cameraPos.xyz, cc_fogBase.x, cc_fogBase.z, cc_fogAdd.z);\n  #elif CC_USE_FOG == 2\n  \tfactor = ExpSquaredFog(pos, cc_cameraPos.xyz, cc_fogBase.x, cc_fogBase.z, cc_fogAdd.z);\n  #elif CC_USE_FOG == 3\n  \tfactor = LayeredFog(pos, cc_cameraPos.xyz, cc_fogAdd.x, cc_fogAdd.y, cc_fogAdd.z);\n  #else\n  \tfactor = 1.0;\n  #endif\n  }\n#endif\n    uniform vec4 tilingOffset;\n#define CC_SURFACES_VERTEX_MODIFY_UV\nvoid SurfacesVertexModifyUV(inout SurfacesStandardVertexIntermediate In)\n{\n  In.texCoord = In.texCoord * tilingOffset.xy + tilingOffset.zw;\n#if CC_SURFACES_USE_SECOND_UV\n  In.texCoord1 = In.texCoord1 * tilingOffset.xy + tilingOffset.zw;\n#endif\n}\n#ifndef CC_SURFACES_VERTEX_MODIFY_LOCAL_POS\nvec3 SurfacesVertexModifyLocalPos(in SurfacesStandardVertexIntermediate In)\n{\n  return In.position.xyz;\n}\n#endif\n#ifndef CC_SURFACES_VERTEX_MODIFY_LOCAL_NORMAL\nvec3 SurfacesVertexModifyLocalNormal(in SurfacesStandardVertexIntermediate In)\n{\n  return In.normal.xyz;\n}\n#endif\n#ifndef CC_SURFACES_VERTEX_MODIFY_LOCAL_TANGENT\n  #if CC_SURFACES_USE_TANGENT_SPACE\n  vec4 SurfacesVertexModifyLocalTangent(in SurfacesStandardVertexIntermediate In)\n    {\n      return In.tangent;\n    }\n  #endif\n#endif\n#ifndef CC_SURFACES_VERTEX_MODIFY_LOCAL_SHARED_DATA\nvoid SurfacesVertexModifyLocalSharedData(inout SurfacesStandardVertexIntermediate In)\n{\n}\n#endif\n#ifndef CC_SURFACES_VERTEX_MODIFY_WORLD_POS\nvec3 SurfacesVertexModifyWorldPos(in SurfacesStandardVertexIntermediate In)\n{\n  return In.worldPos;\n}\n#endif\n#ifndef CC_SURFACES_VERTEX_MODIFY_CLIP_POS\nvec4 SurfacesVertexModifyClipPos(in SurfacesStandardVertexIntermediate In)\n{\n  return In.clipPos;\n}\n#endif\n#ifndef CC_SURFACES_VERTEX_MODIFY_UV\nvoid SurfacesVertexModifyUV(inout SurfacesStandardVertexIntermediate In)\n{\n}\n#endif\n#ifndef CC_SURFACES_VERTEX_MODIFY_WORLD_NORMAL\nvec3 SurfacesVertexModifyWorldNormal(in SurfacesStandardVertexIntermediate In)\n{\n    vec3 worldNormal = In.worldNormal.xyz;\n  #if CC_SURFACES_USE_TWO_SIDED\n      worldNormal.xyz *= In.worldNormal.w;\n  #endif\n  return worldNormal;\n}\n#endif\n#ifndef CC_SURFACES_VERTEX_MODIFY_SHARED_DATA\nvoid SurfacesVertexModifySharedData(inout SurfacesStandardVertexIntermediate In)\n{\n}\n#endif\nvoid CCSurfacesVertexInput(out SurfacesStandardVertexIntermediate In)\n{\n  In.position = vec4(a_position, 1.0);\n  In.normal = a_normal;\n#if CC_SURFACES_USE_TANGENT_SPACE\n  In.tangent = a_tangent;\n#endif\n#if CC_SURFACES_USE_VERTEX_COLOR\n  In.color = a_color;\n#endif\n  In.texCoord = a_texCoord;\n#if CC_SURFACES_USE_SECOND_UV\n  In.texCoord1 = a_texCoord1;\n#endif\n}\nvoid CCSurfacesVertexOutput(in SurfacesStandardVertexIntermediate In)\n{\n  gl_Position = In.clipPos;\n  VSOutput_worldNormal = In.worldNormal.xyz;\n  VSOutput_faceSideSign = In.worldNormal.w;\n  VSOutput_worldPos = In.worldPos;\n#if CC_SURFACES_USE_TANGENT_SPACE\n  VSOutput_worldTangent = In.worldTangent.xyz;\n  VSOutput_mirrorNormal = In.tangent.w > 0.0 ? 1.0 : -1.0;\n#endif\n#if CC_SURFACES_USE_VERTEX_COLOR\n  VSOutput_vertexColor = In.color;\n#endif\n  VSOutput_texcoord = In.texCoord;\n#if CC_SURFACES_USE_SECOND_UV\n  VSOutput_texcoord1 = In.texCoord1;\n#endif\n#if CC_USE_FOG != 4 && !CC_USE_ACCURATE_FOG\n  VSOutput_fogFactor = In.fogFactor;\n#endif\n#if CC_RECEIVE_SHADOW\n  VSOutput_shadowBias = In.shadowBiasAndProbeId.xy;\n#endif\n#if CC_USE_REFLECTION_PROBE\n  VSOutput_reflectionProbeId = In.shadowBiasAndProbeId.z;\n#endif\n#if CC_USE_LIGHTMAP && !CC_FORWARD_ADD\n  VSOutput_lightMapUV = In.lightmapUV;\n#endif\n#if CC_SURFACES_TRANSFER_LOCAL_POS\n  VSOutput_localPos = In.position;\n#endif\n#if CC_SURFACES_TRANSFER_CLIP_POS\n  VSOutput_clipPos = In.clipPos;\n#endif\n#if CC_USE_LIGHT_PROBE\n  #if USE_INSTANCING\n    v_sh_linear_const_r = a_sh_linear_const_r;\n    v_sh_linear_const_g = a_sh_linear_const_g;\n    v_sh_linear_const_b = a_sh_linear_const_b;\n  #endif\n#endif\n}\nvoid CCSurfacesVertexAnimation(inout SurfacesStandardVertexIntermediate In)\n{\nvec4 temp = vec4(0.0);\n#if CC_USE_MORPH\n  #if CC_SURFACES_USE_TANGENT_SPACE\n    applyMorph(In.position, In.normal, In.tangent);\n  #else\n    applyMorph(In.position, In.normal, temp);\n  #endif\n#endif\n#if CC_USE_SKINNING\n  #if CC_SURFACES_USE_TANGENT_SPACE\n    CCSkin(In.position, In.normal, In.tangent);\n  #else\n    CCSkin(In.position, In.normal, temp);\n  #endif\n#endif\n}\nvoid CCSurfacesVertexWorldTransform(inout SurfacesStandardVertexIntermediate In)\n{\n    mat4 matWorld, matWorldIT;\n    CCGetWorldMatrixFull(matWorld, matWorldIT);\n    In.worldPos = (matWorld * In.position).xyz;\n    In.worldNormal.xyz = normalize((matWorldIT * vec4(In.normal.xyz, 0.0)).xyz);\n    #if CC_SURFACES_USE_TANGENT_SPACE\n      In.worldTangent = normalize((matWorld * vec4(In.tangent.xyz, 0.0)).xyz);\n      In.worldBinormal = cross(In.worldNormal.xyz, In.worldTangent) * In.tangent.w;\n    #endif\n}\nvoid CCSurfacesVertexTransformUV(inout SurfacesStandardVertexIntermediate In)\n{\n  #if CC_SURFACES_FLIP_UV\n    In.texCoord = cc_cameraPos.w > 1.0 ? vec2(In.texCoord.x, 1.0 - In.texCoord.y) : In.texCoord;\n    #if CC_SURFACES_USE_SECOND_UV\n      In.texCoord1 = cc_cameraPos.w > 1.0 ? vec2(In.texCoord1.x, 1.0 - In.texCoord1.y) : In.texCoord1;\n    #endif\n  #endif\n}\nvoid CCSurfacesVertexTransferFog(inout SurfacesStandardVertexIntermediate In)\n{\n#if CC_USE_FOG != 4 && !CC_USE_ACCURATE_FOG\n    CC_TRANSFER_FOG_BASE(vec4(In.worldPos, 1.0), In.fogFactor);\n#endif\n}\nvoid CCSurfacesVertexTransferShadow(inout SurfacesStandardVertexIntermediate In)\n{\n  #if CC_RECEIVE_SHADOW || CC_USE_REFLECTION_PROBE\n    In.shadowBiasAndProbeId = vec4(0.0);\n  #endif\n  #if CC_RECEIVE_SHADOW\n    In.shadowBiasAndProbeId.xy = vec2(cc_shadowWHPBInfo.w, cc_shadowLPNNInfo.z);\n    #if USE_INSTANCING\n      In.shadowBiasAndProbeId.xy += a_localShadowBiasAndProbeId.xy;\n    #else\n      In.shadowBiasAndProbeId.xy += cc_localShadowBias.xy;\n    #endif\n  #endif\n  #if CC_USE_REFLECTION_PROBE\n    #if USE_INSTANCING\n      In.shadowBiasAndProbeId.zw = a_localShadowBiasAndProbeId.zw;\n    #else\n      In.shadowBiasAndProbeId.zw = cc_localShadowBias.zw;\n    #endif\n  #endif\n}\nvoid CCSurfacesVertexTransferLightMapUV(inout SurfacesStandardVertexIntermediate In)\n{\n#if CC_USE_LIGHTMAP && !CC_FORWARD_ADD\n  #if USE_INSTANCING\n    In.lightmapUV.xy = a_lightingMapUVParam.xy + a_texCoord1 * a_lightingMapUVParam.z;\n    In.lightmapUV.z = a_lightingMapUVParam.w;\n  #else\n    In.lightmapUV.xy = cc_lightingMapUVParam.xy + a_texCoord1 * cc_lightingMapUVParam.z;\n    In.lightmapUV.z = cc_lightingMapUVParam.w;\n  #endif\n#endif\n}\nvoid main()\n{\n  SurfacesStandardVertexIntermediate In;\n  CCSurfacesVertexInput(In);\n  CCSurfacesVertexAnimation(In);\n  In.position.xyz = SurfacesVertexModifyLocalPos(In);\n  In.normal.xyz = SurfacesVertexModifyLocalNormal(In);\n  #if CC_SURFACES_USE_TANGENT_SPACE\n    In.tangent = SurfacesVertexModifyLocalTangent(In);\n  #endif\n  SurfacesVertexModifyLocalSharedData(In);\n  CCSurfacesVertexWorldTransform(In);\n  In.worldPos = SurfacesVertexModifyWorldPos(In);\n  In.clipPos = cc_matProj * cc_matView * vec4(In.worldPos, 1.0);\n  In.clipPos = SurfacesVertexModifyClipPos(In);\n  vec3 viewDirect = normalize(cc_cameraPos.xyz - In.worldPos);\n  In.worldNormal.w = dot(In.worldNormal.xyz, viewDirect) < 0.0 ? -1.0 : 1.0;\n  In.worldNormal.xyz = SurfacesVertexModifyWorldNormal(In);\n  SurfacesVertexModifyUV(In);\n  SurfacesVertexModifySharedData(In);\n  CCSurfacesVertexTransformUV(In);\n  CCSurfacesVertexTransferFog(In);\n  CCSurfacesVertexTransferShadow(In);\n  CCSurfacesVertexTransferLightMapUV(In);\n  CCSurfacesVertexOutput(In);\n}","frag":"\n#ifdef GL_EXT_draw_buffers\n#extension GL_EXT_draw_buffers: enable\n#endif\n#ifdef GL_OES_standard_derivatives\n#extension GL_OES_standard_derivatives: enable\n#endif\n#ifdef GL_EXT_shader_texture_lod\n#extension GL_EXT_shader_texture_lod: enable\n#endif\nprecision highp float;\n  #define CC_SURFACES_USE_SECOND_UV HAS_SECOND_UV\n  #define CC_SURFACES_USE_TWO_SIDED USE_TWOSIDE\n  #define CC_SURFACES_USE_REFLECTION_DENOISE USE_REFLECTION_DENOISE\n  #define CC_SURFACES_LIGHTING_ANISOTROPIC IS_ANISOTROPY\n  #define CC_SURFACES_USE_VERTEX_COLOR USE_VERTEX_COLOR\n  #define CC_SURFACES_USE_LEGACY_COMPATIBLE_LIGHTING USE_COMPATIBLE_LIGHTING\n#if IS_ANISOTROPY || USE_NORMAL_MAP\n  #define CC_SURFACES_USE_TANGENT_SPACE 1\n#endif\n  #define CC_SURFACES_LIGHTING_ANISOTROPIC_ENVCONVOLUTION_COUNT 31\n#ifndef CC_SURFACES_USE_SECOND_UV\n  #define CC_SURFACES_USE_SECOND_UV 0\n#endif\n#ifndef CC_SURFACES_USE_TANGENT_SPACE\n  #define CC_SURFACES_USE_TANGENT_SPACE 0\n#endif\n#ifndef CC_SURFACES_USE_VERTEX_COLOR\n  #define CC_SURFACES_USE_VERTEX_COLOR 0\n#endif\n#ifndef CC_SURFACES_TRANSFER_LOCAL_POS\n  #define CC_SURFACES_TRANSFER_LOCAL_POS 0\n#endif\n#ifndef CC_SURFACES_TRANSFER_CLIP_POS\n  #define CC_SURFACES_TRANSFER_CLIP_POS 0\n#endif\n#ifndef CC_SURFACES_USE_LIGHT_MAP\n  #ifdef CC_USE_LIGHTMAP\n    #define CC_SURFACES_USE_LIGHT_MAP CC_USE_LIGHTMAP\n  #else\n    #define CC_SURFACES_USE_LIGHT_MAP 0\n  #endif\n#endif\n#ifndef CC_SURFACES_FLIP_UV\n  #define CC_SURFACES_FLIP_UV 0\n#endif\n#ifndef CC_SURFACES_USE_TWO_SIDED\n  #define CC_SURFACES_USE_TWO_SIDED 0\n#endif\n#ifndef CC_SURFACES_USE_REFLECTION_DENOISE\n  #define CC_SURFACES_USE_REFLECTION_DENOISE 0\n#endif\n#ifndef CC_SURFACES_LIGHTING_ANISOTROPIC\n  #define CC_SURFACES_LIGHTING_ANISOTROPIC 0\n#endif\n#ifndef CC_SURFACES_LIGHTING_ANISOTROPIC_ENVCONVOLUTION_COUNT\n  #define CC_SURFACES_LIGHTING_ANISOTROPIC_ENVCONVOLUTION_COUNT 0\n#endif\n#ifndef CC_SURFACES_USE_LEGACY_COMPATIBLE_LIGHTING\n  #define CC_SURFACES_USE_LEGACY_COMPATIBLE_LIGHTING 0\n#endif\n#ifndef CC_SURFACES_LIGHTING_USE_FRESNEL\n  #define CC_SURFACES_LIGHTING_USE_FRESNEL 0\n#endif\n#ifndef CC_SURFACES_LIGHTING_TRANSMIT_SPECULAR\n  #define CC_SURFACES_LIGHTING_TRANSMIT_SPECULAR 0\n#endif\n#ifndef CC_SURFACES_LIGHTING_TRANSMIT_DIFFUSE\n  #define CC_SURFACES_LIGHTING_TRANSMIT_DIFFUSE 0\n#endif\n#ifndef CC_SURFACES_LIGHTING_USE_SHADOWMAP_TRANSMIT\n  #define CC_SURFACES_LIGHTING_USE_SHADOWMAP_TRANSMIT 0\n#endif\n#ifndef CC_SURFACES_LIGHTING_TRT\n  #define CC_SURFACES_LIGHTING_TRT 0\n#endif\n#ifndef CC_SURFACES_LIGHTING_TT\n  #define CC_SURFACES_LIGHTING_TT 0\n#endif\n#ifndef CC_SURFACES_ENABLE_DEBUG_VIEW\n  #define CC_SURFACES_ENABLE_DEBUG_VIEW 1\n#endif\n#ifndef CC_SURFACES_LIGHTING_CALCULATE_DIFFUSE\n  #define CC_SURFACES_LIGHTING_CALCULATE_DIFFUSE 1\n#endif\n#ifndef CC_SURFACES_LIGHTING_CALCULATE_SPECULAR\n  #define CC_SURFACES_LIGHTING_CALCULATE_SPECULAR 1\n#endif\n#define CC_USE_SURFACE_SHADER 1\nvarying highp vec3 v_worldPos;\nvarying mediump vec4 v_normal;\nvarying vec2 v_uv;\n#if CC_SURFACES_USE_VERTEX_COLOR\n  varying lowp vec4 v_color;\n#endif\n#if CC_SURFACES_USE_TANGENT_SPACE\n  varying mediump vec4 v_tangent;\n#endif\n#if CC_SURFACES_USE_SECOND_UV\n  varying mediump vec2 v_uv1;\n#endif\n#if CC_USE_LIGHTMAP && !CC_FORWARD_ADD\n  varying mediump vec3 v_luv;\n#endif\n#if CC_RECEIVE_SHADOW || CC_USE_REFLECTION_PROBE\n  varying mediump vec4 v_shadowBiasAndProbeId;\n#endif\n#if CC_USE_FOG != 4 && !CC_USE_ACCURATE_FOG\n  varying mediump float v_fogFactor;\n#endif\n#if CC_SURFACES_TRANSFER_LOCAL_POS\n  varying highp vec4 v_localPos;\n#endif\n#if CC_SURFACES_TRANSFER_CLIP_POS\n  varying highp vec4 v_clipPos;\n#endif\n#if CC_USE_LIGHT_PROBE\n  #if USE_INSTANCING\n    varying mediump vec4 v_sh_linear_const_r;\n    varying mediump vec4 v_sh_linear_const_g;\n    varying mediump vec4 v_sh_linear_const_b;\n  #endif\n#endif\n#define FSInput_worldPos v_worldPos\n#define FSInput_worldNormal v_normal.xyz\n#define FSInput_faceSideSign v_normal.w\n#define FSInput_texcoord v_uv\n#if CC_SURFACES_USE_VERTEX_COLOR\n  #define FSInput_vertexColor v_color\n#else\n  #define FSInput_vertexColor vec4(1.0)\n#endif\n#if CC_SURFACES_USE_TANGENT_SPACE\n  #define FSInput_worldTangent v_tangent.xyz\n  #define FSInput_mirrorNormal v_tangent.w\n#else\n  #define FSInput_worldTangent vec3(0.0, 0.0, 0.0)\n  #define FSInput_mirrorNormal 1.0\n#endif\n#if CC_SURFACES_USE_SECOND_UV\n  #define FSInput_texcoord1 v_uv1\n#else\n  #define FSInput_texcoord1 vec2(0.0, 0.0)\n#endif\n#if CC_USE_LIGHTMAP && !CC_FORWARD_ADD\n  #define FSInput_lightMapUV v_luv\n#endif\n#if CC_RECEIVE_SHADOW\n  #define FSInput_shadowBias v_shadowBiasAndProbeId.xy\n#endif\n#if CC_USE_REFLECTION_PROBE\n  #define FSInput_reflectionProbeId v_shadowBiasAndProbeId.z\n#endif\n#if CC_USE_FOG != 4 && !CC_USE_ACCURATE_FOG\n  #define FSInput_fogFactor v_fogFactor\n#endif\n#if CC_SURFACES_TRANSFER_LOCAL_POS\n  #define FSInput_localPos v_localPos\n#endif\n#if CC_SURFACES_TRANSFER_CLIP_POS\n  #define FSInput_clipPos v_clipPos\n#endif\nuniform highp vec4 cc_time;\n  uniform mediump vec4 cc_probeInfo;\n  uniform mediump vec4 cc_debug_view_mode;\nuniform highp mat4 cc_matView;\n  uniform highp mat4 cc_matProj;\n  uniform highp mat4 cc_matViewProj;\n  uniform highp vec4 cc_cameraPos;\n  uniform mediump vec4 cc_surfaceTransform;\n  uniform mediump vec4 cc_exposure;\n  uniform mediump vec4 cc_mainLitDir;\n  uniform mediump vec4 cc_mainLitColor;\n  uniform mediump vec4 cc_ambientSky;\n  uniform mediump vec4 cc_ambientGround;\n  uniform mediump vec4 cc_fogColor;\n  uniform mediump vec4 cc_fogBase;\n  uniform mediump vec4 cc_fogAdd;\n  uniform mediump vec4 cc_nearFar;\n#define CC_SURFACES_DEBUG_VIEW_VERTEX_COLOR 1\n#define CC_SURFACES_DEBUG_VIEW_VERTEX_NORMAL CC_SURFACES_DEBUG_VIEW_VERTEX_COLOR + 1\n#define CC_SURFACES_DEBUG_VIEW_VERTEX_TANGENT CC_SURFACES_DEBUG_VIEW_VERTEX_NORMAL + 1\n#define CC_SURFACES_DEBUG_VIEW_WORLD_POS CC_SURFACES_DEBUG_VIEW_VERTEX_TANGENT + 1\n#define CC_SURFACES_DEBUG_VIEW_VERTEX_MIRROR CC_SURFACES_DEBUG_VIEW_WORLD_POS + 1\n#define CC_SURFACES_DEBUG_VIEW_FACE_SIDE CC_SURFACES_DEBUG_VIEW_VERTEX_MIRROR + 1\n#define CC_SURFACES_DEBUG_VIEW_UV0 CC_SURFACES_DEBUG_VIEW_FACE_SIDE + 1\n#define CC_SURFACES_DEBUG_VIEW_UV1 CC_SURFACES_DEBUG_VIEW_UV0 + 1\n#define CC_SURFACES_DEBUG_VIEW_UVLIGHTMAP CC_SURFACES_DEBUG_VIEW_UV1 + 1\n#define CC_SURFACES_DEBUG_VIEW_PROJ_DEPTH CC_SURFACES_DEBUG_VIEW_UVLIGHTMAP + 1\n#define CC_SURFACES_DEBUG_VIEW_LINEAR_DEPTH CC_SURFACES_DEBUG_VIEW_PROJ_DEPTH + 1\n#define CC_SURFACES_DEBUG_VIEW_FRAGMENT_NORMAL CC_SURFACES_DEBUG_VIEW_LINEAR_DEPTH + 1\n#define CC_SURFACES_DEBUG_VIEW_FRAGMENT_TANGENT CC_SURFACES_DEBUG_VIEW_FRAGMENT_NORMAL + 1\n#define CC_SURFACES_DEBUG_VIEW_FRAGMENT_BINORMAL CC_SURFACES_DEBUG_VIEW_FRAGMENT_TANGENT + 1\n#define CC_SURFACES_DEBUG_VIEW_BASE_COLOR CC_SURFACES_DEBUG_VIEW_FRAGMENT_BINORMAL + 1\n#define CC_SURFACES_DEBUG_VIEW_DIFFUSE_COLOR CC_SURFACES_DEBUG_VIEW_BASE_COLOR + 1\n#define CC_SURFACES_DEBUG_VIEW_SPECULAR_COLOR CC_SURFACES_DEBUG_VIEW_DIFFUSE_COLOR + 1\n#define CC_SURFACES_DEBUG_VIEW_TRANSPARENCY CC_SURFACES_DEBUG_VIEW_SPECULAR_COLOR + 1\n#define CC_SURFACES_DEBUG_VIEW_METALLIC CC_SURFACES_DEBUG_VIEW_TRANSPARENCY + 1\n#define CC_SURFACES_DEBUG_VIEW_ROUGHNESS CC_SURFACES_DEBUG_VIEW_METALLIC + 1\n#define CC_SURFACES_DEBUG_VIEW_SPECULAR_INTENSITY CC_SURFACES_DEBUG_VIEW_ROUGHNESS + 1\n#define CC_SURFACES_DEBUG_VIEW_IOR CC_SURFACES_DEBUG_VIEW_SPECULAR_INTENSITY + 1\n#define CC_SURFACES_DEBUG_VIEW_DIRECT_DIFFUSE CC_SURFACES_DEBUG_VIEW_IOR + 1\n#define CC_SURFACES_DEBUG_VIEW_DIRECT_SPECULAR CC_SURFACES_DEBUG_VIEW_DIRECT_DIFFUSE + 1\n#define CC_SURFACES_DEBUG_VIEW_DIRECT_ALL CC_SURFACES_DEBUG_VIEW_DIRECT_SPECULAR + 1\n#define CC_SURFACES_DEBUG_VIEW_ENV_DIFFUSE CC_SURFACES_DEBUG_VIEW_DIRECT_ALL + 1\n#define CC_SURFACES_DEBUG_VIEW_ENV_SPECULAR CC_SURFACES_DEBUG_VIEW_ENV_DIFFUSE + 1\n#define CC_SURFACES_DEBUG_VIEW_ENV_ALL CC_SURFACES_DEBUG_VIEW_ENV_SPECULAR + 1\n#define CC_SURFACES_DEBUG_VIEW_EMISSIVE CC_SURFACES_DEBUG_VIEW_ENV_ALL + 1\n#define CC_SURFACES_DEBUG_VIEW_LIGHT_MAP CC_SURFACES_DEBUG_VIEW_EMISSIVE + 1\n#define CC_SURFACES_DEBUG_VIEW_SHADOW CC_SURFACES_DEBUG_VIEW_LIGHT_MAP + 1\n#define CC_SURFACES_DEBUG_VIEW_AO CC_SURFACES_DEBUG_VIEW_SHADOW + 1\n#define CC_SURFACES_DEBUG_VIEW_FRESNEL CC_SURFACES_DEBUG_VIEW_AO + 1\n#define CC_SURFACES_DEBUG_VIEW_TRANSMIT_DIRECT_DIFFUSE CC_SURFACES_DEBUG_VIEW_FRESNEL + 1\n#define CC_SURFACES_DEBUG_VIEW_TRANSMIT_DIRECT_SPECULAR CC_SURFACES_DEBUG_VIEW_TRANSMIT_DIRECT_DIFFUSE + 1\n#define CC_SURFACES_DEBUG_VIEW_TRANSMIT_ENV_DIFFUSE CC_SURFACES_DEBUG_VIEW_TRANSMIT_DIRECT_SPECULAR + 1\n#define CC_SURFACES_DEBUG_VIEW_TRANSMIT_ENV_SPECULAR CC_SURFACES_DEBUG_VIEW_TRANSMIT_ENV_DIFFUSE + 1\n#define CC_SURFACES_DEBUG_VIEW_TRANSMIT_ALL CC_SURFACES_DEBUG_VIEW_TRANSMIT_ENV_SPECULAR + 1\n#define CC_SURFACES_DEBUG_VIEW_TRT_DIRECT CC_SURFACES_DEBUG_VIEW_TRANSMIT_ALL + 1\n#define CC_SURFACES_DEBUG_VIEW_TRT_ENVIRONMENT CC_SURFACES_DEBUG_VIEW_TRT_DIRECT + 1\n#define CC_SURFACES_DEBUG_VIEW_TRT_ALL CC_SURFACES_DEBUG_VIEW_TRT_ENVIRONMENT + 1\n#define CC_SURFACES_DEBUG_VIEW_FOG CC_SURFACES_DEBUG_VIEW_TRT_ALL + 1\n#define CC_SURFACES_DEBUG_VIEW_SINGLE 1\n#define CC_SURFACES_DEBUG_VIEW_COMPOSITE_AND_MISC 2\n#define IS_DEBUG_VIEW_ENABLE_WITH_CAMERA (cc_surfaceTransform.y != 3.0)\n#define IS_DEBUG_VIEW_LIGHTING_ENABLE_WITH_ALBEDO (UnpackBitFromFloat(cc_debug_view_mode.w, 6) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_MISC_ENABLE_CSM_LAYER_COLORATION (UnpackBitFromFloat(cc_debug_view_mode.w, 7) && IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_DIRECT_DIFFUSE (UnpackBitFromFloat(cc_debug_view_mode.y, 0) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_DIRECT_SPECULAR (UnpackBitFromFloat(cc_debug_view_mode.y, 1) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_ENV_DIFFUSE (UnpackBitFromFloat(cc_debug_view_mode.y, 2) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_ENV_SPECULAR (UnpackBitFromFloat(cc_debug_view_mode.y, 3) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_EMISSIVE (UnpackBitFromFloat(cc_debug_view_mode.y, 4) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_LIGHT_MAP (UnpackBitFromFloat(cc_debug_view_mode.y, 5) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_SHADOW (UnpackBitFromFloat(cc_debug_view_mode.y, 6) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_AO (UnpackBitFromFloat(cc_debug_view_mode.y, 7) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_NORMAL_MAP (UnpackBitFromFloat(cc_debug_view_mode.z, 0) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_FOG (UnpackBitFromFloat(cc_debug_view_mode.z, 1) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_TONE_MAPPING (UnpackBitFromFloat(cc_debug_view_mode.z, 2) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_GAMMA_CORRECTION (UnpackBitFromFloat(cc_debug_view_mode.z, 3) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_FRESNEL (UnpackBitFromFloat(cc_debug_view_mode.z, 4) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_TRANSMIT_DIFFUSE (UnpackBitFromFloat(cc_debug_view_mode.z, 5) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_TRANSMIT_SPECULAR (UnpackBitFromFloat(cc_debug_view_mode.z, 6) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_TRT (UnpackBitFromFloat(cc_debug_view_mode.z, 7) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_TT (UnpackBitFromFloat(cc_debug_view_mode.w, 0) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#if (CC_PIPELINE_TYPE == 0 || CC_FORCE_FORWARD_SHADING)\n  #if CC_FORWARD_ADD\n    #if CC_PIPELINE_TYPE == 0\n      #define LIGHTS_PER_PASS 1\n    #else\n      #define LIGHTS_PER_PASS 10\n    #endif\n    #if CC_ENABLE_CLUSTERED_LIGHT_CULLING == 0\n    uniform highp vec4 cc_lightPos[LIGHTS_PER_PASS];\n  uniform vec4 cc_lightColor[LIGHTS_PER_PASS];\n  uniform vec4 cc_lightSizeRangeAngle[LIGHTS_PER_PASS];\n  uniform vec4 cc_lightDir[LIGHTS_PER_PASS];\n    #endif\n  #endif\n#endif\n#if CC_USE_LIGHT_PROBE\n  #if !USE_INSTANCING\n    uniform vec4 cc_sh_linear_const_r;\n  uniform vec4 cc_sh_linear_const_g;\n  uniform vec4 cc_sh_linear_const_b;\n  uniform vec4 cc_sh_quadratic_r;\n  uniform vec4 cc_sh_quadratic_g;\n  uniform vec4 cc_sh_quadratic_b;\n  uniform vec4 cc_sh_quadratic_a;\n  #endif\n#endif\nuniform highp mat4 cc_matLightView;\n  uniform highp mat4 cc_matLightViewProj;\n  uniform highp vec4 cc_shadowInvProjDepthInfo;\n  uniform highp vec4 cc_shadowProjDepthInfo;\n  uniform highp vec4 cc_shadowProjInfo;\n  uniform mediump vec4 cc_shadowNFLSInfo;\n  uniform mediump vec4 cc_shadowWHPBInfo;\n#if CC_SUPPORT_CASCADED_SHADOW_MAP\n  uniform highp vec4 cc_csmViewDir0[4];\n  uniform highp vec4 cc_csmViewDir1[4];\n  uniform highp vec4 cc_csmViewDir2[4];\n  uniform highp vec4 cc_csmAtlas[4];\n  uniform highp mat4 cc_matCSMViewProj[4];\n  uniform highp vec4 cc_csmProjDepthInfo[4];\n  uniform highp vec4 cc_csmProjInfo[4];\n  uniform highp vec4 cc_csmSplitsInfo;\n#endif\nuniform samplerCube cc_environment;\n#if CC_USE_IBL\n  #if CC_USE_DIFFUSEMAP\n    uniform samplerCube cc_diffuseMap;\n  #endif\n#endif\n#if CC_USE_REFLECTION_PROBE\n  uniform samplerCube cc_reflectionProbeCubemap;\n  uniform sampler2D cc_reflectionProbePlanarMap;\n  uniform sampler2D cc_reflectionProbeDataMap;\n#endif\n#define QUATER_PI         0.78539816340\n#define HALF_PI           1.57079632679\n#define PI                3.14159265359\n#define PI2               6.28318530718\n#define PI4               12.5663706144\n#define INV_QUATER_PI     1.27323954474\n#define INV_HALF_PI       0.63661977237\n#define INV_PI            0.31830988618\n#define INV_PI2           0.15915494309\n#define INV_PI4           0.07957747155\n#define EPSILON           1e-6\n#define EPSILON_LOWP      1e-4\n#define LOG2              1.442695\n#define EXP_VALUE         2.71828183f\n#define FP_MAX            65504.0\n#define FP_SCALE          0.0009765625\n#define FP_SCALE_INV      1024.0\n#define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\n#define LIGHT_MAP_TYPE_DISABLED 0\n#define LIGHT_MAP_TYPE_ALL_IN_ONE 1\n#define LIGHT_MAP_TYPE_INDIRECT_OCCLUSION 2\n#define REFLECTION_PROBE_TYPE_NONE 0\n#define REFLECTION_PROBE_TYPE_CUBE 1\n#define REFLECTION_PROBE_TYPE_PLANAR 2\n#define LIGHT_TYPE_DIRECTIONAL 0.0\n#define LIGHT_TYPE_POINT 1.0\n#define LIGHT_TYPE_SPOT 2.0\n#define LIGHT_TYPE_SPHERE 3.0\n#define LIGHT_TYPE_RANGED_DIRECTIONAL 4.0\n#define IS_DIRECTIONAL_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_DIRECTIONAL)) < EPSILON_LOWP)\n#define IS_SPHERE_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_SPHERE)) < EPSILON_LOWP)\n#define IS_SPOT_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_SPOT)) < EPSILON_LOWP)\n#define IS_POINT_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_POINT)) < EPSILON_LOWP)\n#define IS_RANGED_DIRECTIONAL_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_RANGED_DIRECTIONAL)) < EPSILON_LOWP)\nvec4 fragTextureLod (sampler2D tex, vec2 coord, float lod) {\n    #ifdef GL_EXT_shader_texture_lod\n      return texture2DLodEXT(tex, coord, lod);\n    #else\n      return texture2D(tex, coord, lod);\n    #endif\n}\nvec4 fragTextureLod (samplerCube tex, vec3 coord, float lod) {\n    #ifdef GL_EXT_shader_texture_lod\n      return textureCubeLodEXT(tex, coord, lod);\n    #else\n      return textureCube(tex, coord, lod);\n    #endif\n}\n#define UnpackBitFromFloat(value, bit) (mod(floor(value / pow(10.0, float(bit))), 10.0) > 0.0)\nhighp float unpackHighpData (float mainPart, float modPart) {\n  highp float data = mainPart;\n  return data + modPart;\n}\nvoid packHighpData (out float mainPart, out float modPart, highp float data) {\n  mainPart = fract(data);\n  modPart = data - mainPart;\n}\nhighp float unpackHighpData (float mainPart, float modPart, const float modValue) {\n  highp float data = mainPart * modValue;\n  return data + modPart * modValue;\n}\nvoid packHighpData (out float mainPart, out float modPart, highp float data, const float modValue) {\n  highp float divide = data / modValue;\n  mainPart = floor(divide);\n  modPart = (data - mainPart * modValue) / modValue;\n}\nhighp vec2 unpackHighpData (vec2 mainPart, vec2 modPart) {\n  highp vec2 data = mainPart;\n  return data + modPart;\n}\nvoid packHighpData (out vec2 mainPart, out vec2 modPart, highp vec2 data) {\n  mainPart = fract(data);\n  modPart = data - mainPart;\n}\nhighp vec2 unpackHighpData (vec2 mainPart, vec2 modPart, const float modValue) {\n  highp vec2 data = mainPart * modValue;\n  return data + modPart * modValue;\n}\nvoid packHighpData (out vec2 mainPart, out vec2 modPart, highp vec2 data, const float modValue) {\n  highp vec2 divide = data / modValue;\n  mainPart = floor(divide);\n  modPart = (data - mainPart * modValue) / modValue;\n}\nhighp vec3 unpackHighpData (vec3 mainPart, vec3 modPart) {\n  highp vec3 data = mainPart;\n  return data + modPart;\n}\nvoid packHighpData (out vec3 mainPart, out vec3 modPart, highp vec3 data) {\n  mainPart = fract(data);\n  modPart = data - mainPart;\n}\nhighp vec3 unpackHighpData (vec3 mainPart, vec3 modPart, const float modValue) {\n  highp vec3 data = mainPart * modValue;\n  return data + modPart * modValue;\n}\nvoid packHighpData (out vec3 mainPart, out vec3 modPart, highp vec3 data, const float modValue) {\n  highp vec3 divide = data / modValue;\n  mainPart = floor(divide);\n  modPart = (data - mainPart * modValue) / modValue;\n}\nhighp vec4 unpackHighpData (vec4 mainPart, vec4 modPart) {\n  highp vec4 data = mainPart;\n  return data + modPart;\n}\nvoid packHighpData (out vec4 mainPart, out vec4 modPart, highp vec4 data) {\n  mainPart = fract(data);\n  modPart = data - mainPart;\n}\nhighp vec4 unpackHighpData (vec4 mainPart, vec4 modPart, const float modValue) {\n  highp vec4 data = mainPart * modValue;\n  return data + modPart * modValue;\n}\nvoid packHighpData (out vec4 mainPart, out vec4 modPart, highp vec4 data, const float modValue) {\n  highp vec4 divide = data / modValue;\n  mainPart = floor(divide);\n  modPart = (data - mainPart * modValue) / modValue;\n}\nhighp float decode32 (highp vec4 rgba) {\n  rgba = rgba * 255.0;\n  highp float Sign = 1.0 - (step(128.0, (rgba[3]) + 0.5)) * 2.0;\n  highp float Exponent = 2.0 * (mod(float(int((rgba[3]) + 0.5)), 128.0)) + (step(128.0, (rgba[2]) + 0.5)) - 127.0;\n  highp float Mantissa = (mod(float(int((rgba[2]) + 0.5)), 128.0)) * 65536.0 + rgba[1] * 256.0 + rgba[0] + 8388608.0;\n  return Sign * exp2(Exponent - 23.0) * Mantissa;\n}\nvec4 packRGBE (vec3 rgb) {\n  highp float maxComp = max(max(rgb.r, rgb.g), rgb.b);\n  highp float e = 128.0;\n  if (maxComp > 0.0001) {\n    e = log(maxComp) / log(1.1);\n    e = ceil(e);\n    e = clamp(e + 128.0, 0.0, 255.0);\n  }\n  highp float sc = 1.0 / pow(1.1, e - 128.0);\n  vec3 encode = clamp(rgb * sc, vec3(0.0), vec3(1.0)) * 255.0;\n  vec3 encode_rounded = floor(encode) + step(encode - floor(encode), vec3(0.5));\n  return vec4(encode_rounded, e) / 255.0;\n}\nvec3 unpackRGBE (vec4 rgbe) {\n  return rgbe.rgb * pow(1.1, rgbe.a * 255.0 - 128.0);\n}\nvec3 ACESToneMap (vec3 color) {\n  color = min(color, vec3(8.0));\n  const float A = 2.51;\n  const float B = 0.03;\n  const float C = 2.43;\n  const float D = 0.59;\n  const float E = 0.14;\n  return (color * (A * color + B)) / (color * (C * color + D) + E);\n}\nvec3 SRGBToLinear (vec3 gamma) {\n#ifdef CC_USE_SURFACE_SHADER\n  #if CC_USE_DEBUG_VIEW == CC_SURFACES_DEBUG_VIEW_COMPOSITE_AND_MISC\n    if (!IS_DEBUG_VIEW_COMPOSITE_ENABLE_GAMMA_CORRECTION) {\n      return gamma;\n    }\n  #endif\n#endif\n  return gamma * gamma;\n}\nvec3 LinearToSRGB(vec3 linear) {\n#ifdef CC_USE_SURFACE_SHADER\n  #if CC_USE_DEBUG_VIEW == CC_SURFACES_DEBUG_VIEW_COMPOSITE_AND_MISC\n    if (!IS_DEBUG_VIEW_COMPOSITE_ENABLE_GAMMA_CORRECTION) {\n      return linear;\n    }\n  #endif\n#endif\n  return sqrt(linear);\n}\nbool isnan(float val) {\n  return (val < 0.0 || 0.0 < val || val == 0.0) ? false : true;\n}\nbool isinf(float x) {\n  return x == x * 2.0 && x != 0.0;\n}\nbool isnans(vec2 val) {\n    return isnan(val.x) || isnan(val.y);\n}\nbool isnans(vec3 val) {\n    return isnan(val.x) || isnan(val.y) || isnan(val.z);\n}\nbool isnans(vec4 val) {\n    return isnan(val.x) || isnan(val.y) || isnan(val.z) || isnan(val.w);\n}\nbool isinfs(vec2 val) {\n    return isinf(val.x) || isinf(val.y);\n}\nbool isinfs(vec3 val) {\n    return isinf(val.x) || isinf(val.y) || isinf(val.z);\n}\nbool isinfs(vec4 val) {\n    return isinf(val.x) || isinf(val.y) || isinf(val.z) || isinf(val.w);\n}\nfloat saturate(float value) {\n    return min(max(value, 0.0), 1.0);\n}\nvec2 saturate(vec2 value) { return vec2(saturate(value.x), saturate(value.y)); }\nvec3 saturate(vec3 value) { return vec3(saturate(value.x), saturate(value.y), saturate(value.z)); }\nvec4 saturate(vec4 value) { return vec4(saturate(value.x), saturate(value.y), saturate(value.z), saturate(value.w)); }\nvec2 GetPlanarReflectScreenUV(vec3 worldPos, mat4 matVirtualCameraViewProj, float flipNDCSign, vec3 viewDir, vec3 reflectDir)\n{\n  vec4 clipPos = matVirtualCameraViewProj * vec4(worldPos, 1.0);\n  vec2 screenUV = clipPos.xy / clipPos.w * 0.5 + 0.5;\n  screenUV = vec2(1.0 - screenUV.x, screenUV.y);\n  screenUV = flipNDCSign == 1.0 ? vec2(screenUV.x, 1.0 - screenUV.y) : screenUV;\n  return screenUV;\n}\nfloat GetLinearDepthFromViewSpace(vec3 viewPos, float near, float far) {\n  float dist = length(viewPos);\n  return (dist - near) / (far - near);\n}\nvec3 CalculateBinormal(vec3 normal, vec3 tangent, float mirrorNormal)\n{\n    return cross(normal.xyz, tangent) * mirrorNormal;\n}\nvec3 CalculateNormalFromTangentSpace(vec3 normalFromTangentSpace, float normalStrength, vec3 normal, vec3 tangent, float mirrorNormal)\n{\n    vec3 binormal = CalculateBinormal(normal, tangent, mirrorNormal);\n    return (normalFromTangentSpace.x * normalStrength) * normalize(tangent) +\n           (normalFromTangentSpace.y * normalStrength) * normalize(binormal) +\n            normalFromTangentSpace.z * normalize(normal);\n}\nvec3 RotationVecFromAxisY(vec3 v, float cosTheta, float sinTheta)\n{\n    vec3 result;\n    result.x = dot(v, vec3(cosTheta, 0.0, -sinTheta));\n    result.y = v.y;\n    result.z = dot(v, vec3(sinTheta, 0.0,  cosTheta));\n    return result;\n}\nvoid RotateTangentAndBinormal(inout vec3 tangent, inout vec3 binormal, vec3 normal, float rotationAngle)\n{\n    float cosTheta = cos(rotationAngle), sinTheta = sin(rotationAngle);\n    vec3 B = RotationVecFromAxisY(vec3(1.0, 0.0, 0.0), cosTheta, sinTheta);\n    vec3 T = RotationVecFromAxisY(vec3(0.0, 0.0, 1.0), cosTheta, sinTheta);\n    vec3 tangentNew, binormalNew;\n    binormalNew = B.x * binormal + B.y * normal + B.z * tangent;\n    binormal = normalize(binormalNew);\n    tangentNew = T.x * binormal + T.y * normal + T.z * tangent;\n    tangent = normalize(tangentNew);\n}\nvec2 signNotZero(vec2 v) {\n  return vec2((v.x >= 0.0) ? +1.0 : -1.0, (v.y >= 0.0) ? +1.0 : -1.0);\n}\nvec2 float32x3_to_oct(in vec3 v) {\n  vec2 p = v.xy * (1.0 / (abs(v.x) + abs(v.y) + abs(v.z)));\n  return (v.z <= 0.0) ? ((1.0 - abs(p.yx)) * signNotZero(p)) : p;\n}\n  vec3 EnvReflectionWithMipFiltering(vec3 R, float roughness, float mipCount, float denoiseIntensity) {\n    #if CC_USE_IBL\n      #if !CC_SURFACES_USE_LEGACY_COMPATIBLE_LIGHTING && !CC_IBL_CONVOLUTED\n        roughness = pow(roughness, 0.5);\n      #endif\n    \tfloat mip = roughness * (mipCount - 1.0);\n    \tfloat delta = (dot(dFdx(R), dFdy(R))) * 1000.0;\n    \tfloat mipBias = mix(0.0, 5.0, clamp(delta, 0.0, 1.0));\n      vec3 rotationDir = RotationVecFromAxisY(R.xyz, cc_surfaceTransform.z, cc_surfaceTransform.w);\n    \tvec4 biased = fragTextureLod(cc_environment, rotationDir, mip + mipBias);\n     \tvec4 filtered = textureCube(cc_environment, rotationDir);\n      #if CC_USE_IBL == 2\n      \tbiased.rgb = unpackRGBE(biased);\n      \tfiltered.rgb = unpackRGBE(filtered);\n      #else\n      \tbiased.rgb = SRGBToLinear(biased.rgb);\n      \tfiltered.rgb = SRGBToLinear(filtered.rgb);\n      #endif\n      return mix(biased.rgb, filtered.rgb, denoiseIntensity);\n    #else\n      return vec3(0.0, 0.0, 0.0);\n    #endif\n  }\n  vec3 EnvReflection(samplerCube tex, vec3 R, float roughness, float mipCount) {\n    #if !CC_SURFACES_USE_LEGACY_COMPATIBLE_LIGHTING && !CC_IBL_CONVOLUTED\n      roughness = pow(roughness, 0.5);\n    #endif\n    vec3 rotationDir = RotationVecFromAxisY(R.xyz, cc_surfaceTransform.z, cc_surfaceTransform.w);\n    vec4 envmap = fragTextureLod(tex, rotationDir, roughness * (mipCount - 1.0));\n    #if CC_USE_IBL == 2 || CC_USE_REFLECTION_PROBE != REFLECTION_PROBE_TYPE_NONE\n      return unpackRGBE(envmap);\n    #else\n      return SRGBToLinear(envmap.rgb);\n    #endif\n  }\n#if CC_SUPPORT_CASCADED_SHADOW_MAP\n#endif\nfloat CCGetLinearDepth(vec3 worldPos, float viewSpaceBias) {\n\tvec4 viewPos = cc_matLightView * vec4(worldPos.xyz, 1.0);\n  viewPos.z += viewSpaceBias;\n\treturn GetLinearDepthFromViewSpace(viewPos.xyz, cc_shadowNFLSInfo.x, cc_shadowNFLSInfo.y);\n}\nfloat CCGetLinearDepth(vec3 worldPos) {\n\treturn CCGetLinearDepth(worldPos, 0.0);\n}\n#if CC_RECEIVE_SHADOW\n  uniform highp sampler2D cc_shadowMap;\n  uniform highp sampler2D cc_spotShadowMap;\n  float SampleShadowMap (vec3 shadowNDCPos, highp sampler2D shadowMap)\n  {\n    #if CC_SHADOWMAP_FORMAT == 1\n      return dot(texture2D(shadowMap, shadowNDCPos.xy), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0));\n    #else\n      return texture2D(shadowMap, shadowNDCPos.xy).x;\n    #endif\n  }\n  float NativePCFShadowFactorHard (vec3 shadowNDCPos, highp sampler2D shadowMap, vec2 shadowMapResolution)\n  {\n    #if CC_SHADOWMAP_FORMAT == 1\n      return step(shadowNDCPos.z, dot(texture2D(shadowMap, shadowNDCPos.xy), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n    #else\n      return step(shadowNDCPos.z, texture2D(shadowMap, shadowNDCPos.xy).x);\n    #endif\n  }\n  float NativePCFShadowFactorSoft (vec3 shadowNDCPos, highp sampler2D shadowMap, vec2 shadowMapResolution)\n  {\n    vec2 oneTap = 1.0 / shadowMapResolution;\n    vec2 shadowNDCPos_offset = shadowNDCPos.xy + oneTap;\n    float block0, block1, block2, block3;\n    #if CC_SHADOWMAP_FORMAT == 1\n      block0 = step(shadowNDCPos.z, dot(texture2D(shadowMap, vec2(shadowNDCPos.x, shadowNDCPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block1 = step(shadowNDCPos.z, dot(texture2D(shadowMap, vec2(shadowNDCPos_offset.x, shadowNDCPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block2 = step(shadowNDCPos.z, dot(texture2D(shadowMap, vec2(shadowNDCPos.x, shadowNDCPos_offset.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block3 = step(shadowNDCPos.z, dot(texture2D(shadowMap, vec2(shadowNDCPos_offset.x, shadowNDCPos_offset.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n    #else\n      block0 = step(shadowNDCPos.z, texture2D(shadowMap, vec2(shadowNDCPos.x, shadowNDCPos.y)).x);\n      block1 = step(shadowNDCPos.z, texture2D(shadowMap, vec2(shadowNDCPos_offset.x, shadowNDCPos.y)).x);\n      block2 = step(shadowNDCPos.z, texture2D(shadowMap, vec2(shadowNDCPos.x, shadowNDCPos_offset.y)).x);\n      block3 = step(shadowNDCPos.z, texture2D(shadowMap, vec2(shadowNDCPos_offset.x, shadowNDCPos_offset.y)).x);\n    #endif\n    float coefX   = mod(shadowNDCPos.x, oneTap.x) * shadowMapResolution.x;\n    float resultX = mix(block0, block1, coefX);\n    float resultY = mix(block2, block3, coefX);\n    float coefY   = mod(shadowNDCPos.y, oneTap.y) * shadowMapResolution.y;\n    return mix(resultX, resultY, coefY);\n  }\n  float NativePCFShadowFactorSoft3X (vec3 shadowNDCPos, highp sampler2D shadowMap, vec2 shadowMapResolution)\n  {\n    vec2 oneTap = 1.0 / shadowMapResolution;\n    float shadowNDCPos_offset_L = shadowNDCPos.x - oneTap.x;\n    float shadowNDCPos_offset_R = shadowNDCPos.x + oneTap.x;\n    float shadowNDCPos_offset_U = shadowNDCPos.y - oneTap.y;\n    float shadowNDCPos_offset_D = shadowNDCPos.y + oneTap.y;\n    float block0, block1, block2, block3, block4, block5, block6, block7, block8;\n    #if CC_SHADOWMAP_FORMAT == 1\n      block0 = step(shadowNDCPos.z, dot(texture2D(shadowMap, vec2(shadowNDCPos_offset_L, shadowNDCPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block1 = step(shadowNDCPos.z, dot(texture2D(shadowMap, vec2(shadowNDCPos.x, shadowNDCPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block2 = step(shadowNDCPos.z, dot(texture2D(shadowMap, vec2(shadowNDCPos_offset_R, shadowNDCPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block3 = step(shadowNDCPos.z, dot(texture2D(shadowMap, vec2(shadowNDCPos_offset_L, shadowNDCPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block4 = step(shadowNDCPos.z, dot(texture2D(shadowMap, vec2(shadowNDCPos.x, shadowNDCPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block5 = step(shadowNDCPos.z, dot(texture2D(shadowMap, vec2(shadowNDCPos_offset_R, shadowNDCPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block6 = step(shadowNDCPos.z, dot(texture2D(shadowMap, vec2(shadowNDCPos_offset_L, shadowNDCPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block7 = step(shadowNDCPos.z, dot(texture2D(shadowMap, vec2(shadowNDCPos.x, shadowNDCPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block8 = step(shadowNDCPos.z, dot(texture2D(shadowMap, vec2(shadowNDCPos_offset_R, shadowNDCPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n    #else\n      block0 = step(shadowNDCPos.z, texture2D(shadowMap, vec2(shadowNDCPos_offset_L, shadowNDCPos_offset_U)).x);\n      block1 = step(shadowNDCPos.z, texture2D(shadowMap, vec2(shadowNDCPos.x, shadowNDCPos_offset_U)).x);\n      block2 = step(shadowNDCPos.z, texture2D(shadowMap, vec2(shadowNDCPos_offset_R, shadowNDCPos_offset_U)).x);\n      block3 = step(shadowNDCPos.z, texture2D(shadowMap, vec2(shadowNDCPos_offset_L, shadowNDCPos.y)).x);\n      block4 = step(shadowNDCPos.z, texture2D(shadowMap, vec2(shadowNDCPos.x, shadowNDCPos.y)).x);\n      block5 = step(shadowNDCPos.z, texture2D(shadowMap, vec2(shadowNDCPos_offset_R, shadowNDCPos.y)).x);\n      block6 = step(shadowNDCPos.z, texture2D(shadowMap, vec2(shadowNDCPos_offset_L, shadowNDCPos_offset_D)).x);\n      block7 = step(shadowNDCPos.z, texture2D(shadowMap, vec2(shadowNDCPos.x, shadowNDCPos_offset_D)).x);\n      block8 = step(shadowNDCPos.z, texture2D(shadowMap, vec2(shadowNDCPos_offset_R, shadowNDCPos_offset_D)).x);\n    #endif\n    float coefX = mod(shadowNDCPos.x, oneTap.x) * shadowMapResolution.x;\n    float coefY = mod(shadowNDCPos.y, oneTap.y) * shadowMapResolution.y;\n    float shadow = 0.0;\n    float resultX = mix(block0, block1, coefX);\n    float resultY = mix(block3, block4, coefX);\n    shadow += mix(resultX , resultY, coefY);\n    resultX = mix(block1, block2, coefX);\n    resultY = mix(block4, block5, coefX);\n    shadow += mix(resultX , resultY, coefY);\n    resultX = mix(block3, block4, coefX);\n    resultY = mix(block6, block7, coefX);\n    shadow += mix(resultX, resultY, coefY);\n    resultX = mix(block4, block5, coefX);\n    resultY = mix(block7, block8, coefX);\n    shadow += mix(resultX, resultY, coefY);\n    return shadow * 0.25;\n  }\n  float NativePCFShadowFactorSoft5X (vec3 shadowNDCPos, highp sampler2D shadowMap, vec2 shadowMapResolution)\n  {\n    vec2 oneTap = 1.0 / shadowMapResolution;\n    vec2 twoTap = oneTap * 2.0;\n    vec2 offset1 = shadowNDCPos.xy + vec2(-twoTap.x, -twoTap.y);\n    vec2 offset2 = shadowNDCPos.xy + vec2(-oneTap.x, -twoTap.y);\n    vec2 offset3 = shadowNDCPos.xy + vec2(0.0, -twoTap.y);\n    vec2 offset4 = shadowNDCPos.xy + vec2(oneTap.x, -twoTap.y);\n    vec2 offset5 = shadowNDCPos.xy + vec2(twoTap.x, -twoTap.y);\n    vec2 offset6 = shadowNDCPos.xy + vec2(-twoTap.x, -oneTap.y);\n    vec2 offset7 = shadowNDCPos.xy + vec2(-oneTap.x, -oneTap.y);\n    vec2 offset8 = shadowNDCPos.xy + vec2(0.0, -oneTap.y);\n    vec2 offset9 = shadowNDCPos.xy + vec2(oneTap.x, -oneTap.y);\n    vec2 offset10 = shadowNDCPos.xy + vec2(twoTap.x, -oneTap.y);\n    vec2 offset11 = shadowNDCPos.xy + vec2(-twoTap.x, 0.0);\n    vec2 offset12 = shadowNDCPos.xy + vec2(-oneTap.x, 0.0);\n    vec2 offset13 = shadowNDCPos.xy + vec2(0.0, 0.0);\n    vec2 offset14 = shadowNDCPos.xy + vec2(oneTap.x, 0.0);\n    vec2 offset15 = shadowNDCPos.xy + vec2(twoTap.x, 0.0);\n    vec2 offset16 = shadowNDCPos.xy + vec2(-twoTap.x, oneTap.y);\n    vec2 offset17 = shadowNDCPos.xy + vec2(-oneTap.x, oneTap.y);\n    vec2 offset18 = shadowNDCPos.xy + vec2(0.0, oneTap.y);\n    vec2 offset19 = shadowNDCPos.xy + vec2(oneTap.x, oneTap.y);\n    vec2 offset20 = shadowNDCPos.xy + vec2(twoTap.x, oneTap.y);\n    vec2 offset21 = shadowNDCPos.xy + vec2(-twoTap.x, twoTap.y);\n    vec2 offset22 = shadowNDCPos.xy + vec2(-oneTap.x, twoTap.y);\n    vec2 offset23 = shadowNDCPos.xy + vec2(0.0, twoTap.y);\n    vec2 offset24 = shadowNDCPos.xy + vec2(oneTap.x, twoTap.y);\n    vec2 offset25 = shadowNDCPos.xy + vec2(twoTap.x, twoTap.y);\n    float block1, block2, block3, block4, block5, block6, block7, block8, block9, block10, block11, block12, block13, block14, block15, block16, block17, block18, block19, block20, block21, block22, block23, block24, block25;\n    #if CC_SHADOWMAP_FORMAT == 1\n      block1 = step(shadowNDCPos.z, dot(texture2D(shadowMap, offset1), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block2 = step(shadowNDCPos.z, dot(texture2D(shadowMap, offset2), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block3 = step(shadowNDCPos.z, dot(texture2D(shadowMap, offset3), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block4 = step(shadowNDCPos.z, dot(texture2D(shadowMap, offset4), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block5 = step(shadowNDCPos.z, dot(texture2D(shadowMap, offset5), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block6 = step(shadowNDCPos.z, dot(texture2D(shadowMap, offset6), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block7 = step(shadowNDCPos.z, dot(texture2D(shadowMap, offset7), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block8 = step(shadowNDCPos.z, dot(texture2D(shadowMap, offset8), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block9 = step(shadowNDCPos.z, dot(texture2D(shadowMap, offset9), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block10 = step(shadowNDCPos.z, dot(texture2D(shadowMap, offset10), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block11 = step(shadowNDCPos.z, dot(texture2D(shadowMap, offset11), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block12 = step(shadowNDCPos.z, dot(texture2D(shadowMap, offset12), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block13 = step(shadowNDCPos.z, dot(texture2D(shadowMap, offset13), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block14 = step(shadowNDCPos.z, dot(texture2D(shadowMap, offset14), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block15 = step(shadowNDCPos.z, dot(texture2D(shadowMap, offset15), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block16 = step(shadowNDCPos.z, dot(texture2D(shadowMap, offset16), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block17 = step(shadowNDCPos.z, dot(texture2D(shadowMap, offset17), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block18 = step(shadowNDCPos.z, dot(texture2D(shadowMap, offset18), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block19 = step(shadowNDCPos.z, dot(texture2D(shadowMap, offset19), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block20 = step(shadowNDCPos.z, dot(texture2D(shadowMap, offset20), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block21 = step(shadowNDCPos.z, dot(texture2D(shadowMap, offset21), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block22 = step(shadowNDCPos.z, dot(texture2D(shadowMap, offset22), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block23 = step(shadowNDCPos.z, dot(texture2D(shadowMap, offset23), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block24 = step(shadowNDCPos.z, dot(texture2D(shadowMap, offset24), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block25 = step(shadowNDCPos.z, dot(texture2D(shadowMap, offset25), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n    #else\n      block1 = step(shadowNDCPos.z, texture2D(shadowMap, offset1).x);\n      block2 = step(shadowNDCPos.z, texture2D(shadowMap, offset2).x);\n      block3 = step(shadowNDCPos.z, texture2D(shadowMap, offset3).x);\n      block4 = step(shadowNDCPos.z, texture2D(shadowMap, offset4).x);\n      block5 = step(shadowNDCPos.z, texture2D(shadowMap, offset5).x);\n      block6 = step(shadowNDCPos.z, texture2D(shadowMap, offset6).x);\n      block7 = step(shadowNDCPos.z, texture2D(shadowMap, offset7).x);\n      block8 = step(shadowNDCPos.z, texture2D(shadowMap, offset8).x);\n      block9 = step(shadowNDCPos.z, texture2D(shadowMap, offset9).x);\n      block10 = step(shadowNDCPos.z, texture2D(shadowMap, offset10).x);\n      block11 = step(shadowNDCPos.z, texture2D(shadowMap, offset11).x);\n      block12 = step(shadowNDCPos.z, texture2D(shadowMap, offset12).x);\n      block13 = step(shadowNDCPos.z, texture2D(shadowMap, offset13).x);\n      block14 = step(shadowNDCPos.z, texture2D(shadowMap, offset14).x);\n      block15 = step(shadowNDCPos.z, texture2D(shadowMap, offset15).x);\n      block16 = step(shadowNDCPos.z, texture2D(shadowMap, offset16).x);\n      block17 = step(shadowNDCPos.z, texture2D(shadowMap, offset17).x);\n      block18 = step(shadowNDCPos.z, texture2D(shadowMap, offset18).x);\n      block19 = step(shadowNDCPos.z, texture2D(shadowMap, offset19).x);\n      block20 = step(shadowNDCPos.z, texture2D(shadowMap, offset20).x);\n      block21 = step(shadowNDCPos.z, texture2D(shadowMap, offset21).x);\n      block22 = step(shadowNDCPos.z, texture2D(shadowMap, offset22).x);\n      block23 = step(shadowNDCPos.z, texture2D(shadowMap, offset23).x);\n      block24 = step(shadowNDCPos.z, texture2D(shadowMap, offset24).x);\n      block25 = step(shadowNDCPos.z, texture2D(shadowMap, offset25).x);\n    #endif\n    vec2 coef = fract(shadowNDCPos.xy * shadowMapResolution);\n    vec2 v1X1 = mix(vec2(block1, block6), vec2(block2, block7), coef.xx);\n    vec2 v1X2 = mix(vec2(block2, block7), vec2(block3, block8), coef.xx);\n    vec2 v1X3 = mix(vec2(block3, block8), vec2(block4, block9), coef.xx);\n    vec2 v1X4 = mix(vec2(block4, block9), vec2(block5, block10), coef.xx);\n    float v1 = mix(v1X1.x, v1X1.y, coef.y) + mix(v1X2.x, v1X2.y, coef.y) + mix(v1X3.x, v1X3.y, coef.y) + mix(v1X4.x, v1X4.y, coef.y);\n    vec2 v2X1 = mix(vec2(block6, block11), vec2(block7, block12), coef.xx);\n    vec2 v2X2 = mix(vec2(block7, block12), vec2(block8, block13), coef.xx);\n    vec2 v2X3 = mix(vec2(block8, block13), vec2(block9, block14), coef.xx);\n    vec2 v2X4 = mix(vec2(block9, block14), vec2(block10, block15), coef.xx);\n    float v2 = mix(v2X1.x, v2X1.y, coef.y) + mix(v2X2.x, v2X2.y, coef.y) + mix(v2X3.x, v2X3.y, coef.y) + mix(v2X4.x, v2X4.y, coef.y);\n    vec2 v3X1 = mix(vec2(block11, block16), vec2(block12, block17), coef.xx);\n    vec2 v3X2 = mix(vec2(block12, block17), vec2(block13, block18), coef.xx);\n    vec2 v3X3 = mix(vec2(block13, block18), vec2(block14, block19), coef.xx);\n    vec2 v3X4 = mix(vec2(block14, block19), vec2(block15, block20), coef.xx);\n    float v3 = mix(v3X1.x, v3X1.y, coef.y) + mix(v3X2.x, v3X2.y, coef.y) + mix(v3X3.x, v3X3.y, coef.y) + mix(v3X4.x, v3X4.y, coef.y);\n    vec2 v4X1 = mix(vec2(block16, block21), vec2(block17, block22), coef.xx);\n    vec2 v4X2 = mix(vec2(block17, block22), vec2(block18, block23), coef.xx);\n    vec2 v4X3 = mix(vec2(block18, block23), vec2(block19, block24), coef.xx);\n    vec2 v4X4 = mix(vec2(block19, block24), vec2(block20, block25), coef.xx);\n    float v4 = mix(v4X1.x, v4X1.y, coef.y) + mix(v4X2.x, v4X2.y, coef.y) + mix(v4X3.x, v4X3.y, coef.y) + mix(v4X4.x, v4X4.y, coef.y);\n    float fAvg = (v1 + v2 + v3 + v4) * 0.0625;\n    return fAvg;\n  }\n  bool GetShadowNDCPos(out vec3 shadowNDCPos, vec4 shadowPosWithDepthBias)\n  {\n  \tshadowNDCPos = shadowPosWithDepthBias.xyz / shadowPosWithDepthBias.w * 0.5 + 0.5;\n  \tif (shadowNDCPos.x < 0.0 || shadowNDCPos.x > 1.0 ||\n  \t\tshadowNDCPos.y < 0.0 || shadowNDCPos.y > 1.0 ||\n  \t\tshadowNDCPos.z < 0.0 || shadowNDCPos.z > 1.0) {\n  \t\treturn false;\n  \t}\n  \tshadowNDCPos.xy = cc_cameraPos.w == 1.0 ? vec2(shadowNDCPos.xy.x, 1.0 - shadowNDCPos.xy.y) : shadowNDCPos.xy;\n  \treturn true;\n  }\n  vec4 ApplyShadowDepthBias_FaceNormal(vec4 shadowPos, vec3 worldNormal, float normalBias, vec3 matViewDir0, vec3 matViewDir1, vec3 matViewDir2, vec2 projScaleXY)\n  {\n    vec4 newShadowPos = shadowPos;\n    if (normalBias > EPSILON_LOWP)\n    {\n      vec3 viewNormal = vec3(dot(matViewDir0, worldNormal), dot(matViewDir1, worldNormal), dot(matViewDir2, worldNormal));\n      if (viewNormal.z < 0.1)\n        newShadowPos.xy += viewNormal.xy * projScaleXY * normalBias * clamp(viewNormal.z, 0.001, 0.1);\n    }\n    return newShadowPos;\n  }\n  vec4 ApplyShadowDepthBias_FaceNormal(vec4 shadowPos, vec3 worldNormal, float normalBias, mat4 matLightView, vec2 projScaleXY)\n  {\n  \tvec4 newShadowPos = shadowPos;\n  \tif (normalBias > EPSILON_LOWP)\n  \t{\n  \t\tvec4 viewNormal = matLightView * vec4(worldNormal, 0.0);\n  \t\tif (viewNormal.z < 0.1)\n  \t\t\tnewShadowPos.xy += viewNormal.xy * projScaleXY * normalBias * clamp(viewNormal.z, 0.001, 0.1);\n  \t}\n  \treturn newShadowPos;\n  }\n  float GetViewSpaceDepthFromNDCDepth_Orthgraphic(float NDCDepth, float projScaleZ, float projBiasZ)\n  {\n  \treturn (NDCDepth - projBiasZ) / projScaleZ;\n  }\n  float GetViewSpaceDepthFromNDCDepth_Perspective(float NDCDepth, float homogenousDividW, float invProjScaleZ, float invProjBiasZ)\n  {\n  \treturn NDCDepth * invProjScaleZ + homogenousDividW * invProjBiasZ;\n  }\n  vec4 ApplyShadowDepthBias_Perspective(vec4 shadowPos, float viewspaceDepthBias)\n  {\n  \tvec3 viewSpacePos;\n  \tviewSpacePos.xy = shadowPos.xy * cc_shadowProjInfo.zw;\n  \tviewSpacePos.z = GetViewSpaceDepthFromNDCDepth_Perspective(shadowPos.z, shadowPos.w, cc_shadowInvProjDepthInfo.x, cc_shadowInvProjDepthInfo.y);\n  \tviewSpacePos.xyz += cc_shadowProjDepthInfo.z * normalize(viewSpacePos.xyz) * viewspaceDepthBias;\n  \tvec4 clipSpacePos;\n  \tclipSpacePos.xy = viewSpacePos.xy * cc_shadowProjInfo.xy;\n  \tclipSpacePos.zw = viewSpacePos.z * cc_shadowProjDepthInfo.xz + vec2(cc_shadowProjDepthInfo.y, 0.0);\n  \t#if CC_SHADOWMAP_USE_LINEAR_DEPTH\n  \t\tclipSpacePos.z = GetLinearDepthFromViewSpace(viewSpacePos.xyz, cc_shadowNFLSInfo.x, cc_shadowNFLSInfo.y);\n  \t\tclipSpacePos.z = (clipSpacePos.z * 2.0 - 1.0) * clipSpacePos.w;\n  \t#endif\n  \treturn clipSpacePos;\n  }\n  vec4 ApplyShadowDepthBias_Orthographic(vec4 shadowPos, float viewspaceDepthBias, float projScaleZ, float projBiasZ)\n  {\n  \tfloat coeffA = projScaleZ;\n  \tfloat coeffB = projBiasZ;\n  \tfloat viewSpacePos_z = GetViewSpaceDepthFromNDCDepth_Orthgraphic(shadowPos.z, projScaleZ, projBiasZ);\n  \tviewSpacePos_z += viewspaceDepthBias;\n  \tvec4 result = shadowPos;\n  \tresult.z = viewSpacePos_z * coeffA + coeffB;\n  \treturn result;\n  }\n  vec4 ApplyShadowDepthBias_PerspectiveLinearDepth(vec4 shadowPos, float viewspaceDepthBias, vec3 worldPos)\n  {\n    shadowPos.z = CCGetLinearDepth(worldPos, viewspaceDepthBias) * 2.0 - 1.0;\n    shadowPos.z *= shadowPos.w;\n    return shadowPos;\n  }\n  float CCGetDirLightShadowFactorHard (vec4 shadowPosWithDepthBias) {\n\t  vec3 shadowNDCPos;\n\t  if (!GetShadowNDCPos(shadowNDCPos, shadowPosWithDepthBias)) {\n\t\t  return 1.0;\n\t  }\n    return NativePCFShadowFactorHard(shadowNDCPos, cc_shadowMap, cc_shadowWHPBInfo.xy);\n  }\n  float CCGetDirLightShadowFactorSoft (vec4 shadowPosWithDepthBias) {\n\t  vec3 shadowNDCPos;\n\t  if (!GetShadowNDCPos(shadowNDCPos, shadowPosWithDepthBias)) {\n\t\t  return 1.0;\n\t  }\n    return NativePCFShadowFactorSoft(shadowNDCPos, cc_shadowMap, cc_shadowWHPBInfo.xy);\n  }\n  float CCGetDirLightShadowFactorSoft3X (vec4 shadowPosWithDepthBias) {\n\t  vec3 shadowNDCPos;\n\t  if (!GetShadowNDCPos(shadowNDCPos, shadowPosWithDepthBias)) {\n\t\t  return 1.0;\n\t  }\n    return NativePCFShadowFactorSoft3X(shadowNDCPos, cc_shadowMap, cc_shadowWHPBInfo.xy);\n  }\n  float CCGetDirLightShadowFactorSoft5X (vec4 shadowPosWithDepthBias) {\n\t  vec3 shadowNDCPos;\n\t  if (!GetShadowNDCPos(shadowNDCPos, shadowPosWithDepthBias)) {\n\t\t  return 1.0;\n\t  }\n    return NativePCFShadowFactorSoft5X(shadowNDCPos, cc_shadowMap, cc_shadowWHPBInfo.xy);\n  }\n  float CCGetSpotLightShadowFactorHard (vec4 shadowPosWithDepthBias, vec3 worldPos) {\n\t  vec3 shadowNDCPos;\n\t  if (!GetShadowNDCPos(shadowNDCPos, shadowPosWithDepthBias)) {\n\t\t  return 1.0;\n\t  }\n    return NativePCFShadowFactorHard(shadowNDCPos, cc_spotShadowMap, cc_shadowWHPBInfo.xy);\n  }\n  float CCGetSpotLightShadowFactorSoft (vec4 shadowPosWithDepthBias, vec3 worldPos) {\n\t  vec3 shadowNDCPos;\n\t  if (!GetShadowNDCPos(shadowNDCPos, shadowPosWithDepthBias)) {\n\t\t  return 1.0;\n\t  }\n    return NativePCFShadowFactorSoft(shadowNDCPos, cc_spotShadowMap, cc_shadowWHPBInfo.xy);\n  }\n  float CCGetSpotLightShadowFactorSoft3X (vec4 shadowPosWithDepthBias, vec3 worldPos) {\n\t  vec3 shadowNDCPos;\n\t  if (!GetShadowNDCPos(shadowNDCPos, shadowPosWithDepthBias)) {\n\t\t  return 1.0;\n\t  }\n    return NativePCFShadowFactorSoft3X(shadowNDCPos, cc_spotShadowMap, cc_shadowWHPBInfo.xy);\n  }\n  float CCGetSpotLightShadowFactorSoft5X (vec4 shadowPosWithDepthBias, vec3 worldPos) {\n\t  vec3 shadowNDCPos;\n\t  if (!GetShadowNDCPos(shadowNDCPos, shadowPosWithDepthBias)) {\n\t\t  return 1.0;\n\t  }\n    return NativePCFShadowFactorSoft5X(shadowNDCPos, cc_spotShadowMap, cc_shadowWHPBInfo.xy);\n  }\n  float CCSpotShadowFactorBase(out vec4 shadowNDCPosWithBias, vec4 shadowPos, vec3 worldPos, vec2 shadowBias)\n  {\n    float pcf = cc_shadowWHPBInfo.z;\n    vec4 pos = vec4(1.0);\n    #if CC_SHADOWMAP_USE_LINEAR_DEPTH\n      pos = ApplyShadowDepthBias_PerspectiveLinearDepth(shadowPos, shadowBias.x, worldPos);\n    #else\n      pos = ApplyShadowDepthBias_Perspective(shadowPos, shadowBias.x);\n    #endif\n    float realtimeShadow = 1.0;\n    if (pcf > 2.9) {\n      realtimeShadow = CCGetSpotLightShadowFactorSoft5X(pos, worldPos);\n    }else if (pcf > 1.9) {\n      realtimeShadow = CCGetSpotLightShadowFactorSoft3X(pos, worldPos);\n    }else if (pcf > 0.9) {\n      realtimeShadow = CCGetSpotLightShadowFactorSoft(pos, worldPos);\n    }else {\n      realtimeShadow = CCGetSpotLightShadowFactorHard(pos, worldPos);\n    }\n    shadowNDCPosWithBias = pos;\n    return mix(realtimeShadow, 1.0, cc_shadowNFLSInfo.w);\n  }\n  float CCShadowFactorBase(out vec4 shadowNDCPosWithBias, vec4 shadowPos, vec3 N, vec2 shadowBias)\n  {\n    vec4 pos = ApplyShadowDepthBias_FaceNormal(shadowPos, N, shadowBias.y, cc_matLightView, cc_shadowProjInfo.xy);\n    pos = ApplyShadowDepthBias_Orthographic(pos, shadowBias.x, cc_shadowProjDepthInfo.x, cc_shadowProjDepthInfo.y);\n    float realtimeShadow = 1.0;\n    #if CC_DIR_SHADOW_PCF_TYPE == 3\n      realtimeShadow = CCGetDirLightShadowFactorSoft5X(pos);\n    #endif\n    #if CC_DIR_SHADOW_PCF_TYPE == 2\n      realtimeShadow =  CCGetDirLightShadowFactorSoft3X(pos);\n    #endif\n    #if CC_DIR_SHADOW_PCF_TYPE == 1\n      realtimeShadow = CCGetDirLightShadowFactorSoft(pos);\n    #endif\n    #if CC_DIR_SHADOW_PCF_TYPE == 0\n      realtimeShadow = CCGetDirLightShadowFactorHard(pos);\n    #endif\n    shadowNDCPosWithBias = pos;\n    return mix(realtimeShadow, 1.0, cc_shadowNFLSInfo.w);\n  }\n  #if CC_SUPPORT_CASCADED_SHADOW_MAP\n    bool CCGetCSMLevelWithTransition(out highp float ratio, vec3 clipPos) {\n      highp float maxRange = 1.0 - cc_csmSplitsInfo.x;\n      highp float minRange = cc_csmSplitsInfo.x;\n      highp float thresholdInvert = 1.0 / cc_csmSplitsInfo.x;\n      ratio = 0.0;\n      if (clipPos.x <= minRange) {\n        ratio = clipPos.x * thresholdInvert;\n        return true;\n      }\n      if (clipPos.x >= maxRange) {\n        ratio = 1.0 - (clipPos.x - maxRange) * thresholdInvert;\n        return true;\n      }\n      if (clipPos.y <= minRange) {\n        ratio = clipPos.y  * thresholdInvert;\n        return true;\n      }\n      if (clipPos.y >= maxRange) {\n        ratio = 1.0 - (clipPos.y - maxRange) * thresholdInvert;\n        return true;\n      }\n      return false;\n    }\n    bool CCHasCSMLevel(int level, vec3 worldPos) {\n      highp float layerThreshold = cc_csmViewDir0[0].w;\n      bool hasLevel = false;\n      for (int i = 0; i < 4; i++) {\n        if (i == level) {\n          vec4 shadowPos = cc_matCSMViewProj[i] * vec4(worldPos.xyz, 1.0);\n          vec3 clipPos = shadowPos.xyz / shadowPos.w * 0.5 + 0.5;\n          if (clipPos.x >= layerThreshold && clipPos.x <= (1.0 - layerThreshold) &&\n              clipPos.y >= layerThreshold && clipPos.y <= (1.0 - layerThreshold) &&\n              clipPos.z >= 0.0 && clipPos.z <= 1.0) {\n            hasLevel = true;\n          }\n        }\n      }\n      return hasLevel;\n    }\n    void CCGetCSMLevel(out vec4 csmPos, out vec4 shadowProjDepthInfo, out vec4 shadowProjInfo, out vec3 shadowViewDir0, out vec3 shadowViewDir1, out vec3 shadowViewDir2, vec3 worldPos, int level) {\n      highp float layerThreshold = cc_csmViewDir0[0].w;\n      for (int i = 0; i < 4; i++) {\n        vec4 shadowPos = cc_matCSMViewProj[i] * vec4(worldPos.xyz, 1.0);\n        vec3 clipPos = shadowPos.xyz / shadowPos.w * 0.5 + 0.5;\n        if (clipPos.x >= layerThreshold && clipPos.x <= (1.0 - layerThreshold) &&\n            clipPos.y >= layerThreshold && clipPos.y <= (1.0 - layerThreshold) &&\n            clipPos.z >= 0.0 && clipPos.z <= 1.0 && i == level) {\n          csmPos = cc_matCSMViewProj[i] * vec4(worldPos.xyz, 1.0);\n          csmPos.xy = csmPos.xy * cc_csmAtlas[i].xy + cc_csmAtlas[i].zw;\n          shadowProjDepthInfo = cc_csmProjDepthInfo[i];\n          shadowProjInfo = cc_csmProjInfo[i];\n          shadowViewDir0 = cc_csmViewDir0[i].xyz;\n          shadowViewDir1 = cc_csmViewDir1[i].xyz;\n          shadowViewDir2 = cc_csmViewDir2[i].xyz;\n        }\n      }\n    }\n    int CCGetCSMLevel(out bool isTransitionArea, out highp float transitionRatio, out vec4 csmPos, out vec4 shadowProjDepthInfo, out vec4 shadowProjInfo, out vec3 shadowViewDir0, out vec3 shadowViewDir1, out vec3 shadowViewDir2, vec3 worldPos)\n    {\n      int level = -1;\n      highp float layerThreshold = cc_csmViewDir0[0].w;\n      for (int i = 0; i < 4; i++) {\n        vec4 shadowPos = cc_matCSMViewProj[i] * vec4(worldPos.xyz, 1.0);\n        vec3 clipPos = shadowPos.xyz / shadowPos.w * 0.5 + 0.5;\n        if (clipPos.x >= layerThreshold && clipPos.x <= (1.0 - layerThreshold) &&\n            clipPos.y >= layerThreshold && clipPos.y <= (1.0 - layerThreshold) &&\n            clipPos.z >= 0.0 && clipPos.z <= 1.0 && level < 0) {\n          #if CC_CASCADED_LAYERS_TRANSITION\n            isTransitionArea = CCGetCSMLevelWithTransition(transitionRatio, clipPos);\n          #endif\n          csmPos = cc_matCSMViewProj[i] * vec4(worldPos.xyz, 1.0);\n          csmPos.xy = csmPos.xy * cc_csmAtlas[i].xy + cc_csmAtlas[i].zw;\n          shadowProjDepthInfo = cc_csmProjDepthInfo[i];\n          shadowProjInfo = cc_csmProjInfo[i];\n          shadowViewDir0 = cc_csmViewDir0[i].xyz;\n          shadowViewDir1 = cc_csmViewDir1[i].xyz;\n          shadowViewDir2 = cc_csmViewDir2[i].xyz;\n          level = i;\n        }\n      }\n      return level;\n    }\n    int CCGetCSMLevel(out vec4 csmPos, out vec4 shadowProjDepthInfo, out vec4 shadowProjInfo, out vec3 shadowViewDir0, out vec3 shadowViewDir1, out vec3 shadowViewDir2, vec3 worldPos)\n    {\n      bool isTransitionArea = false;\n      highp float transitionRatio = 0.0;\n      return CCGetCSMLevel(isTransitionArea, transitionRatio, csmPos, shadowProjDepthInfo, shadowProjInfo, shadowViewDir0, shadowViewDir1, shadowViewDir2, worldPos);\n    }\n    float CCCSMFactorBase(out vec4 csmPos, out vec4 csmNDCPosWithBias, vec3 worldPos, vec3 N, vec2 shadowBias)\n    {\n      bool isTransitionArea = false;\n      highp float ratio = 0.0;\n      csmPos = vec4(1.0);\n      vec4 shadowProjDepthInfo, shadowProjInfo;\n      vec3 shadowViewDir0, shadowViewDir1, shadowViewDir2;\n      int level = -1;\n      #if CC_CASCADED_LAYERS_TRANSITION\n        level = CCGetCSMLevel(isTransitionArea, ratio, csmPos, shadowProjDepthInfo, shadowProjInfo, shadowViewDir0, shadowViewDir1, shadowViewDir2, worldPos);\n      #else\n        level = CCGetCSMLevel(csmPos, shadowProjDepthInfo, shadowProjInfo, shadowViewDir0, shadowViewDir1, shadowViewDir2, worldPos);\n      #endif\n      if (level < 0) { return 1.0; }\n      vec4 pos = ApplyShadowDepthBias_FaceNormal(csmPos, N, shadowBias.y, shadowViewDir0, shadowViewDir1, shadowViewDir2, shadowProjInfo.xy);\n      pos = ApplyShadowDepthBias_Orthographic(pos, shadowBias.x, shadowProjDepthInfo.x, shadowProjDepthInfo.y);\n      csmNDCPosWithBias = pos;\n      float realtimeShadow = 1.0;\n      #if CC_DIR_SHADOW_PCF_TYPE == 3\n        realtimeShadow = CCGetDirLightShadowFactorSoft5X(pos);\n      #endif\n      #if CC_DIR_SHADOW_PCF_TYPE == 2\n        realtimeShadow = CCGetDirLightShadowFactorSoft3X(pos);\n      #endif\n      #if CC_DIR_SHADOW_PCF_TYPE == 1\n        realtimeShadow = CCGetDirLightShadowFactorSoft(pos);\n      #endif\n      #if CC_DIR_SHADOW_PCF_TYPE == 0\n        realtimeShadow = CCGetDirLightShadowFactorHard(pos);\n      #endif\n      #if CC_CASCADED_LAYERS_TRANSITION\n        vec4 nextCSMPos = vec4(1.0);\n        vec4 nextShadowProjDepthInfo, nextShadowProjInfo;\n        vec3 nextShadowViewDir0, nextShadowViewDir1, nextShadowViewDir2;\n        float nextRealtimeShadow = 1.0;\n        CCGetCSMLevel(nextCSMPos, nextShadowProjDepthInfo, nextShadowProjInfo, nextShadowViewDir0, nextShadowViewDir1, nextShadowViewDir2, worldPos, level + 1);\n        bool hasNextLevel = CCHasCSMLevel(level + 1, worldPos);\n        if (hasNextLevel && isTransitionArea) {\n          vec4 nexPos = ApplyShadowDepthBias_FaceNormal(nextCSMPos, N, shadowBias.y, nextShadowViewDir0, nextShadowViewDir1, nextShadowViewDir2, nextShadowProjInfo.xy);\n          nexPos = ApplyShadowDepthBias_Orthographic(nexPos, shadowBias.x, nextShadowProjDepthInfo.x, nextShadowProjDepthInfo.y);\n          #if CC_DIR_SHADOW_PCF_TYPE == 3\n            nextRealtimeShadow = CCGetDirLightShadowFactorSoft5X(nexPos);\n          #endif\n          #if CC_DIR_SHADOW_PCF_TYPE == 2\n            nextRealtimeShadow = CCGetDirLightShadowFactorSoft3X(nexPos);\n          #endif\n          #if CC_DIR_SHADOW_PCF_TYPE == 1\n            nextRealtimeShadow = CCGetDirLightShadowFactorSoft(nexPos);\n          #endif\n          #if CC_DIR_SHADOW_PCF_TYPE == 0\n            nextRealtimeShadow = CCGetDirLightShadowFactorHard(nexPos);\n          #endif\n          return mix(mix(nextRealtimeShadow, realtimeShadow, ratio), 1.0, cc_shadowNFLSInfo.w);\n        }\n        return mix(realtimeShadow, 1.0, cc_shadowNFLSInfo.w);\n      #else\n        return mix(realtimeShadow, 1.0, cc_shadowNFLSInfo.w);\n      #endif\n    }\n  #else\n    int CCGetCSMLevel(out vec4 csmPos, out vec4 shadowProjDepthInfo, out vec4 shadowProjInfo, out vec3 shadowViewDir0, out vec3 shadowViewDir1, out vec3 shadowViewDir2, vec3 worldPos) {\n      return -1;\n    }\n    float CCCSMFactorBase(out vec4 csmPos, out vec4 csmNDCPosWithBias, vec3 worldPos, vec3 N, vec2 shadowBias) {\n      csmPos = cc_matLightViewProj * vec4(worldPos, 1.0);\n      return CCShadowFactorBase(csmNDCPosWithBias, csmPos, N, shadowBias);\n    }\n  #endif\n  float CCShadowFactorBase(vec4 shadowPos, vec3 N, vec2 shadowBias) {\n    vec4 shadowNDCPosWithBias;\n    return CCShadowFactorBase(shadowNDCPosWithBias, shadowPos, N, shadowBias);\n  }\n  float CCCSMFactorBase(vec3 worldPos, vec3 N, vec2 shadowBias) {\n    vec4 csmPos, csmNDCPosWithBias;\n    return CCCSMFactorBase(csmPos, csmNDCPosWithBias, worldPos, N, shadowBias);\n  }\n  float CCSpotShadowFactorBase(vec4 shadowPos, vec3 worldPos, vec2 shadowBias)\n  {\n    vec4 shadowNDCPosWithBias;\n    return CCSpotShadowFactorBase(shadowNDCPosWithBias, shadowPos, worldPos, shadowBias);\n  }\n#endif\n#if CC_USE_FOG != 4\n  float LinearFog(vec4 pos, vec3 cameraPos, float fogStart, float fogEnd) {\n      vec4 wPos = pos;\n      float cam_dis = distance(cameraPos, wPos.xyz);\n      return clamp((fogEnd - cam_dis) / (fogEnd - fogStart), 0., 1.);\n  }\n  float ExpFog(vec4 pos, vec3 cameraPos, float fogStart, float fogDensity, float fogAtten) {\n      vec4 wPos = pos;\n      float cam_dis = max(distance(cameraPos, wPos.xyz) - fogStart, 0.0) / fogAtten * 4.;\n      float f = exp(-cam_dis * fogDensity);\n      return f;\n  }\n  float ExpSquaredFog(vec4 pos, vec3 cameraPos, float fogStart, float fogDensity, float fogAtten) {\n      vec4 wPos = pos;\n      float cam_dis = max(distance(cameraPos, wPos.xyz) - fogStart, 0.0) / fogAtten * 4.;\n      float f = exp(-cam_dis * cam_dis * fogDensity * fogDensity);\n      return f;\n  }\n  float LayeredFog(vec4 pos, vec3 cameraPos, float fogTop, float fogRange, float fogAtten) {\n      vec4 wPos = pos;\n      vec3 camWorldProj = cameraPos.xyz;\n      camWorldProj.y = 0.;\n      vec3 worldPosProj = wPos.xyz;\n      worldPosProj.y = 0.;\n      float fDeltaD = distance(worldPosProj, camWorldProj) / fogAtten * 2.0;\n      float fDeltaY, fDensityIntegral;\n      if (cameraPos.y > fogTop) {\n          if (wPos.y < fogTop) {\n              fDeltaY = (fogTop - wPos.y) / fogRange * 2.0;\n              fDensityIntegral = fDeltaY * fDeltaY * 0.5;\n          }\n          else {\n              fDeltaY = 0.;\n              fDensityIntegral = 0.;\n          }\n      }\n      else {\n          if (wPos.y < fogTop) {\n              float fDeltaA = (fogTop - cameraPos.y) / fogRange * 2.;\n              float fDeltaB = (fogTop - wPos.y) / fogRange * 2.;\n              fDeltaY = abs(fDeltaA - fDeltaB);\n              fDensityIntegral = abs((fDeltaA * fDeltaA * 0.5) - (fDeltaB * fDeltaB * 0.5));\n          }\n          else {\n              fDeltaY = abs(fogTop - cameraPos.y) / fogRange * 2.;\n              fDensityIntegral = abs(fDeltaY * fDeltaY * 0.5);\n          }\n      }\n      float fDensity;\n      if (fDeltaY != 0.) {\n          fDensity = (sqrt(1.0 + ((fDeltaD / fDeltaY) * (fDeltaD / fDeltaY)))) * fDensityIntegral;\n      }\n      else {\n          fDensity = 0.;\n      }\n      float f = exp(-fDensity);\n      return f;\n  }\n#endif\nvoid CC_TRANSFER_FOG_BASE(vec4 pos, out float factor)\n{\n#if CC_USE_FOG == 0\n\tfactor = LinearFog(pos, cc_cameraPos.xyz, cc_fogBase.x, cc_fogBase.y);\n#elif CC_USE_FOG == 1\n\tfactor = ExpFog(pos, cc_cameraPos.xyz, cc_fogBase.x, cc_fogBase.z, cc_fogAdd.z);\n#elif CC_USE_FOG == 2\n\tfactor = ExpSquaredFog(pos, cc_cameraPos.xyz, cc_fogBase.x, cc_fogBase.z, cc_fogAdd.z);\n#elif CC_USE_FOG == 3\n\tfactor = LayeredFog(pos, cc_cameraPos.xyz, cc_fogAdd.x, cc_fogAdd.y, cc_fogAdd.z);\n#else\n\tfactor = 1.0;\n#endif\n}\nvoid CC_APPLY_FOG_BASE(inout vec4 color, float factor) {\n\tcolor = vec4(mix(cc_fogColor.rgb, color.rgb, factor), color.a);\n}\n#if CC_USE_LIGHT_PROBE\n  #if CC_USE_LIGHT_PROBE\n  vec3 SHEvaluate(vec3 normal)\n  {\n      vec3 result;\n  #if USE_INSTANCING\n      vec4 normal4 = vec4(normal, 1.0);\n      result.r = dot(v_sh_linear_const_r, normal4);\n      result.g = dot(v_sh_linear_const_g, normal4);\n      result.b = dot(v_sh_linear_const_b, normal4);\n  #else\n      vec4 normal4 = vec4(normal, 1.0);\n      result.r = dot(cc_sh_linear_const_r, normal4);\n      result.g = dot(cc_sh_linear_const_g, normal4);\n      result.b = dot(cc_sh_linear_const_b, normal4);\n      vec4 n14 = normal.xyzz * normal.yzzx;\n      float n5 = normal.x * normal.x - normal.y * normal.y;\n      result.r += dot(cc_sh_quadratic_r, n14);\n      result.g += dot(cc_sh_quadratic_g, n14);\n      result.b += dot(cc_sh_quadratic_b, n14);\n      result += (cc_sh_quadratic_a.rgb * n5);\n  #endif\n    #if CC_USE_HDR\n      result *= cc_exposure.w * cc_exposure.x;\n    #endif\n    return result;\n  }\n  #endif\n#endif\n#if CC_USE_REFLECTION_PROBE\n  uniform highp vec4 cc_reflectionProbeData1;\n  uniform highp vec4 cc_reflectionProbeData2;\n  vec4 GetTexData(sampler2D dataMap, float dataMapWidth, float x, float uv_y)\n  {\n    return vec4(\n        decode32(texture2D(dataMap, vec2(((x + 0.5)/dataMapWidth), uv_y))),\n        decode32(texture2D(dataMap, vec2(((x + 1.5)/dataMapWidth), uv_y))),\n        decode32(texture2D(dataMap, vec2(((x + 2.5)/dataMapWidth), uv_y))),\n        decode32(texture2D(dataMap, vec2(((x + 3.5)/dataMapWidth), uv_y)))\n      );\n  }\n  void GetPlanarReflectionProbeData(out vec4 plane, out float planarReflectionDepthScale, out float mipCount, float probeId)\n  {\n      #if USE_INSTANCING\n        float uv_y = (probeId + 0.5) / cc_probeInfo.x;\n        float dataMapWidth = 12.0;\n        vec4 texData1 = GetTexData(cc_reflectionProbeDataMap, dataMapWidth, 0.0, uv_y);\n        vec4 texData2 = GetTexData(cc_reflectionProbeDataMap, dataMapWidth, 4.0, uv_y);\n        plane.xyz = texData1.xyz;\n        plane.w = texData2.x;\n        planarReflectionDepthScale = texData2.y;\n        mipCount = texData2.z;\n      #else\n        plane = cc_reflectionProbeData1;\n        planarReflectionDepthScale = cc_reflectionProbeData2.x;\n        mipCount = cc_reflectionProbeData2.w;\n      #endif\n  }\n  void GetCubeReflectionProbeData(out vec3 centerPos, out vec3 boxHalfSize, out float mipCount, float probeId)\n  {\n      #if USE_INSTANCING\n        float uv_y = (probeId + 0.5) / cc_probeInfo.x;\n        float dataMapWidth = 12.0;\n        vec4 texData1 = GetTexData(cc_reflectionProbeDataMap, dataMapWidth, 0.0, uv_y);\n        vec4 texData2 = GetTexData(cc_reflectionProbeDataMap, dataMapWidth, 4.0, uv_y);\n        vec4 texData3 = GetTexData(cc_reflectionProbeDataMap, dataMapWidth, 8.0, uv_y);\n        centerPos = texData1.xyz;\n        boxHalfSize = texData2.xyz;\n        mipCount = texData3.x;\n      #else\n        centerPos = cc_reflectionProbeData1.xyz;\n        boxHalfSize = cc_reflectionProbeData2.xyz;\n        mipCount = cc_reflectionProbeData2.w;\n      #endif\n  }\n#endif\n#if CC_USE_LIGHTMAP && !CC_FORWARD_ADD\n  uniform sampler2D cc_lightingMap;\n  void SampleAndDecodeLightMapColor(out vec3 lightmapColor, out float dirShadow, out float ao, sampler2D lightingMap, vec2 luv, float lum, vec3 worldNormal)\n  {\n  #if CC_LIGHT_MAP_VERSION > 2\n  #elif CC_LIGHT_MAP_VERSION > 1\n  \tvec4 dataLow = texture2D(lightingMap, luv);\n  \tvec4 dataHigh = texture2D(lightingMap, luv + vec2(0.5, 0.0));\n  \tlightmapColor.xyz = dataLow.xyz + dataHigh.xyz * 0.00392156862745098;\n      lightmapColor.rgb *= lum;\n  \tdirShadow = dataLow.a;\n  \tao = dataHigh.a;\n  #else\n      vec4 lightmap = texture2D(lightingMap, luv);\n      lightmapColor = lightmap.rgb * lum;\n  \tdirShadow = lightmap.a;\n  \tao = 1.0;\n  #endif\n  }\n  void GetLightMapColor(out vec3 lightmapColor, out float dirShadow, out float ao, sampler2D lightingMap, vec2 luv, float lum, vec3 worldNormal)\n  {\n  \tvec4 lightmap;\n  \tvec2 occlusion;\n  \tSampleAndDecodeLightMapColor(lightmapColor, dirShadow, ao, lightingMap, luv, lum, worldNormal);\n  #if CC_USE_HDR\n      lightmapColor.rgb *= cc_exposure.w * cc_exposure.x;\n  #endif\n  }\n#endif\n    uniform vec4 albedo;\n    uniform vec4 albedoScaleAndCutoff;\n    uniform vec4 emissive;\n    uniform float emissiveScale;\n    uniform float occlusion;\n    uniform float roughness;\n    uniform float metallic;\n    uniform float normalStrength;\n    uniform float alphaSource;\n    uniform float albedoScale;\n#if USE_ALBEDO_MAP\n  uniform sampler2D albedoMap;\n#endif\n#if USE_WEIGHT_MAP\n  uniform sampler2D baseWeightMap;\n#endif\n#if USE_METALLIC_MAP\n  uniform sampler2D metallicMap;\n#endif\n#if USE_ROUGHNESS_MAP\n  uniform sampler2D roughnessMap;\n#endif\n#if USE_OCCLUSION_MAP\n  uniform sampler2D occlusionMap;\n#endif\n#if USE_TRANSPARENCY_MAP\n  uniform sampler2D transparencyMap;\n#endif\n#if USE_TRANSPARENCYCOLOR_MAP\n  uniform sampler2D transparencyColorMap;\n#endif\n#if USE_EMISSIVE_MAP\n  uniform sampler2D emissiveMap;\n#endif\n#if USE_EMISSIVESCALE_MAP\n  uniform sampler2D emissiveScaleMap;\n#endif\n#if USE_OPACITY_MAP\n  uniform sampler2D alphaSourceMap;\n#endif\n#if USE_NORMAL_MAP\n  uniform sampler2D normalMap;\n#endif\nfloat discolor(vec3 srcColor) {\n  return dot(GRAY_VECTOR, srcColor);\n}\n#define CC_SURFACES_FRAGMENT_MODIFY_BASECOLOR_AND_TRANSPARENCY\nvec4 SurfacesFragmentModifyBaseColorAndTransparency()\n{\n  vec4 baseColor = albedo;\n  #if USE_VERTEX_COLOR\n    baseColor.rgb *= SRGBToLinear(FSInput_vertexColor.rgb);\n    baseColor.a *= FSInput_vertexColor.a;\n  #endif\n  #if USE_ALBEDO_MAP\n    vec4 texColor = texture2D(albedoMap, TEXTURE_UV);\n    texColor.rgb = SRGBToLinear(texColor.rgb);\n    baseColor = texColor;\n  #endif\n  #if USE_WEIGHT_MAP\n      vec4 weightColor = texture2D(baseWeightMap, TEXTURE_UV);\n      weightColor.rgb = SRGBToLinear(weightColor.rgb);\n      baseColor.rgb *= weightColor.rgb;\n  #else\n      baseColor.rgb *= albedoScale;\n  #endif\n  #if ALPHA_SOURCE_IS_OPACITY\n    #if USE_OPACITY_MAP\n      baseColor.a = 1.0 - texture2D(alphaSourceMap, TEXTURE_UV).ALPHA_SOURCE_CHANNEL;\n    #else\n      baseColor.a = 1.0 - alphaSource;\n    #endif\n  #else\n    #if USE_OPACITY_MAP\n      baseColor.a = texture2D(alphaSourceMap, TEXTURE_UV).ALPHA_SOURCE_CHANNEL;\n    #else\n      baseColor.a = alphaSource;\n    #endif\n  #endif\n  #if USE_ALPHA_TEST\n    if (baseColor.a < albedoScaleAndCutoff.w) discard;\n  #endif\n  return baseColor;\n}\n#define CC_SURFACES_FRAGMENT_ALPHA_CLIP_ONLY\n#define CC_SURFACES_FRAGMENT_MODIFY_WORLD_NORMAL\nvec3 SurfacesFragmentModifyWorldNormal()\n{\n  vec3 normal = FSInput_worldNormal;\n  #if USE_NORMAL_MAP\n    vec3 nmmp = texture2D(normalMap, NORMAL_UV).xyz - vec3(0.5);\n    normal = CalculateNormalFromTangentSpace(nmmp, normalStrength, normal.xyz, FSInput_worldTangent, FSInput_mirrorNormal);\n  #endif\n  return normalize(normal);\n}\n#define CC_SURFACES_FRAGMENT_MODIFY_EMISSIVE\nvec3 SurfacesFragmentModifyEmissive()\n{\n  vec3 emissiveColor = emissive.rgb;\n  #if USE_EMISSIVE_MAP\n      emissiveColor.rgb = SRGBToLinear(texture2D(emissiveMap, TEXTURE_UV).rgb);\n  #endif\n  #if USE_EMISSIVESCALE_MAP\n      vec4 emissiveScaleColor = texture2D(emissiveScaleMap, TEXTURE_UV);\n      emissiveScaleColor.rgb = SRGBToLinear(emissiveScaleColor.rgb);\n      emissiveColor.rgb *= emissiveScaleColor.rgb;\n  #else\n      emissiveColor.rgb *= emissiveScale;\n  #endif\n  return emissiveColor.rgb;\n}\n#define CC_SURFACES_FRAGMENT_MODIFY_PBRPARAMS\nvec4 SurfacesFragmentModifyPBRParams()\n{\n  vec4 pbr = vec4(1.0,1.0,1.0,1.0);\n  float occlusionValue = 1.0;\n  #if USE_OCCLUSION_MAP\n     vec4 occlusionColor = texture2D(occlusionMap, TEXTURE_UV);\n     float occlusionColorValue = discolor(occlusionColor.rgb);\n     #if USE_OCCLUSION_CHANNEL\n         occlusionColor.rgb = SRGBToLinear(occlusionColor.rgb);\n         occlusionColorValue = occlusionColor.OCCLUSION_CHANNEL;\n     #endif\n     occlusionValue = mix(1.0, occlusionColorValue, occlusion);\n  #endif\n  pbr.x = occlusionValue;\n  float roughnessValue = roughness;\n  #if USE_ROUGHNESS_MAP\n     vec4 roughnessColor = texture2D(roughnessMap, TEXTURE_UV);\n     roughnessValue = discolor(roughnessColor.rgb);\n     #if USE_ROUGHNESS_CHANNEL\n         roughnessColor.rgb = SRGBToLinear(roughnessColor.rgb);\n         roughnessValue = roughnessColor.ROUGHNESS_CHANNEL;\n     #endif\n  #endif\n  pbr.y = max(0.02, roughnessValue);\n  float metallicValue = metallic;\n  #if USE_METALLIC_MAP\n     vec4 metallicColor = texture2D(metallicMap, TEXTURE_UV);\n     metallicValue = discolor(metallicColor.rgb);\n     #if USE_METALLIC_CHANNEL\n         metallicColor.rgb = SRGBToLinear(metallicColor.rgb);\n         metallicValue = metallicColor.METALLIC_CHANNEL;\n     #endif\n  #endif\n  pbr.z = metallicValue;\n  pbr.w = 0.5;\n  return pbr;\n}\nstruct LightingIntermediateData\n{\n  vec3 N, H, L, V;\n  float distToLight, distToLightSqr;\n  float distToCamera, distToCameraSqr;\n  float NoL, NoV, NoH;\n  float NoLSat, NoVSat, NoHSat;\n  float NoVAbsSat;\n  #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n  vec3 worldPosition, worldPosition_fract_part;\n  #else\n  vec3 worldPosition;\n  #endif\n  vec3 T, B;\n  float specularParam;\n  float ior;\n#if CC_SURFACES_LIGHTING_ANISOTROPIC\n  float anisotropyShape;\n#endif\n#if CC_SURFACES_LIGHTING_TRANSMIT_DIFFUSE\n  vec4 shadowPosAndDepth;\n  vec4 transmitDiffuseParams;\n#endif\n#if CC_SURFACES_LIGHTING_TRANSMIT_SPECULAR || CC_SURFACES_LIGHTING_TRANSMIT_DIFFUSE\n  vec4 transmitParams;\n  vec3 inScatteringLightColor;\n#endif\n#if CC_SURFACES_LIGHTING_TT\n  vec3 baseColorTT;\n  float ttIntensity, ttScatterCoef;\n#endif\n};\nvoid CCSurfacesLightingGetIntermediateData_PerPixel(inout LightingIntermediateData data, vec3 worldNormal, vec3 worldPos, vec3 worldTangent, vec3 worldBinormal\n#if CC_SURFACES_LIGHTING_ANISOTROPIC\n    , float anisotropyShape\n#endif\n)\n{\n  data.N = worldNormal;\n  data.V = cc_cameraPos.xyz - worldPos;\n  data.distToCameraSqr = dot(data.V, data.V);\n  data.distToCamera = sqrt(data.distToCameraSqr);\n  data.V /= data.distToCamera;\n  data.NoV = dot(data.N, data.V);\n  data.NoVSat = max(data.NoV, 0.0);\n  data.NoVAbsSat = max(abs(data.NoV), 0.0);\n  #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n  packHighpData(data.worldPosition, data.worldPosition_fract_part, worldPos);\n  #else\n  data.worldPosition = worldPos;\n  #endif\n  data.T = worldTangent;\n  data.B = worldBinormal;\n#if CC_SURFACES_LIGHTING_ANISOTROPIC\n  data.anisotropyShape = anisotropyShape;\n#endif\n#if CC_SURFACES_LIGHTING_TRANSMIT_SPECULAR || CC_SURFACES_LIGHTING_TRANSMIT_DIFFUSE\n  data.inScatteringLightColor = vec3(0.0);\n  data.transmitParams = vec4(0.0);\n#endif\n#if CC_SURFACES_LIGHTING_TRANSMIT_DIFFUSE\n  data.shadowPosAndDepth = vec4(0.0, 0.0, 999999.0, 999999.0);\n#endif\n#if CC_SURFACES_LIGHTING_TT\n  data.baseColorTT = vec3(0.0);\n  data.ttIntensity = data.ttScatterCoef = 0.0;\n#endif\n}\nvoid CCSurfacesLightingGetIntermediateData_PerLight(inout LightingIntermediateData data, vec3 lightDirWithDist)\n{\n  data.L = lightDirWithDist;\n  data.distToLightSqr = dot(data.L, data.L);\n  data.distToLight = sqrt(data.distToLightSqr);\n  data.L /= data.distToLight;\n  data.H = normalize(data.L + data.V);\n  data.NoL = dot(data.N, data.L);\n  data.NoH = dot(data.N, data.H);\n  data.NoLSat = max(data.NoL, 0.0);\n  data.NoHSat = max(data.NoH, 0.0);\n}\nstruct LightingResult\n{\n  vec3 diffuseColorWithLighting, specularColorWithLighting;\n  vec3 directDiffuse, directSpecular;\n  vec3 environmentDiffuse, environmentSpecular;\n  float shadow, ao;\n  vec3 lightmapColor;\n  vec3 emissive;\n#if CC_SURFACES_LIGHTING_USE_FRESNEL\n  float fresnel;\n#endif\n#if CC_SURFACES_LIGHTING_TRANSMIT_SPECULAR\n  vec3 directTransmitSpecular, environmentTransmitSpecular;\n#endif\n#if CC_SURFACES_LIGHTING_TRANSMIT_DIFFUSE\n  vec3 directTransmitDiffuse, environmentTransmitDiffuse;\n#endif\n#if CC_SURFACES_LIGHTING_TRT\n  vec3 directTRT, environmentTRT;\n  vec3 specularColorWithLightingTRT;\n#endif\n#if CC_SURFACES_LIGHTING_TT\n  vec3 directTT;\n  vec3 diffuseColorWithLightingTT;\n#endif\n};\nstruct LightingMiscData\n{\n  float lightType;\n  vec3 lightPos, lightDir;\n  vec4 lightColorAndIntensity;\n  vec4 lightSizeRangeAngle;\n};\nfloat D_GGX(float roughness, float NoH)\n{\n    float m = roughness * roughness;\n    float m2 = m * m;\n    float d = (NoH * m2 - NoH) * NoH + 1.0;\n    return m2 / max(EPSILON, d * d);\n}\nfloat D_GGXMobile(float roughness, float NoH) {\n  float OneMinusNoHSqr = 1.0 - NoH * NoH;\n  float a = roughness * roughness;\n  float n = NoH * a;\n  float p = a / max(EPSILON, OneMinusNoHSqr + n * n);\n  return p * p;\n}\nvoid GetAnisotropicRoughness(float roughness, float anisotropyShape, out float roughnessX, out float roughnessY)\n{\n    float shapeSign = sign(anisotropyShape);\n    anisotropyShape *= anisotropyShape;\n    float r1 = roughness, r2 = roughness;\n    float lerpedRoughness = mix(1.0, 10.0, anisotropyShape);\n    r2 *= shapeSign < 0.0 ? lerpedRoughness : 1.0;\n    r1 *= shapeSign > 0.0 ? lerpedRoughness : 1.0;\n    roughnessX = saturate(r1);\n    roughnessY = saturate(r2);\n}\nfloat D_GGXAniso(float RoughnessX, float RoughnessY, float NoH, vec3 H, vec3 X, vec3 Y)\n{\n    float mx = max(EPSILON_LOWP, RoughnessX * RoughnessX);\n    float my = max(EPSILON_LOWP, RoughnessY * RoughnessY);\n    float XoH = dot(X, H);\n    float YoH = dot(Y, H);\n    float d = XoH * XoH / (mx * mx) + YoH * YoH / (my * my) + NoH * NoH;\n    return 1.0 / max(EPSILON_LOWP, mx * my * d * d);\n}\nvec3 GetAnisotropicReflect(float roughness, float anisotropyShape, vec3 V, vec3 N, vec3 X, vec3 Y)\n{\n    float shapeSign = sign(anisotropyShape);\n    anisotropyShape *= anisotropyShape;\n    anisotropyShape = min(anisotropyShape, 0.4);\n    anisotropyShape *= smoothstep(0.0, 0.03, roughness);\n    vec3 reflectTarget = shapeSign < 0.0 ? mix(N, -Y, anisotropyShape) :\n                         shapeSign > 0.0 ? mix(N, -X, anisotropyShape) : N;\n    return reflect(-V, reflectTarget);\n}\nvec3 IntegratedGFApprox (vec3 specular, float roughness, float NoV) {\n  const vec4 c0 = vec4(-1.0, -0.0275, -0.572, 0.022);\n  const vec4 c1 = vec4(1.0, 0.0425, 1.04, -0.04);\n  vec4 r = roughness * c0 + c1;\n  float a004 = min(r.x * r.x, exp2(-9.28 * NoV)) * r.x + r.y;\n  vec2 AB = vec2(-1.04, 1.04) * a004 + r.zw;\n  AB.y *= clamp(50.0 * specular.g, 0.0, 1.0);\n  return max(vec3(0.0), specular * AB.x + AB.y);\n}\n#define DiffuseCoefficient_EnergyConservation INV_PI\nfloat CalculateFresnelCoefficient(float ior, float NoVSat)\n{\n\tfloat g, c, n, prev, next;\n\tn = ior;\n\tc = ior * NoVSat;\n\tg = sqrt(1.0 + c * c - c);\n\tprev = (g - c) / (g + c);\n\tnext = (c * (g+c) - n*n) / (c * (g-c) + n*n);\n\tprev *= prev;\n\tnext *= next;\n\treturn 0.5 * prev * (1.0 + next);\n}\nfloat SmoothDistAtt (float distSqr, float invSqrAttRadius) {\n  float factor = distSqr * invSqrAttRadius;\n  float smoothFactor = clamp(1.0 - factor * factor, 0.0, 1.0);\n  return smoothFactor * smoothFactor;\n}\nfloat GetDistAtt (float distSqr, float invSqrAttRadius) {\n  float attenuation = 1.0 / max(distSqr, 0.01*0.01);\n  attenuation *= SmoothDistAtt(distSqr , invSqrAttRadius);\n  return attenuation;\n}\nfloat GetAngleAtt (vec3 L, vec3 litDir, float litAngleScale, float litAngleOffset) {\n  float cd = dot(litDir, L);\n  float attenuation = clamp(cd * litAngleScale + litAngleOffset, 0.0, 1.0);\n  return (attenuation * attenuation);\n}\nfloat CalculateDistanceAttenuation(float distToLightSqr, float lightRadius, float lightRange)\n{\n  float litRadiusSqr = lightRadius * lightRadius;\n  float attRadiusSqrInv = 1.0 / max(lightRange, 0.01);\n  attRadiusSqrInv *= attRadiusSqrInv;\n  float edgeAttenuation = litRadiusSqr / max(litRadiusSqr, distToLightSqr);\n  return GetDistAtt(distToLightSqr, attRadiusSqrInv) * edgeAttenuation;\n}\nfloat CalculateAngleAttenuation(vec3 spotLightDir, vec3 L, float cosAngleOuter)\n{\n  float cosInner = max(dot(spotLightDir, L), 0.01);\n  float litAngleScale = 1.0 / max(0.001, cosInner - cosAngleOuter);\n  float litAngleOffset = -cosAngleOuter * litAngleScale;\n  return GetAngleAtt(L, spotLightDir, litAngleScale, litAngleOffset);\n}\nvec3 CalculateRefractDirection(vec3 N, vec3 V, float NoV, float ior)\n{\n  float NoVAbs = abs(NoV);\n  float sideSign = NoV < 0.0 ? -1.0 : 1.0;\n  N *= sideSign;\n  NoV *= sideSign;\n  float sinB = sqrt(1.0 - NoVAbs*NoVAbs) / ior;\n  vec3 X = normalize(-V + N * NoVAbs);\n  vec3 R = -N + X * sinB;\n  return R;\n}\nvec3 CalculateReflectDirection(vec3 N, vec3 V, float NoV)\n{\n  float sideSign = NoV < 0.0 ? -1.0 : 1.0;\n  N *= sideSign;\n  return reflect(-V, N);\n}\nvec3 CalculatePlanarReflectPositionOnPlane(vec3 N, vec3 V, vec3 worldPos, vec4 plane, vec3 cameraPos, float probeReflectedDepth)\n{\n  float distPixelToPlane = -dot(plane, vec4(worldPos, 1.0));\n  plane.w += distPixelToPlane;\n  float distCameraToPlane = abs(-dot(plane, vec4(cameraPos, 1.0)));\n  vec3 planeN = plane.xyz;\n  vec3 virtualCameraPos = cameraPos - 2.0 * distCameraToPlane * planeN;\n  vec3 bumpedR = normalize(reflect(-V, N));\n  vec3 reflectedPointPos = worldPos + probeReflectedDepth * bumpedR;\n  vec3 virtualCameraToReflectedPoint = normalize(reflectedPointPos - virtualCameraPos);\n  float y = distCameraToPlane / max(EPSILON_LOWP, dot(planeN, virtualCameraToReflectedPoint));\n  return virtualCameraPos + y * virtualCameraToReflectedPoint;\n}\nvec4 CalculateBoxProjectedDirection(vec3 R, vec3 worldPos, vec3 cubeCenterPos, vec3 cubeBoxHalfSize)\n{\n  vec3 W = worldPos - cubeCenterPos;\n  vec3 projectedLength = (sign(R) * cubeBoxHalfSize - W) / (R + vec3(EPSILON));\n  float len = min(min(projectedLength.x, projectedLength.y), projectedLength.z);\n  vec3 P = W + len * R;\n  float weight = len < 0.0 ? 0.0 : 1.0;\n  return vec4(P, weight);\n}\nvec3 CalculateDirectDiffuse(in LightingIntermediateData lightingData, in vec4 lightSourceColorAndIntensity)\n{\n    vec3 irradiance = vec3(lightingData.NoLSat) * lightSourceColorAndIntensity.rgb * lightSourceColorAndIntensity.w;\n    return irradiance * DiffuseCoefficient_EnergyConservation;\n}\nvec3 CalculateDirectSpecular(in LightingIntermediateData lightingData, in vec4 lightSourceColorAndIntensity)\n{\n    vec3 irradiance = vec3(lightingData.NoLSat) * lightSourceColorAndIntensity.rgb * lightSourceColorAndIntensity.w;\n    float roughness = lightingData.specularParam;\n  #if CC_SURFACES_LIGHTING_ANISOTROPIC\n      float rT, rB;\n      GetAnisotropicRoughness(roughness, lightingData.anisotropyShape, rT, rB);\n      float calcSpec = D_GGXAniso(rT, rB, lightingData.NoHSat, lightingData.H, lightingData.T, lightingData.B);\n  #else\n    #if CC_SURFACES_USE_LEGACY_COMPATIBLE_LIGHTING\n      float calcSpec = (roughness * 0.25 + 0.25) * D_GGXMobile(roughness, lightingData.NoHSat);\n    #else\n      float calcSpec = D_GGX(roughness, lightingData.NoHSat);\n    #endif\n  #endif\n    return irradiance * calcSpec;\n}\n#if CC_SURFACES_LIGHTING_ANISOTROPIC && CC_SURFACES_LIGHTING_ANISOTROPIC_ENVCONVOLUTION_COUNT\n  vec3 EnvAnisotropicReflection(samplerCube tex, vec3 R, float roughness, float mipCount, float anisotropyShape, vec3 V, vec3 N, vec3 T, vec3 B) {\n      R = normalize(R);\n      float integratedBRDF = 0.0;\n      vec3 envSpec = vec3(0.0);\n      const int SAMPLE_STEP_COUNT = CC_SURFACES_LIGHTING_ANISOTROPIC_ENVCONVOLUTION_COUNT;\n      float sampleAngleRange = PI * abs(anisotropyShape);\n      vec3 anisoDirection = anisotropyShape < 0.0 ? T : B;\n      vec3 ROnNormalPlane = normalize(R - anisoDirection * dot(R, anisoDirection));\n      vec3 stepOffset = normalize(ROnNormalPlane - N) * (sampleAngleRange / float(SAMPLE_STEP_COUNT * 2));\n      for (int i = -SAMPLE_STEP_COUNT; i <= SAMPLE_STEP_COUNT; ++i)\n      {\n          float rT, rB;\n          GetAnisotropicRoughness(roughness, anisotropyShape, rT, rB);\n          #if CC_IBL_CONVOLUTED\n            float coef = abs(float(i)) / float(SAMPLE_STEP_COUNT) * float(SAMPLE_STEP_COUNT);\n          #else\n            float coef = pow(abs(float(i)) / float(SAMPLE_STEP_COUNT), 1.3) * float(SAMPLE_STEP_COUNT);\n          #endif\n          vec3 H = normalize(N + stepOffset * sign(float(i)) * coef);\n          vec3 L = reflect(-V, H);\n          float NoHSat = saturate(dot(N, H));\n          float calcSpec = D_GGXAniso(rT, rB, NoHSat, H, T, B);\n          envSpec += calcSpec * EnvReflection(tex, L, roughness, mipCount);\n          integratedBRDF += calcSpec;\n      }\n      envSpec /= integratedBRDF;\n      return envSpec;\n  }\n#endif\nvec3 SampleEnvironmentSpecular(samplerCube tex, in LightingIntermediateData lightingData, float mipCount)\n{\n    vec3 envSpec = vec3(0.0);\n    float roughness = lightingData.specularParam;\n    #if CC_SURFACES_LIGHTING_ANISOTROPIC && !CC_SURFACES_LIGHTING_ANISOTROPIC_ENVCONVOLUTION_COUNT\n      vec3 R = GetAnisotropicReflect(roughness, lightingData.anisotropyShape, lightingData.V, lightingData.N, lightingData.T, lightingData.B);\n    #else\n      vec3 R = CalculateReflectDirection(lightingData.N, lightingData.V, lightingData.NoV);\n    #endif\n    #if CC_SURFACES_LIGHTING_ANISOTROPIC && CC_SURFACES_LIGHTING_ANISOTROPIC_ENVCONVOLUTION_COUNT\n      envSpec = EnvAnisotropicReflection(tex, R, roughness, mipCount, lightingData.anisotropyShape, lightingData.V, lightingData.N, lightingData.T, lightingData.B);\n    #else\n      #if CC_SURFACES_USE_REFLECTION_DENOISE && !CC_IBL_CONVOLUTED\n        envSpec = EnvReflectionWithMipFiltering(normalize(R), roughness, mipCount, 0.6);\n      #else\n        envSpec = EnvReflection(tex, R, roughness, mipCount);\n      #endif\n    #endif\n    return envSpec;\n}\nvec3 SampleEnvironmentSpecular(samplerCube tex, in LightingIntermediateData lightingData, float mipCount, vec3 worldPos, vec3 cubeCenterPos, vec3 boxHalfSize)\n{\n    vec3 envSpec = vec3(0.0);\n    float roughness = lightingData.specularParam;\n    #if CC_SURFACES_LIGHTING_ANISOTROPIC && !CC_SURFACES_LIGHTING_ANISOTROPIC_ENVCONVOLUTION_COUNT\n      vec3 R = GetAnisotropicReflect(roughness, lightingData.anisotropyShape, lightingData.V, lightingData.N, lightingData.T, lightingData.B);\n    #else\n      vec3 R = CalculateReflectDirection(lightingData.N, lightingData.V, lightingData.NoV);\n    #endif\n    vec4 fixedR = CalculateBoxProjectedDirection(R, worldPos, cubeCenterPos, boxHalfSize);\n    R = fixedR.xyz;\n    vec3 envmap = SampleEnvironmentSpecular(cc_environment, lightingData, cc_ambientGround.w).xyz;\n    #if CC_SURFACES_LIGHTING_ANISOTROPIC && CC_SURFACES_LIGHTING_ANISOTROPIC_ENVCONVOLUTION_COUNT\n      envSpec = EnvAnisotropicReflection(tex, fixedR.xyz, roughness, mipCount, lightingData.anisotropyShape, lightingData.V, lightingData.N, lightingData.T, lightingData.B);\n      envSpec = mix(envmap, envSpec, fixedR.w);\n    #else\n      #if CC_SURFACES_USE_REFLECTION_DENOISE && !CC_IBL_CONVOLUTED\n        envSpec = EnvReflectionWithMipFiltering(normalize(R), roughness, mipCount, 0.6);\n      #else\n        envSpec = mix(envmap, EnvReflection(tex, R, roughness, mipCount), fixedR.w);\n      #endif\n    #endif\n    return envSpec;\n}\nvec3 CalculateEnvironmentDiffuse(in LightingIntermediateData lightingData, float lightIntensity)\n{\n  float fAmb = max(EPSILON, 0.5 - lightingData.N.y * 0.5);\n  vec3 ambDiff = mix(cc_ambientSky.rgb, cc_ambientGround.rgb, fAmb);\n  #if CC_USE_IBL\n    #if CC_USE_DIFFUSEMAP && !CC_USE_LIGHT_PROBE\n      vec3 rotationDir = RotationVecFromAxisY(lightingData.N, cc_surfaceTransform.z, cc_surfaceTransform.w);\n      vec4 diffuseMap = textureCube(cc_diffuseMap, rotationDir);\n      #if CC_USE_DIFFUSEMAP == 2\n        ambDiff = unpackRGBE(diffuseMap);\n      #else\n        ambDiff = SRGBToLinear(diffuseMap.rgb);\n      #endif\n    #endif\n  #endif\n  ambDiff.rgb *= lightIntensity;\n  #if CC_USE_LIGHT_PROBE\n    ambDiff.rgb += SHEvaluate(lightingData.N);\n  #endif\n  return ambDiff.rgb;\n}\nvec3 CalculateEnvironmentSpecular(in LightingIntermediateData lightingData, float lightIntensity)\n{\n  vec3 envSpec = vec3(0.0);\n#if CC_USE_REFLECTION_PROBE\n    vec3 worldPos;\n    #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n    worldPos = unpackHighpData(lightingData.worldPosition, lightingData.worldPosition_fract_part);\n    #else\n    worldPos = lightingData.worldPosition;\n    #endif\n  #if CC_USE_REFLECTION_PROBE == REFLECTION_PROBE_TYPE_CUBE\n    if(FSInput_reflectionProbeId < 0.0){\n        envSpec = SampleEnvironmentSpecular(cc_reflectionProbeCubemap, lightingData, cc_ambientGround.w);\n    }else{\n      vec3 centerPos, boxHalfSize;\n      float mipCount;\n      GetCubeReflectionProbeData(centerPos, boxHalfSize, mipCount, FSInput_reflectionProbeId);\n      envSpec = SampleEnvironmentSpecular(cc_reflectionProbeCubemap, lightingData, mipCount, worldPos, centerPos, boxHalfSize);\n    }\n  #elif CC_USE_REFLECTION_PROBE == REFLECTION_PROBE_TYPE_PLANAR\n    vec3 R = normalize(CalculateReflectDirection(lightingData.N, lightingData.V, lightingData.NoV));\n    if(FSInput_reflectionProbeId < 0.0){\n        vec2 screenUV = GetPlanarReflectScreenUV(worldPos, cc_matViewProj, cc_cameraPos.w, lightingData.V, R);\n        envSpec = unpackRGBE(fragTextureLod(cc_reflectionProbePlanarMap, screenUV, 1.0)).xyz;\n    }else{\n        vec4 plane;\n        float planarReflectionDepthScale, mipCount;\n        GetPlanarReflectionProbeData(plane, planarReflectionDepthScale, mipCount, FSInput_reflectionProbeId);\n        vec3 worldPosOffset = CalculatePlanarReflectPositionOnPlane(lightingData.N, lightingData.V, worldPos, plane, cc_cameraPos.xyz, planarReflectionDepthScale);\n        vec2 screenUV = GetPlanarReflectScreenUV(worldPosOffset, cc_matViewProj, cc_cameraPos.w, lightingData.V, R);\n        envSpec = unpackRGBE(fragTextureLod(cc_reflectionProbePlanarMap, screenUV, mipCount)).xyz;\n    }\n  #endif\n#elif CC_USE_IBL\n    envSpec = SampleEnvironmentSpecular(cc_environment, lightingData, cc_ambientGround.w);\n#endif\n  return envSpec * lightIntensity;\n}\nbool CCSurfacesLightingEnableShadow(in float NoL)\n{\n  return NoL > 0.0;\n}\nfloat CCSurfacesLightingCalculateDistanceAttenuation(in LightingIntermediateData lightingData, in vec4 lightSizeRangeAngle)\n{\n  return CalculateDistanceAttenuation(lightingData.distToLightSqr, lightSizeRangeAngle.x, lightSizeRangeAngle.y);\n}\nfloat CCSurfacesLightingCalculateAngleAttenuation(in LightingIntermediateData lightingData, in vec4 lightSizeRangeAngle, in vec3 spotLightDir)\n{\n  return CalculateAngleAttenuation(spotLightDir, lightingData.L, lightSizeRangeAngle.z);\n}\nvoid CCSurfacesLightingCalculateDirect(out vec3 lightingDiffuse, out vec3 lightingSpecular, in LightingIntermediateData lightingData, in vec4 lightSourceColorAndIntensity)\n{\n#if CC_SURFACES_LIGHTING_CALCULATE_DIFFUSE\n  lightingDiffuse = CalculateDirectDiffuse(lightingData, lightSourceColorAndIntensity);\n#else\n  lightingDiffuse = vec3(0.0);\n#endif\n#if CC_SURFACES_LIGHTING_CALCULATE_SPECULAR\n  lightingSpecular = CalculateDirectSpecular(lightingData, lightSourceColorAndIntensity);\n#else\n  lightingSpecular = vec3(0.0);\n#endif\n}\nvoid CCSurfacesLightingCalculateEnvironment(out vec3 lightingDiffuse, out vec3 lightingSpecular, in LightingIntermediateData lightingData, float lightIntensity)\n{\n#if CC_SURFACES_LIGHTING_CALCULATE_DIFFUSE\n  lightingDiffuse = CalculateEnvironmentDiffuse(lightingData, lightIntensity);\n#else\n  lightingDiffuse = vec3(0.0);\n#endif\n#if CC_SURFACES_LIGHTING_CALCULATE_SPECULAR\n  lightingSpecular = CalculateEnvironmentSpecular(lightingData, lightIntensity);\n#else\n  lightingSpecular = vec3(0.0);\n#endif\n}\n#if CC_SURFACES_LIGHTING_USE_FRESNEL\n  float CCSurfaceLightingCalculateFresnel(in LightingIntermediateData lightingData)\n  {\n    return CalculateFresnelCoefficient(lightingData.ior, abs(lightingData.NoV));\n  }\n#endif\n#if CC_SURFACES_LIGHTING_TRANSMIT_SPECULAR\n  void CCSurfacesLightingCalculateDirectTransmitSpecular(out vec3 lightingSpecular, in LightingIntermediateData lightingData, in vec4 lightSourceColorAndIntensity)\n  {\n    float roughness = lightingData.specularParam;\n    float NoLSat = saturate(dot(lightingData.N, -lightingData.L));\n    vec3 irradiance = NoLSat * lightSourceColorAndIntensity.rgb * lightSourceColorAndIntensity.w;\n    vec3 R = CalculateRefractDirection(lightingData.N, lightingData.V, lightingData.NoV, lightingData.ior);\n    float RoL = dot(lightingData.L, normalize(R));\n    float calcSpec = D_GGX(roughness, saturate(RoL));\n    lightingSpecular = irradiance * calcSpec;\n  }\n  void CCSurfacesLightingCalculateEnvironmentTransmitSpecular(out vec3 lightingSpecular, in LightingIntermediateData lightingData, float lightIntensity)\n  {\n    vec3 envSpec = vec3(0.0);\n    vec3 R = CalculateRefractDirection(lightingData.N, lightingData.V, lightingData.NoV, lightingData.ior);\n    float roughness = lightingData.specularParam;\n  #if CC_USE_REFLECTION_PROBE\n    #if CC_USE_REFLECTION_PROBE == REFLECTION_PROBE_TYPE_CUBE\n      envSpec = EnvReflection(cc_reflectionProbeCubemap, R, roughness, cc_ambientGround.w);\n    #endif\n  #endif\n  #if CC_USE_IBL && CC_USE_REFLECTION_PROBE != REFLECTION_PROBE_TYPE_CUBE\n    envSpec = EnvReflection(cc_environment, R, roughness, cc_ambientGround.w);\n  #endif\n    lightingSpecular = envSpec * lightIntensity;\n    float distance = lightingData.transmitParams.w, inScatterCoef = lightingData.transmitParams.z;\n    vec2 e = lightingData.transmitParams.xy;\n    vec2 extinction = exp(-e * distance * vec2(1.0, inScatterCoef));\n    vec3 inScattered = (1.0 - extinction.y) * lightingData.inScatteringLightColor.rgb;\n    lightingSpecular = lightingSpecular * extinction.x + inScattered;\n  }\n#endif\n#if CC_SURFACES_LIGHTING_TRANSMIT_DIFFUSE\n  void CCSurfacesLightingCalculateDirectTransmitDiffuse(out vec3 transmitDiffuse, in LightingResult lightingResult, in LightingIntermediateData lightingData, in vec4 lightSourceColorAndIntensity)\n  {\n    vec3 backIrradiance = vec3(saturate(-lightingData.NoL)) * lightSourceColorAndIntensity.rgb * lightSourceColorAndIntensity.w;\n    vec3 transmitDiffuse = backIrradiance * DiffuseCoefficient_EnergyConservation;\n    lightingData.transmitParams;\n    lightingData.transmitDiffuseParams;\n    transmitDiffuse = vec3(0.0);\n  }\n  void CCSurfacesLightingCalculateEnvironmentTransmitDiffuse(out vec3 transmitDiffuse, in LightingResult lightingResult, in LightingIntermediateData lightingData, float lightIntensity)\n  {\n    lightingData.N *= -1.0;\n    vec3 backIrradiance = CalculateEnvironmentDiffuse(lightingData, lightIntensity);\n    lightingData.transmitParams;\n    lightingData.transmitDiffuseParams;\n    transmitDiffuse = vec3(0.0);\n  }\n#endif\n#if CC_SURFACES_LIGHTING_TRT\n  #ifndef CC_SURFACES_FRAGMENT_MODIFY_TRT_SPECULAR_COLOR\n    vec3 SurfacesLightingGetTRTSpecularColor(float specBRDF, bool isSaturated)\n    {\n      return vec3(specBRDF);\n    }\n  #endif\n  void CCSurfacesLightingCalculateDirectTRT(out vec3 TRTLighting, in LightingIntermediateData lightingData, in vec4 lightSourceColorAndIntensity)\n  {\n    vec3 unused;\n    CCSurfacesLightingCalculateDirect(unused, TRTLighting, lightingData, vec4(1.0));\n    float brdf = TRTLighting.x;\n    vec3 Color = SurfacesLightingGetTRTSpecularColor(brdf, true);\n    TRTLighting *= Color * lightSourceColorAndIntensity.w;\n  }\n  void CCSurfacesLightingCalculateEnvironmentTRT(out vec3 TRTLighting, in LightingIntermediateData lightingData, float lightIntensity)\n  {\n    vec3 unused;\n    TRTLighting = CalculateEnvironmentSpecular(lightingData, 1.0);\n    float brdf = length(TRTLighting);\n    vec3 Color = SurfacesLightingGetTRTSpecularColor(brdf, false);\n    TRTLighting *= Color * lightIntensity;\n  }\n#endif\n#if CC_SURFACES_LIGHTING_TT\n  void CCSurfacesLightingCalculateDirectTT(inout LightingResult lightingResult, in LightingIntermediateData lightingData, in vec4 lightSourceColorAndIntensity)\n  {\n    lightingResult.diffuseColorWithLightingTT = lightingResult.diffuseColorWithLighting;\n    float w = lightingData.ttIntensity;\n    vec3 scatteredLighting = pow(saturate(lightingData.baseColorTT * w + lightingData.NoLSat) * lightingData.NoLSat, vec3(mix(0.5, 0.5 + lightingData.ttScatterCoef, w)));\n    vec3 ttLighting = scatteredLighting - lightingData.NoLSat;\n    lightingResult.directTT = ttLighting * DiffuseCoefficient_EnergyConservation * lightSourceColorAndIntensity.xyz* lightSourceColorAndIntensity.w;\n  }\n#endif\nstruct SurfacesMaterialData\n{\n  #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n  vec3 worldPos, worldPos_fract_part;\n  #else\n  vec3 worldPos;\n  #endif\n  vec4 baseColor;\n  vec3 worldNormal;\n  vec3 emissive;\n  float specularIntensity;\n  float roughness;\n  float metallic;\n  float ao;\n  vec3 worldTangent, worldBinormal;\n  float ior;\n#if CC_SURFACES_LIGHTING_ANISOTROPIC\n  float anisotropyShape;\n#endif\n#if CC_SURFACES_LIGHTING_TRANSMIT_SPECULAR || CC_SURFACES_LIGHTING_TRANSMIT_DIFFUSE\n  vec3 inScatteringLightColor;\n  vec4 transmitParams;\n#endif\n#if CC_SURFACES_LIGHTING_TRANSMIT_DIFFUSE\n  vec4 transmitDiffuseParams;\n#endif\n#if CC_SURFACES_LIGHTING_TRT\n  vec3 baseColorTRT;\n  float trtIntensity, roughnessTRT;\n  vec3 worldTangentTRT, worldBinormalTRT;\n#endif\n#if CC_SURFACES_LIGHTING_TT\n  vec3 baseColorTT;\n  float ttIntensity, ttScatterCoef;\n#endif\n};\n#ifndef CC_SURFACES_FRAGMENT_MODIFY_BASECOLOR_AND_TRANSPARENCY\nvec4 SurfacesFragmentModifyBaseColorAndTransparency()\n{\n    return FSInput_vertexColor;\n}\n#endif\n#ifndef CC_SURFACES_FRAGMENT_ALPHA_CLIP_ONLY\n#endif\n#ifndef CC_SURFACES_FRAGMENT_MODIFY_WORLD_NORMAL\nvec3 SurfacesFragmentModifyWorldNormal()\n{\n    return normalize(FSInput_worldNormal);\n}\n#endif\n#ifndef CC_SURFACES_FRAGMENT_MODIFY_WORLD_TANGENT_AND_BINORMAL\nvoid SurfacesFragmentModifyWorldTangentAndBinormal(inout vec3 worldTangent, inout vec3 worldBinormal, vec3 worldNormal)\n{\n    vec3 tangent = FSInput_worldTangent;\n#if CC_SURFACES_USE_TANGENT_SPACE\n    vec3 binormal = normalize(CalculateBinormal(worldNormal.xyz, tangent, FSInput_mirrorNormal));\n    tangent = normalize(cross(binormal, worldNormal));\n#else\n    vec3 binormal = vec3(0.0, 0.0, 0.0);\n#endif\n    worldTangent = tangent;\n    worldBinormal = binormal;\n}\n#endif\n#ifndef CC_SURFACES_FRAGMENT_MODIFY_IOR\nfloat SurfacesFragmentModifyIOR()\n{\n    return 1.0;\n}\n#endif\n#ifndef CC_SURFACES_FRAGMENT_MODIFY_ANISOTROPY_PARAMS\nvec4 SurfacesFragmentModifyAnisotropyParams(out float isRotation)\n{\n    isRotation = 1.0;\n    return vec4(1.0, 0.0, 0.0, 0.0);\n}\n#endif\n#ifndef CC_SURFACES_FRAGMENT_MODIFY_EMISSIVE\nvec3 SurfacesFragmentModifyEmissive()\n{\n    return vec3(0.0, 0.0, 0.0);\n}\n#endif\n#ifndef CC_SURFACES_FRAGMENT_MODIFY_PBRPARAMS\nvec4 SurfacesFragmentModifyPBRParams()\n{\n    return vec4(1.0, 0.5, 0.0, 0.5);\n}\n#endif\n#ifndef CC_SURFACES_FRAGMENT_MODIFY_TRANSMIT_PARAMS\nvoid SurfacesFragmentModifyTransmitParams(out vec4 transmitParams, out vec3 inScatteringLightColor)\n{\n    transmitParams = vec4(0.0, 0.0, 0.0, 0.0);\n    inScatteringLightColor = vec3(0.0);\n}\n#endif\n#ifndef CC_SURFACES_FRAGMENT_MODIFY_TRANSMIT_DIFFUSE_PARAMS\nvec4 SurfacesFragmentModifyTransmitDiffuseParams()\n{\n    return vec4(1.0, 0.0, 0.0, 0.0);\n}\n#endif\n#ifndef CC_SURFACES_FRAGMENT_MODIFY_TRT_PARAMS\nvec4 SurfacesFragmentModifyTRTParams()\n{\n    return vec4(0.2, 0.0, 0.0, 1.0);\n}\n#endif\n#ifndef CC_SURFACES_FRAGMENT_MODIFY_TRT_COLOR\nvec3 SurfacesFragmentModifyTRTColor()\n{\n    return vec3(1.0, 1.0, 1.0);\n}\n#endif\n#ifndef CC_SURFACES_FRAGMENT_MODIFY_TT_PARAMS\nvec4 SurfacesFragmentModifyTTParams()\n{\n    return vec4(0.0, 0.0, 0.0, 1.0);\n}\n#endif\n#ifndef CC_SURFACES_FRAGMENT_MODIFY_TT_COLOR\nvec3 SurfacesFragmentModifyTTColor(in vec3 baseColor, in vec3 trtColor)\n{\n    return vec3(1.0, 1.0, 1.0);\n}\n#endif\n#ifndef CC_SURFACES_FRAGMENT_MODIFY_SHARED_DATA\nvoid SurfacesFragmentModifySharedData(inout SurfacesMaterialData surfaceData)\n{\n}\n#endif\nvoid CCSurfacesFragmentGetMaterialData(inout SurfacesMaterialData surfaceData)\n{\n  #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n  packHighpData(surfaceData.worldPos, surfaceData.worldPos_fract_part, FSInput_worldPos);\n  #else\n  surfaceData.worldPos = FSInput_worldPos;\n  #endif\n  surfaceData.baseColor = SurfacesFragmentModifyBaseColorAndTransparency();\n  surfaceData.worldNormal = SurfacesFragmentModifyWorldNormal();\n  SurfacesFragmentModifyWorldTangentAndBinormal(surfaceData.worldTangent, surfaceData.worldBinormal, surfaceData.worldNormal);\n  surfaceData.ior = SurfacesFragmentModifyIOR();\n#if CC_SURFACES_LIGHTING_ANISOTROPIC\n  float isRotation;\n  vec4 anisotropyParams = SurfacesFragmentModifyAnisotropyParams(isRotation);\n  surfaceData.anisotropyShape = anisotropyParams.x;\n  if (isRotation > 0.0) {\n    RotateTangentAndBinormal(surfaceData.worldTangent, surfaceData.worldBinormal, surfaceData.worldNormal, anisotropyParams.y);\n  } else {\n    vec3 anisoDirTS = anisotropyParams.yzw;\n    vec3 tangentWS = anisoDirTS.x * surfaceData.worldTangent + anisoDirTS.y * surfaceData.worldBinormal + anisoDirTS.z * surfaceData.worldNormal;\n    surfaceData.worldTangent = normalize(tangentWS);\n    surfaceData.worldBinormal = cross(surfaceData.worldNormal, tangentWS);\n  }\n#endif\n  surfaceData.emissive = SurfacesFragmentModifyEmissive();\n  vec4 pbr = SurfacesFragmentModifyPBRParams();\n  surfaceData.ao = pbr.x;\n  surfaceData.roughness = pbr.y;\n  surfaceData.metallic = pbr.z;\n  surfaceData.specularIntensity = pbr.w;\n#if CC_SURFACES_LIGHTING_TRANSMIT_SPECULAR || CC_SURFACES_LIGHTING_TRANSMIT_DIFFUSE\n  SurfacesFragmentModifyTransmitParams(surfaceData.transmitParams, surfaceData.inScatteringLightColor);\n#endif\n#if CC_SURFACES_LIGHTING_TRANSMIT_DIFFUSE\n  surfaceData.transmitDiffuseParams = SurfacesFragmentModifyTransmitDiffuseParams();\n#endif\n  vec3 baseColorTRT = vec3(0.0);\n#if CC_SURFACES_LIGHTING_TRT\n  vec4 trtParams = SurfacesFragmentModifyTRTParams();\n  surfaceData.roughnessTRT = saturate(surfaceData.roughness + trtParams.x);\n  surfaceData.trtIntensity = trtParams.w;\n  surfaceData.baseColorTRT = baseColorTRT = SurfacesFragmentModifyTRTColor();\n  surfaceData.worldTangentTRT = surfaceData.worldTangent;\n  surfaceData.worldBinormalTRT = surfaceData.worldBinormal;\n  RotateTangentAndBinormal(surfaceData.worldTangentTRT, surfaceData.worldBinormalTRT, surfaceData.worldNormal, trtParams.y * PI);\n#endif\n#if CC_SURFACES_LIGHTING_TT\n  vec4 ttParams = SurfacesFragmentModifyTTParams();\n  surfaceData.ttScatterCoef = ttParams.x;\n  surfaceData.ttIntensity = ttParams.w;\n  surfaceData.baseColorTT = SurfacesFragmentModifyTTColor(surfaceData.baseColor.rgb, baseColorTRT);\n#endif\n  SurfacesFragmentModifySharedData(surfaceData);\n#if CC_USE_DEBUG_VIEW == CC_SURFACES_DEBUG_VIEW_COMPOSITE_AND_MISC\n  if (!IS_DEBUG_VIEW_COMPOSITE_ENABLE_NORMAL_MAP) {\n      surfaceData.worldNormal = FSInput_worldNormal;\n      surfaceData.worldTangent = FSInput_worldTangent;\n  }\n#endif\n#if CC_USE_DEBUG_VIEW\n  if (!IS_DEBUG_VIEW_LIGHTING_ENABLE_WITH_ALBEDO)\n  {\n      surfaceData.baseColor.rgb = vec3(1.0);\n      #if CC_SURFACES_LIGHTING_TRT\n        surfaceData.baseColorTRT.rgb = vec3(1.0);\n      #endif\n      #if CC_SURFACES_LIGHTING_TT\n        surfaceData.baseColorTT.rgb = vec3(1.0);\n      #endif\n  }\n#endif\n}\nvec3 CCSurfacesGetDiffuseColor(in SurfacesMaterialData surfaceData)\n{\n  return surfaceData.baseColor.rgb * (1.0 - surfaceData.metallic);\n}\nvec3 CCSurfacesGetSpecularColor(in SurfacesMaterialData surfaceData)\n{\n  float F0 = surfaceData.specularIntensity * 0.08;\n  return mix(vec3(F0), surfaceData.baseColor.rgb, surfaceData.metallic);\n}\nvoid CCSurfacesLightingInitializeColorWithLighting(inout vec3 diffuseColorWithLighting, inout vec3 specularColorWithLighting, in SurfacesMaterialData surfaceData, in LightingIntermediateData lightingData)\n{\n  diffuseColorWithLighting = CCSurfacesGetDiffuseColor(surfaceData);\n  specularColorWithLighting = IntegratedGFApprox(CCSurfacesGetSpecularColor(surfaceData).xyz, surfaceData.roughness, lightingData.NoVAbsSat);\n}\nvoid CCSurfacesLightingCalculateColorWithLighting(inout vec3 diffuseColorWithLighting, inout vec3 specularColorWithLighting, in SurfacesMaterialData surfaceData, in LightingIntermediateData lightingData)\n{\n}\nvoid CCSurfacesInitializeLightingIntermediateData(inout LightingIntermediateData lightingData, in SurfacesMaterialData surfaceData)\n{\n  vec3 worldPos;\n  #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n  worldPos = unpackHighpData(surfaceData.worldPos, surfaceData.worldPos_fract_part);\n  #else\n  worldPos = surfaceData.worldPos;\n  #endif\n  CCSurfacesLightingGetIntermediateData_PerPixel(lightingData, surfaceData.worldNormal, worldPos, surfaceData.worldTangent, surfaceData.worldBinormal\n#if CC_SURFACES_LIGHTING_ANISOTROPIC\n      , surfaceData.anisotropyShape\n#endif\n  );\n  lightingData.specularParam = surfaceData.roughness;\n  lightingData.ior = surfaceData.ior;\n#if CC_SURFACES_LIGHTING_TRANSMIT_SPECULAR || CC_SURFACES_LIGHTING_TRANSMIT_DIFFUSE\n  lightingData.transmitParams = surfaceData.transmitParams;\n  lightingData.inScatteringLightColor = surfaceData.inScatteringLightColor;\n#endif\n#if CC_SURFACES_LIGHTING_TRANSMIT_DIFFUSE\n  lightingData.transmitDiffuseParams = surfaceData.transmitDiffuseParams;\n#endif\n#if CC_SURFACES_LIGHTING_TT\n  lightingData.baseColorTT = surfaceData.baseColorTT;\n  lightingData.ttIntensity = surfaceData.ttIntensity;\n  lightingData.ttScatterCoef = surfaceData.ttScatterCoef;\n#endif\n}\nvoid CCSurfacesLightingCalculateIntermediateData_PerLight(inout LightingIntermediateData lightingData, in SurfacesMaterialData surfaceData, vec3 lightDirWithDist)\n{\n  CCSurfacesLightingGetIntermediateData_PerLight(lightingData, lightDirWithDist);\n}\n#if CC_SURFACES_LIGHTING_TRT\nvoid CCSurfacesGetLightingIntermediateDataTRT(inout LightingIntermediateData lightingDataTRT, in LightingIntermediateData lightingData, in SurfacesMaterialData surfaceData)\n{\n  lightingDataTRT = lightingData;\n  lightingDataTRT.specularParam = surfaceData.roughnessTRT;\n  lightingDataTRT.T = surfaceData.worldTangentTRT;\n  lightingDataTRT.B = surfaceData.worldBinormalTRT;\n}\nvoid CCSurfacesGetSurfacesMaterialDataTRT(inout SurfacesMaterialData surfaceDataTRT, in SurfacesMaterialData surfaceData)\n{\n  surfaceDataTRT = surfaceData;\n  surfaceDataTRT.baseColor = vec4(surfaceData.baseColorTRT, 1.0);\n}\n#endif\nvoid CCSurfacesInitializeLightingResult(inout LightingResult lightingResult, in SurfacesMaterialData surfaceData)\n{\n  lightingResult.ao = surfaceData.ao;\n  lightingResult.emissive = surfaceData.emissive;\n}\nvoid CCSurfacesInitializeLightingResult(inout LightingResult lightingResult)\n{\n  lightingResult.directDiffuse = lightingResult.directSpecular = vec3(0.0);\n#if CC_SURFACES_LIGHTING_TRANSMIT_SPECULAR\n  lightingResult.directTransmitSpecular = vec3(0.0);\n#endif\n#if CC_SURFACES_LIGHTING_TRANSMIT_DIFFUSE\n  lightingResult.directTransmitDiffuse = vec3(0.0);\n#endif\n#if CC_SURFACES_LIGHTING_TRT\n  lightingResult.directTRT = vec3(0.0);\n#endif\n#if CC_SURFACES_LIGHTING_TT\n  lightingResult.directTT = vec3(0.0);\n#endif\n}\nvoid CCSurfacesAccumulateLightingResult(inout LightingResult lightingResultAccumulated, in LightingResult lightingResult)\n{\n  lightingResultAccumulated.directDiffuse += lightingResult.directDiffuse * lightingResult.shadow;\n  lightingResultAccumulated.directSpecular += lightingResult.directSpecular * lightingResult.shadow;\n  #if CC_SURFACES_LIGHTING_TRANSMIT_SPECULAR\n    lightingResultAccumulated.directTransmitSpecular += lightingResult.directTransmitSpecular;\n  #endif\n  #if CC_SURFACES_LIGHTING_TRANSMIT_DIFFUSE\n    lightingResultAccumulated.directTransmitDiffuse += lightingResult.directTransmitDiffuse;\n  #endif\n  #if CC_SURFACES_LIGHTING_TRT\n    lightingResultAccumulated.directTRT += lightingResult.directTRT * lightingResult.shadow;\n  #endif\n  #if CC_SURFACES_LIGHTING_TT\n    lightingResultAccumulated.directTT += lightingResult.directTT * lightingResult.shadow;\n    lightingResultAccumulated.diffuseColorWithLightingTT = lightingResult.diffuseColorWithLightingTT;\n  #endif\n}\n#if CC_PIPELINE_TYPE == 1\n  vec4 CCSurfacesDeferredOutput0(in SurfacesMaterialData surfaceData)\n  {\n    return surfaceData.baseColor;\n  }\n  vec4 CCSurfacesDeferredOutput1(in SurfacesMaterialData surfaceData)\n  {\n    return vec4(float32x3_to_oct(surfaceData.worldNormal), surfaceData.roughness, surfaceData.metallic);\n  }\n  vec4 CCSurfacesDeferredOutput2(in SurfacesMaterialData surfaceData)\n  {\n    return vec4(surfaceData.emissive, surfaceData.ao);\n  }\n#endif\nvec4 CCSurfacesShading(in SurfacesMaterialData surfaceData, in LightingResult lightingResult)\n{\n  vec4 color = vec4(0.0, 0.0, 0.0, surfaceData.baseColor.a);\n#if CC_FORWARD_ADD\n  color.xyz += lightingResult.directDiffuse * lightingResult.diffuseColorWithLighting\n    + lightingResult.directSpecular * lightingResult.specularColorWithLighting;\n  #if CC_SURFACES_LIGHTING_TRANSMIT_SPECULAR\n    + lightingResult.directTransmitSpecular * lightingResult.specularColorWithLighting\n  #endif\n  ;\n#else\n  float fresnel = 1.0;\n  #if CC_SURFACES_LIGHTING_USE_FRESNEL\n    fresnel = lightingResult.fresnel;\n  #endif\n  float invFresnel = 1.0 - fresnel;\n  color.xyz +=\n    ( lightingResult.directDiffuse * lightingResult.diffuseColorWithLighting\n    + lightingResult.directSpecular * lightingResult.specularColorWithLighting * fresnel\n  #if CC_SURFACES_LIGHTING_TRANSMIT_SPECULAR\n    + lightingResult.directTransmitSpecular * lightingResult.specularColorWithLighting * invFresnel\n  #endif\n  #if CC_SURFACES_LIGHTING_TRANSMIT_DIFFUSE\n    + lightingResult.directTransmitDiffuse\n  #endif\n  #if CC_SURFACES_LIGHTING_TRT\n    + lightingResult.directTRT * lightingResult.specularColorWithLightingTRT * surfaceData.trtIntensity * surfaceData.baseColorTRT\n  #endif\n  #if CC_SURFACES_LIGHTING_TT\n    + lightingResult.directTT * lightingResult.diffuseColorWithLightingTT\n  #endif\n    )\n    * lightingResult.shadow;\n  #if CC_SURFACES_USE_LIGHT_MAP == LIGHT_MAP_TYPE_ALL_IN_ONE\n    color.xyz += lightingResult.lightmapColor * lightingResult.diffuseColorWithLighting * lightingResult.shadow;\n  #elif CC_SURFACES_USE_LIGHT_MAP == LIGHT_MAP_TYPE_INDIRECT_OCCLUSION\n    color.xyz += lightingResult.lightmapColor * lightingResult.diffuseColorWithLighting;\n  #endif\n  color.xyz +=\n    ( lightingResult.environmentDiffuse * lightingResult.diffuseColorWithLighting\n    + lightingResult.environmentSpecular * lightingResult.specularColorWithLighting * fresnel\n  #if CC_SURFACES_LIGHTING_TRANSMIT_SPECULAR\n    + lightingResult.environmentTransmitSpecular * lightingResult.specularColorWithLighting * invFresnel\n  #endif\n  #if CC_SURFACES_LIGHTING_TRANSMIT_DIFFUSE\n    + lightingResult.environmentTransmitDiffuse\n  #endif\n  #if CC_SURFACES_LIGHTING_TRT\n    + lightingResult.environmentTRT * lightingResult.specularColorWithLightingTRT * surfaceData.trtIntensity * surfaceData.baseColorTRT\n  #endif\n    )\n    * lightingResult.ao;\n  color.xyz += lightingResult.emissive;\n#endif\n  return color;\n}\n#if CC_USE_DEBUG_VIEW == CC_SURFACES_DEBUG_VIEW_SINGLE\nvoid CCSurfacesDebugViewSurfaceData(inout vec4 color, in SurfacesMaterialData surfaceData)\n{\n    vec4 black = vec4(0.0, 0.0, 0.0, 1.0);\n    float scalar;\n    if (((abs(float(cc_debug_view_mode.x) - float(CC_SURFACES_DEBUG_VIEW_FRAGMENT_NORMAL)) < EPSILON_LOWP) && (cc_surfaceTransform.y != 3.0)))\n        color = vec4(surfaceData.worldNormal * 0.5 + vec3(0.5), 1.0);\n    if (((abs(float(cc_debug_view_mode.x) - float(CC_SURFACES_DEBUG_VIEW_FRAGMENT_TANGENT)) < EPSILON_LOWP) && (cc_surfaceTransform.y != 3.0)))\n    {\n      #if CC_SURFACES_USE_TANGENT_SPACE\n        color = vec4(surfaceData.worldTangent * 0.5 + vec3(0.5), 1.0);\n      #else\n        color = black;\n      #endif\n    }\n    if (((abs(float(cc_debug_view_mode.x) - float(CC_SURFACES_DEBUG_VIEW_FRAGMENT_BINORMAL)) < EPSILON_LOWP) && (cc_surfaceTransform.y != 3.0)))\n    {\n      #if CC_SURFACES_USE_TANGENT_SPACE\n        color = vec4(surfaceData.worldBinormal * 0.5 + vec3(0.5), 1.0);\n      #else\n        color = black;\n      #endif\n    }\n    if (((abs(float(cc_debug_view_mode.x) - float(CC_SURFACES_DEBUG_VIEW_TRANSPARENCY)) < EPSILON_LOWP) && (cc_surfaceTransform.y != 3.0))) {\n        scalar = surfaceData.baseColor.a;\n        color = vec4(scalar, scalar, scalar, 1.0);\n    }\n    if (((abs(float(cc_debug_view_mode.x) - float(CC_SURFACES_DEBUG_VIEW_BASE_COLOR)) < EPSILON_LOWP) && (cc_surfaceTransform.y != 3.0)))\n        color = vec4(LinearToSRGB(surfaceData.baseColor.rgb), 1.0);\n    if (((abs(float(cc_debug_view_mode.x) - float(CC_SURFACES_DEBUG_VIEW_DIFFUSE_COLOR)) < EPSILON_LOWP) && (cc_surfaceTransform.y != 3.0)))\n        color = vec4(LinearToSRGB(CCSurfacesGetDiffuseColor(surfaceData)), 1.0);\n    if (((abs(float(cc_debug_view_mode.x) - float(CC_SURFACES_DEBUG_VIEW_SPECULAR_COLOR)) < EPSILON_LOWP) && (cc_surfaceTransform.y != 3.0)))\n        color = vec4(LinearToSRGB(CCSurfacesGetSpecularColor(surfaceData)), 1.0);\n    if (((abs(float(cc_debug_view_mode.x) - float(CC_SURFACES_DEBUG_VIEW_ROUGHNESS)) < EPSILON_LOWP) && (cc_surfaceTransform.y != 3.0))) {\n        scalar = surfaceData.roughness;\n        color = vec4(scalar, scalar, scalar, 1.0);\n    }\n    if (((abs(float(cc_debug_view_mode.x) - float(CC_SURFACES_DEBUG_VIEW_METALLIC)) < EPSILON_LOWP) && (cc_surfaceTransform.y != 3.0))) {\n        scalar = surfaceData.metallic;\n        color = vec4(scalar, scalar, scalar, 1.0);\n    }\n    if (((abs(float(cc_debug_view_mode.x) - float(CC_SURFACES_DEBUG_VIEW_SPECULAR_INTENSITY)) < EPSILON_LOWP) && (cc_surfaceTransform.y != 3.0))) {\n        scalar = surfaceData.specularIntensity;\n        color = vec4(scalar, scalar, scalar, 1.0);\n    }\n    if (((abs(float(cc_debug_view_mode.x) - float(CC_SURFACES_DEBUG_VIEW_IOR)) < EPSILON_LOWP) && (cc_surfaceTransform.y != 3.0))) {\n        scalar = surfaceData.ior - 1.0;\n        color = vec4(scalar, scalar, scalar, 1.0);\n    }\n}\n#endif\n#if (CC_PIPELINE_TYPE == 0 || CC_FORCE_FORWARD_SHADING)\n  #if CC_FORWARD_ADD && !CC_ENABLE_CLUSTERED_LIGHT_CULLING\n    void CCSurfacesLighting(inout LightingResult lightingResultAccumulated, in SurfacesMaterialData surfaceData, in vec2 shadowBias)\n    {\n      vec3 worldPos;\n      #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n      worldPos = unpackHighpData(surfaceData.worldPos, surfaceData.worldPos_fract_part);\n      #else\n      worldPos = surfaceData.worldPos;\n      #endif\n      CCSurfacesInitializeLightingResult(lightingResultAccumulated);\n      LightingIntermediateData lightingData;\n      CCSurfacesInitializeLightingIntermediateData(lightingData, surfaceData);\n      LightingResult lightingResult;\n      CCSurfacesLightingInitializeColorWithLighting(lightingResult.diffuseColorWithLighting, lightingResult.specularColorWithLighting, surfaceData, lightingData);\n      lightingResultAccumulated.diffuseColorWithLighting = lightingResult.diffuseColorWithLighting;\n      lightingResultAccumulated.specularColorWithLighting = lightingResult.specularColorWithLighting;\n      #if CC_SURFACES_LIGHTING_TRT\n        vec3 diff;\n        SurfacesMaterialData surfaceDataTRT;\n        CCSurfacesGetSurfacesMaterialDataTRT(surfaceDataTRT, surfaceData);\n        CCSurfacesLightingInitializeColorWithLighting(diff, lightingResultAccumulated.specularColorWithLightingTRT, surfaceDataTRT, lightingData);\n      #endif\n      int numLights = CC_PIPELINE_TYPE == 0 ? LIGHTS_PER_PASS : int(cc_lightDir[0].w);\n      for (int i = 0; i < LIGHTS_PER_PASS; i++) {\n        if (i >= numLights) break;\n        CCSurfacesLightingCalculateIntermediateData_PerLight(lightingData, surfaceData, cc_lightPos[i].xyz - worldPos);\n        CCSurfacesLightingCalculateColorWithLighting(lightingResult.diffuseColorWithLighting, lightingResult.specularColorWithLighting, surfaceData, lightingData);\n        vec3 diffuseLighting, specularLighting;\n        CCSurfacesLightingCalculateDirect(diffuseLighting, specularLighting, lightingData, cc_lightColor[i]);\n        float fresnel = 1.0;\n      #if CC_SURFACES_LIGHTING_USE_FRESNEL\n        fresnel = lightingResult.fresnel = CCSurfaceLightingCalculateFresnel(lightingData);\n      #endif\n        float shadow = 1.0;\n      #if CC_RECEIVE_SHADOW && CC_SHADOW_TYPE == 2\n        if (cc_lightPos[i].w > 0.0 && cc_lightSizeRangeAngle[i].w > 0.0) {\n          vec4 shadowPos = vec4(0.0), shadowNDCPosWithBias = vec4(0.0);\n          if (CCSurfacesLightingEnableShadow(lightingData.NoL)) {\n            shadowPos = cc_matLightViewProj * vec4(surfaceData.worldPos, 1.0);\n            shadow = CCSpotShadowFactorBase(shadowNDCPosWithBias, shadowPos, worldPos, shadowBias);\n          }\n          #if CC_SURFACES_LIGHTING_TRANSMIT_DIFFUSE\n            #if CC_SURFACES_LIGHTING_USE_SHADOWMAP_TRANSMIT\n              lightingData.shadowPosAndDepth.xy = shadowNDCPosWithBias.xy;\n              lightingData.shadowPosAndDepth.z = shadowPos.z;\n              lightingData.shadowPosAndDepth.w = GetViewSpaceDepthFromNDCDepth_Perspective(SampleShadowMap(shadowNDCPosWithBias.xyz, cc_spotShadowMap), shadowNDCPosWithBias.w, cc_shadowInvProjDepthInfo.x, cc_shadowInvProjDepthInfo.y);\n            #else\n              lightingData.transmitDiffuseParams.zw = vec2(0.0);\n            #endif\n          #endif\n        }\n      #endif\n      #if CC_USE_DEBUG_VIEW == CC_SURFACES_DEBUG_VIEW_COMPOSITE_AND_MISC\n        if (!IS_DEBUG_VIEW_COMPOSITE_ENABLE_SHADOW) {\n          shadow = 1.0;\n        }\n      #endif\n        lightingResult.shadow = shadow;\n        float distAtt = CCSurfacesLightingCalculateDistanceAttenuation(lightingData, cc_lightSizeRangeAngle[i]);\n        float angleAtt = 1.0;\n        if (cc_lightPos[i].w > 0.0) {\n          angleAtt = CCSurfacesLightingCalculateAngleAttenuation(lightingData, cc_lightSizeRangeAngle[i], -cc_lightDir[i].xyz);\n        }\n        float multiplier = distAtt * angleAtt;\n        lightingResult.directDiffuse = diffuseLighting * multiplier;\n        lightingResult.directSpecular = specularLighting * multiplier * fresnel;\n        #if CC_SURFACES_LIGHTING_TRANSMIT_SPECULAR\n          vec3 transmitSpecularLighting;\n          CCSurfacesLightingCalculateDirectTransmitSpecular(transmitSpecularLighting, lightingData, cc_lightColor[i]);\n          lightingResult.directTransmitSpecular = transmitSpecularLighting * multiplier * (1.0 - fresnel);\n        #endif\n        #if CC_SURFACES_LIGHTING_TRANSMIT_DIFFUSE\n          lightingResult.directTransmitDiffuse = CCSurfacesLightingCalculateDirectTransmitDiffuse(lightingResult, lightingData, cc_lightColor[i]);\n        #endif\n        #if CC_SURFACES_LIGHTING_TRT\n          LightingIntermediateData lightingDataTRT;\n          CCSurfacesGetLightingIntermediateDataTRT(lightingDataTRT, lightingData, surfaceData);\n          CCSurfacesLightingCalculateDirectTRT(lightingResult.directTRT, lightingDataTRT, cc_lightColor[i]);\n          lightingResult.directTRT *= multiplier * fresnel;\n        #endif\n        #if CC_SURFACES_LIGHTING_TT\n          CCSurfacesLightingCalculateDirectTT(lightingResult, lightingData, cc_lightColor[i]);\n        #endif\n        #ifdef CC_SURFACES_LIGHTING_MODIFY_FINAL_RESULT\n          LightingMiscData miscData;\n          miscData.lightType = cc_lightPos[i].w;\n          miscData.lightPos = cc_lightPos[i].xyz;\n          miscData.lightDir = cc_lightDir[i].xyz;\n          miscData.lightColorAndIntensity = cc_lightColor[i];\n          miscData.lightSizeRangeAngle = cc_lightSizeRangeAngle[i];\n          SurfacesLightingModifyFinalResult(lightingResult, lightingData, surfaceData, miscData);\n        #endif\n        CCSurfacesAccumulateLightingResult(lightingResultAccumulated, lightingResult);\n      }\n    }\n  #else\n    void CCSurfacesLighting(inout LightingResult lightingResult, in SurfacesMaterialData surfaceData, in vec2 shadowBias)\n    {\n      LightingIntermediateData lightingData;\n      CCSurfacesInitializeLightingIntermediateData(lightingData, surfaceData);\n      CCSurfacesInitializeLightingResult(lightingResult, surfaceData);\n      CCSurfacesLightingInitializeColorWithLighting(lightingResult.diffuseColorWithLighting, lightingResult.specularColorWithLighting, surfaceData, lightingData);\n      CCSurfacesLightingCalculateIntermediateData_PerLight(lightingData, surfaceData, -cc_mainLitDir.xyz);\n      lightingResult.shadow = 1.0;\n      #if CC_RECEIVE_SHADOW && CC_SHADOW_TYPE == 2\n        if (cc_mainLitDir.w > 0.0) {\n          vec4 shadowPos = vec4(0.0), shadowNDCPosWithBias = vec4(0.0);\n          if (CCSurfacesLightingEnableShadow(lightingData.NoL)) {\n            #if CC_DIR_LIGHT_SHADOW_TYPE == 2\n              lightingResult.shadow = CCCSMFactorBase(shadowPos, shadowNDCPosWithBias, surfaceData.worldPos, lightingData.N, shadowBias);\n            #endif\n            #if CC_DIR_LIGHT_SHADOW_TYPE == 1\n              shadowPos = cc_matLightViewProj * vec4(surfaceData.worldPos, 1.0);\n              lightingResult.shadow = CCShadowFactorBase(shadowPos, lightingData.N, shadowBias);\n            #endif\n          }\n          #if CC_SURFACES_LIGHTING_TRANSMIT_DIFFUSE\n            #if CC_SURFACES_LIGHTING_USE_SHADOWMAP_TRANSMIT\n              lightingData.shadowPosAndDepth.xy = shadowNDCPosWithBias.xy;\n              lightingData.shadowPosAndDepth.z = shadowPos.z;\n              lightingData.shadowPosAndDepth.w = GetViewSpaceDepthFromNDCDepth_Orthgraphic(SampleShadowMap(shadowNDCPosWithBias.xyz, cc_shadowMap), cc_shadowProjDepthInfo.x, cc_shadowProjDepthInfo.y);\n            #else\n              lightingData.transmitDiffuseParams.zw = vec2(0.0);\n            #endif\n          #endif\n        }\n      #endif\n      lightingResult.lightmapColor = vec3(0.0);\n      #if CC_SURFACES_USE_LIGHT_MAP && !CC_FORWARD_ADD\n\t\t    float lightmapShadow, lightmapAO;\n        GetLightMapColor(lightingResult.lightmapColor, lightmapShadow, lightmapAO, cc_lightingMap, FSInput_lightMapUV.xy, FSInput_lightMapUV.z, surfaceData.worldNormal);\n        #if CC_SURFACES_USE_LIGHT_MAP == LIGHT_MAP_TYPE_INDIRECT_OCCLUSION\n          lightingResult.shadow *= lightmapShadow;\n          lightingResult.ao *= lightmapAO;\n        #endif\n      #endif\n      lightingResult.directDiffuse = lightingResult.directSpecular = vec3(0.0);\n      #if !CC_DISABLE_DIRECTIONAL_LIGHT && !CC_FORWARD_ADD\n        CCSurfacesLightingCalculateColorWithLighting(lightingResult.diffuseColorWithLighting, lightingResult.specularColorWithLighting, surfaceData, lightingData);\n        CCSurfacesLightingCalculateDirect(lightingResult.directDiffuse, lightingResult.directSpecular, lightingData, cc_mainLitColor);\n      #endif\n      CCSurfacesLightingCalculateEnvironment(lightingResult.environmentDiffuse, lightingResult.environmentSpecular, lightingData, cc_ambientSky.w);\n      #if CC_SURFACES_LIGHTING_USE_FRESNEL\n        lightingResult.fresnel = CCSurfaceLightingCalculateFresnel(lightingData);\n      #endif\n      #if CC_SURFACES_LIGHTING_TRANSMIT_SPECULAR\n        CCSurfacesLightingCalculateDirectTransmitSpecular(lightingResult.directTransmitSpecular, lightingData, cc_mainLitColor);\n        CCSurfacesLightingCalculateEnvironmentTransmitSpecular(lightingResult.environmentTransmitSpecular, lightingData, cc_ambientSky.w);\n      #endif\n      #if CC_SURFACES_LIGHTING_TRANSMIT_DIFFUSE\n        CCSurfacesLightingCalculateDirectTransmitDiffuse(lightingResult.directTransmitDiffuse, lightingResult, lightingData, cc_mainLitColor);\n        CCSurfacesLightingCalculateEnvironmentTransmitDiffuse(lightingResult.environmentTransmitDiffuse, lightingResult, lightingData, cc_ambientSky.w);\n      #endif\n      #if CC_SURFACES_LIGHTING_TRT\n        LightingIntermediateData lightingDataTRT;\n        CCSurfacesGetLightingIntermediateDataTRT(lightingDataTRT, lightingData, surfaceData);\n        CCSurfacesLightingCalculateDirectTRT(lightingResult.directTRT, lightingDataTRT, cc_mainLitColor);\n        CCSurfacesLightingCalculateEnvironmentTRT(lightingResult.environmentTRT, lightingDataTRT, cc_ambientSky.w);\n        vec3 diff;\n        SurfacesMaterialData surfaceDataTRT;\n        CCSurfacesGetSurfacesMaterialDataTRT(surfaceDataTRT, surfaceData);\n        CCSurfacesLightingInitializeColorWithLighting(diff, lightingResult.specularColorWithLightingTRT, surfaceDataTRT, lightingDataTRT);\n      #endif\n      #if CC_SURFACES_LIGHTING_TT\n        CCSurfacesLightingCalculateDirectTT(lightingResult, lightingData, cc_mainLitColor);\n      #endif\n      #ifdef CC_SURFACES_LIGHTING_MODIFY_FINAL_RESULT\n        LightingMiscData miscData;\n        miscData.lightType = LIGHT_TYPE_DIRECTIONAL;\n        miscData.lightPos = vec3(0.0);\n        miscData.lightDir = cc_mainLitDir.xyz;\n        miscData.lightColorAndIntensity = cc_mainLitColor;\n        miscData.lightSizeRangeAngle = vec4(0.0, 0.0, 0.0, 0.0);\n        SurfacesLightingModifyFinalResult(lightingResult, lightingData, surfaceData, miscData);\n      #endif\n    }\n    #if CC_ENABLE_CLUSTERED_LIGHT_CULLING\n    #endif\n  #endif\n#endif\nvec4 CCSurfacesDebugDisplayInvalidNumber(vec4 color)\n{\n  float index = mod(cc_time.x * 10.0, 2.0);\n  vec4 error = index < 1.0 ? vec4(1.0, 0.0, 0.2, 1.0) : vec4(0.0, 1.0, 0.2, 1.0);\n  return (isnans(color.rgb) || isinfs(color.rgb)) ? error : color;\n}\nvec4 CCSurfacesDebugDisplayInvalidInputData(vec4 color, vec3 data)\n{\n  float index = mod(cc_time.x * 10.0, 2.0);\n  vec4 error = index < 1.0 ? vec4(1.0, 0.0, 0.2, 1.0) : vec4(0.0, 1.0, 0.2, 1.0);\n  return (isnans(data) || isinfs(data)) ? error : color;\n}\n#if CC_USE_DEBUG_VIEW == CC_SURFACES_DEBUG_VIEW_SINGLE && !CC_FORWARD_ADD\n  void CCSurfacesDebugViewMeshData(inout vec4 color)\n  {\n    vec4 white = vec4(1.0, 1.0, 1.0, 1.0);\n    vec4 black = vec4(0.0, 0.0, 0.0, 1.0);\n    if (((abs(float(cc_debug_view_mode.x) - float(CC_SURFACES_DEBUG_VIEW_VERTEX_COLOR)) < EPSILON_LOWP) && (cc_surfaceTransform.y != 3.0)))\n    {\n      #if CC_SURFACES_USE_VERTEX_COLOR\n        color = FSInput_vertexColor;\n      #else\n        color = white;\n      #endif\n    }\n    if (((abs(float(cc_debug_view_mode.x) - float(CC_SURFACES_DEBUG_VIEW_VERTEX_NORMAL)) < EPSILON_LOWP) && (cc_surfaceTransform.y != 3.0)))\n        color = vec4(FSInput_worldNormal * 0.5 + vec3(0.5), 1.0);\n    if (((abs(float(cc_debug_view_mode.x) - float(CC_SURFACES_DEBUG_VIEW_VERTEX_TANGENT)) < EPSILON_LOWP) && (cc_surfaceTransform.y != 3.0)))\n    {\n      #if CC_SURFACES_USE_TANGENT_SPACE\n        color = vec4(FSInput_worldTangent * 0.5 + vec3(0.5), 1.0);\n      #else\n        color = black;\n      #endif\n    }\n    if (((abs(float(cc_debug_view_mode.x) - float(CC_SURFACES_DEBUG_VIEW_VERTEX_MIRROR)) < EPSILON_LOWP) && (cc_surfaceTransform.y != 3.0)))\n    {\n      #if CC_SURFACES_USE_TANGENT_SPACE\n        float sign = FSInput_mirrorNormal * 0.5 + 0.5;\n        color = vec4(sign, sign, sign, 1.0);\n      #else\n        color = black;\n      #endif\n    }\n    if (((abs(float(cc_debug_view_mode.x) - float(CC_SURFACES_DEBUG_VIEW_FACE_SIDE)) < EPSILON_LOWP) && (cc_surfaceTransform.y != 3.0)))\n    {\n        float scalar = clamp(FSInput_faceSideSign, 0.0, 1.0);\n        color = vec4(scalar, scalar, scalar, 1.0);\n    }\n    if (((abs(float(cc_debug_view_mode.x) - float(CC_SURFACES_DEBUG_VIEW_UV0)) < EPSILON_LOWP) && (cc_surfaceTransform.y != 3.0)))\n        color = vec4(FSInput_texcoord.xy, 0.0, 1.0);\n    if (((abs(float(cc_debug_view_mode.x) - float(CC_SURFACES_DEBUG_VIEW_UV1)) < EPSILON_LOWP) && (cc_surfaceTransform.y != 3.0)))\n      color = vec4(FSInput_texcoord1.xy, 0.0, 1.0);\n    if (((abs(float(cc_debug_view_mode.x) - float(CC_SURFACES_DEBUG_VIEW_UVLIGHTMAP)) < EPSILON_LOWP) && (cc_surfaceTransform.y != 3.0)))\n    {\n      #if CC_USE_LIGHTMAP && !CC_FORWARD_ADD\n        color = vec4(FSInput_lightMapUV.xy, 0.0, 1.0);\n      #else\n        color = vec4(0.0, 0.0, 0.0, 1.0);\n      #endif\n    }\n    if (((abs(float(cc_debug_view_mode.x) - float(CC_SURFACES_DEBUG_VIEW_PROJ_DEPTH)) < EPSILON_LOWP) && (cc_surfaceTransform.y != 3.0)))\n    {\n      vec4 clipPos = cc_matProj * cc_matView * vec4(FSInput_worldPos.xyz, 1.0);\n      float depth = clipPos.z / clipPos.w;\n      color = vec4(depth, depth, depth, 1.0);\n    }\n    if (((abs(float(cc_debug_view_mode.x) - float(CC_SURFACES_DEBUG_VIEW_LINEAR_DEPTH)) < EPSILON_LOWP) && (cc_surfaceTransform.y != 3.0)))\n    {\n      vec4 viewPos = cc_matView * vec4(FSInput_worldPos.xyz, 1.0);\n      float depth = (-viewPos.z - cc_nearFar.x) / cc_nearFar.y;\n      color = vec4(depth, depth, depth, 1.0);\n    }\n    if (((abs(float(cc_debug_view_mode.x) - float(CC_SURFACES_DEBUG_VIEW_WORLD_POS)) < EPSILON_LOWP) && (cc_surfaceTransform.y != 3.0)))\n      color = vec4(FSInput_worldPos.xyz, 1.0);\n  }\n#endif\n#if CC_USE_DEBUG_VIEW == CC_SURFACES_DEBUG_VIEW_SINGLE\n  bool CCSurfacesDebugViewLightingResult(inout vec4 color, in LightingResult lightingResult)\n  {\n    bool isSRGBColor = false;\n    if (((abs(float(cc_debug_view_mode.x) - float(CC_SURFACES_DEBUG_VIEW_DIRECT_DIFFUSE)) < EPSILON_LOWP) && (cc_surfaceTransform.y != 3.0)))\n    {\n        color.rgb = lightingResult.directDiffuse * lightingResult.diffuseColorWithLighting;\n        isSRGBColor = true;\n    }\n    if (((abs(float(cc_debug_view_mode.x) - float(CC_SURFACES_DEBUG_VIEW_DIRECT_SPECULAR)) < EPSILON_LOWP) && (cc_surfaceTransform.y != 3.0)))\n    {\n        color.rgb = lightingResult.directSpecular * lightingResult.specularColorWithLighting;\n        isSRGBColor = true;\n    }\n    if (((abs(float(cc_debug_view_mode.x) - float(CC_SURFACES_DEBUG_VIEW_DIRECT_ALL)) < EPSILON_LOWP) && (cc_surfaceTransform.y != 3.0)))\n    {\n        color.rgb = lightingResult.directDiffuse * lightingResult.diffuseColorWithLighting + lightingResult.directSpecular * lightingResult.specularColorWithLighting;\n        isSRGBColor = true;\n    }\n    if (((abs(float(cc_debug_view_mode.x) - float(CC_SURFACES_DEBUG_VIEW_ENV_DIFFUSE)) < EPSILON_LOWP) && (cc_surfaceTransform.y != 3.0)))\n    {\n        color.rgb = lightingResult.environmentDiffuse * lightingResult.diffuseColorWithLighting;\n        isSRGBColor = true;\n    }\n    if (((abs(float(cc_debug_view_mode.x) - float(CC_SURFACES_DEBUG_VIEW_ENV_SPECULAR)) < EPSILON_LOWP) && (cc_surfaceTransform.y != 3.0)))\n    {\n        color.rgb = lightingResult.environmentSpecular * lightingResult.specularColorWithLighting;\n        isSRGBColor = true;\n    }\n    if (((abs(float(cc_debug_view_mode.x) - float(CC_SURFACES_DEBUG_VIEW_ENV_ALL)) < EPSILON_LOWP) && (cc_surfaceTransform.y != 3.0)))\n    {\n        color.rgb = lightingResult.environmentDiffuse * lightingResult.diffuseColorWithLighting + lightingResult.environmentSpecular * lightingResult.specularColorWithLighting;\n        isSRGBColor = true;\n    }\n    if (((abs(float(cc_debug_view_mode.x) - float(CC_SURFACES_DEBUG_VIEW_LIGHT_MAP)) < EPSILON_LOWP) && (cc_surfaceTransform.y != 3.0)))\n    {\n        color.rgb = lightingResult.lightmapColor;\n        isSRGBColor = true;\n    }\n    if (((abs(float(cc_debug_view_mode.x) - float(CC_SURFACES_DEBUG_VIEW_EMISSIVE)) < EPSILON_LOWP) && (cc_surfaceTransform.y != 3.0)))\n    {\n        color.rgb = lightingResult.emissive;\n        isSRGBColor = true;\n    }\n    if (((abs(float(cc_debug_view_mode.x) - float(CC_SURFACES_DEBUG_VIEW_AO)) < EPSILON_LOWP) && (cc_surfaceTransform.y != 3.0)))\n    {\n        color.rgb = vec3(lightingResult.ao);\n        isSRGBColor = false;\n    }\n    if (((abs(float(cc_debug_view_mode.x) - float(CC_SURFACES_DEBUG_VIEW_SHADOW)) < EPSILON_LOWP) && (cc_surfaceTransform.y != 3.0)))\n    {\n        color.rgb = vec3(lightingResult.shadow);\n        isSRGBColor = false;\n    }\n    float fresnel = 0.0;\n    vec3 directTransmitSpecular = vec3(0.0), environmentTransmitSpecular = vec3(0.0);\n    vec3 directTransmitDiffuse = vec3(0.0), environmentTransmitDiffuse = vec3(0.0);\n    vec3 diffuseColorWithLightingTT = vec3(0.0), specularColorWithLightingTRT = vec3(0.0);\n    vec3 directTRT = vec3(0.0), environmentTRT = vec3(0.0);\n  #if CC_SURFACES_LIGHTING_USE_FRESNEL\n    fresnel = lightingResult.fresnel;\n  #endif\n  #if CC_SURFACES_LIGHTING_TRANSMIT_SPECULAR\n    directTransmitSpecular = lightingResult.directTransmitSpecular;\n    environmentTransmitSpecular = lightingResult.environmentTransmitSpecular;\n  #endif\n  #if CC_SURFACES_LIGHTING_TRANSMIT_DIFFUSE\n    directTransmitDiffuse = lightingResult.directTransmitDiffuse;\n    environmentTransmitDiffuse = lightingResult.environmentTransmitDiffuse;\n  #endif\n  #if CC_SURFACES_LIGHTING_TRT\n    directTRT = lightingResult.directTRT;\n    environmentTRT = lightingResult.environmentTRT;\n    specularColorWithLightingTRT = lightingResult.specularColorWithLightingTRT;\n  #endif\n    if (((abs(float(cc_debug_view_mode.x) - float(CC_SURFACES_DEBUG_VIEW_FRESNEL)) < EPSILON_LOWP) && (cc_surfaceTransform.y != 3.0)))\n    {\n        color.rgb = vec3(fresnel);\n        isSRGBColor = false;\n    }\n    if (((abs(float(cc_debug_view_mode.x) - float(CC_SURFACES_DEBUG_VIEW_TRANSMIT_DIRECT_SPECULAR)) < EPSILON_LOWP) && (cc_surfaceTransform.y != 3.0)))\n    {\n        color.rgb = directTransmitSpecular;\n        isSRGBColor = true;\n    }\n    if (((abs(float(cc_debug_view_mode.x) - float(CC_SURFACES_DEBUG_VIEW_TRANSMIT_ENV_SPECULAR)) < EPSILON_LOWP) && (cc_surfaceTransform.y != 3.0)))\n    {\n        color.rgb = environmentTransmitSpecular;\n        isSRGBColor = true;\n    }\n    if (((abs(float(cc_debug_view_mode.x) - float(CC_SURFACES_DEBUG_VIEW_TRANSMIT_DIRECT_DIFFUSE)) < EPSILON_LOWP) && (cc_surfaceTransform.y != 3.0)))\n    {\n        color.rgb = directTransmitDiffuse;\n        isSRGBColor = true;\n    }\n    if (((abs(float(cc_debug_view_mode.x) - float(CC_SURFACES_DEBUG_VIEW_TRANSMIT_ENV_DIFFUSE)) < EPSILON_LOWP) && (cc_surfaceTransform.y != 3.0)))\n    {\n        color.rgb = environmentTransmitDiffuse;\n        isSRGBColor = true;\n    }\n    if (((abs(float(cc_debug_view_mode.x) - float(CC_SURFACES_DEBUG_VIEW_TRANSMIT_ALL)) < EPSILON_LOWP) && (cc_surfaceTransform.y != 3.0)))\n    {\n        color.rgb = directTransmitSpecular + environmentTransmitSpecular + directTransmitDiffuse + environmentTransmitDiffuse;\n        isSRGBColor = true;\n    }\n    if (((abs(float(cc_debug_view_mode.x) - float(CC_SURFACES_DEBUG_VIEW_TRT_DIRECT)) < EPSILON_LOWP) && (cc_surfaceTransform.y != 3.0)))\n    {\n        color.rgb = directTRT * specularColorWithLightingTRT;\n        isSRGBColor = true;\n    }\n    if (((abs(float(cc_debug_view_mode.x) - float(CC_SURFACES_DEBUG_VIEW_TRT_ENVIRONMENT)) < EPSILON_LOWP) && (cc_surfaceTransform.y != 3.0)))\n    {\n        color.rgb = environmentTRT * specularColorWithLightingTRT;\n        isSRGBColor = true;\n    }\n    if (((abs(float(cc_debug_view_mode.x) - float(CC_SURFACES_DEBUG_VIEW_TRT_ALL)) < EPSILON_LOWP) && (cc_surfaceTransform.y != 3.0)))\n    {\n        color.rgb = (directTRT + environmentTRT) * specularColorWithLightingTRT;\n        isSRGBColor = true;\n    }\n    return isSRGBColor;\n  }\n#endif\n#if CC_USE_DEBUG_VIEW == CC_SURFACES_DEBUG_VIEW_COMPOSITE_AND_MISC\n  void CCSurfacesDebugViewCompositeLightingResult(inout LightingResult lightingResult)\n  {\n    if (!IS_DEBUG_VIEW_COMPOSITE_ENABLE_DIRECT_DIFFUSE)\n      lightingResult.directDiffuse = vec3(0.0);\n    if (!IS_DEBUG_VIEW_COMPOSITE_ENABLE_DIRECT_SPECULAR)\n      lightingResult.directSpecular = vec3(0.0);\n    if (!IS_DEBUG_VIEW_COMPOSITE_ENABLE_ENV_DIFFUSE)\n      lightingResult.environmentDiffuse = vec3(0.0);\n    if (!IS_DEBUG_VIEW_COMPOSITE_ENABLE_ENV_SPECULAR)\n      lightingResult.environmentSpecular = vec3(0.0);\n  #if CC_SURFACES_LIGHTING_TRANSMIT_DIFFUSE\n    if (!IS_DEBUG_VIEW_COMPOSITE_ENABLE_TRANSMIT_DIFFUSE)\n      lightingResult.directTransmitDiffuse = lightingResult.environmentTransmitDiffuse = vec3(0.0);\n  #endif\n  #if CC_SURFACES_LIGHTING_TRANSMIT_SPECULAR\n    if (!IS_DEBUG_VIEW_COMPOSITE_ENABLE_TRANSMIT_SPECULAR)\n      lightingResult.directTransmitSpecular = lightingResult.environmentTransmitSpecular = vec3(0.0);\n  #endif\n  #if CC_SURFACES_LIGHTING_TRT\n    if (!IS_DEBUG_VIEW_COMPOSITE_ENABLE_TRT)\n        lightingResult.directTRT = lightingResult.environmentTRT = vec3(0.0);\n  #endif\n  #if CC_SURFACES_LIGHTING_TT\n    if (!IS_DEBUG_VIEW_COMPOSITE_ENABLE_TT)\n        lightingResult.directTT = vec3(0.0);\n  #endif\n    if (!IS_DEBUG_VIEW_COMPOSITE_ENABLE_EMISSIVE)\n      lightingResult.emissive = vec3(0.0);\n    if (!IS_DEBUG_VIEW_COMPOSITE_ENABLE_LIGHT_MAP)\n      lightingResult.lightmapColor = vec3(0.0);\n    if (!IS_DEBUG_VIEW_COMPOSITE_ENABLE_SHADOW)\n      lightingResult.shadow = 1.0;\n    if (!IS_DEBUG_VIEW_COMPOSITE_ENABLE_AO)\n      lightingResult.ao = 1.0;\n  #if CC_SURFACES_LIGHTING_USE_FRESNEL\n    if (!IS_DEBUG_VIEW_COMPOSITE_ENABLE_FRESNEL)\n      lightingResult.fresnel = 1.0;\n  #endif\n  }\n#endif\n#if (CC_PIPELINE_TYPE == 0 || CC_FORCE_FORWARD_SHADING)\n  void main()  {\n  #if CC_DISABLE_STRUCTURE_IN_FRAGMENT_SHADER\n    float NoL = dot(-cc_mainLitDir.xyz, FSInput_worldNormal.xyz);\n    vec4 color = SurfacesFragmentModifyBaseColorAndTransparency();\n  #else\n    SurfacesMaterialData surfaceData;\n    CCSurfacesFragmentGetMaterialData(surfaceData);\n    vec2 shadowBias = vec2(0.0);\n    vec3 colDebugCSMLayer = vec3(1.0);\n    #if CC_RECEIVE_SHADOW\n      shadowBias = FSInput_shadowBias;\n      #if !CC_FORWARD_ADD\n        #if CC_USE_DEBUG_VIEW && CC_SURFACES_ENABLE_DEBUG_VIEW\n          if (IS_DEBUG_VIEW_MISC_ENABLE_CSM_LAYER_COLORATION)\n          {\n              vec4 csmPos;\n              vec4 shadowProjDepthInfo, shadowProjInfo;\n              vec3 shadowViewDir0, shadowViewDir1, shadowViewDir2;\n              int csmLayer = -1;\n              csmLayer = CCGetCSMLevel(csmPos, shadowProjDepthInfo, shadowProjInfo, shadowViewDir0, shadowViewDir1, shadowViewDir2, surfaceData.worldPos);\n              bool OutOfRange = csmLayer < 0;\n              if (OutOfRange)\n                  colDebugCSMLayer = vec3(1.0);\n              else if (csmLayer == 0)\n                  colDebugCSMLayer = vec3(1.0, 0.0, 0.0);\n              else if (csmLayer == 1)\n                  colDebugCSMLayer = vec3(0.0, 1.0, 0.0);\n              else if (csmLayer == 2)\n                  colDebugCSMLayer = vec3(0.0, 0.0, 1.0);\n              else if (csmLayer == 3)\n                  colDebugCSMLayer = vec3(0.0, 1.0, 1.0);\n          }\n        #endif\n      #endif\n    #endif\n    #if !CC_FORWARD_ADD\n      float fogFactor = 1.0;\n      #if CC_USE_FOG != 4\n        #if !CC_USE_ACCURATE_FOG\n          fogFactor = FSInput_fogFactor;\n        #else\n          CC_TRANSFER_FOG_BASE(vec4(FSInput_worldPos, 1.0), fogFactor);\n        #endif\n      #endif\n      #if CC_USE_DEBUG_VIEW == CC_SURFACES_DEBUG_VIEW_COMPOSITE_AND_MISC && CC_SURFACES_ENABLE_DEBUG_VIEW\n        if (!IS_DEBUG_VIEW_COMPOSITE_ENABLE_FOG) {\n            fogFactor = 1.0;\n        }\n      #endif\n    #endif\n    LightingResult lightingResult;\n    CCSurfacesLighting(lightingResult, surfaceData, shadowBias);\n    #if CC_USE_DEBUG_VIEW == CC_SURFACES_DEBUG_VIEW_SINGLE && CC_SURFACES_ENABLE_DEBUG_VIEW\n      vec4 debugColor = vec4(0.0, 0.0, 0.0, 1.0);\n      float materialTransparency = CCSurfacesShading(surfaceData, lightingResult).a;\n      #if !CC_FORWARD_ADD\n        CCSurfacesDebugViewMeshData(debugColor);\n        CCSurfacesDebugViewSurfaceData(debugColor, surfaceData);\n        if (((abs(float(cc_debug_view_mode.x) - float(CC_SURFACES_DEBUG_VIEW_FOG)) < EPSILON_LOWP) && (cc_surfaceTransform.y != 3.0)))\n        {\n          debugColor.rgb = vec3(1.0 - fogFactor);\n        }\n      #endif\n      #if CC_FORWARD_ADD\n        if (((abs(float(cc_debug_view_mode.x) - float(CC_SURFACES_DEBUG_VIEW_DIRECT_DIFFUSE)) < EPSILON_LOWP) && (cc_surfaceTransform.y != 3.0)) || ((abs(float(cc_debug_view_mode.x) - float(CC_SURFACES_DEBUG_VIEW_DIRECT_SPECULAR)) < EPSILON_LOWP) && (cc_surfaceTransform.y != 3.0)) || ((abs(float(cc_debug_view_mode.x) - float(CC_SURFACES_DEBUG_VIEW_DIRECT_ALL)) < EPSILON_LOWP) && (cc_surfaceTransform.y != 3.0)))\n      #endif\n        {\n            if (CCSurfacesDebugViewLightingResult(debugColor, lightingResult))\n            {\n              debugColor.a = materialTransparency;\n              #if CC_USE_HDR\n                if (IS_DEBUG_VIEW_COMPOSITE_ENABLE_TONE_MAPPING)\n                    debugColor.rgb = ACESToneMap(debugColor.rgb);\n              #endif\n              if (IS_DEBUG_VIEW_COMPOSITE_ENABLE_GAMMA_CORRECTION)\n                  debugColor.rgb = LinearToSRGB(debugColor.rgb);\n            }\n        }\n      if (IS_DEBUG_VIEW_ENABLE_WITH_CAMERA) {\n        gl_FragData[0] = debugColor;\n        return;\n      }\n    #elif CC_USE_DEBUG_VIEW == CC_SURFACES_DEBUG_VIEW_COMPOSITE_AND_MISC && CC_SURFACES_ENABLE_DEBUG_VIEW\n      CCSurfacesDebugViewCompositeLightingResult(lightingResult);\n    #endif\n    vec4 color = CCSurfacesShading(surfaceData, lightingResult);\n    #if CC_USE_DEBUG_VIEW && CC_SURFACES_ENABLE_DEBUG_VIEW\n      if (IS_DEBUG_VIEW_MISC_ENABLE_CSM_LAYER_COLORATION) {\n          color.rgb *= colDebugCSMLayer.rgb;\n      }\n      #if CC_SURFACES_USE_TANGENT_SPACE\n        color = CCSurfacesDebugDisplayInvalidInputData(color, FSInput_worldTangent);\n      #endif\n    #endif\n  #endif\n    #if CC_USE_RGBE_OUTPUT\n      gl_FragData[0] = packRGBE(color.rgb);\n      return;\n    #endif\n    #if CC_USE_HDR\n      #if CC_USE_DEBUG_VIEW == CC_SURFACES_DEBUG_VIEW_COMPOSITE_AND_MISC && CC_SURFACES_ENABLE_DEBUG_VIEW\n        if (IS_DEBUG_VIEW_COMPOSITE_ENABLE_TONE_MAPPING)\n      #endif\n        color.rgb = ACESToneMap(color.rgb);\n    #endif\n    #if CC_USE_DEBUG_VIEW == CC_SURFACES_DEBUG_VIEW_COMPOSITE_AND_MISC\n      if (IS_DEBUG_VIEW_COMPOSITE_ENABLE_GAMMA_CORRECTION)\n    #endif\n    color.rgb = LinearToSRGB(color.rgb);\n    #if !CC_FORWARD_ADD && CC_USE_FOG != 4\n      CC_APPLY_FOG_BASE(color, fogFactor);\n    #endif\n    gl_FragData[0] = CCSurfacesDebugDisplayInvalidNumber(color);\n  }\n#elif CC_PIPELINE_TYPE == 1\n    void main () {\n      SurfacesMaterialData surfaceData;\n      CCSurfacesFragmentGetMaterialData(surfaceData);\n      gl_FragData[0] = CCSurfacesDeferredOutput0(surfaceData);\n      gl_FragData[1] = CCSurfacesDeferredOutput1(surfaceData);\n      gl_FragData[2] = CCSurfacesDeferredOutput2(surfaceData);\n    #if CC_USE_DEBUG_VIEW == CC_SURFACES_DEBUG_VIEW_SINGLE && CC_SURFACES_ENABLE_DEBUG_VIEW\n      vec4 debugColor = vec4(0.0, 0.0, 0.0, 1.0);\n      CCSurfacesDebugViewMeshData(debugColor);\n      CCSurfacesDebugViewSurfaceData(debugColor, surfaceData);\n      if (IS_DEBUG_VIEW_ENABLE_WITH_CAMERA) {\n        gl_FragData[0] = debugColor;\n      }\n    #endif\n    }\n#endif"},"builtins":{"globals":{"blocks":[{"name":"CCGlobal","defines":[]},{"name":"CCCamera","defines":[]},{"name":"CCShadow","defines":[]},{"name":"CCCSM","defines":["CC_SUPPORT_CASCADED_SHADOW_MAP"]}],"samplerTextures":[{"name":"cc_environment","defines":[]},{"name":"cc_diffuseMap","defines":["CC_USE_IBL","CC_USE_DIFFUSEMAP"]},{"name":"cc_shadowMap","defines":["CC_RECEIVE_SHADOW"]},{"name":"cc_spotShadowMap","defines":["CC_RECEIVE_SHADOW"]}],"buffers":[],"images":[]},"locals":{"blocks":[{"name":"CCLocal","defines":["!USE_INSTANCING"]},{"name":"CCMorph","defines":["CC_USE_MORPH"]},{"name":"CCSkinningTexture","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"CCSkinningAnimation","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"CCSkinning","defines":["CC_USE_SKINNING","!CC_USE_BAKED_ANIMATION","!CC_USE_REAL_TIME_JOINT_TEXTURE"]},{"name":"CCForwardLight","defines":["CC_FORWARD_ADD","CC_ENABLE_CLUSTERED_LIGHT_CULLING"]},{"name":"CCSH","defines":["CC_USE_LIGHT_PROBE","!USE_INSTANCING"]}],"samplerTextures":[{"name":"cc_PositionDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_POSITION"]},{"name":"cc_NormalDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_NORMAL"]},{"name":"cc_TangentDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_TANGENT"]},{"name":"cc_jointTexture","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"cc_realtimeJoint","defines":["CC_USE_SKINNING","!CC_USE_BAKED_ANIMATION","CC_USE_REAL_TIME_JOINT_TEXTURE"]},{"name":"cc_reflectionProbeCubemap","defines":["CC_USE_REFLECTION_PROBE"]},{"name":"cc_reflectionProbePlanarMap","defines":["CC_USE_REFLECTION_PROBE"]},{"name":"cc_reflectionProbeDataMap","defines":["CC_USE_REFLECTION_PROBE"]},{"name":"cc_lightingMap","defines":["CC_USE_LIGHTMAP","!CC_FORWARD_ADD"]}],"buffers":[],"images":[]},"statistics":{"CC_EFFECT_USED_VERTEX_UNIFORM_VECTORS":99,"CC_EFFECT_USED_FRAGMENT_UNIFORM_VECTORS":129}},"defines":[{"name":"HAS_SECOND_UV","type":"boolean"},{"name":"USE_TWOSIDE","type":"boolean"},{"name":"USE_REFLECTION_DENOISE","type":"boolean"},{"name":"IS_ANISOTROPY","type":"boolean"},{"name":"USE_VERTEX_COLOR","type":"boolean"},{"name":"USE_COMPATIBLE_LIGHTING","type":"boolean"},{"name":"USE_INSTANCING","type":"boolean"},{"name":"CC_USE_SKINNING","type":"boolean"},{"name":"CC_USE_BAKED_ANIMATION","type":"boolean"},{"name":"CC_USE_LIGHTMAP","type":"boolean"},{"name":"CC_RECEIVE_SHADOW","type":"boolean"},{"name":"CC_USE_LIGHT_PROBE","type":"boolean","default":0},{"name":"CC_USE_MORPH","type":"boolean"},{"name":"CC_FORWARD_ADD","type":"boolean"},{"name":"CC_USE_FOG","type":"number","range":[0,4]},{"name":"CC_USE_ACCURATE_FOG","type":"boolean"},{"name":"CC_USE_REFLECTION_PROBE","type":"number","range":[0,3]},{"name":"CC_MORPH_TARGET_COUNT","type":"number","range":[2,8]},{"name":"CC_MORPH_TARGET_HAS_POSITION","type":"boolean"},{"name":"CC_MORPH_TARGET_HAS_NORMAL","type":"boolean"},{"name":"CC_MORPH_TARGET_HAS_TANGENT","type":"boolean"},{"name":"CC_MORPH_PRECOMPUTED","type":"boolean"},{"name":"CC_USE_REAL_TIME_JOINT_TEXTURE","type":"boolean"},{"name":"CC_DISABLE_STRUCTURE_IN_FRAGMENT_SHADER","type":"number","range":[0,1]},{"name":"CC_PIPELINE_TYPE","type":"number","range":[0,1]},{"name":"CC_FORCE_FORWARD_SHADING","type":"boolean"},{"name":"CC_SUPPORT_CASCADED_SHADOW_MAP","type":"boolean"},{"name":"CC_USE_IBL","type":"number","range":[0,2]},{"name":"CC_USE_DIFFUSEMAP","type":"number","range":[0,2]},{"name":"CC_USE_DEBUG_VIEW","type":"number","range":[0,3]},{"name":"CC_IBL_CONVOLUTED","type":"boolean"},{"name":"CC_SHADOWMAP_FORMAT","type":"number","range":[0,3]},{"name":"CC_SHADOWMAP_USE_LINEAR_DEPTH","type":"boolean"},{"name":"CC_DIR_SHADOW_PCF_TYPE","type":"number","range":[0,3]},{"name":"CC_CASCADED_LAYERS_TRANSITION","type":"boolean"},{"name":"CC_USE_HDR","type":"boolean"},{"name":"CC_LIGHT_MAP_VERSION","type":"number","range":[0,3]},{"name":"TEXTURE_UV","type":"string","options":["v_uv","v_uv1"]},{"name":"USE_ALBEDO_MAP","type":"boolean"},{"name":"USE_WEIGHT_MAP","type":"boolean"},{"name":"USE_METALLIC_MAP","type":"boolean"},{"name":"METALLIC_CHANNEL","type":"string","options":["r","g","b","a"]},{"name":"USE_ROUGHNESS_MAP","type":"boolean"},{"name":"ROUGHNESS_CHANNEL","type":"string","options":["r","g","b","a"]},{"name":"USE_OCCLUSION_MAP","type":"boolean"},{"name":"OCCLUSION_CHANNEL","type":"string","options":["r","g","b","a"]},{"name":"USE_TRANSPARENCY_MAP","type":"boolean"},{"name":"USE_TRANSPARENCYCOLOR_MAP","type":"boolean"},{"name":"USE_EMISSIVE_MAP","type":"boolean"},{"name":"USE_EMISSIVESCALE_MAP","type":"boolean"},{"name":"USE_OPACITY_MAP","type":"boolean"},{"name":"ALPHA_SOURCE_CHANNEL","type":"string","options":["r","g","b","a"]},{"name":"USE_NORMAL_MAP","type":"boolean"},{"name":"NORMAL_UV","type":"string","options":["v_uv","v_uv1"]},{"name":"ALPHA_SOURCE_IS_OPACITY","type":"boolean"},{"name":"USE_ALPHA_TEST","type":"boolean"},{"name":"USE_OCCLUSION_CHANNEL","type":"boolean"},{"name":"USE_ROUGHNESS_CHANNEL","type":"boolean"},{"name":"USE_METALLIC_CHANNEL","type":"boolean"},{"name":"CC_SHADOW_TYPE","type":"number","range":[0,3]},{"name":"CC_DIR_LIGHT_SHADOW_TYPE","type":"number","range":[0,3]},{"name":"CC_DISABLE_DIRECTIONAL_LIGHT","type":"boolean"},{"name":"CC_USE_RGBE_OUTPUT","type":"boolean"}]},{"hash":2655333790,"name":"util/dcc/imported-metallic-roughness|shadow-caster-vs|shadow-caster-fs","blocks":[{"name":"Constants","stageFlags":17,"binding":0,"members":[{"name":"tilingOffset","type":16,"count":1},{"name":"albedo","type":16,"count":1},{"name":"albedoScaleAndCutoff","type":16,"count":1},{"name":"emissive","type":16,"count":1},{"name":"emissiveScale","type":13,"count":1},{"name":"occlusion","type":13,"count":1},{"name":"roughness","type":13,"count":1},{"name":"metallic","type":13,"count":1},{"name":"normalStrength","type":13,"count":1},{"name":"alphaSource","type":13,"count":1},{"name":"albedoScale","type":13,"count":1}],"defines":[]}],"samplerTextures":[{"name":"albedoMap","type":28,"count":1,"stageFlags":16,"binding":1,"defines":["USE_ALBEDO_MAP"]},{"name":"baseWeightMap","type":28,"count":1,"stageFlags":16,"binding":2,"defines":["USE_WEIGHT_MAP"]},{"name":"metallicMap","type":28,"count":1,"stageFlags":16,"binding":3,"defines":["USE_METALLIC_MAP"]},{"name":"roughnessMap","type":28,"count":1,"stageFlags":16,"binding":4,"defines":["USE_ROUGHNESS_MAP"]},{"name":"occlusionMap","type":28,"count":1,"stageFlags":16,"binding":5,"defines":["USE_OCCLUSION_MAP"]},{"name":"transparencyMap","type":28,"count":1,"stageFlags":16,"binding":6,"defines":["USE_TRANSPARENCY_MAP"]},{"name":"transparencyColorMap","type":28,"count":1,"stageFlags":16,"binding":7,"defines":["USE_TRANSPARENCYCOLOR_MAP"]},{"name":"emissiveMap","type":28,"count":1,"stageFlags":16,"binding":8,"defines":["USE_EMISSIVE_MAP"]},{"name":"emissiveScaleMap","type":28,"count":1,"stageFlags":16,"binding":9,"defines":["USE_EMISSIVESCALE_MAP"]},{"name":"alphaSourceMap","type":28,"count":1,"stageFlags":16,"binding":10,"defines":["USE_OPACITY_MAP"]},{"name":"normalMap","type":28,"count":1,"stageFlags":16,"binding":11,"defines":["USE_NORMAL_MAP"]}],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[],"attributes":[{"name":"a_position","format":32,"location":0,"defines":[]},{"name":"a_normal","format":32,"location":1,"defines":[]},{"name":"a_texCoord","format":21,"location":2,"defines":[]},{"name":"a_tangent","format":44,"location":3,"defines":[]},{"name":"a_color","format":44,"location":6,"defines":[]},{"name":"a_texCoord1","format":21,"location":7,"defines":[]},{"name":"a_joints","location":4,"defines":["CC_USE_SKINNING"]},{"name":"a_weights","format":44,"location":5,"defines":["CC_USE_SKINNING"]},{"name":"a_jointAnimInfo","format":44,"isInstanced":true,"location":8,"defines":["USE_INSTANCING","CC_USE_BAKED_ANIMATION"]},{"name":"a_matWorld0","format":44,"isInstanced":true,"location":9,"defines":["USE_INSTANCING"]},{"name":"a_matWorld1","format":44,"isInstanced":true,"location":10,"defines":["USE_INSTANCING"]},{"name":"a_matWorld2","format":44,"isInstanced":true,"location":11,"defines":["USE_INSTANCING"]},{"name":"a_lightingMapUVParam","format":44,"isInstanced":true,"location":12,"defines":["USE_INSTANCING","CC_USE_LIGHTMAP"]},{"name":"a_localShadowBiasAndProbeId","format":44,"isInstanced":true,"location":13,"defines":["USE_INSTANCING"]},{"name":"a_sh_linear_const_r","format":44,"isInstanced":true,"location":14,"defines":["USE_INSTANCING","CC_USE_LIGHT_PROBE"]},{"name":"a_sh_linear_const_g","format":44,"isInstanced":true,"location":15,"defines":["USE_INSTANCING","CC_USE_LIGHT_PROBE"]},{"name":"a_sh_linear_const_b","format":44,"isInstanced":true,"location":16,"defines":["USE_INSTANCING","CC_USE_LIGHT_PROBE"]},{"name":"a_vertexId","format":11,"location":17,"defines":["CC_USE_MORPH"]}],"fragColors":[{"name":"fragColorX","typename":"vec4","type":16,"count":1,"stageFlags":16,"location":0,"defines":[]}],"descriptors":[{"rate":0,"blocks":[{"name":"CCLocal","stageFlags":17,"tags":{"builtin":"local"},"members":[{"name":"cc_matWorld","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matWorldIT","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_lightingMapUVParam","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_localShadowBias","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_reflectionProbeData1","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_reflectionProbeData2","typename":"vec4","type":16,"count":1,"precision":"highp "}],"defines":["!USE_INSTANCING"]},{"name":"CCMorph","stageFlags":1,"tags":{"builtin":"local"},"members":[{"name":"cc_displacementWeights","typename":"vec4","type":16,"count":15,"isArray":true},{"name":"cc_displacementTextureInfo","typename":"vec4","type":16,"count":1}],"defines":["CC_USE_MORPH"]},{"name":"CCSkinningTexture","stageFlags":1,"tags":{"builtin":"local"},"members":[{"name":"cc_jointTextureInfo","typename":"vec4","type":16,"count":1,"precision":"highp "}],"defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"CCSkinningAnimation","stageFlags":1,"tags":{"builtin":"local"},"members":[{"name":"cc_jointAnimInfo","typename":"vec4","type":16,"count":1,"precision":"highp "}],"defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"CCSkinning","stageFlags":1,"tags":{"builtin":"local"},"members":[{"name":"cc_joints","typename":"vec4","type":16,"count":0,"precision":"highp ","isArray":true}],"defines":["CC_USE_SKINNING","!CC_USE_BAKED_ANIMATION","!CC_USE_REAL_TIME_JOINT_TEXTURE"]},{"name":"CCForwardLight","stageFlags":16,"tags":{"builtin":"local"},"members":[{"name":"cc_lightPos","typename":"vec4","type":16,"count":0,"precision":"highp ","isArray":true},{"name":"cc_lightColor","typename":"vec4","type":16,"count":0,"isArray":true},{"name":"cc_lightSizeRangeAngle","typename":"vec4","type":16,"count":0,"isArray":true},{"name":"cc_lightDir","typename":"vec4","type":16,"count":0,"isArray":true}],"defines":["CC_FORWARD_ADD","CC_ENABLE_CLUSTERED_LIGHT_CULLING"]},{"name":"CCSH","stageFlags":16,"tags":{"builtin":"local"},"members":[{"name":"cc_sh_linear_const_r","typename":"vec4","type":16,"count":1},{"name":"cc_sh_linear_const_g","typename":"vec4","type":16,"count":1},{"name":"cc_sh_linear_const_b","typename":"vec4","type":16,"count":1},{"name":"cc_sh_quadratic_r","typename":"vec4","type":16,"count":1},{"name":"cc_sh_quadratic_g","typename":"vec4","type":16,"count":1},{"name":"cc_sh_quadratic_b","typename":"vec4","type":16,"count":1},{"name":"cc_sh_quadratic_a","typename":"vec4","type":16,"count":1}],"defines":["CC_USE_LIGHT_PROBE","!USE_INSTANCING"]}],"samplerTextures":[{"name":"cc_PositionDisplacements","typename":"sampler2D","type":28,"count":1,"stageFlags":1,"tags":{"builtin":"local"},"defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_POSITION"]},{"name":"cc_NormalDisplacements","typename":"sampler2D","type":28,"count":1,"stageFlags":1,"tags":{"builtin":"local"},"defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_NORMAL"]},{"name":"cc_TangentDisplacements","typename":"sampler2D","type":28,"count":1,"stageFlags":1,"tags":{"builtin":"local"},"defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_TANGENT"]},{"name":"cc_jointTexture","typename":"sampler2D","type":28,"count":1,"precision":"highp ","stageFlags":1,"tags":{"builtin":"local"},"defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"cc_realtimeJoint","typename":"sampler2D","type":28,"count":1,"precision":"highp ","stageFlags":1,"tags":{"builtin":"local"},"defines":["CC_USE_SKINNING","!CC_USE_BAKED_ANIMATION","CC_USE_REAL_TIME_JOINT_TEXTURE"]},{"name":"cc_reflectionProbeCubemap","typename":"samplerCube","type":31,"count":1,"stageFlags":16,"tags":{"builtin":"local"},"defines":["CC_USE_REFLECTION_PROBE"]},{"name":"cc_reflectionProbePlanarMap","typename":"sampler2D","type":28,"count":1,"stageFlags":16,"tags":{"builtin":"local"},"defines":["CC_USE_REFLECTION_PROBE"]},{"name":"cc_reflectionProbeDataMap","typename":"sampler2D","type":28,"count":1,"stageFlags":16,"tags":{"builtin":"local"},"defines":["CC_USE_REFLECTION_PROBE"]},{"name":"cc_lightingMap","typename":"sampler2D","type":28,"count":1,"stageFlags":16,"tags":{"builtin":"local"},"defines":["CC_USE_LIGHTMAP","!CC_FORWARD_ADD"]}],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[]},{"rate":1,"blocks":[{"name":"Constants","stageFlags":17,"binding":0,"members":[{"name":"tilingOffset","type":16,"count":1},{"name":"albedo","type":16,"count":1},{"name":"albedoScaleAndCutoff","type":16,"count":1},{"name":"emissive","type":16,"count":1},{"name":"emissiveScale","type":13,"count":1},{"name":"occlusion","type":13,"count":1},{"name":"roughness","type":13,"count":1},{"name":"metallic","type":13,"count":1},{"name":"normalStrength","type":13,"count":1},{"name":"alphaSource","type":13,"count":1},{"name":"albedoScale","type":13,"count":1}],"defines":[]}],"samplerTextures":[{"name":"albedoMap","type":28,"count":1,"stageFlags":16,"binding":1,"defines":["USE_ALBEDO_MAP"]},{"name":"baseWeightMap","type":28,"count":1,"stageFlags":16,"binding":2,"defines":["USE_WEIGHT_MAP"]},{"name":"metallicMap","type":28,"count":1,"stageFlags":16,"binding":3,"defines":["USE_METALLIC_MAP"]},{"name":"roughnessMap","type":28,"count":1,"stageFlags":16,"binding":4,"defines":["USE_ROUGHNESS_MAP"]},{"name":"occlusionMap","type":28,"count":1,"stageFlags":16,"binding":5,"defines":["USE_OCCLUSION_MAP"]},{"name":"transparencyMap","type":28,"count":1,"stageFlags":16,"binding":6,"defines":["USE_TRANSPARENCY_MAP"]},{"name":"transparencyColorMap","type":28,"count":1,"stageFlags":16,"binding":7,"defines":["USE_TRANSPARENCYCOLOR_MAP"]},{"name":"emissiveMap","type":28,"count":1,"stageFlags":16,"binding":8,"defines":["USE_EMISSIVE_MAP"]},{"name":"emissiveScaleMap","type":28,"count":1,"stageFlags":16,"binding":9,"defines":["USE_EMISSIVESCALE_MAP"]},{"name":"alphaSourceMap","type":28,"count":1,"stageFlags":16,"binding":10,"defines":["USE_OPACITY_MAP"]},{"name":"normalMap","type":28,"count":1,"stageFlags":16,"binding":11,"defines":["USE_NORMAL_MAP"]}],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[]},{"rate":2,"blocks":[],"samplerTextures":[],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[]},{"rate":3,"blocks":[{"name":"CCGlobal","stageFlags":17,"tags":{"builtin":"global"},"members":[{"name":"cc_time","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_screenSize","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_nativeSize","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_probeInfo","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_debug_view_mode","typename":"vec4","type":16,"count":1,"precision":"mediump "}],"defines":[]},{"name":"CCCamera","stageFlags":17,"tags":{"builtin":"global"},"members":[{"name":"cc_matView","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matViewInv","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matProj","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matProjInv","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matViewProj","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matViewProjInv","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_cameraPos","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_surfaceTransform","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_screenScale","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_exposure","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_mainLitDir","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_mainLitColor","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_ambientSky","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_ambientGround","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_fogColor","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_fogBase","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_fogAdd","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_nearFar","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_viewPort","typename":"vec4","type":16,"count":1,"precision":"mediump "}],"defines":[]},{"name":"CCShadow","stageFlags":17,"tags":{"builtin":"global"},"members":[{"name":"cc_matLightView","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matLightViewProj","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_shadowInvProjDepthInfo","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_shadowProjDepthInfo","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_shadowProjInfo","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_shadowNFLSInfo","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_shadowWHPBInfo","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_shadowLPNNInfo","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_shadowColor","typename":"vec4","type":16,"count":1,"precision":"lowp "},{"name":"cc_planarNDInfo","typename":"vec4","type":16,"count":1,"precision":"mediump "}],"defines":[]},{"name":"CCCSM","stageFlags":16,"tags":{"builtin":"global"},"members":[{"name":"cc_csmViewDir0","typename":"vec4","type":16,"count":4,"precision":"highp ","isArray":true},{"name":"cc_csmViewDir1","typename":"vec4","type":16,"count":4,"precision":"highp ","isArray":true},{"name":"cc_csmViewDir2","typename":"vec4","type":16,"count":4,"precision":"highp ","isArray":true},{"name":"cc_csmAtlas","typename":"vec4","type":16,"count":4,"precision":"highp ","isArray":true},{"name":"cc_matCSMViewProj","typename":"mat4","type":25,"count":4,"precision":"highp ","isArray":true},{"name":"cc_csmProjDepthInfo","typename":"vec4","type":16,"count":4,"precision":"highp ","isArray":true},{"name":"cc_csmProjInfo","typename":"vec4","type":16,"count":4,"precision":"highp ","isArray":true},{"name":"cc_csmSplitsInfo","typename":"vec4","type":16,"count":1,"precision":"highp "}],"defines":["CC_SUPPORT_CASCADED_SHADOW_MAP"]}],"samplerTextures":[{"name":"cc_environment","typename":"samplerCube","type":31,"count":1,"stageFlags":16,"tags":{"builtin":"global"},"defines":[]},{"name":"cc_diffuseMap","typename":"samplerCube","type":31,"count":1,"stageFlags":16,"tags":{"builtin":"global"},"defines":["CC_USE_IBL","CC_USE_DIFFUSEMAP"]},{"name":"cc_shadowMap","typename":"sampler2D","type":28,"count":1,"precision":"highp ","stageFlags":16,"tags":{"builtin":"global"},"defines":["CC_RECEIVE_SHADOW"]},{"name":"cc_spotShadowMap","typename":"sampler2D","type":28,"count":1,"precision":"highp ","stageFlags":16,"tags":{"builtin":"global"},"defines":["CC_RECEIVE_SHADOW"]}],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[]}],"glsl3":{"vert":"\nprecision highp float;\n#define CC_SURFACES_USE_TANGENT_SPACE 0\n#define CC_SURFACES_USE_VERTEX_COLOR 0\n#define CC_SURFACES_USE_SECOND_UV 0\n#define CC_SURFACES_USE_LIGHT_MAP 0\n#define CC_SURFACES_TRANSFER_LOCAL_POS 0\n#ifndef CC_SURFACES_USE_SECOND_UV\n  #define CC_SURFACES_USE_SECOND_UV 0\n#endif\n#ifndef CC_SURFACES_USE_TANGENT_SPACE\n  #define CC_SURFACES_USE_TANGENT_SPACE 0\n#endif\n#ifndef CC_SURFACES_USE_VERTEX_COLOR\n  #define CC_SURFACES_USE_VERTEX_COLOR 0\n#endif\n#ifndef CC_SURFACES_TRANSFER_LOCAL_POS\n  #define CC_SURFACES_TRANSFER_LOCAL_POS 0\n#endif\n#ifndef CC_SURFACES_TRANSFER_CLIP_POS\n  #define CC_SURFACES_TRANSFER_CLIP_POS 0\n#endif\n#ifndef CC_SURFACES_USE_LIGHT_MAP\n  #ifdef CC_USE_LIGHTMAP\n    #define CC_SURFACES_USE_LIGHT_MAP CC_USE_LIGHTMAP\n  #else\n    #define CC_SURFACES_USE_LIGHT_MAP 0\n  #endif\n#endif\n#ifndef CC_SURFACES_FLIP_UV\n  #define CC_SURFACES_FLIP_UV 0\n#endif\n#ifndef CC_SURFACES_USE_TWO_SIDED\n  #define CC_SURFACES_USE_TWO_SIDED 0\n#endif\n#ifndef CC_SURFACES_USE_REFLECTION_DENOISE\n  #define CC_SURFACES_USE_REFLECTION_DENOISE 0\n#endif\n#ifndef CC_SURFACES_LIGHTING_ANISOTROPIC\n  #define CC_SURFACES_LIGHTING_ANISOTROPIC 0\n#endif\n#ifndef CC_SURFACES_LIGHTING_ANISOTROPIC_ENVCONVOLUTION_COUNT\n  #define CC_SURFACES_LIGHTING_ANISOTROPIC_ENVCONVOLUTION_COUNT 0\n#endif\n#ifndef CC_SURFACES_USE_LEGACY_COMPATIBLE_LIGHTING\n  #define CC_SURFACES_USE_LEGACY_COMPATIBLE_LIGHTING 0\n#endif\n#ifndef CC_SURFACES_LIGHTING_USE_FRESNEL\n  #define CC_SURFACES_LIGHTING_USE_FRESNEL 0\n#endif\n#ifndef CC_SURFACES_LIGHTING_TRANSMIT_SPECULAR\n  #define CC_SURFACES_LIGHTING_TRANSMIT_SPECULAR 0\n#endif\n#ifndef CC_SURFACES_LIGHTING_TRANSMIT_DIFFUSE\n  #define CC_SURFACES_LIGHTING_TRANSMIT_DIFFUSE 0\n#endif\n#ifndef CC_SURFACES_LIGHTING_USE_SHADOWMAP_TRANSMIT\n  #define CC_SURFACES_LIGHTING_USE_SHADOWMAP_TRANSMIT 0\n#endif\n#ifndef CC_SURFACES_LIGHTING_TRT\n  #define CC_SURFACES_LIGHTING_TRT 0\n#endif\n#ifndef CC_SURFACES_LIGHTING_TT\n  #define CC_SURFACES_LIGHTING_TT 0\n#endif\n#ifndef CC_SURFACES_ENABLE_DEBUG_VIEW\n  #define CC_SURFACES_ENABLE_DEBUG_VIEW 1\n#endif\n#ifndef CC_SURFACES_LIGHTING_CALCULATE_DIFFUSE\n  #define CC_SURFACES_LIGHTING_CALCULATE_DIFFUSE 1\n#endif\n#ifndef CC_SURFACES_LIGHTING_CALCULATE_SPECULAR\n  #define CC_SURFACES_LIGHTING_CALCULATE_SPECULAR 1\n#endif\n#define CC_USE_SURFACE_SHADER 1\nin vec3 a_position;\nin vec3 a_normal;\nin vec2 a_texCoord;\n#if CC_SURFACES_USE_TANGENT_SPACE\n  in vec4 a_tangent;\n#endif\n#if CC_SURFACES_USE_VERTEX_COLOR\n  in vec4 a_color;\n#endif\n#if CC_SURFACES_USE_SECOND_UV || CC_USE_LIGHTMAP\n  in vec2 a_texCoord1;\n#endif\n#if CC_USE_SKINNING\n    in vec4 a_joints;\n  in vec4 a_weights;\n#endif\n#if USE_INSTANCING\n  #if CC_USE_BAKED_ANIMATION\n    in highp vec4 a_jointAnimInfo;\n  #endif\n  in vec4 a_matWorld0;\n  in vec4 a_matWorld1;\n  in vec4 a_matWorld2;\n  #if CC_USE_LIGHTMAP\n    in vec4 a_lightingMapUVParam;\n  #endif\n  #if CC_RECEIVE_SHADOW || CC_USE_REFLECTION_PROBE\n    in vec4 a_localShadowBiasAndProbeId;\n  #endif\n  #if CC_USE_LIGHT_PROBE\n    in vec4 a_sh_linear_const_r;\n    in vec4 a_sh_linear_const_g;\n    in vec4 a_sh_linear_const_b;\n  #endif\n#endif\n#if CC_USE_MORPH\n    in float a_vertexId;\n#endif\nout highp vec3 v_worldPos;\nout mediump vec4 v_normal;\nout vec2 v_uv;\n#if CC_SURFACES_USE_VERTEX_COLOR\n  out lowp vec4 v_color;\n#endif\n#if CC_SURFACES_USE_TANGENT_SPACE\n  out mediump vec4 v_tangent;\n#endif\n#if CC_SURFACES_USE_SECOND_UV\n  out mediump vec2 v_uv1;\n#endif\n#if CC_USE_LIGHTMAP && !CC_FORWARD_ADD\n  out mediump vec3 v_luv;\n#endif\n#if CC_RECEIVE_SHADOW || CC_USE_REFLECTION_PROBE\n  out mediump vec4 v_shadowBiasAndProbeId;\n#endif\n#if CC_USE_FOG != 4 && !CC_USE_ACCURATE_FOG\n  out mediump float v_fogFactor;\n#endif\n#if CC_SURFACES_TRANSFER_LOCAL_POS\n  out highp vec4 v_localPos;\n#endif\n#if CC_SURFACES_TRANSFER_CLIP_POS\n  out highp vec4 v_clipPos;\n#endif\n#if CC_USE_LIGHT_PROBE\n  #if USE_INSTANCING\n    out mediump vec4 v_sh_linear_const_r;\n    out mediump vec4 v_sh_linear_const_g;\n    out mediump vec4 v_sh_linear_const_b;\n  #endif\n#endif\n#define VSOutput_worldPos v_worldPos\n#define VSOutput_worldNormal v_normal.xyz\n#define VSOutput_faceSideSign v_normal.w\n#define VSOutput_texcoord v_uv\n#if CC_SURFACES_USE_VERTEX_COLOR\n  #define VSOutput_vertexColor v_color\n#endif\n#if CC_SURFACES_USE_TANGENT_SPACE\n  #define VSOutput_worldTangent v_tangent.xyz\n  #define VSOutput_mirrorNormal v_tangent.w\n#endif\n#if CC_SURFACES_USE_SECOND_UV\n  #define VSOutput_texcoord1 v_uv1\n#endif\n#if CC_USE_LIGHTMAP && !CC_FORWARD_ADD\n  #define VSOutput_lightMapUV v_luv\n#endif\n#if CC_RECEIVE_SHADOW\n  #define VSOutput_shadowBias v_shadowBiasAndProbeId.xy\n#endif\n#if CC_USE_REFLECTION_PROBE\n  #define VSOutput_reflectionProbeId v_shadowBiasAndProbeId.z\n#endif\n#if CC_USE_FOG != 4 && !CC_USE_ACCURATE_FOG\n  #define VSOutput_fogFactor v_fogFactor\n#endif\n#if CC_SURFACES_TRANSFER_LOCAL_POS\n  #define VSOutput_localPos v_localPos\n#endif\n#if CC_SURFACES_TRANSFER_CLIP_POS\n  #define VSOutput_clipPos v_clipPos\n#endif\nstruct SurfacesStandardVertexIntermediate\n{\n  highp vec4 position;\n  vec3 normal;\n#if CC_SURFACES_USE_TANGENT_SPACE\n  vec4 tangent;\n#endif\n#if CC_SURFACES_USE_VERTEX_COLOR\n  vec4 color;\n#endif\n  vec2 texCoord;\n#if CC_SURFACES_USE_SECOND_UV\n  vec2 texCoord1;\n#endif\n  highp vec4 clipPos;\n  highp vec3 worldPos;\n  vec4 worldNormal;\n  #if CC_SURFACES_USE_TANGENT_SPACE\n    vec3 worldTangent, worldBinormal;\n  #endif\n#if CC_RECEIVE_SHADOW || CC_USE_REFLECTION_PROBE\n  vec4 shadowBiasAndProbeId;\n#endif\n#if CC_USE_FOG != 4 && !CC_USE_ACCURATE_FOG\n  float fogFactor;\n#endif\n#if CC_USE_LIGHTMAP && !CC_FORWARD_ADD\n  vec3 lightmapUV;\n#endif\n};\n#if CC_USE_MORPH\n    int getVertexId() {\n      return int(a_vertexId);\n    }\n#endif\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n  mediump vec4 cc_probeInfo;\n  mediump vec4 cc_debug_view_mode;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_surfaceTransform;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\nlayout(std140) uniform CCShadow {\n  highp mat4 cc_matLightView;\n  highp mat4 cc_matLightViewProj;\n  highp vec4 cc_shadowInvProjDepthInfo;\n  highp vec4 cc_shadowProjDepthInfo;\n  highp vec4 cc_shadowProjInfo;\n  mediump vec4 cc_shadowNFLSInfo;\n  mediump vec4 cc_shadowWHPBInfo;\n  mediump vec4 cc_shadowLPNNInfo;\n  lowp vec4 cc_shadowColor;\n  mediump vec4 cc_planarNDInfo;\n};\n#define QUATER_PI         0.78539816340\n#define HALF_PI           1.57079632679\n#define PI                3.14159265359\n#define PI2               6.28318530718\n#define PI4               12.5663706144\n#define INV_QUATER_PI     1.27323954474\n#define INV_HALF_PI       0.63661977237\n#define INV_PI            0.31830988618\n#define INV_PI2           0.15915494309\n#define INV_PI4           0.07957747155\n#define EPSILON           1e-6\n#define EPSILON_LOWP      1e-4\n#define LOG2              1.442695\n#define EXP_VALUE         2.71828183f\n#define FP_MAX            65504.0\n#define FP_SCALE          0.0009765625\n#define FP_SCALE_INV      1024.0\n#define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\n#define LIGHT_MAP_TYPE_DISABLED 0\n#define LIGHT_MAP_TYPE_ALL_IN_ONE 1\n#define LIGHT_MAP_TYPE_INDIRECT_OCCLUSION 2\n#define REFLECTION_PROBE_TYPE_NONE 0\n#define REFLECTION_PROBE_TYPE_CUBE 1\n#define REFLECTION_PROBE_TYPE_PLANAR 2\n#define LIGHT_TYPE_DIRECTIONAL 0.0\n#define LIGHT_TYPE_POINT 1.0\n#define LIGHT_TYPE_SPOT 2.0\n#define LIGHT_TYPE_SPHERE 3.0\n#define LIGHT_TYPE_RANGED_DIRECTIONAL 4.0\n#define IS_DIRECTIONAL_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_DIRECTIONAL)) < EPSILON_LOWP)\n#define IS_SPHERE_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_SPHERE)) < EPSILON_LOWP)\n#define IS_SPOT_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_SPOT)) < EPSILON_LOWP)\n#define IS_POINT_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_POINT)) < EPSILON_LOWP)\n#define IS_RANGED_DIRECTIONAL_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_RANGED_DIRECTIONAL)) < EPSILON_LOWP)\nhighp float decode32 (highp vec4 rgba) {\n  rgba = rgba * 255.0;\n  highp float Sign = 1.0 - (step(128.0, (rgba[3]) + 0.5)) * 2.0;\n  highp float Exponent = 2.0 * (mod(float(int((rgba[3]) + 0.5)), 128.0)) + (step(128.0, (rgba[2]) + 0.5)) - 127.0;\n  highp float Mantissa = (mod(float(int((rgba[2]) + 0.5)), 128.0)) * 65536.0 + rgba[1] * 256.0 + rgba[0] + 8388608.0;\n  return Sign * exp2(Exponent - 23.0) * Mantissa;\n}\n#if !USE_INSTANCING\n  layout(std140) uniform CCLocal {\n    highp mat4 cc_matWorld;\n    highp mat4 cc_matWorldIT;\n    highp vec4 cc_lightingMapUVParam;\n    highp vec4 cc_localShadowBias;\n    highp vec4 cc_reflectionProbeData1;\n    highp vec4 cc_reflectionProbeData2;\n  };\n#endif\nvoid CCGetWorldMatrixFull(out mat4 matWorld, out mat4 matWorldIT)\n{\n  #if USE_INSTANCING\n    matWorld = mat4(\n      vec4(a_matWorld0.xyz, 0.0),\n      vec4(a_matWorld1.xyz, 0.0),\n      vec4(a_matWorld2.xyz, 0.0),\n      vec4(a_matWorld0.w, a_matWorld1.w, a_matWorld2.w, 1.0)\n    );\n    matWorldIT = matWorld;\n  #else\n    matWorld = cc_matWorld;\n    matWorldIT = cc_matWorldIT;\n  #endif\n}\n#if CC_USE_MORPH\n  layout(std140) uniform CCMorph {\n    vec4 cc_displacementWeights[15];\n    vec4 cc_displacementTextureInfo;\n  };\n  #if CC_MORPH_TARGET_HAS_POSITION\n    uniform sampler2D cc_PositionDisplacements;\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    uniform sampler2D cc_NormalDisplacements;\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    uniform sampler2D cc_TangentDisplacements;\n  #endif\n  vec2 getPixelLocation(vec2 textureResolution, int pixelIndex) {\n    float pixelIndexF = float(pixelIndex);\n    float x = mod(pixelIndexF, textureResolution.x);\n    float y = floor(pixelIndexF / textureResolution.x);\n    return vec2(x, y);\n  }\n  vec2 getPixelCoordFromLocation(vec2 location, vec2 textureResolution) {\n    return (vec2(location.x, location.y) + .5) / textureResolution;\n  }\n  #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      vec4 fetchVec3ArrayFromTexture(sampler2D tex, int pixelIndex) {\n        ivec2 texSize = textureSize(tex, 0);\n        return texelFetch(tex, ivec2(pixelIndex % texSize.x, pixelIndex / texSize.x), 0);\n      }\n  #else\n    vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n      int pixelIndex = elementIndex * 4;\n      vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n      vec2 x = getPixelCoordFromLocation(location + vec2(0.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 y = getPixelCoordFromLocation(location + vec2(1.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 z = getPixelCoordFromLocation(location + vec2(2.0, 0.0), cc_displacementTextureInfo.xy);\n      return vec4(\n        decode32(texture(tex, x)),\n        decode32(texture(tex, y)),\n        decode32(texture(tex, z)),\n        1.0\n      );\n    }\n  #endif\n  float getDisplacementWeight(int index) {\n    int quot = index / 4;\n    int remainder = index - quot * 4;\n    if (remainder == 0) {\n      return cc_displacementWeights[quot].x;\n    } else if (remainder == 1) {\n      return cc_displacementWeights[quot].y;\n    } else if (remainder == 2) {\n      return cc_displacementWeights[quot].z;\n    } else {\n      return cc_displacementWeights[quot].w;\n    }\n  }\n  vec3 getVec3DisplacementFromTexture(sampler2D tex, int vertexIndex) {\n  #if CC_MORPH_PRECOMPUTED\n    return fetchVec3ArrayFromTexture(tex, vertexIndex).rgb;\n  #else\n    vec3 result = vec3(0, 0, 0);\n    int nVertices = int(cc_displacementTextureInfo.z);\n    for (int iTarget = 0; iTarget < CC_MORPH_TARGET_COUNT; ++iTarget) {\n      result += (fetchVec3ArrayFromTexture(tex, nVertices * iTarget + vertexIndex).rgb * getDisplacementWeight(iTarget));\n    }\n    return result;\n  #endif\n  }\n  #if CC_MORPH_TARGET_HAS_POSITION\n  vec3 getPositionDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_PositionDisplacements, vertexId);\n  }\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n  vec3 getNormalDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_NormalDisplacements, vertexId);\n  }\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n  vec3 getTangentDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_TangentDisplacements, vertexId);\n  }\n  #endif\n  void applyMorph (inout vec4 position, inout vec3 normal, inout vec4 tangent) {\n    int vertexId = getVertexId();\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    normal.xyz = normal.xyz + getNormalDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    tangent.xyz = tangent.xyz + getTangentDisplacement(vertexId);\n  #endif\n  }\n  void applyMorph (inout vec4 position) {\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(getVertexId());\n  #endif\n  }\n#endif\n#if CC_USE_SKINNING\n  #if CC_USE_BAKED_ANIMATION\n    layout(std140) uniform CCSkinningTexture {\n      highp vec4 cc_jointTextureInfo;\n    };\n    layout(std140) uniform CCSkinningAnimation {\n      highp vec4 cc_jointAnimInfo;\n    };\n    uniform highp sampler2D cc_jointTexture;\n    void CCGetJointTextureCoords(float pixelsPerJoint, float jointIdx, out highp float x, out highp float y, out highp float invSize)\n    {\n      #if USE_INSTANCING\n        highp float temp = pixelsPerJoint * (a_jointAnimInfo.x * a_jointAnimInfo.y + jointIdx) + a_jointAnimInfo.z;\n      #else\n        highp float temp = pixelsPerJoint * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + jointIdx) + cc_jointTextureInfo.z;\n      #endif\n      invSize = cc_jointTextureInfo.w;\n      highp float tempY = floor(temp * invSize);\n      x = floor(temp - tempY * cc_jointTextureInfo.x);\n      y = (tempY + 0.5) * invSize;\n    }\n  #else\n    #if CC_USE_REAL_TIME_JOINT_TEXTURE\n      uniform highp sampler2D cc_realtimeJoint;\n    #else\n      layout(std140) uniform CCSkinning {\n        highp vec4 cc_joints[CC_JOINT_UNIFORM_CAPACITY * 3];\n      };\n    #endif\n  #endif\n  #if CC_USE_BAKED_ANIMATION\n    #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      mat4 getJointMatrix (float i) {\n        highp float x, y, invSize;\n        CCGetJointTextureCoords(3.0, i, x, y, invSize);\n        vec4 v1 = texture(cc_jointTexture, vec2((x + 0.5) * invSize, y));\n        vec4 v2 = texture(cc_jointTexture, vec2((x + 1.5) * invSize, y));\n        vec4 v3 = texture(cc_jointTexture, vec2((x + 2.5) * invSize, y));\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #else\n      mat4 getJointMatrix (float i) {\n        highp float x, y, invSize;\n        CCGetJointTextureCoords(12.0, i, x, y, invSize);\n        vec4 v1 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 0.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 1.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 2.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 3.5) * invSize, y)))\n        );\n        vec4 v2 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 4.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 5.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 6.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 7.5) * invSize, y)))\n        );\n        vec4 v3 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 8.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 9.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 10.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 11.5) * invSize, y)))\n        );\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #else\n    #if CC_USE_REAL_TIME_JOINT_TEXTURE\n      #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n        mat4 getJointMatrix (float i) {\n          float x = i;\n          vec4 v1 = texture(cc_realtimeJoint, vec2( x / 256.0, 0.5 / 3.0));\n          vec4 v2 = texture(cc_realtimeJoint, vec2( x / 256.0, 1.5 / 3.0));\n          vec4 v3 = texture(cc_realtimeJoint, vec2( x / 256.0, 2.5 / 3.0));\n          return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n        }\n      #else\n        mat4 getJointMatrix (float i) {\n         float x = 4.0 * i;\n          vec4 v1 = vec4(\n            decode32(texture(cc_realtimeJoint, vec2((x + 0.5)/ 1024.0, 0.5 / 3.0))),\n            decode32(texture(cc_realtimeJoint, vec2((x + 1.5)/ 1024.0, 0.5 / 3.0))),\n            decode32(texture(cc_realtimeJoint, vec2((x + 2.5)/ 1024.0, 0.5 / 3.0))),\n            decode32(texture(cc_realtimeJoint, vec2((x + 3.5)/ 1024.0, 0.5 / 3.0)))\n          );\n          vec4 v2 = vec4(\n            decode32(texture(cc_realtimeJoint, vec2((x + 0.5)/ 1024.0, 1.5 / 3.0))),\n            decode32(texture(cc_realtimeJoint, vec2((x + 1.5)/ 1024.0, 1.5 / 3.0))),\n            decode32(texture(cc_realtimeJoint, vec2((x + 2.5)/ 1024.0, 1.5 / 3.0))),\n            decode32(texture(cc_realtimeJoint, vec2((x + 3.5)/ 1024.0, 1.5 / 3.0)))\n          );\n          vec4 v3 = vec4(\n            decode32(texture(cc_realtimeJoint, vec2((x + 0.5)/ 1024.0, 2.5 / 3.0))),\n            decode32(texture(cc_realtimeJoint, vec2((x + 1.5)/ 1024.0, 2.5 / 3.0))),\n            decode32(texture(cc_realtimeJoint, vec2((x + 2.5)/ 1024.0, 2.5 / 3.0))),\n            decode32(texture(cc_realtimeJoint, vec2((x + 3.5)/ 1024.0, 2.5 / 3.0)))\n          );\n          return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n        }\n      #endif\n    #else\n      mat4 getJointMatrix (float i) {\n        int idx = int(i);\n        vec4 v1 = cc_joints[idx * 3];\n        vec4 v2 = cc_joints[idx * 3 + 1];\n        vec4 v3 = cc_joints[idx * 3 + 2];\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #endif\n  mat4 skinMatrix () {\n    vec4 joints = vec4(a_joints);\n    return getJointMatrix(joints.x) * a_weights.x\n         + getJointMatrix(joints.y) * a_weights.y\n         + getJointMatrix(joints.z) * a_weights.z\n         + getJointMatrix(joints.w) * a_weights.w;\n  }\n  void CCSkin (inout vec4 position) {\n    mat4 m = skinMatrix();\n    position = m * position;\n  }\n  void CCSkin (inout vec4 position, inout vec3 normal, inout vec4 tangent) {\n    mat4 m = skinMatrix();\n    position = m * position;\n    normal = (m * vec4(normal, 0.0)).xyz;\n    tangent.xyz = (m * vec4(tangent.xyz, 0.0)).xyz;\n  }\n#endif\n#if CC_USE_FOG != 4 && !CC_USE_ACCURATE_FOG\n  #if CC_USE_FOG != 4\n  #endif\n#endif\nlayout(std140) uniform Constants {\n  vec4 tilingOffset;\n  vec4 albedo;\n  vec4 albedoScaleAndCutoff;\n  vec4 emissive;\n  float emissiveScale;\n  float occlusion;\n  float roughness;\n  float metallic;\n  float normalStrength;\n  float alphaSource;\n  float albedoScale;\n};\n#define CC_SURFACES_VERTEX_MODIFY_UV\nvoid SurfacesVertexModifyUV(inout SurfacesStandardVertexIntermediate In)\n{\n  In.texCoord = In.texCoord * tilingOffset.xy + tilingOffset.zw;\n#if CC_SURFACES_USE_SECOND_UV\n  In.texCoord1 = In.texCoord1 * tilingOffset.xy + tilingOffset.zw;\n#endif\n}\n#ifndef CC_SURFACES_VERTEX_MODIFY_LOCAL_POS\nvec3 SurfacesVertexModifyLocalPos(in SurfacesStandardVertexIntermediate In)\n{\n  return In.position.xyz;\n}\n#endif\n#ifndef CC_SURFACES_VERTEX_MODIFY_LOCAL_NORMAL\n#endif\n#ifndef CC_SURFACES_VERTEX_MODIFY_LOCAL_TANGENT\n  #if CC_SURFACES_USE_TANGENT_SPACE\n  #endif\n#endif\n#ifndef CC_SURFACES_VERTEX_MODIFY_LOCAL_SHARED_DATA\nvoid SurfacesVertexModifyLocalSharedData(inout SurfacesStandardVertexIntermediate In)\n{\n}\n#endif\n#ifndef CC_SURFACES_VERTEX_MODIFY_WORLD_POS\nvec3 SurfacesVertexModifyWorldPos(in SurfacesStandardVertexIntermediate In)\n{\n  return In.worldPos;\n}\n#endif\n#ifndef CC_SURFACES_VERTEX_MODIFY_CLIP_POS\nvec4 SurfacesVertexModifyClipPos(in SurfacesStandardVertexIntermediate In)\n{\n  return In.clipPos;\n}\n#endif\n#ifndef CC_SURFACES_VERTEX_MODIFY_UV\nvoid SurfacesVertexModifyUV(inout SurfacesStandardVertexIntermediate In)\n{\n}\n#endif\n#ifndef CC_SURFACES_VERTEX_MODIFY_WORLD_NORMAL\n#endif\n#ifndef CC_SURFACES_VERTEX_MODIFY_SHARED_DATA\nvoid SurfacesVertexModifySharedData(inout SurfacesStandardVertexIntermediate In)\n{\n}\n#endif\nvoid CCSurfacesVertexInput(out SurfacesStandardVertexIntermediate In)\n{\n  In.position = vec4(a_position, 1.0);\n  In.normal = a_normal;\n#if CC_SURFACES_USE_TANGENT_SPACE\n  In.tangent = a_tangent;\n#endif\n#if CC_SURFACES_USE_VERTEX_COLOR\n  In.color = a_color;\n#endif\n  In.texCoord = a_texCoord;\n#if CC_SURFACES_USE_SECOND_UV\n  In.texCoord1 = a_texCoord1;\n#endif\n}\nvoid CCSurfacesVertexOutput(in SurfacesStandardVertexIntermediate In)\n{\n  gl_Position = In.clipPos;\n  VSOutput_worldNormal = In.worldNormal.xyz;\n  VSOutput_faceSideSign = In.worldNormal.w;\n  VSOutput_worldPos = In.worldPos;\n#if CC_SURFACES_USE_TANGENT_SPACE\n  VSOutput_worldTangent = In.worldTangent.xyz;\n  VSOutput_mirrorNormal = In.tangent.w > 0.0 ? 1.0 : -1.0;\n#endif\n#if CC_SURFACES_USE_VERTEX_COLOR\n  VSOutput_vertexColor = In.color;\n#endif\n  VSOutput_texcoord = In.texCoord;\n#if CC_SURFACES_USE_SECOND_UV\n  VSOutput_texcoord1 = In.texCoord1;\n#endif\n#if CC_USE_FOG != 4 && !CC_USE_ACCURATE_FOG\n  VSOutput_fogFactor = In.fogFactor;\n#endif\n#if CC_RECEIVE_SHADOW\n  VSOutput_shadowBias = In.shadowBiasAndProbeId.xy;\n#endif\n#if CC_USE_REFLECTION_PROBE\n  VSOutput_reflectionProbeId = In.shadowBiasAndProbeId.z;\n#endif\n#if CC_USE_LIGHTMAP && !CC_FORWARD_ADD\n  VSOutput_lightMapUV = In.lightmapUV;\n#endif\n#if CC_SURFACES_TRANSFER_LOCAL_POS\n  VSOutput_localPos = In.position;\n#endif\n#if CC_SURFACES_TRANSFER_CLIP_POS\n  VSOutput_clipPos = In.clipPos;\n#endif\n#if CC_USE_LIGHT_PROBE\n  #if USE_INSTANCING\n    v_sh_linear_const_r = a_sh_linear_const_r;\n    v_sh_linear_const_g = a_sh_linear_const_g;\n    v_sh_linear_const_b = a_sh_linear_const_b;\n  #endif\n#endif\n}\nvoid CCSurfacesVertexAnimation(inout SurfacesStandardVertexIntermediate In)\n{\nvec4 temp = vec4(0.0);\n#if CC_USE_MORPH\n  #if CC_SURFACES_USE_TANGENT_SPACE\n    applyMorph(In.position, In.normal, In.tangent);\n  #else\n    applyMorph(In.position, In.normal, temp);\n  #endif\n#endif\n#if CC_USE_SKINNING\n  #if CC_SURFACES_USE_TANGENT_SPACE\n    CCSkin(In.position, In.normal, In.tangent);\n  #else\n    CCSkin(In.position, In.normal, temp);\n  #endif\n#endif\n}\nvoid CCSurfacesVertexWorldTransform(inout SurfacesStandardVertexIntermediate In)\n{\n    mat4 matWorld, matWorldIT;\n    CCGetWorldMatrixFull(matWorld, matWorldIT);\n    In.worldPos = (matWorld * In.position).xyz;\n    In.worldNormal.xyz = normalize((matWorldIT * vec4(In.normal.xyz, 0.0)).xyz);\n    #if CC_SURFACES_USE_TANGENT_SPACE\n      In.worldTangent = normalize((matWorld * vec4(In.tangent.xyz, 0.0)).xyz);\n      In.worldBinormal = cross(In.worldNormal.xyz, In.worldTangent) * In.tangent.w;\n    #endif\n}\nvoid CCSurfacesVertexTransformUV(inout SurfacesStandardVertexIntermediate In)\n{\n  #if CC_SURFACES_FLIP_UV\n    In.texCoord = cc_cameraPos.w > 1.0 ? vec2(In.texCoord.x, 1.0 - In.texCoord.y) : In.texCoord;\n    #if CC_SURFACES_USE_SECOND_UV\n      In.texCoord1 = cc_cameraPos.w > 1.0 ? vec2(In.texCoord1.x, 1.0 - In.texCoord1.y) : In.texCoord1;\n    #endif\n  #endif\n}\nout highp vec2 v_clip_depth;\nvoid main()\n{\n  SurfacesStandardVertexIntermediate In;\n  CCSurfacesVertexInput(In);\n  CCSurfacesVertexAnimation(In);\n  In.position.xyz = SurfacesVertexModifyLocalPos(In);\n  SurfacesVertexModifyLocalSharedData(In);\n  CCSurfacesVertexWorldTransform(In);\n  In.worldPos = SurfacesVertexModifyWorldPos(In);\n  In.clipPos = cc_matLightViewProj * vec4(In.worldPos, 1.0);\n  In.clipPos = SurfacesVertexModifyClipPos(In);\n  SurfacesVertexModifyUV(In);\n  SurfacesVertexModifySharedData(In);\n  CCSurfacesVertexTransformUV(In);\n  CCSurfacesVertexOutput(In);\n  v_clip_depth = In.clipPos.zw;\n}","frag":"\nprecision highp float;\n#define CC_SURFACES_USE_TANGENT_SPACE 0\n#define CC_SURFACES_USE_VERTEX_COLOR 0\n#define CC_SURFACES_USE_SECOND_UV 0\n#define CC_SURFACES_USE_LIGHT_MAP 0\n#define CC_SURFACES_TRANSFER_LOCAL_POS 0\n#ifndef CC_SURFACES_USE_SECOND_UV\n  #define CC_SURFACES_USE_SECOND_UV 0\n#endif\n#ifndef CC_SURFACES_USE_TANGENT_SPACE\n  #define CC_SURFACES_USE_TANGENT_SPACE 0\n#endif\n#ifndef CC_SURFACES_USE_VERTEX_COLOR\n  #define CC_SURFACES_USE_VERTEX_COLOR 0\n#endif\n#ifndef CC_SURFACES_TRANSFER_LOCAL_POS\n  #define CC_SURFACES_TRANSFER_LOCAL_POS 0\n#endif\n#ifndef CC_SURFACES_TRANSFER_CLIP_POS\n  #define CC_SURFACES_TRANSFER_CLIP_POS 0\n#endif\n#ifndef CC_SURFACES_USE_LIGHT_MAP\n  #ifdef CC_USE_LIGHTMAP\n    #define CC_SURFACES_USE_LIGHT_MAP CC_USE_LIGHTMAP\n  #else\n    #define CC_SURFACES_USE_LIGHT_MAP 0\n  #endif\n#endif\n#ifndef CC_SURFACES_FLIP_UV\n  #define CC_SURFACES_FLIP_UV 0\n#endif\n#ifndef CC_SURFACES_USE_TWO_SIDED\n  #define CC_SURFACES_USE_TWO_SIDED 0\n#endif\n#ifndef CC_SURFACES_USE_REFLECTION_DENOISE\n  #define CC_SURFACES_USE_REFLECTION_DENOISE 0\n#endif\n#ifndef CC_SURFACES_LIGHTING_ANISOTROPIC\n  #define CC_SURFACES_LIGHTING_ANISOTROPIC 0\n#endif\n#ifndef CC_SURFACES_LIGHTING_ANISOTROPIC_ENVCONVOLUTION_COUNT\n  #define CC_SURFACES_LIGHTING_ANISOTROPIC_ENVCONVOLUTION_COUNT 0\n#endif\n#ifndef CC_SURFACES_USE_LEGACY_COMPATIBLE_LIGHTING\n  #define CC_SURFACES_USE_LEGACY_COMPATIBLE_LIGHTING 0\n#endif\n#ifndef CC_SURFACES_LIGHTING_USE_FRESNEL\n  #define CC_SURFACES_LIGHTING_USE_FRESNEL 0\n#endif\n#ifndef CC_SURFACES_LIGHTING_TRANSMIT_SPECULAR\n  #define CC_SURFACES_LIGHTING_TRANSMIT_SPECULAR 0\n#endif\n#ifndef CC_SURFACES_LIGHTING_TRANSMIT_DIFFUSE\n  #define CC_SURFACES_LIGHTING_TRANSMIT_DIFFUSE 0\n#endif\n#ifndef CC_SURFACES_LIGHTING_USE_SHADOWMAP_TRANSMIT\n  #define CC_SURFACES_LIGHTING_USE_SHADOWMAP_TRANSMIT 0\n#endif\n#ifndef CC_SURFACES_LIGHTING_TRT\n  #define CC_SURFACES_LIGHTING_TRT 0\n#endif\n#ifndef CC_SURFACES_LIGHTING_TT\n  #define CC_SURFACES_LIGHTING_TT 0\n#endif\n#ifndef CC_SURFACES_ENABLE_DEBUG_VIEW\n  #define CC_SURFACES_ENABLE_DEBUG_VIEW 1\n#endif\n#ifndef CC_SURFACES_LIGHTING_CALCULATE_DIFFUSE\n  #define CC_SURFACES_LIGHTING_CALCULATE_DIFFUSE 1\n#endif\n#ifndef CC_SURFACES_LIGHTING_CALCULATE_SPECULAR\n  #define CC_SURFACES_LIGHTING_CALCULATE_SPECULAR 1\n#endif\n#define CC_USE_SURFACE_SHADER 1\nin highp vec3 v_worldPos;\nin mediump vec4 v_normal;\nin vec2 v_uv;\n#if CC_SURFACES_USE_VERTEX_COLOR\n  in lowp vec4 v_color;\n#endif\n#if CC_SURFACES_USE_TANGENT_SPACE\n  in mediump vec4 v_tangent;\n#endif\n#if CC_SURFACES_USE_SECOND_UV\n  in mediump vec2 v_uv1;\n#endif\n#if CC_USE_LIGHTMAP && !CC_FORWARD_ADD\n  in mediump vec3 v_luv;\n#endif\n#if CC_RECEIVE_SHADOW || CC_USE_REFLECTION_PROBE\n  in mediump vec4 v_shadowBiasAndProbeId;\n#endif\n#if CC_USE_FOG != 4 && !CC_USE_ACCURATE_FOG\n  in mediump float v_fogFactor;\n#endif\n#if CC_SURFACES_TRANSFER_LOCAL_POS\n  in highp vec4 v_localPos;\n#endif\n#if CC_SURFACES_TRANSFER_CLIP_POS\n  in highp vec4 v_clipPos;\n#endif\n#if CC_USE_LIGHT_PROBE\n  #if USE_INSTANCING\n    in mediump vec4 v_sh_linear_const_r;\n    in mediump vec4 v_sh_linear_const_g;\n    in mediump vec4 v_sh_linear_const_b;\n  #endif\n#endif\n#define FSInput_worldPos v_worldPos\n#define FSInput_worldNormal v_normal.xyz\n#define FSInput_faceSideSign v_normal.w\n#define FSInput_texcoord v_uv\n#if CC_SURFACES_USE_VERTEX_COLOR\n  #define FSInput_vertexColor v_color\n#else\n  #define FSInput_vertexColor vec4(1.0)\n#endif\n#if CC_SURFACES_USE_TANGENT_SPACE\n  #define FSInput_worldTangent v_tangent.xyz\n  #define FSInput_mirrorNormal v_tangent.w\n#else\n  #define FSInput_worldTangent vec3(0.0, 0.0, 0.0)\n  #define FSInput_mirrorNormal 1.0\n#endif\n#if CC_SURFACES_USE_SECOND_UV\n  #define FSInput_texcoord1 v_uv1\n#else\n  #define FSInput_texcoord1 vec2(0.0, 0.0)\n#endif\n#if CC_USE_LIGHTMAP && !CC_FORWARD_ADD\n  #define FSInput_lightMapUV v_luv\n#endif\n#if CC_RECEIVE_SHADOW\n  #define FSInput_shadowBias v_shadowBiasAndProbeId.xy\n#endif\n#if CC_USE_REFLECTION_PROBE\n  #define FSInput_reflectionProbeId v_shadowBiasAndProbeId.z\n#endif\n#if CC_USE_FOG != 4 && !CC_USE_ACCURATE_FOG\n  #define FSInput_fogFactor v_fogFactor\n#endif\n#if CC_SURFACES_TRANSFER_LOCAL_POS\n  #define FSInput_localPos v_localPos\n#endif\n#if CC_SURFACES_TRANSFER_CLIP_POS\n  #define FSInput_clipPos v_clipPos\n#endif\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n  mediump vec4 cc_probeInfo;\n  mediump vec4 cc_debug_view_mode;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_surfaceTransform;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\n#define CC_SURFACES_DEBUG_VIEW_VERTEX_COLOR 1\n#define CC_SURFACES_DEBUG_VIEW_VERTEX_NORMAL CC_SURFACES_DEBUG_VIEW_VERTEX_COLOR + 1\n#define CC_SURFACES_DEBUG_VIEW_VERTEX_TANGENT CC_SURFACES_DEBUG_VIEW_VERTEX_NORMAL + 1\n#define CC_SURFACES_DEBUG_VIEW_WORLD_POS CC_SURFACES_DEBUG_VIEW_VERTEX_TANGENT + 1\n#define CC_SURFACES_DEBUG_VIEW_VERTEX_MIRROR CC_SURFACES_DEBUG_VIEW_WORLD_POS + 1\n#define CC_SURFACES_DEBUG_VIEW_FACE_SIDE CC_SURFACES_DEBUG_VIEW_VERTEX_MIRROR + 1\n#define CC_SURFACES_DEBUG_VIEW_UV0 CC_SURFACES_DEBUG_VIEW_FACE_SIDE + 1\n#define CC_SURFACES_DEBUG_VIEW_UV1 CC_SURFACES_DEBUG_VIEW_UV0 + 1\n#define CC_SURFACES_DEBUG_VIEW_UVLIGHTMAP CC_SURFACES_DEBUG_VIEW_UV1 + 1\n#define CC_SURFACES_DEBUG_VIEW_PROJ_DEPTH CC_SURFACES_DEBUG_VIEW_UVLIGHTMAP + 1\n#define CC_SURFACES_DEBUG_VIEW_LINEAR_DEPTH CC_SURFACES_DEBUG_VIEW_PROJ_DEPTH + 1\n#define CC_SURFACES_DEBUG_VIEW_FRAGMENT_NORMAL CC_SURFACES_DEBUG_VIEW_LINEAR_DEPTH + 1\n#define CC_SURFACES_DEBUG_VIEW_FRAGMENT_TANGENT CC_SURFACES_DEBUG_VIEW_FRAGMENT_NORMAL + 1\n#define CC_SURFACES_DEBUG_VIEW_FRAGMENT_BINORMAL CC_SURFACES_DEBUG_VIEW_FRAGMENT_TANGENT + 1\n#define CC_SURFACES_DEBUG_VIEW_BASE_COLOR CC_SURFACES_DEBUG_VIEW_FRAGMENT_BINORMAL + 1\n#define CC_SURFACES_DEBUG_VIEW_DIFFUSE_COLOR CC_SURFACES_DEBUG_VIEW_BASE_COLOR + 1\n#define CC_SURFACES_DEBUG_VIEW_SPECULAR_COLOR CC_SURFACES_DEBUG_VIEW_DIFFUSE_COLOR + 1\n#define CC_SURFACES_DEBUG_VIEW_TRANSPARENCY CC_SURFACES_DEBUG_VIEW_SPECULAR_COLOR + 1\n#define CC_SURFACES_DEBUG_VIEW_METALLIC CC_SURFACES_DEBUG_VIEW_TRANSPARENCY + 1\n#define CC_SURFACES_DEBUG_VIEW_ROUGHNESS CC_SURFACES_DEBUG_VIEW_METALLIC + 1\n#define CC_SURFACES_DEBUG_VIEW_SPECULAR_INTENSITY CC_SURFACES_DEBUG_VIEW_ROUGHNESS + 1\n#define CC_SURFACES_DEBUG_VIEW_IOR CC_SURFACES_DEBUG_VIEW_SPECULAR_INTENSITY + 1\n#define CC_SURFACES_DEBUG_VIEW_DIRECT_DIFFUSE CC_SURFACES_DEBUG_VIEW_IOR + 1\n#define CC_SURFACES_DEBUG_VIEW_DIRECT_SPECULAR CC_SURFACES_DEBUG_VIEW_DIRECT_DIFFUSE + 1\n#define CC_SURFACES_DEBUG_VIEW_DIRECT_ALL CC_SURFACES_DEBUG_VIEW_DIRECT_SPECULAR + 1\n#define CC_SURFACES_DEBUG_VIEW_ENV_DIFFUSE CC_SURFACES_DEBUG_VIEW_DIRECT_ALL + 1\n#define CC_SURFACES_DEBUG_VIEW_ENV_SPECULAR CC_SURFACES_DEBUG_VIEW_ENV_DIFFUSE + 1\n#define CC_SURFACES_DEBUG_VIEW_ENV_ALL CC_SURFACES_DEBUG_VIEW_ENV_SPECULAR + 1\n#define CC_SURFACES_DEBUG_VIEW_EMISSIVE CC_SURFACES_DEBUG_VIEW_ENV_ALL + 1\n#define CC_SURFACES_DEBUG_VIEW_LIGHT_MAP CC_SURFACES_DEBUG_VIEW_EMISSIVE + 1\n#define CC_SURFACES_DEBUG_VIEW_SHADOW CC_SURFACES_DEBUG_VIEW_LIGHT_MAP + 1\n#define CC_SURFACES_DEBUG_VIEW_AO CC_SURFACES_DEBUG_VIEW_SHADOW + 1\n#define CC_SURFACES_DEBUG_VIEW_FRESNEL CC_SURFACES_DEBUG_VIEW_AO + 1\n#define CC_SURFACES_DEBUG_VIEW_TRANSMIT_DIRECT_DIFFUSE CC_SURFACES_DEBUG_VIEW_FRESNEL + 1\n#define CC_SURFACES_DEBUG_VIEW_TRANSMIT_DIRECT_SPECULAR CC_SURFACES_DEBUG_VIEW_TRANSMIT_DIRECT_DIFFUSE + 1\n#define CC_SURFACES_DEBUG_VIEW_TRANSMIT_ENV_DIFFUSE CC_SURFACES_DEBUG_VIEW_TRANSMIT_DIRECT_SPECULAR + 1\n#define CC_SURFACES_DEBUG_VIEW_TRANSMIT_ENV_SPECULAR CC_SURFACES_DEBUG_VIEW_TRANSMIT_ENV_DIFFUSE + 1\n#define CC_SURFACES_DEBUG_VIEW_TRANSMIT_ALL CC_SURFACES_DEBUG_VIEW_TRANSMIT_ENV_SPECULAR + 1\n#define CC_SURFACES_DEBUG_VIEW_TRT_DIRECT CC_SURFACES_DEBUG_VIEW_TRANSMIT_ALL + 1\n#define CC_SURFACES_DEBUG_VIEW_TRT_ENVIRONMENT CC_SURFACES_DEBUG_VIEW_TRT_DIRECT + 1\n#define CC_SURFACES_DEBUG_VIEW_TRT_ALL CC_SURFACES_DEBUG_VIEW_TRT_ENVIRONMENT + 1\n#define CC_SURFACES_DEBUG_VIEW_FOG CC_SURFACES_DEBUG_VIEW_TRT_ALL + 1\n#define CC_SURFACES_DEBUG_VIEW_SINGLE 1\n#define CC_SURFACES_DEBUG_VIEW_COMPOSITE_AND_MISC 2\n#define IS_DEBUG_VIEW_ENABLE_WITH_CAMERA (cc_surfaceTransform.y != 3.0)\n#define IS_DEBUG_VIEW_LIGHTING_ENABLE_WITH_ALBEDO (UnpackBitFromFloat(cc_debug_view_mode.w, 6) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_MISC_ENABLE_CSM_LAYER_COLORATION (UnpackBitFromFloat(cc_debug_view_mode.w, 7) && IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_DIRECT_DIFFUSE (UnpackBitFromFloat(cc_debug_view_mode.y, 0) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_DIRECT_SPECULAR (UnpackBitFromFloat(cc_debug_view_mode.y, 1) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_ENV_DIFFUSE (UnpackBitFromFloat(cc_debug_view_mode.y, 2) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_ENV_SPECULAR (UnpackBitFromFloat(cc_debug_view_mode.y, 3) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_EMISSIVE (UnpackBitFromFloat(cc_debug_view_mode.y, 4) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_LIGHT_MAP (UnpackBitFromFloat(cc_debug_view_mode.y, 5) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_SHADOW (UnpackBitFromFloat(cc_debug_view_mode.y, 6) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_AO (UnpackBitFromFloat(cc_debug_view_mode.y, 7) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_NORMAL_MAP (UnpackBitFromFloat(cc_debug_view_mode.z, 0) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_FOG (UnpackBitFromFloat(cc_debug_view_mode.z, 1) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_TONE_MAPPING (UnpackBitFromFloat(cc_debug_view_mode.z, 2) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_GAMMA_CORRECTION (UnpackBitFromFloat(cc_debug_view_mode.z, 3) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_FRESNEL (UnpackBitFromFloat(cc_debug_view_mode.z, 4) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_TRANSMIT_DIFFUSE (UnpackBitFromFloat(cc_debug_view_mode.z, 5) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_TRANSMIT_SPECULAR (UnpackBitFromFloat(cc_debug_view_mode.z, 6) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_TRT (UnpackBitFromFloat(cc_debug_view_mode.z, 7) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_TT (UnpackBitFromFloat(cc_debug_view_mode.w, 0) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#if (CC_PIPELINE_TYPE == 0 || CC_FORCE_FORWARD_SHADING)\n  #if CC_FORWARD_ADD\n    #if CC_PIPELINE_TYPE == 0\n      #define LIGHTS_PER_PASS 1\n    #else\n      #define LIGHTS_PER_PASS 10\n    #endif\n    #if CC_ENABLE_CLUSTERED_LIGHT_CULLING == 0\n    layout(std140) uniform CCForwardLight {\n      highp vec4 cc_lightPos[LIGHTS_PER_PASS];\n      vec4 cc_lightColor[LIGHTS_PER_PASS];\n      vec4 cc_lightSizeRangeAngle[LIGHTS_PER_PASS];\n      vec4 cc_lightDir[LIGHTS_PER_PASS];\n    };\n    #endif\n  #endif\n#endif\n#if CC_USE_LIGHT_PROBE\n  #if !USE_INSTANCING\n    layout(std140) uniform CCSH {\n      vec4 cc_sh_linear_const_r;\n      vec4 cc_sh_linear_const_g;\n      vec4 cc_sh_linear_const_b;\n      vec4 cc_sh_quadratic_r;\n      vec4 cc_sh_quadratic_g;\n      vec4 cc_sh_quadratic_b;\n      vec4 cc_sh_quadratic_a;\n    };\n  #endif\n#endif\nlayout(std140) uniform CCShadow {\n  highp mat4 cc_matLightView;\n  highp mat4 cc_matLightViewProj;\n  highp vec4 cc_shadowInvProjDepthInfo;\n  highp vec4 cc_shadowProjDepthInfo;\n  highp vec4 cc_shadowProjInfo;\n  mediump vec4 cc_shadowNFLSInfo;\n  mediump vec4 cc_shadowWHPBInfo;\n  mediump vec4 cc_shadowLPNNInfo;\n  lowp vec4 cc_shadowColor;\n  mediump vec4 cc_planarNDInfo;\n};\n#if CC_SUPPORT_CASCADED_SHADOW_MAP\n  layout(std140) uniform CCCSM {\n    highp vec4 cc_csmViewDir0[4];\n    highp vec4 cc_csmViewDir1[4];\n    highp vec4 cc_csmViewDir2[4];\n    highp vec4 cc_csmAtlas[4];\n    highp mat4 cc_matCSMViewProj[4];\n    highp vec4 cc_csmProjDepthInfo[4];\n    highp vec4 cc_csmProjInfo[4];\n    highp vec4 cc_csmSplitsInfo;\n  };\n#endif\nuniform samplerCube cc_environment;\n#if CC_USE_IBL\n  #if CC_USE_DIFFUSEMAP\n    uniform samplerCube cc_diffuseMap;\n  #endif\n#endif\n#if CC_USE_REFLECTION_PROBE\n  uniform samplerCube cc_reflectionProbeCubemap;\n  uniform sampler2D cc_reflectionProbePlanarMap;\n  uniform sampler2D cc_reflectionProbeDataMap;\n#endif\n#define QUATER_PI         0.78539816340\n#define HALF_PI           1.57079632679\n#define PI                3.14159265359\n#define PI2               6.28318530718\n#define PI4               12.5663706144\n#define INV_QUATER_PI     1.27323954474\n#define INV_HALF_PI       0.63661977237\n#define INV_PI            0.31830988618\n#define INV_PI2           0.15915494309\n#define INV_PI4           0.07957747155\n#define EPSILON           1e-6\n#define EPSILON_LOWP      1e-4\n#define LOG2              1.442695\n#define EXP_VALUE         2.71828183f\n#define FP_MAX            65504.0\n#define FP_SCALE          0.0009765625\n#define FP_SCALE_INV      1024.0\n#define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\n#define LIGHT_MAP_TYPE_DISABLED 0\n#define LIGHT_MAP_TYPE_ALL_IN_ONE 1\n#define LIGHT_MAP_TYPE_INDIRECT_OCCLUSION 2\n#define REFLECTION_PROBE_TYPE_NONE 0\n#define REFLECTION_PROBE_TYPE_CUBE 1\n#define REFLECTION_PROBE_TYPE_PLANAR 2\n#define LIGHT_TYPE_DIRECTIONAL 0.0\n#define LIGHT_TYPE_POINT 1.0\n#define LIGHT_TYPE_SPOT 2.0\n#define LIGHT_TYPE_SPHERE 3.0\n#define LIGHT_TYPE_RANGED_DIRECTIONAL 4.0\n#define IS_DIRECTIONAL_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_DIRECTIONAL)) < EPSILON_LOWP)\n#define IS_SPHERE_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_SPHERE)) < EPSILON_LOWP)\n#define IS_SPOT_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_SPOT)) < EPSILON_LOWP)\n#define IS_POINT_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_POINT)) < EPSILON_LOWP)\n#define IS_RANGED_DIRECTIONAL_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_RANGED_DIRECTIONAL)) < EPSILON_LOWP)\nvec4 packDepthToRGBA (float depth) {\n  vec4 ret = vec4(1.0, 255.0, 65025.0, 16581375.0) * depth;\n  ret = fract(ret);\n  ret -= vec4(ret.yzw, 0.0) / 255.0;\n  return ret;\n}\n#define UnpackBitFromFloat(value, bit) (mod(floor(value / pow(10.0, float(bit))), 10.0) > 0.0)\nfloat GetLinearDepthFromViewSpace(vec3 viewPos, float near, float far) {\n  float dist = length(viewPos);\n  return (dist - near) / (far - near);\n}\n#if CC_SUPPORT_CASCADED_SHADOW_MAP\n#endif\nfloat CCGetLinearDepth(vec3 worldPos, float viewSpaceBias) {\n\tvec4 viewPos = cc_matLightView * vec4(worldPos.xyz, 1.0);\n  viewPos.z += viewSpaceBias;\n\treturn GetLinearDepthFromViewSpace(viewPos.xyz, cc_shadowNFLSInfo.x, cc_shadowNFLSInfo.y);\n}\nfloat CCGetLinearDepth(vec3 worldPos) {\n\treturn CCGetLinearDepth(worldPos, 0.0);\n}\n#if CC_RECEIVE_SHADOW\n  uniform highp sampler2D cc_shadowMap;\n  uniform highp sampler2D cc_spotShadowMap;\n  #if CC_SUPPORT_CASCADED_SHADOW_MAP\n  #else\n  #endif\n#endif\n#if CC_USE_FOG != 4\n#endif\n#if CC_USE_LIGHT_PROBE\n  #if CC_USE_LIGHT_PROBE\n  #endif\n#endif\n#if CC_USE_REFLECTION_PROBE\n  layout(std140) uniform CCLocal {\n    highp mat4 cc_matWorld;\n    highp mat4 cc_matWorldIT;\n    highp vec4 cc_lightingMapUVParam;\n    highp vec4 cc_localShadowBias;\n    highp vec4 cc_reflectionProbeData1;\n    highp vec4 cc_reflectionProbeData2;\n  };\n#endif\n#if CC_USE_LIGHTMAP && !CC_FORWARD_ADD\n  uniform sampler2D cc_lightingMap;\n#endif\nlayout(std140) uniform Constants {\n  vec4 tilingOffset;\n  vec4 albedo;\n  vec4 albedoScaleAndCutoff;\n  vec4 emissive;\n  float emissiveScale;\n  float occlusion;\n  float roughness;\n  float metallic;\n  float normalStrength;\n  float alphaSource;\n  float albedoScale;\n};\n#if USE_ALBEDO_MAP\n  uniform sampler2D albedoMap;\n#endif\n#if USE_WEIGHT_MAP\n  uniform sampler2D baseWeightMap;\n#endif\n#if USE_METALLIC_MAP\n  uniform sampler2D metallicMap;\n#endif\n#if USE_ROUGHNESS_MAP\n  uniform sampler2D roughnessMap;\n#endif\n#if USE_OCCLUSION_MAP\n  uniform sampler2D occlusionMap;\n#endif\n#if USE_TRANSPARENCY_MAP\n  uniform sampler2D transparencyMap;\n#endif\n#if USE_TRANSPARENCYCOLOR_MAP\n  uniform sampler2D transparencyColorMap;\n#endif\n#if USE_EMISSIVE_MAP\n  uniform sampler2D emissiveMap;\n#endif\n#if USE_EMISSIVESCALE_MAP\n  uniform sampler2D emissiveScaleMap;\n#endif\n#if USE_OPACITY_MAP\n  uniform sampler2D alphaSourceMap;\n#endif\n#if USE_NORMAL_MAP\n  uniform sampler2D normalMap;\n#endif\n#define CC_SURFACES_FRAGMENT_MODIFY_BASECOLOR_AND_TRANSPARENCY\n#define CC_SURFACES_FRAGMENT_ALPHA_CLIP_ONLY\nvoid SurfacesFragmentAlphaClipOnly()\n{\n    #if USE_ALPHA_TEST\n      float alpha = albedo.a;\n      #if USE_ALBEDO_MAP\n        alpha = texture(albedoMap, TEXTURE_UV).a;\n      #endif\n      #if ALPHA_SOURCE_IS_OPACITY\n        #if USE_OPACITY_MAP\n          alpha = 1.0 - texture(alphaSourceMap, TEXTURE_UV).ALPHA_SOURCE_CHANNEL;\n        #else\n          alpha = 1.0 - alphaSource;\n        #endif\n      #else\n        #if USE_OPACITY_MAP\n          alpha = texture(alphaSourceMap, TEXTURE_UV).ALPHA_SOURCE_CHANNEL;\n        #else\n          alpha = alphaSource;\n        #endif\n      #endif\n      if (alpha < albedoScaleAndCutoff.w) discard;\n    #endif\n}\n#define CC_SURFACES_FRAGMENT_MODIFY_WORLD_NORMAL\n#define CC_SURFACES_FRAGMENT_MODIFY_EMISSIVE\n#define CC_SURFACES_FRAGMENT_MODIFY_PBRPARAMS\nin highp vec2 v_clip_depth;\nlayout(location = 0) out vec4 fragColorX;\nvoid main () {\n  SurfacesFragmentAlphaClipOnly();\n  highp float clipDepth = v_clip_depth.x / v_clip_depth.y * 0.5 + 0.5;\n  if(cc_shadowLPNNInfo.x > EPSILON && cc_shadowLPNNInfo.x < 1.999999) {\n    #if CC_SHADOWMAP_USE_LINEAR_DEPTH\n      clipDepth = CCGetLinearDepth(FSInput_worldPos.xyz);\n    #endif\n  }\n  #if CC_SHADOWMAP_FORMAT == 1\n    fragColorX = packDepthToRGBA(clipDepth);\n  #else\n    fragColorX = vec4(clipDepth, 1.0, 1.0, 1.0);\n  #endif\n}"},"glsl1":{"vert":"\nprecision highp float;\n#define CC_SURFACES_USE_TANGENT_SPACE 0\n#define CC_SURFACES_USE_VERTEX_COLOR 0\n#define CC_SURFACES_USE_SECOND_UV 0\n#define CC_SURFACES_USE_LIGHT_MAP 0\n#define CC_SURFACES_TRANSFER_LOCAL_POS 0\n#ifndef CC_SURFACES_USE_SECOND_UV\n  #define CC_SURFACES_USE_SECOND_UV 0\n#endif\n#ifndef CC_SURFACES_USE_TANGENT_SPACE\n  #define CC_SURFACES_USE_TANGENT_SPACE 0\n#endif\n#ifndef CC_SURFACES_USE_VERTEX_COLOR\n  #define CC_SURFACES_USE_VERTEX_COLOR 0\n#endif\n#ifndef CC_SURFACES_TRANSFER_LOCAL_POS\n  #define CC_SURFACES_TRANSFER_LOCAL_POS 0\n#endif\n#ifndef CC_SURFACES_TRANSFER_CLIP_POS\n  #define CC_SURFACES_TRANSFER_CLIP_POS 0\n#endif\n#ifndef CC_SURFACES_USE_LIGHT_MAP\n  #ifdef CC_USE_LIGHTMAP\n    #define CC_SURFACES_USE_LIGHT_MAP CC_USE_LIGHTMAP\n  #else\n    #define CC_SURFACES_USE_LIGHT_MAP 0\n  #endif\n#endif\n#ifndef CC_SURFACES_FLIP_UV\n  #define CC_SURFACES_FLIP_UV 0\n#endif\n#ifndef CC_SURFACES_USE_TWO_SIDED\n  #define CC_SURFACES_USE_TWO_SIDED 0\n#endif\n#ifndef CC_SURFACES_USE_REFLECTION_DENOISE\n  #define CC_SURFACES_USE_REFLECTION_DENOISE 0\n#endif\n#ifndef CC_SURFACES_LIGHTING_ANISOTROPIC\n  #define CC_SURFACES_LIGHTING_ANISOTROPIC 0\n#endif\n#ifndef CC_SURFACES_LIGHTING_ANISOTROPIC_ENVCONVOLUTION_COUNT\n  #define CC_SURFACES_LIGHTING_ANISOTROPIC_ENVCONVOLUTION_COUNT 0\n#endif\n#ifndef CC_SURFACES_USE_LEGACY_COMPATIBLE_LIGHTING\n  #define CC_SURFACES_USE_LEGACY_COMPATIBLE_LIGHTING 0\n#endif\n#ifndef CC_SURFACES_LIGHTING_USE_FRESNEL\n  #define CC_SURFACES_LIGHTING_USE_FRESNEL 0\n#endif\n#ifndef CC_SURFACES_LIGHTING_TRANSMIT_SPECULAR\n  #define CC_SURFACES_LIGHTING_TRANSMIT_SPECULAR 0\n#endif\n#ifndef CC_SURFACES_LIGHTING_TRANSMIT_DIFFUSE\n  #define CC_SURFACES_LIGHTING_TRANSMIT_DIFFUSE 0\n#endif\n#ifndef CC_SURFACES_LIGHTING_USE_SHADOWMAP_TRANSMIT\n  #define CC_SURFACES_LIGHTING_USE_SHADOWMAP_TRANSMIT 0\n#endif\n#ifndef CC_SURFACES_LIGHTING_TRT\n  #define CC_SURFACES_LIGHTING_TRT 0\n#endif\n#ifndef CC_SURFACES_LIGHTING_TT\n  #define CC_SURFACES_LIGHTING_TT 0\n#endif\n#ifndef CC_SURFACES_ENABLE_DEBUG_VIEW\n  #define CC_SURFACES_ENABLE_DEBUG_VIEW 1\n#endif\n#ifndef CC_SURFACES_LIGHTING_CALCULATE_DIFFUSE\n  #define CC_SURFACES_LIGHTING_CALCULATE_DIFFUSE 1\n#endif\n#ifndef CC_SURFACES_LIGHTING_CALCULATE_SPECULAR\n  #define CC_SURFACES_LIGHTING_CALCULATE_SPECULAR 1\n#endif\n#define CC_USE_SURFACE_SHADER 1\nattribute vec3 a_position;\nattribute vec3 a_normal;\nattribute vec2 a_texCoord;\n#if CC_SURFACES_USE_TANGENT_SPACE\n  attribute vec4 a_tangent;\n#endif\n#if CC_SURFACES_USE_VERTEX_COLOR\n  attribute vec4 a_color;\n#endif\n#if CC_SURFACES_USE_SECOND_UV || CC_USE_LIGHTMAP\n  attribute vec2 a_texCoord1;\n#endif\n#if CC_USE_SKINNING\n    attribute vec4 a_joints;\n  attribute vec4 a_weights;\n#endif\n#if USE_INSTANCING\n  #if CC_USE_BAKED_ANIMATION\n    attribute highp vec4 a_jointAnimInfo;\n  #endif\n  attribute vec4 a_matWorld0;\n  attribute vec4 a_matWorld1;\n  attribute vec4 a_matWorld2;\n  #if CC_USE_LIGHTMAP\n    attribute vec4 a_lightingMapUVParam;\n  #endif\n  #if CC_RECEIVE_SHADOW || CC_USE_REFLECTION_PROBE\n    attribute vec4 a_localShadowBiasAndProbeId;\n  #endif\n  #if CC_USE_LIGHT_PROBE\n    attribute vec4 a_sh_linear_const_r;\n    attribute vec4 a_sh_linear_const_g;\n    attribute vec4 a_sh_linear_const_b;\n  #endif\n#endif\n#if CC_USE_MORPH\n    attribute float a_vertexId;\n#endif\nvarying highp vec3 v_worldPos;\nvarying mediump vec4 v_normal;\nvarying vec2 v_uv;\n#if CC_SURFACES_USE_VERTEX_COLOR\n  varying lowp vec4 v_color;\n#endif\n#if CC_SURFACES_USE_TANGENT_SPACE\n  varying mediump vec4 v_tangent;\n#endif\n#if CC_SURFACES_USE_SECOND_UV\n  varying mediump vec2 v_uv1;\n#endif\n#if CC_USE_LIGHTMAP && !CC_FORWARD_ADD\n  varying mediump vec3 v_luv;\n#endif\n#if CC_RECEIVE_SHADOW || CC_USE_REFLECTION_PROBE\n  varying mediump vec4 v_shadowBiasAndProbeId;\n#endif\n#if CC_USE_FOG != 4 && !CC_USE_ACCURATE_FOG\n  varying mediump float v_fogFactor;\n#endif\n#if CC_SURFACES_TRANSFER_LOCAL_POS\n  varying highp vec4 v_localPos;\n#endif\n#if CC_SURFACES_TRANSFER_CLIP_POS\n  varying highp vec4 v_clipPos;\n#endif\n#if CC_USE_LIGHT_PROBE\n  #if USE_INSTANCING\n    varying mediump vec4 v_sh_linear_const_r;\n    varying mediump vec4 v_sh_linear_const_g;\n    varying mediump vec4 v_sh_linear_const_b;\n  #endif\n#endif\n#define VSOutput_worldPos v_worldPos\n#define VSOutput_worldNormal v_normal.xyz\n#define VSOutput_faceSideSign v_normal.w\n#define VSOutput_texcoord v_uv\n#if CC_SURFACES_USE_VERTEX_COLOR\n  #define VSOutput_vertexColor v_color\n#endif\n#if CC_SURFACES_USE_TANGENT_SPACE\n  #define VSOutput_worldTangent v_tangent.xyz\n  #define VSOutput_mirrorNormal v_tangent.w\n#endif\n#if CC_SURFACES_USE_SECOND_UV\n  #define VSOutput_texcoord1 v_uv1\n#endif\n#if CC_USE_LIGHTMAP && !CC_FORWARD_ADD\n  #define VSOutput_lightMapUV v_luv\n#endif\n#if CC_RECEIVE_SHADOW\n  #define VSOutput_shadowBias v_shadowBiasAndProbeId.xy\n#endif\n#if CC_USE_REFLECTION_PROBE\n  #define VSOutput_reflectionProbeId v_shadowBiasAndProbeId.z\n#endif\n#if CC_USE_FOG != 4 && !CC_USE_ACCURATE_FOG\n  #define VSOutput_fogFactor v_fogFactor\n#endif\n#if CC_SURFACES_TRANSFER_LOCAL_POS\n  #define VSOutput_localPos v_localPos\n#endif\n#if CC_SURFACES_TRANSFER_CLIP_POS\n  #define VSOutput_clipPos v_clipPos\n#endif\nstruct SurfacesStandardVertexIntermediate\n{\n  highp vec4 position;\n  vec3 normal;\n#if CC_SURFACES_USE_TANGENT_SPACE\n  vec4 tangent;\n#endif\n#if CC_SURFACES_USE_VERTEX_COLOR\n  vec4 color;\n#endif\n  vec2 texCoord;\n#if CC_SURFACES_USE_SECOND_UV\n  vec2 texCoord1;\n#endif\n  highp vec4 clipPos;\n  highp vec3 worldPos;\n  vec4 worldNormal;\n  #if CC_SURFACES_USE_TANGENT_SPACE\n    vec3 worldTangent, worldBinormal;\n  #endif\n#if CC_RECEIVE_SHADOW || CC_USE_REFLECTION_PROBE\n  vec4 shadowBiasAndProbeId;\n#endif\n#if CC_USE_FOG != 4 && !CC_USE_ACCURATE_FOG\n  float fogFactor;\n#endif\n#if CC_USE_LIGHTMAP && !CC_FORWARD_ADD\n  vec3 lightmapUV;\n#endif\n};\n#if CC_USE_MORPH\n    int getVertexId() {\n      return int(a_vertexId);\n    }\n#endif\nuniform highp vec4 cc_cameraPos;\nuniform highp mat4 cc_matLightViewProj;\n#define QUATER_PI         0.78539816340\n#define HALF_PI           1.57079632679\n#define PI                3.14159265359\n#define PI2               6.28318530718\n#define PI4               12.5663706144\n#define INV_QUATER_PI     1.27323954474\n#define INV_HALF_PI       0.63661977237\n#define INV_PI            0.31830988618\n#define INV_PI2           0.15915494309\n#define INV_PI4           0.07957747155\n#define EPSILON           1e-6\n#define EPSILON_LOWP      1e-4\n#define LOG2              1.442695\n#define EXP_VALUE         2.71828183f\n#define FP_MAX            65504.0\n#define FP_SCALE          0.0009765625\n#define FP_SCALE_INV      1024.0\n#define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\n#define LIGHT_MAP_TYPE_DISABLED 0\n#define LIGHT_MAP_TYPE_ALL_IN_ONE 1\n#define LIGHT_MAP_TYPE_INDIRECT_OCCLUSION 2\n#define REFLECTION_PROBE_TYPE_NONE 0\n#define REFLECTION_PROBE_TYPE_CUBE 1\n#define REFLECTION_PROBE_TYPE_PLANAR 2\n#define LIGHT_TYPE_DIRECTIONAL 0.0\n#define LIGHT_TYPE_POINT 1.0\n#define LIGHT_TYPE_SPOT 2.0\n#define LIGHT_TYPE_SPHERE 3.0\n#define LIGHT_TYPE_RANGED_DIRECTIONAL 4.0\n#define IS_DIRECTIONAL_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_DIRECTIONAL)) < EPSILON_LOWP)\n#define IS_SPHERE_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_SPHERE)) < EPSILON_LOWP)\n#define IS_SPOT_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_SPOT)) < EPSILON_LOWP)\n#define IS_POINT_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_POINT)) < EPSILON_LOWP)\n#define IS_RANGED_DIRECTIONAL_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_RANGED_DIRECTIONAL)) < EPSILON_LOWP)\nhighp float decode32 (highp vec4 rgba) {\n  rgba = rgba * 255.0;\n  highp float Sign = 1.0 - (step(128.0, (rgba[3]) + 0.5)) * 2.0;\n  highp float Exponent = 2.0 * (mod(float(int((rgba[3]) + 0.5)), 128.0)) + (step(128.0, (rgba[2]) + 0.5)) - 127.0;\n  highp float Mantissa = (mod(float(int((rgba[2]) + 0.5)), 128.0)) * 65536.0 + rgba[1] * 256.0 + rgba[0] + 8388608.0;\n  return Sign * exp2(Exponent - 23.0) * Mantissa;\n}\n#if !USE_INSTANCING\n  uniform highp mat4 cc_matWorld;\n  uniform highp mat4 cc_matWorldIT;\n#endif\nvoid CCGetWorldMatrixFull(out mat4 matWorld, out mat4 matWorldIT)\n{\n  #if USE_INSTANCING\n    matWorld = mat4(\n      vec4(a_matWorld0.xyz, 0.0),\n      vec4(a_matWorld1.xyz, 0.0),\n      vec4(a_matWorld2.xyz, 0.0),\n      vec4(a_matWorld0.w, a_matWorld1.w, a_matWorld2.w, 1.0)\n    );\n    matWorldIT = matWorld;\n  #else\n    matWorld = cc_matWorld;\n    matWorldIT = cc_matWorldIT;\n  #endif\n}\n#if CC_USE_MORPH\n  uniform vec4 cc_displacementWeights[15];\n  uniform vec4 cc_displacementTextureInfo;\n  #if CC_MORPH_TARGET_HAS_POSITION\n    uniform sampler2D cc_PositionDisplacements;\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    uniform sampler2D cc_NormalDisplacements;\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    uniform sampler2D cc_TangentDisplacements;\n  #endif\n  vec2 getPixelLocation(vec2 textureResolution, int pixelIndex) {\n    float pixelIndexF = float(pixelIndex);\n    float x = mod(pixelIndexF, textureResolution.x);\n    float y = floor(pixelIndexF / textureResolution.x);\n    return vec2(x, y);\n  }\n  vec2 getPixelCoordFromLocation(vec2 location, vec2 textureResolution) {\n    return (vec2(location.x, location.y) + .5) / textureResolution;\n  }\n  #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n        int pixelIndex = elementIndex;\n        vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n        vec2 uv = getPixelCoordFromLocation(location, cc_displacementTextureInfo.xy);\n        return texture2D(tex, uv);\n      }\n  #else\n    vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n      int pixelIndex = elementIndex * 4;\n      vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n      vec2 x = getPixelCoordFromLocation(location + vec2(0.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 y = getPixelCoordFromLocation(location + vec2(1.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 z = getPixelCoordFromLocation(location + vec2(2.0, 0.0), cc_displacementTextureInfo.xy);\n      return vec4(\n        decode32(texture2D(tex, x)),\n        decode32(texture2D(tex, y)),\n        decode32(texture2D(tex, z)),\n        1.0\n      );\n    }\n  #endif\n  float getDisplacementWeight(int index) {\n    int quot = index / 4;\n    int remainder = index - quot * 4;\n    if (remainder == 0) {\n      return cc_displacementWeights[quot].x;\n    } else if (remainder == 1) {\n      return cc_displacementWeights[quot].y;\n    } else if (remainder == 2) {\n      return cc_displacementWeights[quot].z;\n    } else {\n      return cc_displacementWeights[quot].w;\n    }\n  }\n  vec3 getVec3DisplacementFromTexture(sampler2D tex, int vertexIndex) {\n  #if CC_MORPH_PRECOMPUTED\n    return fetchVec3ArrayFromTexture(tex, vertexIndex).rgb;\n  #else\n    vec3 result = vec3(0, 0, 0);\n    int nVertices = int(cc_displacementTextureInfo.z);\n    for (int iTarget = 0; iTarget < CC_MORPH_TARGET_COUNT; ++iTarget) {\n      result += (fetchVec3ArrayFromTexture(tex, nVertices * iTarget + vertexIndex).rgb * getDisplacementWeight(iTarget));\n    }\n    return result;\n  #endif\n  }\n  #if CC_MORPH_TARGET_HAS_POSITION\n  vec3 getPositionDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_PositionDisplacements, vertexId);\n  }\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n  vec3 getNormalDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_NormalDisplacements, vertexId);\n  }\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n  vec3 getTangentDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_TangentDisplacements, vertexId);\n  }\n  #endif\n  void applyMorph (inout vec4 position, inout vec3 normal, inout vec4 tangent) {\n    int vertexId = getVertexId();\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    normal.xyz = normal.xyz + getNormalDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    tangent.xyz = tangent.xyz + getTangentDisplacement(vertexId);\n  #endif\n  }\n  void applyMorph (inout vec4 position) {\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(getVertexId());\n  #endif\n  }\n#endif\n#if CC_USE_SKINNING\n  #if CC_USE_BAKED_ANIMATION\n    uniform highp vec4 cc_jointTextureInfo;\n    uniform highp vec4 cc_jointAnimInfo;\n    uniform highp sampler2D cc_jointTexture;\n    void CCGetJointTextureCoords(float pixelsPerJoint, float jointIdx, out highp float x, out highp float y, out highp float invSize)\n    {\n      #if USE_INSTANCING\n        highp float temp = pixelsPerJoint * (a_jointAnimInfo.x * a_jointAnimInfo.y + jointIdx) + a_jointAnimInfo.z;\n      #else\n        highp float temp = pixelsPerJoint * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + jointIdx) + cc_jointTextureInfo.z;\n      #endif\n      invSize = cc_jointTextureInfo.w;\n      highp float tempY = floor(temp * invSize);\n      x = floor(temp - tempY * cc_jointTextureInfo.x);\n      y = (tempY + 0.5) * invSize;\n    }\n  #else\n    #if CC_USE_REAL_TIME_JOINT_TEXTURE\n      uniform highp sampler2D cc_realtimeJoint;\n    #else\n      uniform highp vec4 cc_joints[CC_JOINT_UNIFORM_CAPACITY * 3];\n    #endif\n  #endif\n  #if CC_USE_BAKED_ANIMATION\n    #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      mat4 getJointMatrix (float i) {\n        highp float x, y, invSize;\n        CCGetJointTextureCoords(3.0, i, x, y, invSize);\n        vec4 v1 = texture2D(cc_jointTexture, vec2((x + 0.5) * invSize, y));\n        vec4 v2 = texture2D(cc_jointTexture, vec2((x + 1.5) * invSize, y));\n        vec4 v3 = texture2D(cc_jointTexture, vec2((x + 2.5) * invSize, y));\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #else\n      mat4 getJointMatrix (float i) {\n        highp float x, y, invSize;\n        CCGetJointTextureCoords(12.0, i, x, y, invSize);\n        vec4 v1 = vec4(\n          decode32(texture2D(cc_jointTexture, vec2((x + 0.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 1.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 2.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 3.5) * invSize, y)))\n        );\n        vec4 v2 = vec4(\n          decode32(texture2D(cc_jointTexture, vec2((x + 4.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 5.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 6.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 7.5) * invSize, y)))\n        );\n        vec4 v3 = vec4(\n          decode32(texture2D(cc_jointTexture, vec2((x + 8.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 9.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 10.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 11.5) * invSize, y)))\n        );\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #else\n    #if CC_USE_REAL_TIME_JOINT_TEXTURE\n      #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n        mat4 getJointMatrix (float i) {\n          float x = i;\n          vec4 v1 = texture2D(cc_realtimeJoint, vec2( x / 256.0, 0.5 / 3.0));\n          vec4 v2 = texture2D(cc_realtimeJoint, vec2( x / 256.0, 1.5 / 3.0));\n          vec4 v3 = texture2D(cc_realtimeJoint, vec2( x / 256.0, 2.5 / 3.0));\n          return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n        }\n      #else\n        mat4 getJointMatrix (float i) {\n         float x = 4.0 * i;\n          vec4 v1 = vec4(\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 0.5)/ 1024.0, 0.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 1.5)/ 1024.0, 0.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 2.5)/ 1024.0, 0.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 3.5)/ 1024.0, 0.5 / 3.0)))\n          );\n          vec4 v2 = vec4(\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 0.5)/ 1024.0, 1.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 1.5)/ 1024.0, 1.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 2.5)/ 1024.0, 1.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 3.5)/ 1024.0, 1.5 / 3.0)))\n          );\n          vec4 v3 = vec4(\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 0.5)/ 1024.0, 2.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 1.5)/ 1024.0, 2.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 2.5)/ 1024.0, 2.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 3.5)/ 1024.0, 2.5 / 3.0)))\n          );\n          return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n        }\n      #endif\n    #else\n      mat4 getJointMatrix (float i) {\n        int idx = int(i);\n        vec4 v1 = cc_joints[idx * 3];\n        vec4 v2 = cc_joints[idx * 3 + 1];\n        vec4 v3 = cc_joints[idx * 3 + 2];\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #endif\n  mat4 skinMatrix () {\n    vec4 joints = vec4(a_joints);\n    return getJointMatrix(joints.x) * a_weights.x\n         + getJointMatrix(joints.y) * a_weights.y\n         + getJointMatrix(joints.z) * a_weights.z\n         + getJointMatrix(joints.w) * a_weights.w;\n  }\n  void CCSkin (inout vec4 position) {\n    mat4 m = skinMatrix();\n    position = m * position;\n  }\n  void CCSkin (inout vec4 position, inout vec3 normal, inout vec4 tangent) {\n    mat4 m = skinMatrix();\n    position = m * position;\n    normal = (m * vec4(normal, 0.0)).xyz;\n    tangent.xyz = (m * vec4(tangent.xyz, 0.0)).xyz;\n  }\n#endif\n#if CC_USE_FOG != 4 && !CC_USE_ACCURATE_FOG\n  #if CC_USE_FOG != 4\n  #endif\n#endif\n    uniform vec4 tilingOffset;\n#define CC_SURFACES_VERTEX_MODIFY_UV\nvoid SurfacesVertexModifyUV(inout SurfacesStandardVertexIntermediate In)\n{\n  In.texCoord = In.texCoord * tilingOffset.xy + tilingOffset.zw;\n#if CC_SURFACES_USE_SECOND_UV\n  In.texCoord1 = In.texCoord1 * tilingOffset.xy + tilingOffset.zw;\n#endif\n}\n#ifndef CC_SURFACES_VERTEX_MODIFY_LOCAL_POS\nvec3 SurfacesVertexModifyLocalPos(in SurfacesStandardVertexIntermediate In)\n{\n  return In.position.xyz;\n}\n#endif\n#ifndef CC_SURFACES_VERTEX_MODIFY_LOCAL_NORMAL\n#endif\n#ifndef CC_SURFACES_VERTEX_MODIFY_LOCAL_TANGENT\n  #if CC_SURFACES_USE_TANGENT_SPACE\n  #endif\n#endif\n#ifndef CC_SURFACES_VERTEX_MODIFY_LOCAL_SHARED_DATA\nvoid SurfacesVertexModifyLocalSharedData(inout SurfacesStandardVertexIntermediate In)\n{\n}\n#endif\n#ifndef CC_SURFACES_VERTEX_MODIFY_WORLD_POS\nvec3 SurfacesVertexModifyWorldPos(in SurfacesStandardVertexIntermediate In)\n{\n  return In.worldPos;\n}\n#endif\n#ifndef CC_SURFACES_VERTEX_MODIFY_CLIP_POS\nvec4 SurfacesVertexModifyClipPos(in SurfacesStandardVertexIntermediate In)\n{\n  return In.clipPos;\n}\n#endif\n#ifndef CC_SURFACES_VERTEX_MODIFY_UV\nvoid SurfacesVertexModifyUV(inout SurfacesStandardVertexIntermediate In)\n{\n}\n#endif\n#ifndef CC_SURFACES_VERTEX_MODIFY_WORLD_NORMAL\n#endif\n#ifndef CC_SURFACES_VERTEX_MODIFY_SHARED_DATA\nvoid SurfacesVertexModifySharedData(inout SurfacesStandardVertexIntermediate In)\n{\n}\n#endif\nvoid CCSurfacesVertexInput(out SurfacesStandardVertexIntermediate In)\n{\n  In.position = vec4(a_position, 1.0);\n  In.normal = a_normal;\n#if CC_SURFACES_USE_TANGENT_SPACE\n  In.tangent = a_tangent;\n#endif\n#if CC_SURFACES_USE_VERTEX_COLOR\n  In.color = a_color;\n#endif\n  In.texCoord = a_texCoord;\n#if CC_SURFACES_USE_SECOND_UV\n  In.texCoord1 = a_texCoord1;\n#endif\n}\nvoid CCSurfacesVertexOutput(in SurfacesStandardVertexIntermediate In)\n{\n  gl_Position = In.clipPos;\n  VSOutput_worldNormal = In.worldNormal.xyz;\n  VSOutput_faceSideSign = In.worldNormal.w;\n  VSOutput_worldPos = In.worldPos;\n#if CC_SURFACES_USE_TANGENT_SPACE\n  VSOutput_worldTangent = In.worldTangent.xyz;\n  VSOutput_mirrorNormal = In.tangent.w > 0.0 ? 1.0 : -1.0;\n#endif\n#if CC_SURFACES_USE_VERTEX_COLOR\n  VSOutput_vertexColor = In.color;\n#endif\n  VSOutput_texcoord = In.texCoord;\n#if CC_SURFACES_USE_SECOND_UV\n  VSOutput_texcoord1 = In.texCoord1;\n#endif\n#if CC_USE_FOG != 4 && !CC_USE_ACCURATE_FOG\n  VSOutput_fogFactor = In.fogFactor;\n#endif\n#if CC_RECEIVE_SHADOW\n  VSOutput_shadowBias = In.shadowBiasAndProbeId.xy;\n#endif\n#if CC_USE_REFLECTION_PROBE\n  VSOutput_reflectionProbeId = In.shadowBiasAndProbeId.z;\n#endif\n#if CC_USE_LIGHTMAP && !CC_FORWARD_ADD\n  VSOutput_lightMapUV = In.lightmapUV;\n#endif\n#if CC_SURFACES_TRANSFER_LOCAL_POS\n  VSOutput_localPos = In.position;\n#endif\n#if CC_SURFACES_TRANSFER_CLIP_POS\n  VSOutput_clipPos = In.clipPos;\n#endif\n#if CC_USE_LIGHT_PROBE\n  #if USE_INSTANCING\n    v_sh_linear_const_r = a_sh_linear_const_r;\n    v_sh_linear_const_g = a_sh_linear_const_g;\n    v_sh_linear_const_b = a_sh_linear_const_b;\n  #endif\n#endif\n}\nvoid CCSurfacesVertexAnimation(inout SurfacesStandardVertexIntermediate In)\n{\nvec4 temp = vec4(0.0);\n#if CC_USE_MORPH\n  #if CC_SURFACES_USE_TANGENT_SPACE\n    applyMorph(In.position, In.normal, In.tangent);\n  #else\n    applyMorph(In.position, In.normal, temp);\n  #endif\n#endif\n#if CC_USE_SKINNING\n  #if CC_SURFACES_USE_TANGENT_SPACE\n    CCSkin(In.position, In.normal, In.tangent);\n  #else\n    CCSkin(In.position, In.normal, temp);\n  #endif\n#endif\n}\nvoid CCSurfacesVertexWorldTransform(inout SurfacesStandardVertexIntermediate In)\n{\n    mat4 matWorld, matWorldIT;\n    CCGetWorldMatrixFull(matWorld, matWorldIT);\n    In.worldPos = (matWorld * In.position).xyz;\n    In.worldNormal.xyz = normalize((matWorldIT * vec4(In.normal.xyz, 0.0)).xyz);\n    #if CC_SURFACES_USE_TANGENT_SPACE\n      In.worldTangent = normalize((matWorld * vec4(In.tangent.xyz, 0.0)).xyz);\n      In.worldBinormal = cross(In.worldNormal.xyz, In.worldTangent) * In.tangent.w;\n    #endif\n}\nvoid CCSurfacesVertexTransformUV(inout SurfacesStandardVertexIntermediate In)\n{\n  #if CC_SURFACES_FLIP_UV\n    In.texCoord = cc_cameraPos.w > 1.0 ? vec2(In.texCoord.x, 1.0 - In.texCoord.y) : In.texCoord;\n    #if CC_SURFACES_USE_SECOND_UV\n      In.texCoord1 = cc_cameraPos.w > 1.0 ? vec2(In.texCoord1.x, 1.0 - In.texCoord1.y) : In.texCoord1;\n    #endif\n  #endif\n}\nvarying highp vec2 v_clip_depth;\nvoid main()\n{\n  SurfacesStandardVertexIntermediate In;\n  CCSurfacesVertexInput(In);\n  CCSurfacesVertexAnimation(In);\n  In.position.xyz = SurfacesVertexModifyLocalPos(In);\n  SurfacesVertexModifyLocalSharedData(In);\n  CCSurfacesVertexWorldTransform(In);\n  In.worldPos = SurfacesVertexModifyWorldPos(In);\n  In.clipPos = cc_matLightViewProj * vec4(In.worldPos, 1.0);\n  In.clipPos = SurfacesVertexModifyClipPos(In);\n  SurfacesVertexModifyUV(In);\n  SurfacesVertexModifySharedData(In);\n  CCSurfacesVertexTransformUV(In);\n  CCSurfacesVertexOutput(In);\n  v_clip_depth = In.clipPos.zw;\n}","frag":"\n#ifdef GL_OES_standard_derivatives\n#extension GL_OES_standard_derivatives: enable\n#endif\n#ifdef GL_EXT_shader_texture_lod\n#extension GL_EXT_shader_texture_lod: enable\n#endif\nprecision highp float;\n#define CC_SURFACES_USE_TANGENT_SPACE 0\n#define CC_SURFACES_USE_VERTEX_COLOR 0\n#define CC_SURFACES_USE_SECOND_UV 0\n#define CC_SURFACES_USE_LIGHT_MAP 0\n#define CC_SURFACES_TRANSFER_LOCAL_POS 0\n#ifndef CC_SURFACES_USE_SECOND_UV\n  #define CC_SURFACES_USE_SECOND_UV 0\n#endif\n#ifndef CC_SURFACES_USE_TANGENT_SPACE\n  #define CC_SURFACES_USE_TANGENT_SPACE 0\n#endif\n#ifndef CC_SURFACES_USE_VERTEX_COLOR\n  #define CC_SURFACES_USE_VERTEX_COLOR 0\n#endif\n#ifndef CC_SURFACES_TRANSFER_LOCAL_POS\n  #define CC_SURFACES_TRANSFER_LOCAL_POS 0\n#endif\n#ifndef CC_SURFACES_TRANSFER_CLIP_POS\n  #define CC_SURFACES_TRANSFER_CLIP_POS 0\n#endif\n#ifndef CC_SURFACES_USE_LIGHT_MAP\n  #ifdef CC_USE_LIGHTMAP\n    #define CC_SURFACES_USE_LIGHT_MAP CC_USE_LIGHTMAP\n  #else\n    #define CC_SURFACES_USE_LIGHT_MAP 0\n  #endif\n#endif\n#ifndef CC_SURFACES_FLIP_UV\n  #define CC_SURFACES_FLIP_UV 0\n#endif\n#ifndef CC_SURFACES_USE_TWO_SIDED\n  #define CC_SURFACES_USE_TWO_SIDED 0\n#endif\n#ifndef CC_SURFACES_USE_REFLECTION_DENOISE\n  #define CC_SURFACES_USE_REFLECTION_DENOISE 0\n#endif\n#ifndef CC_SURFACES_LIGHTING_ANISOTROPIC\n  #define CC_SURFACES_LIGHTING_ANISOTROPIC 0\n#endif\n#ifndef CC_SURFACES_LIGHTING_ANISOTROPIC_ENVCONVOLUTION_COUNT\n  #define CC_SURFACES_LIGHTING_ANISOTROPIC_ENVCONVOLUTION_COUNT 0\n#endif\n#ifndef CC_SURFACES_USE_LEGACY_COMPATIBLE_LIGHTING\n  #define CC_SURFACES_USE_LEGACY_COMPATIBLE_LIGHTING 0\n#endif\n#ifndef CC_SURFACES_LIGHTING_USE_FRESNEL\n  #define CC_SURFACES_LIGHTING_USE_FRESNEL 0\n#endif\n#ifndef CC_SURFACES_LIGHTING_TRANSMIT_SPECULAR\n  #define CC_SURFACES_LIGHTING_TRANSMIT_SPECULAR 0\n#endif\n#ifndef CC_SURFACES_LIGHTING_TRANSMIT_DIFFUSE\n  #define CC_SURFACES_LIGHTING_TRANSMIT_DIFFUSE 0\n#endif\n#ifndef CC_SURFACES_LIGHTING_USE_SHADOWMAP_TRANSMIT\n  #define CC_SURFACES_LIGHTING_USE_SHADOWMAP_TRANSMIT 0\n#endif\n#ifndef CC_SURFACES_LIGHTING_TRT\n  #define CC_SURFACES_LIGHTING_TRT 0\n#endif\n#ifndef CC_SURFACES_LIGHTING_TT\n  #define CC_SURFACES_LIGHTING_TT 0\n#endif\n#ifndef CC_SURFACES_ENABLE_DEBUG_VIEW\n  #define CC_SURFACES_ENABLE_DEBUG_VIEW 1\n#endif\n#ifndef CC_SURFACES_LIGHTING_CALCULATE_DIFFUSE\n  #define CC_SURFACES_LIGHTING_CALCULATE_DIFFUSE 1\n#endif\n#ifndef CC_SURFACES_LIGHTING_CALCULATE_SPECULAR\n  #define CC_SURFACES_LIGHTING_CALCULATE_SPECULAR 1\n#endif\n#define CC_USE_SURFACE_SHADER 1\nvarying highp vec3 v_worldPos;\nvarying mediump vec4 v_normal;\nvarying vec2 v_uv;\n#if CC_SURFACES_USE_VERTEX_COLOR\n  varying lowp vec4 v_color;\n#endif\n#if CC_SURFACES_USE_TANGENT_SPACE\n  varying mediump vec4 v_tangent;\n#endif\n#if CC_SURFACES_USE_SECOND_UV\n  varying mediump vec2 v_uv1;\n#endif\n#if CC_USE_LIGHTMAP && !CC_FORWARD_ADD\n  varying mediump vec3 v_luv;\n#endif\n#if CC_RECEIVE_SHADOW || CC_USE_REFLECTION_PROBE\n  varying mediump vec4 v_shadowBiasAndProbeId;\n#endif\n#if CC_USE_FOG != 4 && !CC_USE_ACCURATE_FOG\n  varying mediump float v_fogFactor;\n#endif\n#if CC_SURFACES_TRANSFER_LOCAL_POS\n  varying highp vec4 v_localPos;\n#endif\n#if CC_SURFACES_TRANSFER_CLIP_POS\n  varying highp vec4 v_clipPos;\n#endif\n#if CC_USE_LIGHT_PROBE\n  #if USE_INSTANCING\n    varying mediump vec4 v_sh_linear_const_r;\n    varying mediump vec4 v_sh_linear_const_g;\n    varying mediump vec4 v_sh_linear_const_b;\n  #endif\n#endif\n#define FSInput_worldPos v_worldPos\n#define FSInput_worldNormal v_normal.xyz\n#define FSInput_faceSideSign v_normal.w\n#define FSInput_texcoord v_uv\n#if CC_SURFACES_USE_VERTEX_COLOR\n  #define FSInput_vertexColor v_color\n#else\n  #define FSInput_vertexColor vec4(1.0)\n#endif\n#if CC_SURFACES_USE_TANGENT_SPACE\n  #define FSInput_worldTangent v_tangent.xyz\n  #define FSInput_mirrorNormal v_tangent.w\n#else\n  #define FSInput_worldTangent vec3(0.0, 0.0, 0.0)\n  #define FSInput_mirrorNormal 1.0\n#endif\n#if CC_SURFACES_USE_SECOND_UV\n  #define FSInput_texcoord1 v_uv1\n#else\n  #define FSInput_texcoord1 vec2(0.0, 0.0)\n#endif\n#if CC_USE_LIGHTMAP && !CC_FORWARD_ADD\n  #define FSInput_lightMapUV v_luv\n#endif\n#if CC_RECEIVE_SHADOW\n  #define FSInput_shadowBias v_shadowBiasAndProbeId.xy\n#endif\n#if CC_USE_REFLECTION_PROBE\n  #define FSInput_reflectionProbeId v_shadowBiasAndProbeId.z\n#endif\n#if CC_USE_FOG != 4 && !CC_USE_ACCURATE_FOG\n  #define FSInput_fogFactor v_fogFactor\n#endif\n#if CC_SURFACES_TRANSFER_LOCAL_POS\n  #define FSInput_localPos v_localPos\n#endif\n#if CC_SURFACES_TRANSFER_CLIP_POS\n  #define FSInput_clipPos v_clipPos\n#endif\nuniform mediump vec4 cc_debug_view_mode;\nuniform mediump vec4 cc_surfaceTransform;\n#define CC_SURFACES_DEBUG_VIEW_VERTEX_COLOR 1\n#define CC_SURFACES_DEBUG_VIEW_VERTEX_NORMAL CC_SURFACES_DEBUG_VIEW_VERTEX_COLOR + 1\n#define CC_SURFACES_DEBUG_VIEW_VERTEX_TANGENT CC_SURFACES_DEBUG_VIEW_VERTEX_NORMAL + 1\n#define CC_SURFACES_DEBUG_VIEW_WORLD_POS CC_SURFACES_DEBUG_VIEW_VERTEX_TANGENT + 1\n#define CC_SURFACES_DEBUG_VIEW_VERTEX_MIRROR CC_SURFACES_DEBUG_VIEW_WORLD_POS + 1\n#define CC_SURFACES_DEBUG_VIEW_FACE_SIDE CC_SURFACES_DEBUG_VIEW_VERTEX_MIRROR + 1\n#define CC_SURFACES_DEBUG_VIEW_UV0 CC_SURFACES_DEBUG_VIEW_FACE_SIDE + 1\n#define CC_SURFACES_DEBUG_VIEW_UV1 CC_SURFACES_DEBUG_VIEW_UV0 + 1\n#define CC_SURFACES_DEBUG_VIEW_UVLIGHTMAP CC_SURFACES_DEBUG_VIEW_UV1 + 1\n#define CC_SURFACES_DEBUG_VIEW_PROJ_DEPTH CC_SURFACES_DEBUG_VIEW_UVLIGHTMAP + 1\n#define CC_SURFACES_DEBUG_VIEW_LINEAR_DEPTH CC_SURFACES_DEBUG_VIEW_PROJ_DEPTH + 1\n#define CC_SURFACES_DEBUG_VIEW_FRAGMENT_NORMAL CC_SURFACES_DEBUG_VIEW_LINEAR_DEPTH + 1\n#define CC_SURFACES_DEBUG_VIEW_FRAGMENT_TANGENT CC_SURFACES_DEBUG_VIEW_FRAGMENT_NORMAL + 1\n#define CC_SURFACES_DEBUG_VIEW_FRAGMENT_BINORMAL CC_SURFACES_DEBUG_VIEW_FRAGMENT_TANGENT + 1\n#define CC_SURFACES_DEBUG_VIEW_BASE_COLOR CC_SURFACES_DEBUG_VIEW_FRAGMENT_BINORMAL + 1\n#define CC_SURFACES_DEBUG_VIEW_DIFFUSE_COLOR CC_SURFACES_DEBUG_VIEW_BASE_COLOR + 1\n#define CC_SURFACES_DEBUG_VIEW_SPECULAR_COLOR CC_SURFACES_DEBUG_VIEW_DIFFUSE_COLOR + 1\n#define CC_SURFACES_DEBUG_VIEW_TRANSPARENCY CC_SURFACES_DEBUG_VIEW_SPECULAR_COLOR + 1\n#define CC_SURFACES_DEBUG_VIEW_METALLIC CC_SURFACES_DEBUG_VIEW_TRANSPARENCY + 1\n#define CC_SURFACES_DEBUG_VIEW_ROUGHNESS CC_SURFACES_DEBUG_VIEW_METALLIC + 1\n#define CC_SURFACES_DEBUG_VIEW_SPECULAR_INTENSITY CC_SURFACES_DEBUG_VIEW_ROUGHNESS + 1\n#define CC_SURFACES_DEBUG_VIEW_IOR CC_SURFACES_DEBUG_VIEW_SPECULAR_INTENSITY + 1\n#define CC_SURFACES_DEBUG_VIEW_DIRECT_DIFFUSE CC_SURFACES_DEBUG_VIEW_IOR + 1\n#define CC_SURFACES_DEBUG_VIEW_DIRECT_SPECULAR CC_SURFACES_DEBUG_VIEW_DIRECT_DIFFUSE + 1\n#define CC_SURFACES_DEBUG_VIEW_DIRECT_ALL CC_SURFACES_DEBUG_VIEW_DIRECT_SPECULAR + 1\n#define CC_SURFACES_DEBUG_VIEW_ENV_DIFFUSE CC_SURFACES_DEBUG_VIEW_DIRECT_ALL + 1\n#define CC_SURFACES_DEBUG_VIEW_ENV_SPECULAR CC_SURFACES_DEBUG_VIEW_ENV_DIFFUSE + 1\n#define CC_SURFACES_DEBUG_VIEW_ENV_ALL CC_SURFACES_DEBUG_VIEW_ENV_SPECULAR + 1\n#define CC_SURFACES_DEBUG_VIEW_EMISSIVE CC_SURFACES_DEBUG_VIEW_ENV_ALL + 1\n#define CC_SURFACES_DEBUG_VIEW_LIGHT_MAP CC_SURFACES_DEBUG_VIEW_EMISSIVE + 1\n#define CC_SURFACES_DEBUG_VIEW_SHADOW CC_SURFACES_DEBUG_VIEW_LIGHT_MAP + 1\n#define CC_SURFACES_DEBUG_VIEW_AO CC_SURFACES_DEBUG_VIEW_SHADOW + 1\n#define CC_SURFACES_DEBUG_VIEW_FRESNEL CC_SURFACES_DEBUG_VIEW_AO + 1\n#define CC_SURFACES_DEBUG_VIEW_TRANSMIT_DIRECT_DIFFUSE CC_SURFACES_DEBUG_VIEW_FRESNEL + 1\n#define CC_SURFACES_DEBUG_VIEW_TRANSMIT_DIRECT_SPECULAR CC_SURFACES_DEBUG_VIEW_TRANSMIT_DIRECT_DIFFUSE + 1\n#define CC_SURFACES_DEBUG_VIEW_TRANSMIT_ENV_DIFFUSE CC_SURFACES_DEBUG_VIEW_TRANSMIT_DIRECT_SPECULAR + 1\n#define CC_SURFACES_DEBUG_VIEW_TRANSMIT_ENV_SPECULAR CC_SURFACES_DEBUG_VIEW_TRANSMIT_ENV_DIFFUSE + 1\n#define CC_SURFACES_DEBUG_VIEW_TRANSMIT_ALL CC_SURFACES_DEBUG_VIEW_TRANSMIT_ENV_SPECULAR + 1\n#define CC_SURFACES_DEBUG_VIEW_TRT_DIRECT CC_SURFACES_DEBUG_VIEW_TRANSMIT_ALL + 1\n#define CC_SURFACES_DEBUG_VIEW_TRT_ENVIRONMENT CC_SURFACES_DEBUG_VIEW_TRT_DIRECT + 1\n#define CC_SURFACES_DEBUG_VIEW_TRT_ALL CC_SURFACES_DEBUG_VIEW_TRT_ENVIRONMENT + 1\n#define CC_SURFACES_DEBUG_VIEW_FOG CC_SURFACES_DEBUG_VIEW_TRT_ALL + 1\n#define CC_SURFACES_DEBUG_VIEW_SINGLE 1\n#define CC_SURFACES_DEBUG_VIEW_COMPOSITE_AND_MISC 2\n#define IS_DEBUG_VIEW_ENABLE_WITH_CAMERA (cc_surfaceTransform.y != 3.0)\n#define IS_DEBUG_VIEW_LIGHTING_ENABLE_WITH_ALBEDO (UnpackBitFromFloat(cc_debug_view_mode.w, 6) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_MISC_ENABLE_CSM_LAYER_COLORATION (UnpackBitFromFloat(cc_debug_view_mode.w, 7) && IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_DIRECT_DIFFUSE (UnpackBitFromFloat(cc_debug_view_mode.y, 0) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_DIRECT_SPECULAR (UnpackBitFromFloat(cc_debug_view_mode.y, 1) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_ENV_DIFFUSE (UnpackBitFromFloat(cc_debug_view_mode.y, 2) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_ENV_SPECULAR (UnpackBitFromFloat(cc_debug_view_mode.y, 3) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_EMISSIVE (UnpackBitFromFloat(cc_debug_view_mode.y, 4) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_LIGHT_MAP (UnpackBitFromFloat(cc_debug_view_mode.y, 5) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_SHADOW (UnpackBitFromFloat(cc_debug_view_mode.y, 6) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_AO (UnpackBitFromFloat(cc_debug_view_mode.y, 7) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_NORMAL_MAP (UnpackBitFromFloat(cc_debug_view_mode.z, 0) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_FOG (UnpackBitFromFloat(cc_debug_view_mode.z, 1) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_TONE_MAPPING (UnpackBitFromFloat(cc_debug_view_mode.z, 2) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_GAMMA_CORRECTION (UnpackBitFromFloat(cc_debug_view_mode.z, 3) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_FRESNEL (UnpackBitFromFloat(cc_debug_view_mode.z, 4) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_TRANSMIT_DIFFUSE (UnpackBitFromFloat(cc_debug_view_mode.z, 5) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_TRANSMIT_SPECULAR (UnpackBitFromFloat(cc_debug_view_mode.z, 6) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_TRT (UnpackBitFromFloat(cc_debug_view_mode.z, 7) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_TT (UnpackBitFromFloat(cc_debug_view_mode.w, 0) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#if (CC_PIPELINE_TYPE == 0 || CC_FORCE_FORWARD_SHADING)\n  #if CC_FORWARD_ADD\n    #if CC_PIPELINE_TYPE == 0\n      #define LIGHTS_PER_PASS 1\n    #else\n      #define LIGHTS_PER_PASS 10\n    #endif\n    #if CC_ENABLE_CLUSTERED_LIGHT_CULLING == 0\n    #endif\n  #endif\n#endif\n#if CC_USE_LIGHT_PROBE\n  #if !USE_INSTANCING\n    #endif\n#endif\nuniform highp mat4 cc_matLightView;\n  uniform mediump vec4 cc_shadowNFLSInfo;\n  uniform mediump vec4 cc_shadowLPNNInfo;\n#if CC_SUPPORT_CASCADED_SHADOW_MAP\n  #endif\nuniform samplerCube cc_environment;\n#if CC_USE_IBL\n  #if CC_USE_DIFFUSEMAP\n    uniform samplerCube cc_diffuseMap;\n  #endif\n#endif\n#if CC_USE_REFLECTION_PROBE\n  uniform samplerCube cc_reflectionProbeCubemap;\n  uniform sampler2D cc_reflectionProbePlanarMap;\n  uniform sampler2D cc_reflectionProbeDataMap;\n#endif\n#define QUATER_PI         0.78539816340\n#define HALF_PI           1.57079632679\n#define PI                3.14159265359\n#define PI2               6.28318530718\n#define PI4               12.5663706144\n#define INV_QUATER_PI     1.27323954474\n#define INV_HALF_PI       0.63661977237\n#define INV_PI            0.31830988618\n#define INV_PI2           0.15915494309\n#define INV_PI4           0.07957747155\n#define EPSILON           1e-6\n#define EPSILON_LOWP      1e-4\n#define LOG2              1.442695\n#define EXP_VALUE         2.71828183f\n#define FP_MAX            65504.0\n#define FP_SCALE          0.0009765625\n#define FP_SCALE_INV      1024.0\n#define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\n#define LIGHT_MAP_TYPE_DISABLED 0\n#define LIGHT_MAP_TYPE_ALL_IN_ONE 1\n#define LIGHT_MAP_TYPE_INDIRECT_OCCLUSION 2\n#define REFLECTION_PROBE_TYPE_NONE 0\n#define REFLECTION_PROBE_TYPE_CUBE 1\n#define REFLECTION_PROBE_TYPE_PLANAR 2\n#define LIGHT_TYPE_DIRECTIONAL 0.0\n#define LIGHT_TYPE_POINT 1.0\n#define LIGHT_TYPE_SPOT 2.0\n#define LIGHT_TYPE_SPHERE 3.0\n#define LIGHT_TYPE_RANGED_DIRECTIONAL 4.0\n#define IS_DIRECTIONAL_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_DIRECTIONAL)) < EPSILON_LOWP)\n#define IS_SPHERE_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_SPHERE)) < EPSILON_LOWP)\n#define IS_SPOT_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_SPOT)) < EPSILON_LOWP)\n#define IS_POINT_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_POINT)) < EPSILON_LOWP)\n#define IS_RANGED_DIRECTIONAL_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_RANGED_DIRECTIONAL)) < EPSILON_LOWP)\nvec4 packDepthToRGBA (float depth) {\n  vec4 ret = vec4(1.0, 255.0, 65025.0, 16581375.0) * depth;\n  ret = fract(ret);\n  ret -= vec4(ret.yzw, 0.0) / 255.0;\n  return ret;\n}\n#define UnpackBitFromFloat(value, bit) (mod(floor(value / pow(10.0, float(bit))), 10.0) > 0.0)\nfloat GetLinearDepthFromViewSpace(vec3 viewPos, float near, float far) {\n  float dist = length(viewPos);\n  return (dist - near) / (far - near);\n}\n#if CC_SUPPORT_CASCADED_SHADOW_MAP\n#endif\nfloat CCGetLinearDepth(vec3 worldPos, float viewSpaceBias) {\n\tvec4 viewPos = cc_matLightView * vec4(worldPos.xyz, 1.0);\n  viewPos.z += viewSpaceBias;\n\treturn GetLinearDepthFromViewSpace(viewPos.xyz, cc_shadowNFLSInfo.x, cc_shadowNFLSInfo.y);\n}\nfloat CCGetLinearDepth(vec3 worldPos) {\n\treturn CCGetLinearDepth(worldPos, 0.0);\n}\n#if CC_RECEIVE_SHADOW\n  uniform highp sampler2D cc_shadowMap;\n  uniform highp sampler2D cc_spotShadowMap;\n  #if CC_SUPPORT_CASCADED_SHADOW_MAP\n  #else\n  #endif\n#endif\n#if CC_USE_FOG != 4\n#endif\n#if CC_USE_LIGHT_PROBE\n  #if CC_USE_LIGHT_PROBE\n  #endif\n#endif\n#if CC_USE_REFLECTION_PROBE\n  #endif\n#if CC_USE_LIGHTMAP && !CC_FORWARD_ADD\n  uniform sampler2D cc_lightingMap;\n#endif\n    uniform vec4 albedo;\n    uniform vec4 albedoScaleAndCutoff;\n    uniform float alphaSource;\n#if USE_ALBEDO_MAP\n  uniform sampler2D albedoMap;\n#endif\n#if USE_WEIGHT_MAP\n  uniform sampler2D baseWeightMap;\n#endif\n#if USE_METALLIC_MAP\n  uniform sampler2D metallicMap;\n#endif\n#if USE_ROUGHNESS_MAP\n  uniform sampler2D roughnessMap;\n#endif\n#if USE_OCCLUSION_MAP\n  uniform sampler2D occlusionMap;\n#endif\n#if USE_TRANSPARENCY_MAP\n  uniform sampler2D transparencyMap;\n#endif\n#if USE_TRANSPARENCYCOLOR_MAP\n  uniform sampler2D transparencyColorMap;\n#endif\n#if USE_EMISSIVE_MAP\n  uniform sampler2D emissiveMap;\n#endif\n#if USE_EMISSIVESCALE_MAP\n  uniform sampler2D emissiveScaleMap;\n#endif\n#if USE_OPACITY_MAP\n  uniform sampler2D alphaSourceMap;\n#endif\n#if USE_NORMAL_MAP\n  uniform sampler2D normalMap;\n#endif\n#define CC_SURFACES_FRAGMENT_MODIFY_BASECOLOR_AND_TRANSPARENCY\n#define CC_SURFACES_FRAGMENT_ALPHA_CLIP_ONLY\nvoid SurfacesFragmentAlphaClipOnly()\n{\n    #if USE_ALPHA_TEST\n      float alpha = albedo.a;\n      #if USE_ALBEDO_MAP\n        alpha = texture2D(albedoMap, TEXTURE_UV).a;\n      #endif\n      #if ALPHA_SOURCE_IS_OPACITY\n        #if USE_OPACITY_MAP\n          alpha = 1.0 - texture2D(alphaSourceMap, TEXTURE_UV).ALPHA_SOURCE_CHANNEL;\n        #else\n          alpha = 1.0 - alphaSource;\n        #endif\n      #else\n        #if USE_OPACITY_MAP\n          alpha = texture2D(alphaSourceMap, TEXTURE_UV).ALPHA_SOURCE_CHANNEL;\n        #else\n          alpha = alphaSource;\n        #endif\n      #endif\n      if (alpha < albedoScaleAndCutoff.w) discard;\n    #endif\n}\n#define CC_SURFACES_FRAGMENT_MODIFY_WORLD_NORMAL\n#define CC_SURFACES_FRAGMENT_MODIFY_EMISSIVE\n#define CC_SURFACES_FRAGMENT_MODIFY_PBRPARAMS\nvarying highp vec2 v_clip_depth;\nvoid main () {\n  SurfacesFragmentAlphaClipOnly();\n  highp float clipDepth = v_clip_depth.x / v_clip_depth.y * 0.5 + 0.5;\n  if(cc_shadowLPNNInfo.x > EPSILON && cc_shadowLPNNInfo.x < 1.999999) {\n    #if CC_SHADOWMAP_USE_LINEAR_DEPTH\n      clipDepth = CCGetLinearDepth(FSInput_worldPos.xyz);\n    #endif\n  }\n  #if CC_SHADOWMAP_FORMAT == 1\n    gl_FragColor = packDepthToRGBA(clipDepth);\n  #else\n    gl_FragColor = vec4(clipDepth, 1.0, 1.0, 1.0);\n  #endif\n}"},"builtins":{"globals":{"blocks":[{"name":"CCGlobal","defines":[]},{"name":"CCCamera","defines":[]},{"name":"CCShadow","defines":[]},{"name":"CCCSM","defines":["CC_SUPPORT_CASCADED_SHADOW_MAP"]}],"samplerTextures":[{"name":"cc_environment","defines":[]},{"name":"cc_diffuseMap","defines":["CC_USE_IBL","CC_USE_DIFFUSEMAP"]},{"name":"cc_shadowMap","defines":["CC_RECEIVE_SHADOW"]},{"name":"cc_spotShadowMap","defines":["CC_RECEIVE_SHADOW"]}],"buffers":[],"images":[]},"locals":{"blocks":[{"name":"CCLocal","defines":["!USE_INSTANCING"]},{"name":"CCMorph","defines":["CC_USE_MORPH"]},{"name":"CCSkinningTexture","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"CCSkinningAnimation","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"CCSkinning","defines":["CC_USE_SKINNING","!CC_USE_BAKED_ANIMATION","!CC_USE_REAL_TIME_JOINT_TEXTURE"]},{"name":"CCForwardLight","defines":["CC_FORWARD_ADD","CC_ENABLE_CLUSTERED_LIGHT_CULLING"]},{"name":"CCSH","defines":["CC_USE_LIGHT_PROBE","!USE_INSTANCING"]}],"samplerTextures":[{"name":"cc_PositionDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_POSITION"]},{"name":"cc_NormalDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_NORMAL"]},{"name":"cc_TangentDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_TANGENT"]},{"name":"cc_jointTexture","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"cc_realtimeJoint","defines":["CC_USE_SKINNING","!CC_USE_BAKED_ANIMATION","CC_USE_REAL_TIME_JOINT_TEXTURE"]},{"name":"cc_reflectionProbeCubemap","defines":["CC_USE_REFLECTION_PROBE"]},{"name":"cc_reflectionProbePlanarMap","defines":["CC_USE_REFLECTION_PROBE"]},{"name":"cc_reflectionProbeDataMap","defines":["CC_USE_REFLECTION_PROBE"]},{"name":"cc_lightingMap","defines":["CC_USE_LIGHTMAP","!CC_FORWARD_ADD"]}],"buffers":[],"images":[]},"statistics":{"CC_EFFECT_USED_VERTEX_UNIFORM_VECTORS":99,"CC_EFFECT_USED_FRAGMENT_UNIFORM_VECTORS":129}},"defines":[{"name":"USE_INSTANCING","type":"boolean"},{"name":"CC_USE_SKINNING","type":"boolean"},{"name":"CC_USE_BAKED_ANIMATION","type":"boolean"},{"name":"CC_USE_LIGHTMAP","type":"boolean"},{"name":"CC_RECEIVE_SHADOW","type":"boolean"},{"name":"CC_USE_LIGHT_PROBE","type":"boolean","default":0},{"name":"CC_USE_MORPH","type":"boolean"},{"name":"CC_FORWARD_ADD","type":"boolean"},{"name":"CC_USE_FOG","type":"number","range":[0,4]},{"name":"CC_USE_ACCURATE_FOG","type":"boolean"},{"name":"CC_USE_REFLECTION_PROBE","type":"boolean"},{"name":"CC_MORPH_TARGET_COUNT","type":"number","range":[2,8]},{"name":"CC_MORPH_TARGET_HAS_POSITION","type":"boolean"},{"name":"CC_MORPH_TARGET_HAS_NORMAL","type":"boolean"},{"name":"CC_MORPH_TARGET_HAS_TANGENT","type":"boolean"},{"name":"CC_MORPH_PRECOMPUTED","type":"boolean"},{"name":"CC_USE_REAL_TIME_JOINT_TEXTURE","type":"boolean"},{"name":"CC_DISABLE_STRUCTURE_IN_FRAGMENT_SHADER","type":"number","range":[0,1]},{"name":"CC_PIPELINE_TYPE","type":"number","range":[0,1]},{"name":"CC_FORCE_FORWARD_SHADING","type":"boolean"},{"name":"CC_SUPPORT_CASCADED_SHADOW_MAP","type":"boolean"},{"name":"CC_USE_IBL","type":"number","range":[0,2]},{"name":"CC_USE_DIFFUSEMAP","type":"number","range":[0,2]},{"name":"TEXTURE_UV","type":"string","options":["v_uv","v_uv1"]},{"name":"USE_ALBEDO_MAP","type":"boolean"},{"name":"USE_WEIGHT_MAP","type":"boolean"},{"name":"USE_METALLIC_MAP","type":"boolean"},{"name":"METALLIC_CHANNEL","type":"string","options":["r","g","b","a"]},{"name":"USE_ROUGHNESS_MAP","type":"boolean"},{"name":"ROUGHNESS_CHANNEL","type":"string","options":["r","g","b","a"]},{"name":"USE_OCCLUSION_MAP","type":"boolean"},{"name":"OCCLUSION_CHANNEL","type":"string","options":["r","g","b","a"]},{"name":"USE_TRANSPARENCY_MAP","type":"boolean"},{"name":"USE_TRANSPARENCYCOLOR_MAP","type":"boolean"},{"name":"USE_EMISSIVE_MAP","type":"boolean"},{"name":"USE_EMISSIVESCALE_MAP","type":"boolean"},{"name":"USE_OPACITY_MAP","type":"boolean"},{"name":"ALPHA_SOURCE_CHANNEL","type":"string","options":["r","g","b","a"]},{"name":"USE_NORMAL_MAP","type":"boolean"},{"name":"NORMAL_UV","type":"string","options":["v_uv","v_uv1"]},{"name":"USE_ALPHA_TEST","type":"boolean"},{"name":"ALPHA_SOURCE_IS_OPACITY","type":"boolean"},{"name":"CC_SHADOWMAP_USE_LINEAR_DEPTH","type":"boolean"},{"name":"CC_SHADOWMAP_FORMAT","type":"number","range":[0,3]}]}],[{"name":"opaque","passes":[{"program":"util/dcc/imported-metallic-roughness|standard-vs|standard-fs","properties":{"tilingOffset":{"type":16,"value":[1,1,0,0]},"mainColor":{"linear":true,"type":16,"value":[1,1,1,1],"handleInfo":["albedo",0,16]},"mainTexture":{"value":"grey","type":28,"handleInfo":["albedoMap",0,28]},"baseWeightMap":{"value":"grey","type":28},"albedoScale":{"type":13,"value":[1]},"roughness":{"type":13,"value":[1]},"roughnessMap":{"value":"grey","type":28},"metallic":{"type":13,"value":[1]},"metallicMap":{"value":"grey","type":28},"occlusion":{"type":13,"value":[0]},"occlusionMap":{"value":"white","type":28},"emissiveScale":{"type":13,"value":[1]},"emissiveScaleMap":{"value":"grey","type":28},"emissive":{"linear":true,"type":16,"value":[0,0,0,1]},"emissiveMap":{"value":"grey","type":28},"alphaSource":{"type":13,"value":[1]},"alphaSourceMap":{"value":"grey","type":28},"alphaThreshold":{"type":13,"value":[0.5],"handleInfo":["albedoScaleAndCutoff",3,13]},"normalStrength":{"type":13,"value":[1]},"normalMap":{"value":"normal","type":28},"albedo":{"type":16,"value":[1,1,1,1]},"albedoMap":{"type":28,"value":"grey"},"albedoScaleAndCutoff":{"type":16,"value":[0,0,0,0.5]}}},{"phase":"forward-add","propertyIndex":0,"program":"util/dcc/imported-metallic-roughness|standard-vs|standard-fs","embeddedMacros":{"CC_FORWARD_ADD":true},"blendState":{"targets":[{"blend":true,"blendSrc":1,"blendDst":1,"blendSrcAlpha":0,"blendDstAlpha":1}]},"depthStencilState":{"depthFunc":2,"depthTest":true,"depthWrite":false}},{"phase":"shadow-caster","propertyIndex":0,"program":"util/dcc/imported-metallic-roughness|shadow-caster-vs|shadow-caster-fs","rasterizerState":{"cullMode":1},"properties":{"tilingOffset":{"type":16,"value":[1,1,0,0]},"mainColor":{"type":16,"value":[1,1,1,1],"handleInfo":["albedo",0,16]},"albedoScale":{"type":15,"value":[1,1,1],"handleInfo":["albedoScaleAndCutoff",0,15]},"alphaThreshold":{"type":13,"value":[0.5],"handleInfo":["albedoScaleAndCutoff",3,13]},"mainTexture":{"value":"grey","type":28,"handleInfo":["albedoMap",0,28]},"alphaSource":{"type":13,"value":[1]},"alphaSourceMap":{"value":"grey","type":28},"albedo":{"type":16,"value":[1,1,1,1]},"albedoScaleAndCutoff":{"type":16,"value":[1,1,1,0.5]},"albedoMap":{"type":28,"value":"grey"}}}]},{"name":"transparent","passes":[{"program":"util/dcc/imported-metallic-roughness|standard-vs|standard-fs","embeddedMacros":{"CC_FORCE_FORWARD_SHADING":true},"blendState":{"targets":[{"blend":true,"blendSrc":2,"blendDst":4,"blendDstAlpha":4}]},"depthStencilState":{"depthTest":true,"depthWrite":false},"properties":{"tilingOffset":{"type":16,"value":[1,1,0,0]},"mainColor":{"linear":true,"type":16,"value":[1,1,1,1],"handleInfo":["albedo",0,16]},"mainTexture":{"value":"grey","type":28,"handleInfo":["albedoMap",0,28]},"baseWeightMap":{"value":"grey","type":28},"albedoScale":{"type":13,"value":[1]},"roughness":{"type":13,"value":[1]},"roughnessMap":{"value":"grey","type":28},"metallic":{"type":13,"value":[1]},"metallicMap":{"value":"grey","type":28},"occlusion":{"type":13,"value":[0]},"occlusionMap":{"value":"white","type":28},"emissiveScale":{"type":13,"value":[1]},"emissiveScaleMap":{"value":"grey","type":28},"emissive":{"linear":true,"type":16,"value":[0,0,0,1]},"emissiveMap":{"value":"grey","type":28},"alphaSource":{"type":13,"value":[1]},"alphaSourceMap":{"value":"grey","type":28},"alphaThreshold":{"type":13,"value":[0.5],"handleInfo":["albedoScaleAndCutoff",3,13]},"normalStrength":{"type":13,"value":[1]},"normalMap":{"value":"normal","type":28},"albedo":{"type":16,"value":[1,1,1,1]},"albedoMap":{"type":28,"value":"grey"},"albedoScaleAndCutoff":{"type":16,"value":[0,0,0,0.5]}}},{"phase":"forward-add","propertyIndex":0,"program":"util/dcc/imported-metallic-roughness|standard-vs|standard-fs","embeddedMacros":{"CC_FORWARD_ADD":true},"blendState":{"targets":[{"blend":true,"blendSrc":1,"blendDst":1,"blendSrcAlpha":0,"blendDstAlpha":1}]},"depthStencilState":{"depthFunc":2,"depthTest":true,"depthWrite":false}},{"phase":"shadow-caster","propertyIndex":0,"program":"util/dcc/imported-metallic-roughness|shadow-caster-vs|shadow-caster-fs","rasterizerState":{"cullMode":1},"properties":{"tilingOffset":{"type":16,"value":[1,1,0,0]},"mainColor":{"type":16,"value":[1,1,1,1],"handleInfo":["albedo",0,16]},"albedoScale":{"type":15,"value":[1,1,1],"handleInfo":["albedoScaleAndCutoff",0,15]},"alphaThreshold":{"type":13,"value":[0.5],"handleInfo":["albedoScaleAndCutoff",3,13]},"mainTexture":{"value":"grey","type":28,"handleInfo":["albedoMap",0,28]},"alphaSource":{"type":13,"value":[1]},"alphaSourceMap":{"value":"grey","type":28},"albedo":{"type":16,"value":[1,1,1,1]},"albedoScaleAndCutoff":{"type":16,"value":[1,1,1,0.5]},"albedoMap":{"type":28,"value":"grey"}}}]}]]],0,0,[],[],[]],[[[44,"mat_skybox",[{"rasterizerState":{"cullMode":1},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{"USE_ALBEDO_MAP":true},{},{},{}],[[[{},"mainTexture",6,0],{},{},{}],11,0,0,0]]],0,0,[0,0],[13,11],[194,38]],[[[54,"mat_level_lightray_purple",1,[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{"USE_INSTANCING":true,"USE_TEXTURE":true,"ALPHA_TEST_CHANNEL":"r"}],[[[{"alphaThreshold":0.536},"mainColor",8,[4,2531267529],"mainTexture",6,0]],11]]],0,0,[0,0],[13,11],[77,51]],[[[54,"Glass",1,[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{"DCC_APP_NAME":5},{},{}],[[[{"albedoScale":0.800000011920929,"shininessExponent":6.311790938168236},"mainColor",8,[4,1946157055],"specularColor",8,[4,4290559164],"mainTexture",6,0],{},{}],11,0,0]]],0,0,[0,0],[13,11],[111,47]],[[{"name":"img_wipeout_3","rect":{"x":0,"y":0,"width":859,"height":594},"offset":{"x":0,"y":0},"originalSize":{"width":859,"height":594},"rotated":false,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[-429.5,-297,0,429.5,-297,0,-429.5,297,0,429.5,297,0],"indexes":[0,1,2,2,1,3],"uv":[0,594,859,594,0,0,859,0],"nuv":[0,0,1,0,0,1,1,1],"minPos":{"x":-429.5,"y":-297,"z":0},"maxPos":{"x":429.5,"y":297,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[10],[195]],[[{"name":"ESR_RECORDING_CONTENT_BOX_A","rect":{"x":0,"y":0,"width":1242,"height":654},"offset":{"x":0,"y":0},"originalSize":{"width":1242,"height":654},"rotated":false,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[-621,-327,0,621,-327,0,-621,327,0,621,327,0],"indexes":[0,1,2,2,1,3],"uv":[0,654,1242,654,0,0,1242,0],"nuv":[0,0,1,0,0,1,1,1],"minPos":{"x":-621,"y":-327,"z":0},"maxPos":{"x":621,"y":327,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[10],[196]],[[[44,"StageRunner_Texture_Atlas",[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{"USE_INSTANCING":true,"USE_ALBEDO_MAP":true,"USE_EMISSIVE_MAP":true},{},{},{}],[[[{"specularIntensity":0},"emissive",8,[4,4294967295],"mainTexture",6,0,"emissiveMap",6,1],{},{},{}],11,0,0,0]]],0,0,[0,0,0],[13,16,11],[112,113,38]],[[[155,"../bundleResource/materials/shaders/ScrollingUV",[{"hash":1344482667,"name":"../bundleResource/materials/shaders/ScrollingUV|unlit-vs:vert|unlit-fs:frag","blocks":[{"name":"TexCoords","stageFlags":1,"binding":0,"members":[{"name":"tilingOffset","type":16,"count":1}],"defines":["USE_TEXTURE"]},{"name":"Constant","stageFlags":16,"binding":1,"members":[{"name":"mainColor","type":16,"count":1},{"name":"colorScaleAndCutoff","type":16,"count":1},{"name":"timeOffset","type":13,"count":1}],"defines":[]}],"samplerTextures":[{"name":"mainTexture","type":28,"count":1,"stageFlags":16,"binding":2,"defines":["USE_TEXTURE"]},{"name":"alphaTexture","type":28,"count":1,"stageFlags":16,"binding":3,"defines":["USE_TEXTURE"]}],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[],"attributes":[{"name":"a_position","format":32,"location":0,"defines":[]},{"name":"a_normal","format":32,"location":1,"defines":[]},{"name":"a_texCoord","format":21,"location":2,"defines":[]},{"name":"a_tangent","format":44,"location":3,"defines":[]},{"name":"a_joints","location":4,"defines":["CC_USE_SKINNING"]},{"name":"a_weights","format":44,"location":5,"defines":["CC_USE_SKINNING"]},{"name":"a_jointAnimInfo","format":44,"isInstanced":true,"location":6,"defines":["USE_INSTANCING","CC_USE_BAKED_ANIMATION"]},{"name":"a_matWorld0","format":44,"isInstanced":true,"location":7,"defines":["USE_INSTANCING"]},{"name":"a_matWorld1","format":44,"isInstanced":true,"location":8,"defines":["USE_INSTANCING"]},{"name":"a_matWorld2","format":44,"isInstanced":true,"location":9,"defines":["USE_INSTANCING"]},{"name":"a_lightingMapUVParam","format":44,"isInstanced":true,"location":10,"defines":["USE_INSTANCING","CC_USE_LIGHTMAP"]},{"name":"a_localShadowBiasAndProbeId","format":44,"isInstanced":true,"location":11,"defines":["USE_INSTANCING"]},{"name":"a_sh_linear_const_r","format":44,"isInstanced":true,"location":12,"defines":["USE_INSTANCING","CC_USE_LIGHT_PROBE"]},{"name":"a_sh_linear_const_g","format":44,"isInstanced":true,"location":13,"defines":["USE_INSTANCING","CC_USE_LIGHT_PROBE"]},{"name":"a_sh_linear_const_b","format":44,"isInstanced":true,"location":14,"defines":["USE_INSTANCING","CC_USE_LIGHT_PROBE"]},{"name":"a_vertexId","format":11,"location":15,"defines":["CC_USE_MORPH"]}],"fragColors":[{"name":"cc_FragColor","typename":"vec4","type":16,"count":1,"stageFlags":16,"location":0,"defines":[]}],"descriptors":[{"rate":0,"blocks":[{"name":"CCMorph","stageFlags":1,"tags":{"builtin":"local"},"members":[{"name":"cc_displacementWeights","typename":"vec4","type":16,"count":15,"isArray":true},{"name":"cc_displacementTextureInfo","typename":"vec4","type":16,"count":1}],"defines":["CC_USE_MORPH"]},{"name":"CCSkinningTexture","stageFlags":1,"tags":{"builtin":"local"},"members":[{"name":"cc_jointTextureInfo","typename":"vec4","type":16,"count":1,"precision":"highp "}],"defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"CCSkinningAnimation","stageFlags":1,"tags":{"builtin":"local"},"members":[{"name":"cc_jointAnimInfo","typename":"vec4","type":16,"count":1,"precision":"highp "}],"defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"CCSkinning","stageFlags":1,"tags":{"builtin":"local"},"members":[{"name":"cc_joints","typename":"vec4","type":16,"count":0,"precision":"highp ","isArray":true}],"defines":["CC_USE_SKINNING","!CC_USE_BAKED_ANIMATION","!CC_USE_REAL_TIME_JOINT_TEXTURE"]},{"name":"CCLocal","stageFlags":1,"tags":{"builtin":"local"},"members":[{"name":"cc_matWorld","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matWorldIT","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_lightingMapUVParam","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_localShadowBias","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_reflectionProbeData1","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_reflectionProbeData2","typename":"vec4","type":16,"count":1,"precision":"highp "}],"defines":["!USE_INSTANCING"]}],"samplerTextures":[{"name":"cc_PositionDisplacements","typename":"sampler2D","type":28,"count":1,"stageFlags":1,"tags":{"builtin":"local"},"defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_POSITION"]},{"name":"cc_NormalDisplacements","typename":"sampler2D","type":28,"count":1,"stageFlags":1,"tags":{"builtin":"local"},"defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_NORMAL"]},{"name":"cc_TangentDisplacements","typename":"sampler2D","type":28,"count":1,"stageFlags":1,"tags":{"builtin":"local"},"defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_TANGENT"]},{"name":"cc_jointTexture","typename":"sampler2D","type":28,"count":1,"precision":"highp ","stageFlags":1,"tags":{"builtin":"local"},"defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"cc_realtimeJoint","typename":"sampler2D","type":28,"count":1,"precision":"highp ","stageFlags":1,"tags":{"builtin":"local"},"defines":["CC_USE_SKINNING","!CC_USE_BAKED_ANIMATION","CC_USE_REAL_TIME_JOINT_TEXTURE"]}],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[]},{"rate":1,"blocks":[{"name":"TexCoords","stageFlags":1,"binding":0,"members":[{"name":"tilingOffset","type":16,"count":1}],"defines":["USE_TEXTURE"]},{"name":"Constant","stageFlags":16,"binding":1,"members":[{"name":"mainColor","type":16,"count":1},{"name":"colorScaleAndCutoff","type":16,"count":1},{"name":"timeOffset","type":13,"count":1}],"defines":[]}],"samplerTextures":[{"name":"mainTexture","type":28,"count":1,"stageFlags":16,"binding":2,"defines":["USE_TEXTURE"]},{"name":"alphaTexture","type":28,"count":1,"stageFlags":16,"binding":3,"defines":["USE_TEXTURE"]}],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[]},{"rate":2,"blocks":[],"samplerTextures":[],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[]},{"rate":3,"blocks":[{"name":"CCGlobal","stageFlags":17,"tags":{"builtin":"global"},"members":[{"name":"cc_time","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_screenSize","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_nativeSize","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_probeInfo","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_debug_view_mode","typename":"vec4","type":16,"count":1,"precision":"mediump "}],"defines":[]},{"name":"CCCamera","stageFlags":17,"tags":{"builtin":"global"},"members":[{"name":"cc_matView","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matViewInv","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matProj","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matProjInv","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matViewProj","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matViewProjInv","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_cameraPos","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_surfaceTransform","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_screenScale","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_exposure","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_mainLitDir","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_mainLitColor","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_ambientSky","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_ambientGround","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_fogColor","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_fogBase","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_fogAdd","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_nearFar","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_viewPort","typename":"vec4","type":16,"count":1,"precision":"mediump "}],"defines":[]}],"samplerTextures":[],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[]}],"glsl3":{"vert":"\nprecision highp float;\n#define QUATER_PI         0.78539816340\n#define HALF_PI           1.57079632679\n#define PI                3.14159265359\n#define PI2               6.28318530718\n#define PI4               12.5663706144\n#define INV_QUATER_PI     1.27323954474\n#define INV_HALF_PI       0.63661977237\n#define INV_PI            0.31830988618\n#define INV_PI2           0.15915494309\n#define INV_PI4           0.07957747155\n#define EPSILON           1e-6\n#define EPSILON_LOWP      1e-4\n#define LOG2              1.442695\n#define EXP_VALUE         2.71828183f\n#define FP_MAX            65504.0\n#define FP_SCALE          0.0009765625\n#define FP_SCALE_INV      1024.0\n#define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\n#define LIGHT_MAP_TYPE_DISABLED 0\n#define LIGHT_MAP_TYPE_ALL_IN_ONE 1\n#define LIGHT_MAP_TYPE_INDIRECT_OCCLUSION 2\n#define REFLECTION_PROBE_TYPE_NONE 0\n#define REFLECTION_PROBE_TYPE_CUBE 1\n#define REFLECTION_PROBE_TYPE_PLANAR 2\n#define LIGHT_TYPE_DIRECTIONAL 0.0\n#define LIGHT_TYPE_POINT 1.0\n#define LIGHT_TYPE_SPOT 2.0\n#define LIGHT_TYPE_SPHERE 3.0\n#define LIGHT_TYPE_RANGED_DIRECTIONAL 4.0\n#define IS_DIRECTIONAL_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_DIRECTIONAL)) < EPSILON_LOWP)\n#define IS_SPHERE_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_SPHERE)) < EPSILON_LOWP)\n#define IS_SPOT_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_SPOT)) < EPSILON_LOWP)\n#define IS_POINT_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_POINT)) < EPSILON_LOWP)\n#define IS_RANGED_DIRECTIONAL_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_RANGED_DIRECTIONAL)) < EPSILON_LOWP)\nstruct StandardVertInput {\n  highp vec4 position;\n  vec3 normal;\n  vec4 tangent;\n};\nin vec3 a_position;\nin vec3 a_normal;\nin vec2 a_texCoord;\nin vec4 a_tangent;\n#if CC_USE_SKINNING\n    in vec4 a_joints;\n  in vec4 a_weights;\n#endif\n#if USE_INSTANCING\n  #if CC_USE_BAKED_ANIMATION\n    in highp vec4 a_jointAnimInfo;\n  #endif\n  in vec4 a_matWorld0;\n  in vec4 a_matWorld1;\n  in vec4 a_matWorld2;\n  #if CC_USE_LIGHTMAP\n    in vec4 a_lightingMapUVParam;\n  #endif\n  #if CC_USE_REFLECTION_PROBE || CC_RECEIVE_SHADOW\n    #if CC_RECEIVE_SHADOW\n    #endif\n    in vec4 a_localShadowBiasAndProbeId;\n  #endif\n  #if CC_USE_LIGHT_PROBE\n    in vec4 a_sh_linear_const_r;\n    in vec4 a_sh_linear_const_g;\n    in vec4 a_sh_linear_const_b;\n  #endif\n#endif\n#if CC_USE_MORPH\n    in float a_vertexId;\n    int getVertexId() {\n      return int(a_vertexId);\n    }\n#endif\nhighp float decode32 (highp vec4 rgba) {\n  rgba = rgba * 255.0;\n  highp float Sign = 1.0 - (step(128.0, (rgba[3]) + 0.5)) * 2.0;\n  highp float Exponent = 2.0 * (mod(float(int((rgba[3]) + 0.5)), 128.0)) + (step(128.0, (rgba[2]) + 0.5)) - 127.0;\n  highp float Mantissa = (mod(float(int((rgba[2]) + 0.5)), 128.0)) * 65536.0 + rgba[1] * 256.0 + rgba[0] + 8388608.0;\n  return Sign * exp2(Exponent - 23.0) * Mantissa;\n}\n#if CC_USE_MORPH\n  layout(std140) uniform CCMorph {\n    vec4 cc_displacementWeights[15];\n    vec4 cc_displacementTextureInfo;\n  };\n  #if CC_MORPH_TARGET_HAS_POSITION\n    uniform sampler2D cc_PositionDisplacements;\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    uniform sampler2D cc_NormalDisplacements;\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    uniform sampler2D cc_TangentDisplacements;\n  #endif\n  vec2 getPixelLocation(vec2 textureResolution, int pixelIndex) {\n    float pixelIndexF = float(pixelIndex);\n    float x = mod(pixelIndexF, textureResolution.x);\n    float y = floor(pixelIndexF / textureResolution.x);\n    return vec2(x, y);\n  }\n  vec2 getPixelCoordFromLocation(vec2 location, vec2 textureResolution) {\n    return (vec2(location.x, location.y) + .5) / textureResolution;\n  }\n  #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      vec4 fetchVec3ArrayFromTexture(sampler2D tex, int pixelIndex) {\n        ivec2 texSize = textureSize(tex, 0);\n        return texelFetch(tex, ivec2(pixelIndex % texSize.x, pixelIndex / texSize.x), 0);\n      }\n  #else\n    vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n      int pixelIndex = elementIndex * 4;\n      vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n      vec2 x = getPixelCoordFromLocation(location + vec2(0.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 y = getPixelCoordFromLocation(location + vec2(1.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 z = getPixelCoordFromLocation(location + vec2(2.0, 0.0), cc_displacementTextureInfo.xy);\n      return vec4(\n        decode32(texture(tex, x)),\n        decode32(texture(tex, y)),\n        decode32(texture(tex, z)),\n        1.0\n      );\n    }\n  #endif\n  float getDisplacementWeight(int index) {\n    int quot = index / 4;\n    int remainder = index - quot * 4;\n    if (remainder == 0) {\n      return cc_displacementWeights[quot].x;\n    } else if (remainder == 1) {\n      return cc_displacementWeights[quot].y;\n    } else if (remainder == 2) {\n      return cc_displacementWeights[quot].z;\n    } else {\n      return cc_displacementWeights[quot].w;\n    }\n  }\n  vec3 getVec3DisplacementFromTexture(sampler2D tex, int vertexIndex) {\n  #if CC_MORPH_PRECOMPUTED\n    return fetchVec3ArrayFromTexture(tex, vertexIndex).rgb;\n  #else\n    vec3 result = vec3(0, 0, 0);\n    int nVertices = int(cc_displacementTextureInfo.z);\n    for (int iTarget = 0; iTarget < CC_MORPH_TARGET_COUNT; ++iTarget) {\n      result += (fetchVec3ArrayFromTexture(tex, nVertices * iTarget + vertexIndex).rgb * getDisplacementWeight(iTarget));\n    }\n    return result;\n  #endif\n  }\n  #if CC_MORPH_TARGET_HAS_POSITION\n  vec3 getPositionDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_PositionDisplacements, vertexId);\n  }\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n  vec3 getNormalDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_NormalDisplacements, vertexId);\n  }\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n  vec3 getTangentDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_TangentDisplacements, vertexId);\n  }\n  #endif\n  void applyMorph (inout vec4 position, inout vec3 normal, inout vec4 tangent) {\n    int vertexId = getVertexId();\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    normal.xyz = normal.xyz + getNormalDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    tangent.xyz = tangent.xyz + getTangentDisplacement(vertexId);\n  #endif\n  }\n  void applyMorph (inout vec4 position) {\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(getVertexId());\n  #endif\n  }\n#endif\n#if CC_USE_SKINNING\n  #if CC_USE_BAKED_ANIMATION\n    layout(std140) uniform CCSkinningTexture {\n      highp vec4 cc_jointTextureInfo;\n    };\n    layout(std140) uniform CCSkinningAnimation {\n      highp vec4 cc_jointAnimInfo;\n    };\n    uniform highp sampler2D cc_jointTexture;\n    void CCGetJointTextureCoords(float pixelsPerJoint, float jointIdx, out highp float x, out highp float y, out highp float invSize)\n    {\n      #if USE_INSTANCING\n        highp float temp = pixelsPerJoint * (a_jointAnimInfo.x * a_jointAnimInfo.y + jointIdx) + a_jointAnimInfo.z;\n      #else\n        highp float temp = pixelsPerJoint * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + jointIdx) + cc_jointTextureInfo.z;\n      #endif\n      invSize = cc_jointTextureInfo.w;\n      highp float tempY = floor(temp * invSize);\n      x = floor(temp - tempY * cc_jointTextureInfo.x);\n      y = (tempY + 0.5) * invSize;\n    }\n  #else\n    #if CC_USE_REAL_TIME_JOINT_TEXTURE\n      uniform highp sampler2D cc_realtimeJoint;\n    #else\n      layout(std140) uniform CCSkinning {\n        highp vec4 cc_joints[CC_JOINT_UNIFORM_CAPACITY * 3];\n      };\n    #endif\n  #endif\n  #if CC_USE_BAKED_ANIMATION\n    #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      mat4 getJointMatrix (float i) {\n        highp float x, y, invSize;\n        CCGetJointTextureCoords(3.0, i, x, y, invSize);\n        vec4 v1 = texture(cc_jointTexture, vec2((x + 0.5) * invSize, y));\n        vec4 v2 = texture(cc_jointTexture, vec2((x + 1.5) * invSize, y));\n        vec4 v3 = texture(cc_jointTexture, vec2((x + 2.5) * invSize, y));\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #else\n      mat4 getJointMatrix (float i) {\n        highp float x, y, invSize;\n        CCGetJointTextureCoords(12.0, i, x, y, invSize);\n        vec4 v1 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 0.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 1.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 2.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 3.5) * invSize, y)))\n        );\n        vec4 v2 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 4.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 5.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 6.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 7.5) * invSize, y)))\n        );\n        vec4 v3 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 8.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 9.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 10.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 11.5) * invSize, y)))\n        );\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #else\n    #if CC_USE_REAL_TIME_JOINT_TEXTURE\n      #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n        mat4 getJointMatrix (float i) {\n          float x = i;\n          vec4 v1 = texture(cc_realtimeJoint, vec2( x / 256.0, 0.5 / 3.0));\n          vec4 v2 = texture(cc_realtimeJoint, vec2( x / 256.0, 1.5 / 3.0));\n          vec4 v3 = texture(cc_realtimeJoint, vec2( x / 256.0, 2.5 / 3.0));\n          return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n        }\n      #else\n        mat4 getJointMatrix (float i) {\n         float x = 4.0 * i;\n          vec4 v1 = vec4(\n            decode32(texture(cc_realtimeJoint, vec2((x + 0.5)/ 1024.0, 0.5 / 3.0))),\n            decode32(texture(cc_realtimeJoint, vec2((x + 1.5)/ 1024.0, 0.5 / 3.0))),\n            decode32(texture(cc_realtimeJoint, vec2((x + 2.5)/ 1024.0, 0.5 / 3.0))),\n            decode32(texture(cc_realtimeJoint, vec2((x + 3.5)/ 1024.0, 0.5 / 3.0)))\n          );\n          vec4 v2 = vec4(\n            decode32(texture(cc_realtimeJoint, vec2((x + 0.5)/ 1024.0, 1.5 / 3.0))),\n            decode32(texture(cc_realtimeJoint, vec2((x + 1.5)/ 1024.0, 1.5 / 3.0))),\n            decode32(texture(cc_realtimeJoint, vec2((x + 2.5)/ 1024.0, 1.5 / 3.0))),\n            decode32(texture(cc_realtimeJoint, vec2((x + 3.5)/ 1024.0, 1.5 / 3.0)))\n          );\n          vec4 v3 = vec4(\n            decode32(texture(cc_realtimeJoint, vec2((x + 0.5)/ 1024.0, 2.5 / 3.0))),\n            decode32(texture(cc_realtimeJoint, vec2((x + 1.5)/ 1024.0, 2.5 / 3.0))),\n            decode32(texture(cc_realtimeJoint, vec2((x + 2.5)/ 1024.0, 2.5 / 3.0))),\n            decode32(texture(cc_realtimeJoint, vec2((x + 3.5)/ 1024.0, 2.5 / 3.0)))\n          );\n          return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n        }\n      #endif\n    #else\n      mat4 getJointMatrix (float i) {\n        int idx = int(i);\n        vec4 v1 = cc_joints[idx * 3];\n        vec4 v2 = cc_joints[idx * 3 + 1];\n        vec4 v3 = cc_joints[idx * 3 + 2];\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #endif\n  mat4 skinMatrix () {\n    vec4 joints = vec4(a_joints);\n    return getJointMatrix(joints.x) * a_weights.x\n         + getJointMatrix(joints.y) * a_weights.y\n         + getJointMatrix(joints.z) * a_weights.z\n         + getJointMatrix(joints.w) * a_weights.w;\n  }\n  void CCSkin (inout vec4 position) {\n    mat4 m = skinMatrix();\n    position = m * position;\n  }\n  void CCSkin (inout vec4 position, inout vec3 normal, inout vec4 tangent) {\n    mat4 m = skinMatrix();\n    position = m * position;\n    normal = (m * vec4(normal, 0.0)).xyz;\n    tangent.xyz = (m * vec4(tangent.xyz, 0.0)).xyz;\n  }\n#endif\nvoid CCVertInput(inout vec4 In)\n{\n    In = vec4(a_position, 1.0);\n  #if CC_USE_MORPH\n    applyMorph(In);\n  #endif\n  #if CC_USE_SKINNING\n    CCSkin(In);\n  #endif\n}\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n  mediump vec4 cc_probeInfo;\n  mediump vec4 cc_debug_view_mode;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_surfaceTransform;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\n#if !USE_INSTANCING\n  layout(std140) uniform CCLocal {\n    highp mat4 cc_matWorld;\n    highp mat4 cc_matWorldIT;\n    highp vec4 cc_lightingMapUVParam;\n    highp vec4 cc_localShadowBias;\n    highp vec4 cc_reflectionProbeData1;\n    highp vec4 cc_reflectionProbeData2;\n  };\n#endif\nvoid CCGetWorldMatrix(out mat4 matWorld)\n{\n  #if USE_INSTANCING\n    matWorld = mat4(\n      vec4(a_matWorld0.xyz, 0.0),\n      vec4(a_matWorld1.xyz, 0.0),\n      vec4(a_matWorld2.xyz, 0.0),\n      vec4(a_matWorld0.w, a_matWorld1.w, a_matWorld2.w, 1.0)\n    );\n  #else\n    matWorld = cc_matWorld;\n  #endif\n}\n#if CC_USE_FOG != 4\n  float LinearFog(vec4 pos, vec3 cameraPos, float fogStart, float fogEnd) {\n      vec4 wPos = pos;\n      float cam_dis = distance(cameraPos, wPos.xyz);\n      return clamp((fogEnd - cam_dis) / (fogEnd - fogStart), 0., 1.);\n  }\n  float ExpFog(vec4 pos, vec3 cameraPos, float fogStart, float fogDensity, float fogAtten) {\n      vec4 wPos = pos;\n      float cam_dis = max(distance(cameraPos, wPos.xyz) - fogStart, 0.0) / fogAtten * 4.;\n      float f = exp(-cam_dis * fogDensity);\n      return f;\n  }\n  float ExpSquaredFog(vec4 pos, vec3 cameraPos, float fogStart, float fogDensity, float fogAtten) {\n      vec4 wPos = pos;\n      float cam_dis = max(distance(cameraPos, wPos.xyz) - fogStart, 0.0) / fogAtten * 4.;\n      float f = exp(-cam_dis * cam_dis * fogDensity * fogDensity);\n      return f;\n  }\n  float LayeredFog(vec4 pos, vec3 cameraPos, float fogTop, float fogRange, float fogAtten) {\n      vec4 wPos = pos;\n      vec3 camWorldProj = cameraPos.xyz;\n      camWorldProj.y = 0.;\n      vec3 worldPosProj = wPos.xyz;\n      worldPosProj.y = 0.;\n      float fDeltaD = distance(worldPosProj, camWorldProj) / fogAtten * 2.0;\n      float fDeltaY, fDensityIntegral;\n      if (cameraPos.y > fogTop) {\n          if (wPos.y < fogTop) {\n              fDeltaY = (fogTop - wPos.y) / fogRange * 2.0;\n              fDensityIntegral = fDeltaY * fDeltaY * 0.5;\n          }\n          else {\n              fDeltaY = 0.;\n              fDensityIntegral = 0.;\n          }\n      }\n      else {\n          if (wPos.y < fogTop) {\n              float fDeltaA = (fogTop - cameraPos.y) / fogRange * 2.;\n              float fDeltaB = (fogTop - wPos.y) / fogRange * 2.;\n              fDeltaY = abs(fDeltaA - fDeltaB);\n              fDensityIntegral = abs((fDeltaA * fDeltaA * 0.5) - (fDeltaB * fDeltaB * 0.5));\n          }\n          else {\n              fDeltaY = abs(fogTop - cameraPos.y) / fogRange * 2.;\n              fDensityIntegral = abs(fDeltaY * fDeltaY * 0.5);\n          }\n      }\n      float fDensity;\n      if (fDeltaY != 0.) {\n          fDensity = (sqrt(1.0 + ((fDeltaD / fDeltaY) * (fDeltaD / fDeltaY)))) * fDensityIntegral;\n      }\n      else {\n          fDensity = 0.;\n      }\n      float f = exp(-fDensity);\n      return f;\n  }\n#endif\nvoid CC_TRANSFER_FOG_BASE(vec4 pos, out float factor)\n{\n#if CC_USE_FOG == 0\n\tfactor = LinearFog(pos, cc_cameraPos.xyz, cc_fogBase.x, cc_fogBase.y);\n#elif CC_USE_FOG == 1\n\tfactor = ExpFog(pos, cc_cameraPos.xyz, cc_fogBase.x, cc_fogBase.z, cc_fogAdd.z);\n#elif CC_USE_FOG == 2\n\tfactor = ExpSquaredFog(pos, cc_cameraPos.xyz, cc_fogBase.x, cc_fogBase.z, cc_fogAdd.z);\n#elif CC_USE_FOG == 3\n\tfactor = LayeredFog(pos, cc_cameraPos.xyz, cc_fogAdd.x, cc_fogAdd.y, cc_fogAdd.z);\n#else\n\tfactor = 1.0;\n#endif\n}\n#if !CC_USE_ACCURATE_FOG\nout mediump float v_fog_factor;\n#endif\nvoid CC_TRANSFER_FOG(vec4 pos) {\n#if !CC_USE_ACCURATE_FOG\n    CC_TRANSFER_FOG_BASE(pos, v_fog_factor);\n#endif\n}\n#if USE_TEXTURE\n  out vec2 v_uv;\n  layout(std140) uniform TexCoords {\n    vec4 tilingOffset;\n  };\n#endif\nvec4 vert () {\n  vec4 position;\n  CCVertInput(position);\n  mat4 matWorld;\n  CCGetWorldMatrix(matWorld);\n  #if USE_TEXTURE\n    v_uv = a_texCoord;\n    #if SAMPLE_FROM_RT\n      v_uv = cc_cameraPos.w > 1.0 ? vec2(v_uv.x, 1.0 - v_uv.y) : v_uv;\n    #endif\n  #endif\n  CC_TRANSFER_FOG(matWorld * position);\n  return cc_matProj * (cc_matView * matWorld) * position;\n}\nvoid main() { gl_Position = vert(); }","frag":"\nprecision highp float;\nvec3 ACESToneMap (vec3 color) {\n  color = min(color, vec3(8.0));\n  const float A = 2.51;\n  const float B = 0.03;\n  const float C = 2.43;\n  const float D = 0.59;\n  const float E = 0.14;\n  return (color * (A * color + B)) / (color * (C * color + D) + E);\n}\n#define CC_SURFACES_DEBUG_VIEW_VERTEX_COLOR 1\n#define CC_SURFACES_DEBUG_VIEW_VERTEX_NORMAL CC_SURFACES_DEBUG_VIEW_VERTEX_COLOR + 1\n#define CC_SURFACES_DEBUG_VIEW_VERTEX_TANGENT CC_SURFACES_DEBUG_VIEW_VERTEX_NORMAL + 1\n#define CC_SURFACES_DEBUG_VIEW_WORLD_POS CC_SURFACES_DEBUG_VIEW_VERTEX_TANGENT + 1\n#define CC_SURFACES_DEBUG_VIEW_VERTEX_MIRROR CC_SURFACES_DEBUG_VIEW_WORLD_POS + 1\n#define CC_SURFACES_DEBUG_VIEW_FACE_SIDE CC_SURFACES_DEBUG_VIEW_VERTEX_MIRROR + 1\n#define CC_SURFACES_DEBUG_VIEW_UV0 CC_SURFACES_DEBUG_VIEW_FACE_SIDE + 1\n#define CC_SURFACES_DEBUG_VIEW_UV1 CC_SURFACES_DEBUG_VIEW_UV0 + 1\n#define CC_SURFACES_DEBUG_VIEW_UVLIGHTMAP CC_SURFACES_DEBUG_VIEW_UV1 + 1\n#define CC_SURFACES_DEBUG_VIEW_PROJ_DEPTH CC_SURFACES_DEBUG_VIEW_UVLIGHTMAP + 1\n#define CC_SURFACES_DEBUG_VIEW_LINEAR_DEPTH CC_SURFACES_DEBUG_VIEW_PROJ_DEPTH + 1\n#define CC_SURFACES_DEBUG_VIEW_FRAGMENT_NORMAL CC_SURFACES_DEBUG_VIEW_LINEAR_DEPTH + 1\n#define CC_SURFACES_DEBUG_VIEW_FRAGMENT_TANGENT CC_SURFACES_DEBUG_VIEW_FRAGMENT_NORMAL + 1\n#define CC_SURFACES_DEBUG_VIEW_FRAGMENT_BINORMAL CC_SURFACES_DEBUG_VIEW_FRAGMENT_TANGENT + 1\n#define CC_SURFACES_DEBUG_VIEW_BASE_COLOR CC_SURFACES_DEBUG_VIEW_FRAGMENT_BINORMAL + 1\n#define CC_SURFACES_DEBUG_VIEW_DIFFUSE_COLOR CC_SURFACES_DEBUG_VIEW_BASE_COLOR + 1\n#define CC_SURFACES_DEBUG_VIEW_SPECULAR_COLOR CC_SURFACES_DEBUG_VIEW_DIFFUSE_COLOR + 1\n#define CC_SURFACES_DEBUG_VIEW_TRANSPARENCY CC_SURFACES_DEBUG_VIEW_SPECULAR_COLOR + 1\n#define CC_SURFACES_DEBUG_VIEW_METALLIC CC_SURFACES_DEBUG_VIEW_TRANSPARENCY + 1\n#define CC_SURFACES_DEBUG_VIEW_ROUGHNESS CC_SURFACES_DEBUG_VIEW_METALLIC + 1\n#define CC_SURFACES_DEBUG_VIEW_SPECULAR_INTENSITY CC_SURFACES_DEBUG_VIEW_ROUGHNESS + 1\n#define CC_SURFACES_DEBUG_VIEW_IOR CC_SURFACES_DEBUG_VIEW_SPECULAR_INTENSITY + 1\n#define CC_SURFACES_DEBUG_VIEW_DIRECT_DIFFUSE CC_SURFACES_DEBUG_VIEW_IOR + 1\n#define CC_SURFACES_DEBUG_VIEW_DIRECT_SPECULAR CC_SURFACES_DEBUG_VIEW_DIRECT_DIFFUSE + 1\n#define CC_SURFACES_DEBUG_VIEW_DIRECT_ALL CC_SURFACES_DEBUG_VIEW_DIRECT_SPECULAR + 1\n#define CC_SURFACES_DEBUG_VIEW_ENV_DIFFUSE CC_SURFACES_DEBUG_VIEW_DIRECT_ALL + 1\n#define CC_SURFACES_DEBUG_VIEW_ENV_SPECULAR CC_SURFACES_DEBUG_VIEW_ENV_DIFFUSE + 1\n#define CC_SURFACES_DEBUG_VIEW_ENV_ALL CC_SURFACES_DEBUG_VIEW_ENV_SPECULAR + 1\n#define CC_SURFACES_DEBUG_VIEW_EMISSIVE CC_SURFACES_DEBUG_VIEW_ENV_ALL + 1\n#define CC_SURFACES_DEBUG_VIEW_LIGHT_MAP CC_SURFACES_DEBUG_VIEW_EMISSIVE + 1\n#define CC_SURFACES_DEBUG_VIEW_SHADOW CC_SURFACES_DEBUG_VIEW_LIGHT_MAP + 1\n#define CC_SURFACES_DEBUG_VIEW_AO CC_SURFACES_DEBUG_VIEW_SHADOW + 1\n#define CC_SURFACES_DEBUG_VIEW_FRESNEL CC_SURFACES_DEBUG_VIEW_AO + 1\n#define CC_SURFACES_DEBUG_VIEW_TRANSMIT_DIRECT_DIFFUSE CC_SURFACES_DEBUG_VIEW_FRESNEL + 1\n#define CC_SURFACES_DEBUG_VIEW_TRANSMIT_DIRECT_SPECULAR CC_SURFACES_DEBUG_VIEW_TRANSMIT_DIRECT_DIFFUSE + 1\n#define CC_SURFACES_DEBUG_VIEW_TRANSMIT_ENV_DIFFUSE CC_SURFACES_DEBUG_VIEW_TRANSMIT_DIRECT_SPECULAR + 1\n#define CC_SURFACES_DEBUG_VIEW_TRANSMIT_ENV_SPECULAR CC_SURFACES_DEBUG_VIEW_TRANSMIT_ENV_DIFFUSE + 1\n#define CC_SURFACES_DEBUG_VIEW_TRANSMIT_ALL CC_SURFACES_DEBUG_VIEW_TRANSMIT_ENV_SPECULAR + 1\n#define CC_SURFACES_DEBUG_VIEW_TRT_DIRECT CC_SURFACES_DEBUG_VIEW_TRANSMIT_ALL + 1\n#define CC_SURFACES_DEBUG_VIEW_TRT_ENVIRONMENT CC_SURFACES_DEBUG_VIEW_TRT_DIRECT + 1\n#define CC_SURFACES_DEBUG_VIEW_TRT_ALL CC_SURFACES_DEBUG_VIEW_TRT_ENVIRONMENT + 1\n#define CC_SURFACES_DEBUG_VIEW_FOG CC_SURFACES_DEBUG_VIEW_TRT_ALL + 1\n#define CC_SURFACES_DEBUG_VIEW_SINGLE 1\n#define CC_SURFACES_DEBUG_VIEW_COMPOSITE_AND_MISC 2\n#define IS_DEBUG_VIEW_ENABLE_WITH_CAMERA (cc_surfaceTransform.y != 3.0)\n#define IS_DEBUG_VIEW_LIGHTING_ENABLE_WITH_ALBEDO (UnpackBitFromFloat(cc_debug_view_mode.w, 6) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_MISC_ENABLE_CSM_LAYER_COLORATION (UnpackBitFromFloat(cc_debug_view_mode.w, 7) && IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_DIRECT_DIFFUSE (UnpackBitFromFloat(cc_debug_view_mode.y, 0) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_DIRECT_SPECULAR (UnpackBitFromFloat(cc_debug_view_mode.y, 1) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_ENV_DIFFUSE (UnpackBitFromFloat(cc_debug_view_mode.y, 2) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_ENV_SPECULAR (UnpackBitFromFloat(cc_debug_view_mode.y, 3) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_EMISSIVE (UnpackBitFromFloat(cc_debug_view_mode.y, 4) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_LIGHT_MAP (UnpackBitFromFloat(cc_debug_view_mode.y, 5) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_SHADOW (UnpackBitFromFloat(cc_debug_view_mode.y, 6) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_AO (UnpackBitFromFloat(cc_debug_view_mode.y, 7) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_NORMAL_MAP (UnpackBitFromFloat(cc_debug_view_mode.z, 0) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_FOG (UnpackBitFromFloat(cc_debug_view_mode.z, 1) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_TONE_MAPPING (UnpackBitFromFloat(cc_debug_view_mode.z, 2) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_GAMMA_CORRECTION (UnpackBitFromFloat(cc_debug_view_mode.z, 3) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_FRESNEL (UnpackBitFromFloat(cc_debug_view_mode.z, 4) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_TRANSMIT_DIFFUSE (UnpackBitFromFloat(cc_debug_view_mode.z, 5) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_TRANSMIT_SPECULAR (UnpackBitFromFloat(cc_debug_view_mode.z, 6) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_TRT (UnpackBitFromFloat(cc_debug_view_mode.z, 7) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_TT (UnpackBitFromFloat(cc_debug_view_mode.w, 0) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\nvec3 LinearToSRGB(vec3 linear) {\n#ifdef CC_USE_SURFACE_SHADER\n  #if CC_USE_DEBUG_VIEW == CC_SURFACES_DEBUG_VIEW_COMPOSITE_AND_MISC\n    if (!IS_DEBUG_VIEW_COMPOSITE_ENABLE_GAMMA_CORRECTION) {\n      return linear;\n    }\n  #endif\n#endif\n  return sqrt(linear);\n}\nvec4 CCFragOutput (vec4 color) {\n  #if !CC_USE_RGBE_OUTPUT\n    #if CC_USE_HDR\n      color.rgb = ACESToneMap(color.rgb);\n    #endif\n    color.rgb = LinearToSRGB(color.rgb);\n  #endif\n  return color;\n}\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n  mediump vec4 cc_probeInfo;\n  mediump vec4 cc_debug_view_mode;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_surfaceTransform;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\n#if CC_USE_FOG != 4\n  float LinearFog(vec4 pos, vec3 cameraPos, float fogStart, float fogEnd) {\n      vec4 wPos = pos;\n      float cam_dis = distance(cameraPos, wPos.xyz);\n      return clamp((fogEnd - cam_dis) / (fogEnd - fogStart), 0., 1.);\n  }\n  float ExpFog(vec4 pos, vec3 cameraPos, float fogStart, float fogDensity, float fogAtten) {\n      vec4 wPos = pos;\n      float cam_dis = max(distance(cameraPos, wPos.xyz) - fogStart, 0.0) / fogAtten * 4.;\n      float f = exp(-cam_dis * fogDensity);\n      return f;\n  }\n  float ExpSquaredFog(vec4 pos, vec3 cameraPos, float fogStart, float fogDensity, float fogAtten) {\n      vec4 wPos = pos;\n      float cam_dis = max(distance(cameraPos, wPos.xyz) - fogStart, 0.0) / fogAtten * 4.;\n      float f = exp(-cam_dis * cam_dis * fogDensity * fogDensity);\n      return f;\n  }\n  float LayeredFog(vec4 pos, vec3 cameraPos, float fogTop, float fogRange, float fogAtten) {\n      vec4 wPos = pos;\n      vec3 camWorldProj = cameraPos.xyz;\n      camWorldProj.y = 0.;\n      vec3 worldPosProj = wPos.xyz;\n      worldPosProj.y = 0.;\n      float fDeltaD = distance(worldPosProj, camWorldProj) / fogAtten * 2.0;\n      float fDeltaY, fDensityIntegral;\n      if (cameraPos.y > fogTop) {\n          if (wPos.y < fogTop) {\n              fDeltaY = (fogTop - wPos.y) / fogRange * 2.0;\n              fDensityIntegral = fDeltaY * fDeltaY * 0.5;\n          }\n          else {\n              fDeltaY = 0.;\n              fDensityIntegral = 0.;\n          }\n      }\n      else {\n          if (wPos.y < fogTop) {\n              float fDeltaA = (fogTop - cameraPos.y) / fogRange * 2.;\n              float fDeltaB = (fogTop - wPos.y) / fogRange * 2.;\n              fDeltaY = abs(fDeltaA - fDeltaB);\n              fDensityIntegral = abs((fDeltaA * fDeltaA * 0.5) - (fDeltaB * fDeltaB * 0.5));\n          }\n          else {\n              fDeltaY = abs(fogTop - cameraPos.y) / fogRange * 2.;\n              fDensityIntegral = abs(fDeltaY * fDeltaY * 0.5);\n          }\n      }\n      float fDensity;\n      if (fDeltaY != 0.) {\n          fDensity = (sqrt(1.0 + ((fDeltaD / fDeltaY) * (fDeltaD / fDeltaY)))) * fDensityIntegral;\n      }\n      else {\n          fDensity = 0.;\n      }\n      float f = exp(-fDensity);\n      return f;\n  }\n#endif\nvoid CC_TRANSFER_FOG_BASE(vec4 pos, out float factor)\n{\n#if CC_USE_FOG == 0\n\tfactor = LinearFog(pos, cc_cameraPos.xyz, cc_fogBase.x, cc_fogBase.y);\n#elif CC_USE_FOG == 1\n\tfactor = ExpFog(pos, cc_cameraPos.xyz, cc_fogBase.x, cc_fogBase.z, cc_fogAdd.z);\n#elif CC_USE_FOG == 2\n\tfactor = ExpSquaredFog(pos, cc_cameraPos.xyz, cc_fogBase.x, cc_fogBase.z, cc_fogAdd.z);\n#elif CC_USE_FOG == 3\n\tfactor = LayeredFog(pos, cc_cameraPos.xyz, cc_fogAdd.x, cc_fogAdd.y, cc_fogAdd.z);\n#else\n\tfactor = 1.0;\n#endif\n}\nvoid CC_APPLY_FOG_BASE(inout vec4 color, float factor) {\n\tcolor = vec4(mix(cc_fogColor.rgb, color.rgb, factor), color.a);\n}\n#if !CC_USE_ACCURATE_FOG\nin mediump float v_fog_factor;\n#endif\nvoid CC_APPLY_FOG(inout vec4 color) {\n#if !CC_USE_ACCURATE_FOG\n    CC_APPLY_FOG_BASE(color, v_fog_factor);\n#endif\n}\nvoid CC_APPLY_FOG(inout vec4 color, vec3 worldPos) {\n#if CC_USE_ACCURATE_FOG\n    float factor;\n    CC_TRANSFER_FOG_BASE(vec4(worldPos, 1.0), factor);\n#else\n    float factor = v_fog_factor;\n#endif\n    CC_APPLY_FOG_BASE(color, factor);\n}\n#if USE_ALPHA_TEST\n#endif\n#if USE_TEXTURE\n  in vec2 v_uv;\n  uniform sampler2D mainTexture;\n  uniform sampler2D alphaTexture;\n#endif\nlayout(std140) uniform Constant {\n  vec4 mainColor;\n  vec4 colorScaleAndCutoff;\n  float timeOffset;\n};\nvec4 frag () {\n  vec4 o = mainColor;\n  o.rgb *= colorScaleAndCutoff.xyz;\n  #if USE_TEXTURE\n    vec4 texColor = texture(mainTexture, vec2(v_uv.x, v_uv.y + timeOffset));\n    o *= texColor * texColor * texColor * texColor;\n    o.a = texture(alphaTexture, v_uv).a;\n  #endif\n  #if USE_ALPHA_TEST\n    if (o.ALPHA_TEST_CHANNEL < colorScaleAndCutoff.w) discard;\n  #endif\n  CC_APPLY_FOG(o);\n  return CCFragOutput(o);\n}\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = frag(); }"},"glsl1":{"vert":"\nprecision highp float;\n#define QUATER_PI         0.78539816340\n#define HALF_PI           1.57079632679\n#define PI                3.14159265359\n#define PI2               6.28318530718\n#define PI4               12.5663706144\n#define INV_QUATER_PI     1.27323954474\n#define INV_HALF_PI       0.63661977237\n#define INV_PI            0.31830988618\n#define INV_PI2           0.15915494309\n#define INV_PI4           0.07957747155\n#define EPSILON           1e-6\n#define EPSILON_LOWP      1e-4\n#define LOG2              1.442695\n#define EXP_VALUE         2.71828183f\n#define FP_MAX            65504.0\n#define FP_SCALE          0.0009765625\n#define FP_SCALE_INV      1024.0\n#define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\n#define LIGHT_MAP_TYPE_DISABLED 0\n#define LIGHT_MAP_TYPE_ALL_IN_ONE 1\n#define LIGHT_MAP_TYPE_INDIRECT_OCCLUSION 2\n#define REFLECTION_PROBE_TYPE_NONE 0\n#define REFLECTION_PROBE_TYPE_CUBE 1\n#define REFLECTION_PROBE_TYPE_PLANAR 2\n#define LIGHT_TYPE_DIRECTIONAL 0.0\n#define LIGHT_TYPE_POINT 1.0\n#define LIGHT_TYPE_SPOT 2.0\n#define LIGHT_TYPE_SPHERE 3.0\n#define LIGHT_TYPE_RANGED_DIRECTIONAL 4.0\n#define IS_DIRECTIONAL_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_DIRECTIONAL)) < EPSILON_LOWP)\n#define IS_SPHERE_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_SPHERE)) < EPSILON_LOWP)\n#define IS_SPOT_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_SPOT)) < EPSILON_LOWP)\n#define IS_POINT_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_POINT)) < EPSILON_LOWP)\n#define IS_RANGED_DIRECTIONAL_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_RANGED_DIRECTIONAL)) < EPSILON_LOWP)\nstruct StandardVertInput {\n  highp vec4 position;\n  vec3 normal;\n  vec4 tangent;\n};\nattribute vec3 a_position;\nattribute vec3 a_normal;\nattribute vec2 a_texCoord;\nattribute vec4 a_tangent;\n#if CC_USE_SKINNING\n    attribute vec4 a_joints;\n  attribute vec4 a_weights;\n#endif\n#if USE_INSTANCING\n  #if CC_USE_BAKED_ANIMATION\n    attribute highp vec4 a_jointAnimInfo;\n  #endif\n  attribute vec4 a_matWorld0;\n  attribute vec4 a_matWorld1;\n  attribute vec4 a_matWorld2;\n  #if CC_USE_LIGHTMAP\n    attribute vec4 a_lightingMapUVParam;\n  #endif\n  #if CC_USE_REFLECTION_PROBE || CC_RECEIVE_SHADOW\n    #if CC_RECEIVE_SHADOW\n    #endif\n    attribute vec4 a_localShadowBiasAndProbeId;\n  #endif\n  #if CC_USE_LIGHT_PROBE\n    attribute vec4 a_sh_linear_const_r;\n    attribute vec4 a_sh_linear_const_g;\n    attribute vec4 a_sh_linear_const_b;\n  #endif\n#endif\n#if CC_USE_MORPH\n    attribute float a_vertexId;\n    int getVertexId() {\n      return int(a_vertexId);\n    }\n#endif\nhighp float decode32 (highp vec4 rgba) {\n  rgba = rgba * 255.0;\n  highp float Sign = 1.0 - (step(128.0, (rgba[3]) + 0.5)) * 2.0;\n  highp float Exponent = 2.0 * (mod(float(int((rgba[3]) + 0.5)), 128.0)) + (step(128.0, (rgba[2]) + 0.5)) - 127.0;\n  highp float Mantissa = (mod(float(int((rgba[2]) + 0.5)), 128.0)) * 65536.0 + rgba[1] * 256.0 + rgba[0] + 8388608.0;\n  return Sign * exp2(Exponent - 23.0) * Mantissa;\n}\n#if CC_USE_MORPH\n  uniform vec4 cc_displacementWeights[15];\n  uniform vec4 cc_displacementTextureInfo;\n  #if CC_MORPH_TARGET_HAS_POSITION\n    uniform sampler2D cc_PositionDisplacements;\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    uniform sampler2D cc_NormalDisplacements;\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    uniform sampler2D cc_TangentDisplacements;\n  #endif\n  vec2 getPixelLocation(vec2 textureResolution, int pixelIndex) {\n    float pixelIndexF = float(pixelIndex);\n    float x = mod(pixelIndexF, textureResolution.x);\n    float y = floor(pixelIndexF / textureResolution.x);\n    return vec2(x, y);\n  }\n  vec2 getPixelCoordFromLocation(vec2 location, vec2 textureResolution) {\n    return (vec2(location.x, location.y) + .5) / textureResolution;\n  }\n  #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n        int pixelIndex = elementIndex;\n        vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n        vec2 uv = getPixelCoordFromLocation(location, cc_displacementTextureInfo.xy);\n        return texture2D(tex, uv);\n      }\n  #else\n    vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n      int pixelIndex = elementIndex * 4;\n      vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n      vec2 x = getPixelCoordFromLocation(location + vec2(0.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 y = getPixelCoordFromLocation(location + vec2(1.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 z = getPixelCoordFromLocation(location + vec2(2.0, 0.0), cc_displacementTextureInfo.xy);\n      return vec4(\n        decode32(texture2D(tex, x)),\n        decode32(texture2D(tex, y)),\n        decode32(texture2D(tex, z)),\n        1.0\n      );\n    }\n  #endif\n  float getDisplacementWeight(int index) {\n    int quot = index / 4;\n    int remainder = index - quot * 4;\n    if (remainder == 0) {\n      return cc_displacementWeights[quot].x;\n    } else if (remainder == 1) {\n      return cc_displacementWeights[quot].y;\n    } else if (remainder == 2) {\n      return cc_displacementWeights[quot].z;\n    } else {\n      return cc_displacementWeights[quot].w;\n    }\n  }\n  vec3 getVec3DisplacementFromTexture(sampler2D tex, int vertexIndex) {\n  #if CC_MORPH_PRECOMPUTED\n    return fetchVec3ArrayFromTexture(tex, vertexIndex).rgb;\n  #else\n    vec3 result = vec3(0, 0, 0);\n    int nVertices = int(cc_displacementTextureInfo.z);\n    for (int iTarget = 0; iTarget < CC_MORPH_TARGET_COUNT; ++iTarget) {\n      result += (fetchVec3ArrayFromTexture(tex, nVertices * iTarget + vertexIndex).rgb * getDisplacementWeight(iTarget));\n    }\n    return result;\n  #endif\n  }\n  #if CC_MORPH_TARGET_HAS_POSITION\n  vec3 getPositionDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_PositionDisplacements, vertexId);\n  }\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n  vec3 getNormalDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_NormalDisplacements, vertexId);\n  }\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n  vec3 getTangentDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_TangentDisplacements, vertexId);\n  }\n  #endif\n  void applyMorph (inout vec4 position, inout vec3 normal, inout vec4 tangent) {\n    int vertexId = getVertexId();\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    normal.xyz = normal.xyz + getNormalDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    tangent.xyz = tangent.xyz + getTangentDisplacement(vertexId);\n  #endif\n  }\n  void applyMorph (inout vec4 position) {\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(getVertexId());\n  #endif\n  }\n#endif\n#if CC_USE_SKINNING\n  #if CC_USE_BAKED_ANIMATION\n    uniform highp vec4 cc_jointTextureInfo;\n    uniform highp vec4 cc_jointAnimInfo;\n    uniform highp sampler2D cc_jointTexture;\n    void CCGetJointTextureCoords(float pixelsPerJoint, float jointIdx, out highp float x, out highp float y, out highp float invSize)\n    {\n      #if USE_INSTANCING\n        highp float temp = pixelsPerJoint * (a_jointAnimInfo.x * a_jointAnimInfo.y + jointIdx) + a_jointAnimInfo.z;\n      #else\n        highp float temp = pixelsPerJoint * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + jointIdx) + cc_jointTextureInfo.z;\n      #endif\n      invSize = cc_jointTextureInfo.w;\n      highp float tempY = floor(temp * invSize);\n      x = floor(temp - tempY * cc_jointTextureInfo.x);\n      y = (tempY + 0.5) * invSize;\n    }\n  #else\n    #if CC_USE_REAL_TIME_JOINT_TEXTURE\n      uniform highp sampler2D cc_realtimeJoint;\n    #else\n      uniform highp vec4 cc_joints[CC_JOINT_UNIFORM_CAPACITY * 3];\n    #endif\n  #endif\n  #if CC_USE_BAKED_ANIMATION\n    #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      mat4 getJointMatrix (float i) {\n        highp float x, y, invSize;\n        CCGetJointTextureCoords(3.0, i, x, y, invSize);\n        vec4 v1 = texture2D(cc_jointTexture, vec2((x + 0.5) * invSize, y));\n        vec4 v2 = texture2D(cc_jointTexture, vec2((x + 1.5) * invSize, y));\n        vec4 v3 = texture2D(cc_jointTexture, vec2((x + 2.5) * invSize, y));\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #else\n      mat4 getJointMatrix (float i) {\n        highp float x, y, invSize;\n        CCGetJointTextureCoords(12.0, i, x, y, invSize);\n        vec4 v1 = vec4(\n          decode32(texture2D(cc_jointTexture, vec2((x + 0.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 1.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 2.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 3.5) * invSize, y)))\n        );\n        vec4 v2 = vec4(\n          decode32(texture2D(cc_jointTexture, vec2((x + 4.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 5.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 6.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 7.5) * invSize, y)))\n        );\n        vec4 v3 = vec4(\n          decode32(texture2D(cc_jointTexture, vec2((x + 8.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 9.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 10.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 11.5) * invSize, y)))\n        );\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #else\n    #if CC_USE_REAL_TIME_JOINT_TEXTURE\n      #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n        mat4 getJointMatrix (float i) {\n          float x = i;\n          vec4 v1 = texture2D(cc_realtimeJoint, vec2( x / 256.0, 0.5 / 3.0));\n          vec4 v2 = texture2D(cc_realtimeJoint, vec2( x / 256.0, 1.5 / 3.0));\n          vec4 v3 = texture2D(cc_realtimeJoint, vec2( x / 256.0, 2.5 / 3.0));\n          return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n        }\n      #else\n        mat4 getJointMatrix (float i) {\n         float x = 4.0 * i;\n          vec4 v1 = vec4(\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 0.5)/ 1024.0, 0.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 1.5)/ 1024.0, 0.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 2.5)/ 1024.0, 0.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 3.5)/ 1024.0, 0.5 / 3.0)))\n          );\n          vec4 v2 = vec4(\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 0.5)/ 1024.0, 1.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 1.5)/ 1024.0, 1.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 2.5)/ 1024.0, 1.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 3.5)/ 1024.0, 1.5 / 3.0)))\n          );\n          vec4 v3 = vec4(\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 0.5)/ 1024.0, 2.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 1.5)/ 1024.0, 2.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 2.5)/ 1024.0, 2.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 3.5)/ 1024.0, 2.5 / 3.0)))\n          );\n          return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n        }\n      #endif\n    #else\n      mat4 getJointMatrix (float i) {\n        int idx = int(i);\n        vec4 v1 = cc_joints[idx * 3];\n        vec4 v2 = cc_joints[idx * 3 + 1];\n        vec4 v3 = cc_joints[idx * 3 + 2];\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #endif\n  mat4 skinMatrix () {\n    vec4 joints = vec4(a_joints);\n    return getJointMatrix(joints.x) * a_weights.x\n         + getJointMatrix(joints.y) * a_weights.y\n         + getJointMatrix(joints.z) * a_weights.z\n         + getJointMatrix(joints.w) * a_weights.w;\n  }\n  void CCSkin (inout vec4 position) {\n    mat4 m = skinMatrix();\n    position = m * position;\n  }\n  void CCSkin (inout vec4 position, inout vec3 normal, inout vec4 tangent) {\n    mat4 m = skinMatrix();\n    position = m * position;\n    normal = (m * vec4(normal, 0.0)).xyz;\n    tangent.xyz = (m * vec4(tangent.xyz, 0.0)).xyz;\n  }\n#endif\nvoid CCVertInput(inout vec4 In)\n{\n    In = vec4(a_position, 1.0);\n  #if CC_USE_MORPH\n    applyMorph(In);\n  #endif\n  #if CC_USE_SKINNING\n    CCSkin(In);\n  #endif\n}\nuniform highp mat4 cc_matView;\n  uniform highp mat4 cc_matProj;\n  uniform highp vec4 cc_cameraPos;\n  uniform mediump vec4 cc_fogBase;\n  uniform mediump vec4 cc_fogAdd;\n#if !USE_INSTANCING\n  uniform highp mat4 cc_matWorld;\n#endif\nvoid CCGetWorldMatrix(out mat4 matWorld)\n{\n  #if USE_INSTANCING\n    matWorld = mat4(\n      vec4(a_matWorld0.xyz, 0.0),\n      vec4(a_matWorld1.xyz, 0.0),\n      vec4(a_matWorld2.xyz, 0.0),\n      vec4(a_matWorld0.w, a_matWorld1.w, a_matWorld2.w, 1.0)\n    );\n  #else\n    matWorld = cc_matWorld;\n  #endif\n}\n#if CC_USE_FOG != 4\n  float LinearFog(vec4 pos, vec3 cameraPos, float fogStart, float fogEnd) {\n      vec4 wPos = pos;\n      float cam_dis = distance(cameraPos, wPos.xyz);\n      return clamp((fogEnd - cam_dis) / (fogEnd - fogStart), 0., 1.);\n  }\n  float ExpFog(vec4 pos, vec3 cameraPos, float fogStart, float fogDensity, float fogAtten) {\n      vec4 wPos = pos;\n      float cam_dis = max(distance(cameraPos, wPos.xyz) - fogStart, 0.0) / fogAtten * 4.;\n      float f = exp(-cam_dis * fogDensity);\n      return f;\n  }\n  float ExpSquaredFog(vec4 pos, vec3 cameraPos, float fogStart, float fogDensity, float fogAtten) {\n      vec4 wPos = pos;\n      float cam_dis = max(distance(cameraPos, wPos.xyz) - fogStart, 0.0) / fogAtten * 4.;\n      float f = exp(-cam_dis * cam_dis * fogDensity * fogDensity);\n      return f;\n  }\n  float LayeredFog(vec4 pos, vec3 cameraPos, float fogTop, float fogRange, float fogAtten) {\n      vec4 wPos = pos;\n      vec3 camWorldProj = cameraPos.xyz;\n      camWorldProj.y = 0.;\n      vec3 worldPosProj = wPos.xyz;\n      worldPosProj.y = 0.;\n      float fDeltaD = distance(worldPosProj, camWorldProj) / fogAtten * 2.0;\n      float fDeltaY, fDensityIntegral;\n      if (cameraPos.y > fogTop) {\n          if (wPos.y < fogTop) {\n              fDeltaY = (fogTop - wPos.y) / fogRange * 2.0;\n              fDensityIntegral = fDeltaY * fDeltaY * 0.5;\n          }\n          else {\n              fDeltaY = 0.;\n              fDensityIntegral = 0.;\n          }\n      }\n      else {\n          if (wPos.y < fogTop) {\n              float fDeltaA = (fogTop - cameraPos.y) / fogRange * 2.;\n              float fDeltaB = (fogTop - wPos.y) / fogRange * 2.;\n              fDeltaY = abs(fDeltaA - fDeltaB);\n              fDensityIntegral = abs((fDeltaA * fDeltaA * 0.5) - (fDeltaB * fDeltaB * 0.5));\n          }\n          else {\n              fDeltaY = abs(fogTop - cameraPos.y) / fogRange * 2.;\n              fDensityIntegral = abs(fDeltaY * fDeltaY * 0.5);\n          }\n      }\n      float fDensity;\n      if (fDeltaY != 0.) {\n          fDensity = (sqrt(1.0 + ((fDeltaD / fDeltaY) * (fDeltaD / fDeltaY)))) * fDensityIntegral;\n      }\n      else {\n          fDensity = 0.;\n      }\n      float f = exp(-fDensity);\n      return f;\n  }\n#endif\nvoid CC_TRANSFER_FOG_BASE(vec4 pos, out float factor)\n{\n#if CC_USE_FOG == 0\n\tfactor = LinearFog(pos, cc_cameraPos.xyz, cc_fogBase.x, cc_fogBase.y);\n#elif CC_USE_FOG == 1\n\tfactor = ExpFog(pos, cc_cameraPos.xyz, cc_fogBase.x, cc_fogBase.z, cc_fogAdd.z);\n#elif CC_USE_FOG == 2\n\tfactor = ExpSquaredFog(pos, cc_cameraPos.xyz, cc_fogBase.x, cc_fogBase.z, cc_fogAdd.z);\n#elif CC_USE_FOG == 3\n\tfactor = LayeredFog(pos, cc_cameraPos.xyz, cc_fogAdd.x, cc_fogAdd.y, cc_fogAdd.z);\n#else\n\tfactor = 1.0;\n#endif\n}\n#if !CC_USE_ACCURATE_FOG\nvarying mediump float v_fog_factor;\n#endif\nvoid CC_TRANSFER_FOG(vec4 pos) {\n#if !CC_USE_ACCURATE_FOG\n    CC_TRANSFER_FOG_BASE(pos, v_fog_factor);\n#endif\n}\n#if USE_TEXTURE\n  varying vec2 v_uv;\n#endif\nvec4 vert () {\n  vec4 position;\n  CCVertInput(position);\n  mat4 matWorld;\n  CCGetWorldMatrix(matWorld);\n  #if USE_TEXTURE\n    v_uv = a_texCoord;\n    #if SAMPLE_FROM_RT\n      v_uv = cc_cameraPos.w > 1.0 ? vec2(v_uv.x, 1.0 - v_uv.y) : v_uv;\n    #endif\n  #endif\n  CC_TRANSFER_FOG(matWorld * position);\n  return cc_matProj * (cc_matView * matWorld) * position;\n}\nvoid main() { gl_Position = vert(); }","frag":"\nprecision highp float;\nvec3 ACESToneMap (vec3 color) {\n  color = min(color, vec3(8.0));\n  const float A = 2.51;\n  const float B = 0.03;\n  const float C = 2.43;\n  const float D = 0.59;\n  const float E = 0.14;\n  return (color * (A * color + B)) / (color * (C * color + D) + E);\n}\n#define CC_SURFACES_DEBUG_VIEW_VERTEX_COLOR 1\n#define CC_SURFACES_DEBUG_VIEW_VERTEX_NORMAL CC_SURFACES_DEBUG_VIEW_VERTEX_COLOR + 1\n#define CC_SURFACES_DEBUG_VIEW_VERTEX_TANGENT CC_SURFACES_DEBUG_VIEW_VERTEX_NORMAL + 1\n#define CC_SURFACES_DEBUG_VIEW_WORLD_POS CC_SURFACES_DEBUG_VIEW_VERTEX_TANGENT + 1\n#define CC_SURFACES_DEBUG_VIEW_VERTEX_MIRROR CC_SURFACES_DEBUG_VIEW_WORLD_POS + 1\n#define CC_SURFACES_DEBUG_VIEW_FACE_SIDE CC_SURFACES_DEBUG_VIEW_VERTEX_MIRROR + 1\n#define CC_SURFACES_DEBUG_VIEW_UV0 CC_SURFACES_DEBUG_VIEW_FACE_SIDE + 1\n#define CC_SURFACES_DEBUG_VIEW_UV1 CC_SURFACES_DEBUG_VIEW_UV0 + 1\n#define CC_SURFACES_DEBUG_VIEW_UVLIGHTMAP CC_SURFACES_DEBUG_VIEW_UV1 + 1\n#define CC_SURFACES_DEBUG_VIEW_PROJ_DEPTH CC_SURFACES_DEBUG_VIEW_UVLIGHTMAP + 1\n#define CC_SURFACES_DEBUG_VIEW_LINEAR_DEPTH CC_SURFACES_DEBUG_VIEW_PROJ_DEPTH + 1\n#define CC_SURFACES_DEBUG_VIEW_FRAGMENT_NORMAL CC_SURFACES_DEBUG_VIEW_LINEAR_DEPTH + 1\n#define CC_SURFACES_DEBUG_VIEW_FRAGMENT_TANGENT CC_SURFACES_DEBUG_VIEW_FRAGMENT_NORMAL + 1\n#define CC_SURFACES_DEBUG_VIEW_FRAGMENT_BINORMAL CC_SURFACES_DEBUG_VIEW_FRAGMENT_TANGENT + 1\n#define CC_SURFACES_DEBUG_VIEW_BASE_COLOR CC_SURFACES_DEBUG_VIEW_FRAGMENT_BINORMAL + 1\n#define CC_SURFACES_DEBUG_VIEW_DIFFUSE_COLOR CC_SURFACES_DEBUG_VIEW_BASE_COLOR + 1\n#define CC_SURFACES_DEBUG_VIEW_SPECULAR_COLOR CC_SURFACES_DEBUG_VIEW_DIFFUSE_COLOR + 1\n#define CC_SURFACES_DEBUG_VIEW_TRANSPARENCY CC_SURFACES_DEBUG_VIEW_SPECULAR_COLOR + 1\n#define CC_SURFACES_DEBUG_VIEW_METALLIC CC_SURFACES_DEBUG_VIEW_TRANSPARENCY + 1\n#define CC_SURFACES_DEBUG_VIEW_ROUGHNESS CC_SURFACES_DEBUG_VIEW_METALLIC + 1\n#define CC_SURFACES_DEBUG_VIEW_SPECULAR_INTENSITY CC_SURFACES_DEBUG_VIEW_ROUGHNESS + 1\n#define CC_SURFACES_DEBUG_VIEW_IOR CC_SURFACES_DEBUG_VIEW_SPECULAR_INTENSITY + 1\n#define CC_SURFACES_DEBUG_VIEW_DIRECT_DIFFUSE CC_SURFACES_DEBUG_VIEW_IOR + 1\n#define CC_SURFACES_DEBUG_VIEW_DIRECT_SPECULAR CC_SURFACES_DEBUG_VIEW_DIRECT_DIFFUSE + 1\n#define CC_SURFACES_DEBUG_VIEW_DIRECT_ALL CC_SURFACES_DEBUG_VIEW_DIRECT_SPECULAR + 1\n#define CC_SURFACES_DEBUG_VIEW_ENV_DIFFUSE CC_SURFACES_DEBUG_VIEW_DIRECT_ALL + 1\n#define CC_SURFACES_DEBUG_VIEW_ENV_SPECULAR CC_SURFACES_DEBUG_VIEW_ENV_DIFFUSE + 1\n#define CC_SURFACES_DEBUG_VIEW_ENV_ALL CC_SURFACES_DEBUG_VIEW_ENV_SPECULAR + 1\n#define CC_SURFACES_DEBUG_VIEW_EMISSIVE CC_SURFACES_DEBUG_VIEW_ENV_ALL + 1\n#define CC_SURFACES_DEBUG_VIEW_LIGHT_MAP CC_SURFACES_DEBUG_VIEW_EMISSIVE + 1\n#define CC_SURFACES_DEBUG_VIEW_SHADOW CC_SURFACES_DEBUG_VIEW_LIGHT_MAP + 1\n#define CC_SURFACES_DEBUG_VIEW_AO CC_SURFACES_DEBUG_VIEW_SHADOW + 1\n#define CC_SURFACES_DEBUG_VIEW_FRESNEL CC_SURFACES_DEBUG_VIEW_AO + 1\n#define CC_SURFACES_DEBUG_VIEW_TRANSMIT_DIRECT_DIFFUSE CC_SURFACES_DEBUG_VIEW_FRESNEL + 1\n#define CC_SURFACES_DEBUG_VIEW_TRANSMIT_DIRECT_SPECULAR CC_SURFACES_DEBUG_VIEW_TRANSMIT_DIRECT_DIFFUSE + 1\n#define CC_SURFACES_DEBUG_VIEW_TRANSMIT_ENV_DIFFUSE CC_SURFACES_DEBUG_VIEW_TRANSMIT_DIRECT_SPECULAR + 1\n#define CC_SURFACES_DEBUG_VIEW_TRANSMIT_ENV_SPECULAR CC_SURFACES_DEBUG_VIEW_TRANSMIT_ENV_DIFFUSE + 1\n#define CC_SURFACES_DEBUG_VIEW_TRANSMIT_ALL CC_SURFACES_DEBUG_VIEW_TRANSMIT_ENV_SPECULAR + 1\n#define CC_SURFACES_DEBUG_VIEW_TRT_DIRECT CC_SURFACES_DEBUG_VIEW_TRANSMIT_ALL + 1\n#define CC_SURFACES_DEBUG_VIEW_TRT_ENVIRONMENT CC_SURFACES_DEBUG_VIEW_TRT_DIRECT + 1\n#define CC_SURFACES_DEBUG_VIEW_TRT_ALL CC_SURFACES_DEBUG_VIEW_TRT_ENVIRONMENT + 1\n#define CC_SURFACES_DEBUG_VIEW_FOG CC_SURFACES_DEBUG_VIEW_TRT_ALL + 1\n#define CC_SURFACES_DEBUG_VIEW_SINGLE 1\n#define CC_SURFACES_DEBUG_VIEW_COMPOSITE_AND_MISC 2\n#define IS_DEBUG_VIEW_ENABLE_WITH_CAMERA (cc_surfaceTransform.y != 3.0)\n#define IS_DEBUG_VIEW_LIGHTING_ENABLE_WITH_ALBEDO (UnpackBitFromFloat(cc_debug_view_mode.w, 6) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_MISC_ENABLE_CSM_LAYER_COLORATION (UnpackBitFromFloat(cc_debug_view_mode.w, 7) && IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_DIRECT_DIFFUSE (UnpackBitFromFloat(cc_debug_view_mode.y, 0) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_DIRECT_SPECULAR (UnpackBitFromFloat(cc_debug_view_mode.y, 1) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_ENV_DIFFUSE (UnpackBitFromFloat(cc_debug_view_mode.y, 2) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_ENV_SPECULAR (UnpackBitFromFloat(cc_debug_view_mode.y, 3) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_EMISSIVE (UnpackBitFromFloat(cc_debug_view_mode.y, 4) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_LIGHT_MAP (UnpackBitFromFloat(cc_debug_view_mode.y, 5) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_SHADOW (UnpackBitFromFloat(cc_debug_view_mode.y, 6) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_AO (UnpackBitFromFloat(cc_debug_view_mode.y, 7) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_NORMAL_MAP (UnpackBitFromFloat(cc_debug_view_mode.z, 0) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_FOG (UnpackBitFromFloat(cc_debug_view_mode.z, 1) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_TONE_MAPPING (UnpackBitFromFloat(cc_debug_view_mode.z, 2) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_GAMMA_CORRECTION (UnpackBitFromFloat(cc_debug_view_mode.z, 3) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_FRESNEL (UnpackBitFromFloat(cc_debug_view_mode.z, 4) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_TRANSMIT_DIFFUSE (UnpackBitFromFloat(cc_debug_view_mode.z, 5) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_TRANSMIT_SPECULAR (UnpackBitFromFloat(cc_debug_view_mode.z, 6) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_TRT (UnpackBitFromFloat(cc_debug_view_mode.z, 7) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_TT (UnpackBitFromFloat(cc_debug_view_mode.w, 0) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\nvec3 LinearToSRGB(vec3 linear) {\n#ifdef CC_USE_SURFACE_SHADER\n  #if CC_USE_DEBUG_VIEW == CC_SURFACES_DEBUG_VIEW_COMPOSITE_AND_MISC\n    if (!IS_DEBUG_VIEW_COMPOSITE_ENABLE_GAMMA_CORRECTION) {\n      return linear;\n    }\n  #endif\n#endif\n  return sqrt(linear);\n}\nvec4 CCFragOutput (vec4 color) {\n  #if !CC_USE_RGBE_OUTPUT\n    #if CC_USE_HDR\n      color.rgb = ACESToneMap(color.rgb);\n    #endif\n    color.rgb = LinearToSRGB(color.rgb);\n  #endif\n  return color;\n}\nuniform mediump vec4 cc_debug_view_mode;\nuniform highp vec4 cc_cameraPos;\n  uniform mediump vec4 cc_surfaceTransform;\n  uniform mediump vec4 cc_fogColor;\n  uniform mediump vec4 cc_fogBase;\n  uniform mediump vec4 cc_fogAdd;\n#if CC_USE_FOG != 4\n  float LinearFog(vec4 pos, vec3 cameraPos, float fogStart, float fogEnd) {\n      vec4 wPos = pos;\n      float cam_dis = distance(cameraPos, wPos.xyz);\n      return clamp((fogEnd - cam_dis) / (fogEnd - fogStart), 0., 1.);\n  }\n  float ExpFog(vec4 pos, vec3 cameraPos, float fogStart, float fogDensity, float fogAtten) {\n      vec4 wPos = pos;\n      float cam_dis = max(distance(cameraPos, wPos.xyz) - fogStart, 0.0) / fogAtten * 4.;\n      float f = exp(-cam_dis * fogDensity);\n      return f;\n  }\n  float ExpSquaredFog(vec4 pos, vec3 cameraPos, float fogStart, float fogDensity, float fogAtten) {\n      vec4 wPos = pos;\n      float cam_dis = max(distance(cameraPos, wPos.xyz) - fogStart, 0.0) / fogAtten * 4.;\n      float f = exp(-cam_dis * cam_dis * fogDensity * fogDensity);\n      return f;\n  }\n  float LayeredFog(vec4 pos, vec3 cameraPos, float fogTop, float fogRange, float fogAtten) {\n      vec4 wPos = pos;\n      vec3 camWorldProj = cameraPos.xyz;\n      camWorldProj.y = 0.;\n      vec3 worldPosProj = wPos.xyz;\n      worldPosProj.y = 0.;\n      float fDeltaD = distance(worldPosProj, camWorldProj) / fogAtten * 2.0;\n      float fDeltaY, fDensityIntegral;\n      if (cameraPos.y > fogTop) {\n          if (wPos.y < fogTop) {\n              fDeltaY = (fogTop - wPos.y) / fogRange * 2.0;\n              fDensityIntegral = fDeltaY * fDeltaY * 0.5;\n          }\n          else {\n              fDeltaY = 0.;\n              fDensityIntegral = 0.;\n          }\n      }\n      else {\n          if (wPos.y < fogTop) {\n              float fDeltaA = (fogTop - cameraPos.y) / fogRange * 2.;\n              float fDeltaB = (fogTop - wPos.y) / fogRange * 2.;\n              fDeltaY = abs(fDeltaA - fDeltaB);\n              fDensityIntegral = abs((fDeltaA * fDeltaA * 0.5) - (fDeltaB * fDeltaB * 0.5));\n          }\n          else {\n              fDeltaY = abs(fogTop - cameraPos.y) / fogRange * 2.;\n              fDensityIntegral = abs(fDeltaY * fDeltaY * 0.5);\n          }\n      }\n      float fDensity;\n      if (fDeltaY != 0.) {\n          fDensity = (sqrt(1.0 + ((fDeltaD / fDeltaY) * (fDeltaD / fDeltaY)))) * fDensityIntegral;\n      }\n      else {\n          fDensity = 0.;\n      }\n      float f = exp(-fDensity);\n      return f;\n  }\n#endif\nvoid CC_TRANSFER_FOG_BASE(vec4 pos, out float factor)\n{\n#if CC_USE_FOG == 0\n\tfactor = LinearFog(pos, cc_cameraPos.xyz, cc_fogBase.x, cc_fogBase.y);\n#elif CC_USE_FOG == 1\n\tfactor = ExpFog(pos, cc_cameraPos.xyz, cc_fogBase.x, cc_fogBase.z, cc_fogAdd.z);\n#elif CC_USE_FOG == 2\n\tfactor = ExpSquaredFog(pos, cc_cameraPos.xyz, cc_fogBase.x, cc_fogBase.z, cc_fogAdd.z);\n#elif CC_USE_FOG == 3\n\tfactor = LayeredFog(pos, cc_cameraPos.xyz, cc_fogAdd.x, cc_fogAdd.y, cc_fogAdd.z);\n#else\n\tfactor = 1.0;\n#endif\n}\nvoid CC_APPLY_FOG_BASE(inout vec4 color, float factor) {\n\tcolor = vec4(mix(cc_fogColor.rgb, color.rgb, factor), color.a);\n}\n#if !CC_USE_ACCURATE_FOG\nvarying mediump float v_fog_factor;\n#endif\nvoid CC_APPLY_FOG(inout vec4 color) {\n#if !CC_USE_ACCURATE_FOG\n    CC_APPLY_FOG_BASE(color, v_fog_factor);\n#endif\n}\nvoid CC_APPLY_FOG(inout vec4 color, vec3 worldPos) {\n#if CC_USE_ACCURATE_FOG\n    float factor;\n    CC_TRANSFER_FOG_BASE(vec4(worldPos, 1.0), factor);\n#else\n    float factor = v_fog_factor;\n#endif\n    CC_APPLY_FOG_BASE(color, factor);\n}\n#if USE_ALPHA_TEST\n#endif\n#if USE_TEXTURE\n  varying vec2 v_uv;\n  uniform sampler2D mainTexture;\n  uniform sampler2D alphaTexture;\n#endif\n   uniform vec4 mainColor;\n   uniform vec4 colorScaleAndCutoff;\n   uniform float timeOffset;\nvec4 frag () {\n  vec4 o = mainColor;\n  o.rgb *= colorScaleAndCutoff.xyz;\n  #if USE_TEXTURE\n    vec4 texColor = texture2D(mainTexture, vec2(v_uv.x, v_uv.y + timeOffset));\n    o *= texColor * texColor * texColor * texColor;\n    o.a = texture2D(alphaTexture, v_uv).a;\n  #endif\n  #if USE_ALPHA_TEST\n    if (o.ALPHA_TEST_CHANNEL < colorScaleAndCutoff.w) discard;\n  #endif\n  CC_APPLY_FOG(o);\n  return CCFragOutput(o);\n}\nvoid main() { gl_FragColor = frag(); }"},"builtins":{"globals":{"blocks":[{"name":"CCGlobal","defines":[]},{"name":"CCCamera","defines":[]}],"samplerTextures":[],"buffers":[],"images":[]},"locals":{"blocks":[{"name":"CCMorph","defines":["CC_USE_MORPH"]},{"name":"CCSkinningTexture","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"CCSkinningAnimation","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"CCSkinning","defines":["CC_USE_SKINNING","!CC_USE_BAKED_ANIMATION","!CC_USE_REAL_TIME_JOINT_TEXTURE"]},{"name":"CCLocal","defines":["!USE_INSTANCING"]}],"samplerTextures":[{"name":"cc_PositionDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_POSITION"]},{"name":"cc_NormalDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_NORMAL"]},{"name":"cc_TangentDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_TANGENT"]},{"name":"cc_jointTexture","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"cc_realtimeJoint","defines":["CC_USE_SKINNING","!CC_USE_BAKED_ANIMATION","CC_USE_REAL_TIME_JOINT_TEXTURE"]}],"buffers":[],"images":[]},"statistics":{"CC_EFFECT_USED_VERTEX_UNIFORM_VECTORS":73,"CC_EFFECT_USED_FRAGMENT_UNIFORM_VECTORS":45}},"defines":[{"name":"USE_INSTANCING","type":"boolean"},{"name":"CC_USE_SKINNING","type":"boolean"},{"name":"CC_USE_BAKED_ANIMATION","type":"boolean"},{"name":"CC_USE_LIGHTMAP","type":"boolean"},{"name":"CC_USE_REFLECTION_PROBE","type":"boolean"},{"name":"CC_RECEIVE_SHADOW","type":"boolean"},{"name":"CC_USE_LIGHT_PROBE","type":"boolean"},{"name":"CC_USE_MORPH","type":"boolean"},{"name":"CC_MORPH_TARGET_COUNT","type":"number","range":[2,8]},{"name":"CC_MORPH_TARGET_HAS_POSITION","type":"boolean"},{"name":"CC_MORPH_TARGET_HAS_NORMAL","type":"boolean"},{"name":"CC_MORPH_TARGET_HAS_TANGENT","type":"boolean"},{"name":"CC_MORPH_PRECOMPUTED","type":"boolean"},{"name":"CC_USE_REAL_TIME_JOINT_TEXTURE","type":"boolean"},{"name":"CC_USE_FOG","type":"number","range":[0,4]},{"name":"CC_USE_ACCURATE_FOG","type":"boolean"},{"name":"USE_TEXTURE","type":"boolean"},{"name":"SAMPLE_FROM_RT","type":"boolean"},{"name":"CC_USE_DEBUG_VIEW","type":"number","range":[0,3]},{"name":"CC_USE_RGBE_OUTPUT","type":"boolean"},{"name":"CC_USE_HDR","type":"boolean"},{"name":"USE_ALPHA_TEST","type":"boolean"},{"name":"ALPHA_TEST_CHANNEL","type":"string","options":["a","r","g","b"]}]}],[{"name":"opaque","passes":[{"program":"../bundleResource/materials/shaders/ScrollingUV|unlit-vs:vert|unlit-fs:frag","properties":{"timeOffset":{"type":13,"value":[0]},"mainTexture":{"value":"grey","type":28},"alphaTexture":{"value":"grey","type":28},"tilingOffset":{"type":16,"value":[1,1,0,0]},"mainColor":{"linear":true,"type":16,"value":[1,1,1,1]},"colorScale":{"type":15,"value":[1,1,1],"handleInfo":["colorScaleAndCutoff",0,15]},"alphaThreshold":{"type":13,"value":[0.5],"handleInfo":["colorScaleAndCutoff",3,13]},"color":{"linear":true,"type":16,"handleInfo":["mainColor",0,16]},"colorScaleAndCutoff":{"type":16,"value":[1,1,1,0.5]}}}]},{"name":"transparent","passes":[{"program":"../bundleResource/materials/shaders/ScrollingUV|unlit-vs:vert|unlit-fs:frag","blendState":{"targets":[{"blend":true,"blendSrc":2,"blendDst":4,"blendDstAlpha":4}]},"depthStencilState":{"depthTest":true,"depthWrite":false},"properties":{"timeOffset":{"type":13,"value":[0]},"mainTexture":{"value":"grey","type":28},"alphaTexture":{"value":"grey","type":28},"tilingOffset":{"type":16,"value":[1,1,0,0]},"mainColor":{"linear":true,"type":16,"value":[1,1,1,1]},"colorScale":{"type":15,"value":[1,1,1],"handleInfo":["colorScaleAndCutoff",0,15]},"alphaThreshold":{"type":13,"value":[0.5],"handleInfo":["colorScaleAndCutoff",3,13]},"color":{"linear":true,"type":16,"handleInfo":["mainColor",0,16]},"colorScaleAndCutoff":{"type":16,"value":[1,1,1,0.5]}}}]},{"name":"add","passes":[{"program":"../bundleResource/materials/shaders/ScrollingUV|unlit-vs:vert|unlit-fs:frag","rasterizerState":{"cullMode":0},"blendState":{"targets":[{"blend":true,"blendSrc":2,"blendDst":1,"blendSrcAlpha":2,"blendDstAlpha":1}]},"depthStencilState":{"depthTest":true,"depthWrite":false},"properties":{"timeOffset":{"type":13,"value":[0]},"mainTexture":{"value":"grey","type":28},"alphaTexture":{"value":"grey","type":28},"tilingOffset":{"type":16,"value":[1,1,0,0]},"mainColor":{"linear":true,"type":16,"value":[1,1,1,1]},"colorScale":{"type":15,"value":[1,1,1],"handleInfo":["colorScaleAndCutoff",0,15]},"alphaThreshold":{"type":13,"value":[0.5],"handleInfo":["colorScaleAndCutoff",3,13]},"color":{"linear":true,"type":16,"handleInfo":["mainColor",0,16]},"colorScaleAndCutoff":{"type":16,"value":[1,1,1,0.5]}}}]},{"name":"alpha-blend","passes":[{"program":"../bundleResource/materials/shaders/ScrollingUV|unlit-vs:vert|unlit-fs:frag","rasterizerState":{"cullMode":0},"blendState":{"targets":[{"blend":true,"blendSrc":2,"blendDst":4,"blendSrcAlpha":2,"blendDstAlpha":4}]},"depthStencilState":{"depthTest":true,"depthWrite":false},"properties":{"timeOffset":{"type":13,"value":[0]},"mainTexture":{"value":"grey","type":28},"alphaTexture":{"value":"grey","type":28},"tilingOffset":{"type":16,"value":[1,1,0,0]},"mainColor":{"linear":true,"type":16,"value":[1,1,1,1]},"colorScale":{"type":15,"value":[1,1,1],"handleInfo":["colorScaleAndCutoff",0,15]},"alphaThreshold":{"type":13,"value":[0.5],"handleInfo":["colorScaleAndCutoff",3,13]},"color":{"linear":true,"type":16,"handleInfo":["mainColor",0,16]},"colorScaleAndCutoff":{"type":16,"value":[1,1,1,0.5]}}}]}]]],0,0,[],[],[]],[[[44,"Extended Goattee",[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{"USE_ALBEDO_MAP":true,"USE_NORMAL_MAP":true},{},{}],[[[{"metallic":0},"mainColor",8,[4,4293388263],"mainTexture",6,0,"normalMap",6,1],{},{}],11,0,0]]],0,0,[0,0,0],[13,22,11],[197,198,199]],[[[44,"Stagerunner_Stage_Texture",[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{"USE_ALBEDO_MAP":true,"USE_NORMAL_MAP":true,"USE_EMISSIVE_MAP":true},{},{},{}],[[[{},"mainColor",8,[4,4290559164],"mainTexture",6,0,"normalMap",6,1,"emissiveMap",6,2],{},{},{}],11,0,0,0]]],0,0,[0,0,0,0],[13,22,16,11],[200,201,202,38]],[[{"name":"img_wipeout_5","rect":{"x":0,"y":0,"width":720,"height":493},"offset":{"x":0,"y":0},"originalSize":{"width":720,"height":493},"rotated":false,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[-360,-246.5,0,360,-246.5,0,-360,246.5,0,360,246.5,0],"indexes":[0,1,2,2,1,3],"uv":[0,493,720,493,0,0,720,0],"nuv":[0,0,1,0,0,1,1,1],"minPos":{"x":-360,"y":-246.5,"z":0},"maxPos":{"x":360,"y":246.5,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[10],[203]],[[[150,"cameraFinal",".mp3",0.339594],-1],0,0,[],[],[]],[[[54,"mat_rarity_01common",1,[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{}],[[[{},"tintColor",8,[4,4294967295],"mainTexture",6,0]],11]]],0,0,[0,0],[13,11],[114,52]],[[[114,"particle2d_rare",".plist"],-1],0,0,[0],[23],[76]],[[[58,"SideProp"],[100,"SideProp",[-30],[[189,-28,[7,"f58yxP6+VLmJBUo4AeYIQX"],-27,[-20,-21,-22,-23,-24,-25,-26]],[190,true,-29,[7,"f4P9Gc7JhGIaBW8TA5Vrk+"]]],[93,"9dqzIfPdlPQrKp/rbyFqQq",null,-19,0,[[5,["mainRenderer"],-18,[0,["8dt/KCiu1GOJ6DGYai+gUP"]],-17,[0,["3ew1Vo2adBpqZ739+OrPkj"]]]],[-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16]],[1,-6.083,0,-5.863]],[0,["8dt/KCiu1GOJ6DGYai+gUP"]],[0,["8dt/KCiu1GOJ6DGYai+gUP"]],[0,["8dt/KCiu1GOJ6DGYai+gUP"]],[0,["8dt/KCiu1GOJ6DGYai+gUP"]],[0,["8dt/KCiu1GOJ6DGYai+gUP"]],[0,["8dt/KCiu1GOJ6DGYai+gUP"]],[0,["8dt/KCiu1GOJ6DGYai+gUP"]],[0,["8dt/KCiu1GOJ6DGYai+gUP"]],[0,["8dt/KCiu1GOJ6DGYai+gUP"]],[0,["8dt/KCiu1GOJ6DGYai+gUP"]],[0,["8dt/KCiu1GOJ6DGYai+gUP"]],[0,["8dt/KCiu1GOJ6DGYai+gUP"]],[0,["8dt/KCiu1GOJ6DGYai+gUP"]],[0,["8dt/KCiu1GOJ6DGYai+gUP"]],[0,["8dt/KCiu1GOJ6DGYai+gUP"]],[0,["8dt/KCiu1GOJ6DGYai+gUP"]],[101,"Parent",1,[-31,-32,-33,-34,-35,-36,-37],[4,"aeIQ1y+rZKOoF/V5cr94ZO",null,null,null,1,0],[1,11,11,11]],[42,"PeopleVariation1",false,18,[-38,-39,-40,-41,-42],[4,"da6prD9hlLlrYWOqh4cYsb",null,null,null,1,0]],[42,"SpeakerVariation",false,18,[-43,-44,-45,-46,-47],[4,"0a77OF2GpG4KIC+Yw11xi+",null,null,null,1,0]],[72,"PeopleVariation2",false,18,[-48,-49,-50,-51,-52],[4,"a9M8Z8hedMYpDNj2qHU3FF",null,null,null,1,0],[1,-0.181,0,-0.206]],[72,"PeopleVariation3",false,18,[-53,-54,-55,-56,-57],[4,"67mea4kdBIKardKeCOtMrt",null,null,null,1,0],[1,-0.181,0,-0.206]],[42,"PeopleVariation4",false,18,[-58,-59,-60,-61,-62],[4,"abRHfE37RBoqbU9CB/HBK0",null,null,null,1,0]],[42,"PeopleVariation5",false,18,[-63,-64,-65,-66,-67],[4,"52lk1V4rVC9bgtEV+xGfi2",null,null,null,1,0]],[42,"TableVariation",false,18,[-68,-69,-70,-71],[4,"60EZConk5FTpTqUh5EbqMR",null,null,null,1,0]],[11,0,{},25,[12,"e892RDjrxNZISjs1LC/QQv",null,-79,[6,"0avNr34HRDtI3/KDaBcU/C",1,[[1,"Crowd",["_name"],-72],[2,["_lpos"],-73,[1,0.093,-0.039,0.147]],[2,["_lrot"],-74,[3,0,-0.9641463695807301,0,0.2653710195637387]],[2,["_euler"],-75,[1,0,-149.222,0]],[2,["_lscale"],-76,[1,0.090909,0.090909,0.090909]],[1,3,["startingPoseIndex"],2],[1,true,["shouldGetRandomPose"],2],[1,12,["poses","length"],2],[3,["poses","0"],2,5],[3,["poses","1"],2,6],[3,["poses","2"],2,7],[3,["poses","3"],2,8],[3,["poses","4"],2,9],[3,["poses","5"],2,10],[3,["poses","6"],2,11],[3,["poses","7"],2,12],[3,["poses","8"],2,13],[3,["poses","9"],2,14],[3,["poses","10"],2,15],[3,["poses","11"],2,16],[1,null,["poses","12"],2],[1,null,["poses","13"],2],[1,null,["poses","14"],2],[1,null,["poses","15"],2],[1,null,["poses","16"],2],[1,null,["poses","17"],2],[1,null,["poses","18"],2],[1,null,["poses","19"],2],[25,["_materials","0"],[0,["3ew1Vo2adBpqZ739+OrPkj"]],17],[2,["_lrot"],-77,[3,0,0,0,1]],[2,["_euler"],-78,[1,0,0,0]]]],[[15,["mainRenderer"],[0,["0b8pE5sPNepqN6zgbDPnqa"]]]],4]],[0,["e892RDjrxNZISjs1LC/QQv"]],[0,["e892RDjrxNZISjs1LC/QQv"]],[0,["e892RDjrxNZISjs1LC/QQv"]],[0,["e892RDjrxNZISjs1LC/QQv"]],[0,["e892RDjrxNZISjs1LC/QQv"]],[0,["e892RDjrxNZISjs1LC/QQv"]],[0,["e892RDjrxNZISjs1LC/QQv"]],[0,["e892RDjrxNZISjs1LC/QQv"]],[0,["e892RDjrxNZISjs1LC/QQv"]],[0,["e892RDjrxNZISjs1LC/QQv"]],[0,["e892RDjrxNZISjs1LC/QQv"]],[0,["e892RDjrxNZISjs1LC/QQv"]],[0,["e892RDjrxNZISjs1LC/QQv"]],[0,["e892RDjrxNZISjs1LC/QQv"]],[0,["e892RDjrxNZISjs1LC/QQv"]],[0,["e892RDjrxNZISjs1LC/QQv"]],[11,0,{},25,[12,"e892RDjrxNZISjs1LC/QQv",null,-82,[6,"0eySnZEVtHDoSIS3KCZdjs",1,[[1,"Crowd-001",["_name"],28],[2,["_lpos"],28,[1,0.083,-0.039,-0.123]],[2,["_lrot"],28,[3,0,-0.9641463695807301,0,0.2653710195637387]],[2,["_euler"],28,[1,0,-149.222,0]],[2,["_lscale"],28,[1,0.090909,0.090909,0.090909]],[1,3,["startingPoseIndex"],3],[1,true,["shouldGetRandomPose"],3],[1,12,["poses","length"],3],[3,["poses","0"],3,19],[3,["poses","1"],3,20],[3,["poses","2"],3,21],[3,["poses","3"],3,22],[3,["poses","4"],3,23],[3,["poses","5"],3,24],[3,["poses","6"],3,25],[3,["poses","7"],3,26],[3,["poses","8"],3,27],[3,["poses","9"],3,28],[3,["poses","10"],3,29],[3,["poses","11"],3,30],[1,null,["poses","12"],3],[1,null,["poses","13"],3],[1,null,["poses","14"],3],[1,null,["poses","15"],3],[1,null,["poses","16"],3],[1,null,["poses","17"],3],[1,null,["poses","18"],3],[1,null,["poses","19"],3],[25,["_materials","0"],[0,["3ew1Vo2adBpqZ739+OrPkj"]],31],[2,["_lrot"],-80,[3,0,0,0,1]],[2,["_euler"],-81,[1,0,0,0]]]],[[15,["mainRenderer"],[0,["0b8pE5sPNepqN6zgbDPnqa"]]]],18]],[11,0,{},19,[12,"e892RDjrxNZISjs1LC/QQv",null,-85,[6,"5ezx3k/zxAL6jKV482QNUq",1,[[1,"Crowd-002",["_name"],29],[2,["_lpos"],29,[1,-0.049,-0.039,-0.375]],[2,["_lrot"],29,[3,0,-0.9641463695807301,0,0.2653710195637387]],[2,["_euler"],29,[1,0,-149.222,0]],[2,["_lscale"],29,[1,0.090909,0.090909,0.090909]],[1,3,["startingPoseIndex"],4],[1,true,["shouldGetRandomPose"],4],[1,12,["poses","length"],4],[3,["poses","0"],4,39],[3,["poses","1"],4,40],[3,["poses","2"],4,41],[3,["poses","3"],4,42],[3,["poses","4"],4,43],[3,["poses","5"],4,44],[3,["poses","6"],4,45],[3,["poses","7"],4,46],[3,["poses","8"],4,47],[3,["poses","9"],4,48],[3,["poses","10"],4,49],[3,["poses","11"],4,50],[1,null,["poses","12"],4],[1,null,["poses","13"],4],[1,null,["poses","14"],4],[1,null,["poses","15"],4],[1,null,["poses","16"],4],[1,null,["poses","17"],4],[1,null,["poses","18"],4],[1,null,["poses","19"],4],[25,["_materials","0"],[0,["3ew1Vo2adBpqZ739+OrPkj"]],51],[2,["_lrot"],-83,[3,0,0,0,1]],[2,["_euler"],-84,[1,0,0,0]]]],[[15,["mainRenderer"],[0,["0b8pE5sPNepqN6zgbDPnqa"]]]],38]],[11,0,{},19,[12,"e892RDjrxNZISjs1LC/QQv",null,-88,[6,"198Pg0jslPMqjN9MYEaoDw",1,[[1,"Crowd-003",["_name"],30],[2,["_lpos"],30,[1,0.109,-0.039,0.118]],[2,["_lrot"],30,[3,0,-0.9641463695807301,0,0.2653710195637387]],[2,["_euler"],30,[1,0,-149.222,0]],[2,["_lscale"],30,[1,0.090909,0.090909,0.090909]],[1,3,["startingPoseIndex"],5],[1,true,["shouldGetRandomPose"],5],[1,12,["poses","length"],5],[3,["poses","0"],5,53],[3,["poses","1"],5,54],[3,["poses","2"],5,55],[3,["poses","3"],5,56],[3,["poses","4"],5,57],[3,["poses","5"],5,58],[3,["poses","6"],5,59],[3,["poses","7"],5,60],[3,["poses","8"],5,61],[3,["poses","9"],5,62],[3,["poses","10"],5,63],[3,["poses","11"],5,64],[1,null,["poses","12"],5],[1,null,["poses","13"],5],[1,null,["poses","14"],5],[1,null,["poses","15"],5],[1,null,["poses","16"],5],[1,null,["poses","17"],5],[1,null,["poses","18"],5],[1,null,["poses","19"],5],[25,["_materials","0"],[0,["3ew1Vo2adBpqZ739+OrPkj"]],65],[2,["_lrot"],-86,[3,0,0,0,1]],[2,["_euler"],-87,[1,0,0,0]]]],[[15,["mainRenderer"],[0,["0b8pE5sPNepqN6zgbDPnqa"]]]],52]],[11,0,{},20,[12,"e892RDjrxNZISjs1LC/QQv",null,-91,[6,"8c07s4akNDx619FIB4IkrG",1,[[1,"Crowd-004",["_name"],31],[2,["_lpos"],31,[1,0.10899999999999999,-0.039,0.11800000000000005]],[2,["_lrot"],31,[3,0,0.9641463695807301,0,-0.26537101956373876]],[2,["_euler"],31,[1,0,-149.222,0]],[2,["_lscale"],31,[1,0.090909,0.090909,0.090909]],[1,3,["startingPoseIndex"],6],[1,true,["shouldGetRandomPose"],6],[1,12,["poses","length"],6],[3,["poses","0"],6,71],[3,["poses","1"],6,72],[3,["poses","2"],6,73],[3,["poses","3"],6,74],[3,["poses","4"],6,75],[3,["poses","5"],6,76],[3,["poses","6"],6,77],[3,["poses","7"],6,78],[3,["poses","8"],6,79],[3,["poses","9"],6,80],[3,["poses","10"],6,81],[3,["poses","11"],6,82],[1,null,["poses","12"],6],[1,null,["poses","13"],6],[1,null,["poses","14"],6],[1,null,["poses","15"],6],[1,null,["poses","16"],6],[1,null,["poses","17"],6],[1,null,["poses","18"],6],[1,null,["poses","19"],6],[25,["_materials","0"],[0,["3ew1Vo2adBpqZ739+OrPkj"]],83],[2,["_lrot"],-89,[3,0,0,0,1]],[2,["_euler"],-90,[1,0,0,0]]]],[[15,["mainRenderer"],[0,["0b8pE5sPNepqN6zgbDPnqa"]]]],70]],[11,0,{},20,[12,"e892RDjrxNZISjs1LC/QQv",null,-94,[6,"af3R6xADFJYqmkYfaqVL0K",1,[[1,"Crowd-005",["_name"],32],[2,["_lpos"],32,[1,0.027,-0.039,0.408]],[2,["_lrot"],32,[3,0,-0.9641463695807301,0,0.2653710195637387]],[2,["_euler"],32,[1,0,-149.222,0]],[2,["_lscale"],32,[1,0.09090899999999999,0.090909,0.09090899999999999]],[1,3,["startingPoseIndex"],7],[1,true,["shouldGetRandomPose"],7],[1,12,["poses","length"],7],[3,["poses","0"],7,85],[3,["poses","1"],7,86],[3,["poses","2"],7,87],[3,["poses","3"],7,88],[3,["poses","4"],7,89],[3,["poses","5"],7,90],[3,["poses","6"],7,91],[3,["poses","7"],7,92],[3,["poses","8"],7,93],[3,["poses","9"],7,94],[3,["poses","10"],7,95],[3,["poses","11"],7,96],[1,null,["poses","12"],7],[1,null,["poses","13"],7],[1,null,["poses","14"],7],[1,null,["poses","15"],7],[1,null,["poses","16"],7],[1,null,["poses","17"],7],[1,null,["poses","18"],7],[1,null,["poses","19"],7],[25,["_materials","0"],[0,["3ew1Vo2adBpqZ739+OrPkj"]],97],[2,["_lrot"],-92,[3,0,0,0,1]],[2,["_euler"],-93,[1,0,0,0]]]],[[15,["mainRenderer"],[0,["0b8pE5sPNepqN6zgbDPnqa"]]]],84]],[11,0,{},20,[12,"e892RDjrxNZISjs1LC/QQv",null,-97,[6,"f4h/2d12VNwJCElfr5KDnK",1,[[1,"Crowd-006",["_name"],33],[2,["_lpos"],33,[1,-0.171,-0.039,-0.085]],[2,["_lrot"],33,[3,0,-0.9641463695807301,0,0.2653710195637387]],[2,["_euler"],33,[1,0,-149.222,0]],[2,["_lscale"],33,[1,0.09090899999999999,0.090909,0.09090899999999999]],[1,3,["startingPoseIndex"],8],[1,true,["shouldGetRandomPose"],8],[1,12,["poses","length"],8],[3,["poses","0"],8,99],[3,["poses","1"],8,100],[3,["poses","2"],8,101],[3,["poses","3"],8,102],[3,["poses","4"],8,103],[3,["poses","5"],8,104],[3,["poses","6"],8,105],[3,["poses","7"],8,106],[3,["poses","8"],8,107],[3,["poses","9"],8,108],[3,["poses","10"],8,109],[3,["poses","11"],8,110],[1,null,["poses","12"],8],[1,null,["poses","13"],8],[1,null,["poses","14"],8],[1,null,["poses","15"],8],[1,null,["poses","16"],8],[1,null,["poses","17"],8],[1,null,["poses","18"],8],[1,null,["poses","19"],8],[25,["_materials","0"],[0,["3ew1Vo2adBpqZ739+OrPkj"]],111],[2,["_lrot"],-95,[3,0,0,0,1]],[2,["_euler"],-96,[1,0,0,0]]]],[[15,["mainRenderer"],[0,["0b8pE5sPNepqN6zgbDPnqa"]]]],98]],[11,0,{},21,[12,"e892RDjrxNZISjs1LC/QQv",null,-100,[6,"1dIxVyPB1FAJnUmnR66Rxz",1,[[1,"Crowd-007",["_name"],34],[2,["_lpos"],34,[1,0.249,-0.039,0.081]],[2,["_lrot"],34,[3,0,0.9641463695807301,0,-0.26537101956373876]],[2,["_euler"],34,[1,0,-149.222,0]],[2,["_lscale"],34,[1,0.09090899999999998,0.090909,0.09090899999999998]],[1,3,["startingPoseIndex"],9],[1,true,["shouldGetRandomPose"],9],[1,12,["poses","length"],9],[3,["poses","0"],9,119],[3,["poses","1"],9,120],[3,["poses","2"],9,121],[3,["poses","3"],9,122],[3,["poses","4"],9,123],[3,["poses","5"],9,124],[3,["poses","6"],9,125],[3,["poses","7"],9,126],[3,["poses","8"],9,127],[3,["poses","9"],9,128],[3,["poses","10"],9,129],[3,["poses","11"],9,130],[1,null,["poses","12"],9],[1,null,["poses","13"],9],[1,null,["poses","14"],9],[1,null,["poses","15"],9],[1,null,["poses","16"],9],[1,null,["poses","17"],9],[1,null,["poses","18"],9],[1,null,["poses","19"],9],[25,["_materials","0"],[0,["3ew1Vo2adBpqZ739+OrPkj"]],131],[2,["_lrot"],-98,[3,0,0,0,1]],[2,["_euler"],-99,[1,0,0,0]]]],[[15,["mainRenderer"],[0,["0b8pE5sPNepqN6zgbDPnqa"]]]],118]],[11,0,{},21,[12,"e892RDjrxNZISjs1LC/QQv",null,-103,[6,"8a6lRR9qxK+L3veyuuz/Su",1,[[1,"Crowd-008",["_name"],35],[2,["_lpos"],35,[1,0.11,-0.039,0.311]],[2,["_lrot"],35,[3,0,0.9641463695807301,0,-0.26537101956373876]],[2,["_euler"],35,[1,0,-149.222,0]],[2,["_lscale"],35,[1,0.09090899999999998,0.090909,0.09090899999999998]],[1,3,["startingPoseIndex"],10],[1,true,["shouldGetRandomPose"],10],[1,12,["poses","length"],10],[3,["poses","0"],10,133],[3,["poses","1"],10,134],[3,["poses","2"],10,135],[3,["poses","3"],10,136],[3,["poses","4"],10,137],[3,["poses","5"],10,138],[3,["poses","6"],10,139],[3,["poses","7"],10,140],[3,["poses","8"],10,141],[3,["poses","9"],10,142],[3,["poses","10"],10,143],[3,["poses","11"],10,144],[1,null,["poses","12"],10],[1,null,["poses","13"],10],[1,null,["poses","14"],10],[1,null,["poses","15"],10],[1,null,["poses","16"],10],[1,null,["poses","17"],10],[1,null,["poses","18"],10],[1,null,["poses","19"],10],[25,["_materials","0"],[0,["3ew1Vo2adBpqZ739+OrPkj"]],145],[2,["_lrot"],-101,[3,0,0,0,1]],[2,["_euler"],-102,[1,0,0,0]]]],[[15,["mainRenderer"],[0,["0b8pE5sPNepqN6zgbDPnqa"]]]],132]],[11,0,{},22,[12,"e892RDjrxNZISjs1LC/QQv",null,-106,[6,"7aSL8d1ttPcKTYCRN2OOx/",1,[[1,"Crowd-009",["_name"],36],[2,["_lpos"],36,[1,0.267,-0.039,0.312]],[2,["_lrot"],36,[3,0,0.9641463695807301,0,-0.26537101956373876]],[2,["_euler"],36,[1,0,-149.222,0]],[2,["_lscale"],36,[1,0.09090899999999998,0.090909,0.09090899999999998]],[1,3,["startingPoseIndex"],11],[1,true,["shouldGetRandomPose"],11],[1,12,["poses","length"],11],[3,["poses","0"],11,153],[3,["poses","1"],11,154],[3,["poses","2"],11,155],[3,["poses","3"],11,156],[3,["poses","4"],11,157],[3,["poses","5"],11,158],[3,["poses","6"],11,159],[3,["poses","7"],11,160],[3,["poses","8"],11,161],[3,["poses","9"],11,162],[3,["poses","10"],11,163],[3,["poses","11"],11,164],[1,null,["poses","12"],11],[1,null,["poses","13"],11],[1,null,["poses","14"],11],[1,null,["poses","15"],11],[1,null,["poses","16"],11],[1,null,["poses","17"],11],[1,null,["poses","18"],11],[1,null,["poses","19"],11],[25,["_materials","0"],[0,["3ew1Vo2adBpqZ739+OrPkj"]],165],[2,["_lrot"],-104,[3,0,0,0,1]],[2,["_euler"],-105,[1,0,0,0]]]],[[15,["mainRenderer"],[0,["0b8pE5sPNepqN6zgbDPnqa"]]]],152]],[11,0,{},22,[12,"e892RDjrxNZISjs1LC/QQv",null,-109,[6,"87Ku0JkVFNQo5gnbaQFQfj",1,[[1,"Crowd-010",["_name"],37],[2,["_lpos"],37,[1,0.009,-0.039,0.023]],[2,["_lrot"],37,[3,0,0.9641463695807301,0,-0.26537101956373876]],[2,["_euler"],37,[1,0,-149.222,0]],[2,["_lscale"],37,[1,0.09090899999999998,0.090909,0.09090899999999998]],[1,3,["startingPoseIndex"],12],[1,true,["shouldGetRandomPose"],12],[1,12,["poses","length"],12],[3,["poses","0"],12,167],[3,["poses","1"],12,168],[3,["poses","2"],12,169],[3,["poses","3"],12,170],[3,["poses","4"],12,171],[3,["poses","5"],12,172],[3,["poses","6"],12,173],[3,["poses","7"],12,174],[3,["poses","8"],12,175],[3,["poses","9"],12,176],[3,["poses","10"],12,177],[3,["poses","11"],12,178],[1,null,["poses","12"],12],[1,null,["poses","13"],12],[1,null,["poses","14"],12],[1,null,["poses","15"],12],[1,null,["poses","16"],12],[1,null,["poses","17"],12],[1,null,["poses","18"],12],[1,null,["poses","19"],12],[25,["_materials","0"],[0,["3ew1Vo2adBpqZ739+OrPkj"]],179],[2,["_lrot"],-107,[3,0,0,0,1]],[2,["_euler"],-108,[1,0,0,0]]]],[[15,["mainRenderer"],[0,["0b8pE5sPNepqN6zgbDPnqa"]]]],166]],[11,0,{},23,[12,"e892RDjrxNZISjs1LC/QQv",null,-112,[6,"cbi2v8iitKWaHnypOQx+pm",1,[[1,"Crowd-011",["_name"],38],[2,["_lpos"],38,[1,0.021,-0.039,-0.173]],[2,["_lrot"],38,[3,0,0.9641463695807301,0,-0.26537101956373876]],[2,["_euler"],38,[1,0,-149.222,0]],[2,["_lscale"],38,[1,0.09090899999999998,0.090909,0.09090899999999998]],[1,3,["startingPoseIndex"],13],[1,true,["shouldGetRandomPose"],13],[1,12,["poses","length"],13],[3,["poses","0"],13,187],[3,["poses","1"],13,188],[3,["poses","2"],13,189],[3,["poses","3"],13,190],[3,["poses","4"],13,191],[3,["poses","5"],13,192],[3,["poses","6"],13,193],[3,["poses","7"],13,194],[3,["poses","8"],13,195],[3,["poses","9"],13,196],[3,["poses","10"],13,197],[3,["poses","11"],13,198],[1,null,["poses","12"],13],[1,null,["poses","13"],13],[1,null,["poses","14"],13],[1,null,["poses","15"],13],[1,null,["poses","16"],13],[1,null,["poses","17"],13],[1,null,["poses","18"],13],[1,null,["poses","19"],13],[25,["_materials","0"],[0,["3ew1Vo2adBpqZ739+OrPkj"]],199],[2,["_lrot"],-110,[3,0,0,0,1]],[2,["_euler"],-111,[1,0,0,0]]]],[[15,["mainRenderer"],[0,["0b8pE5sPNepqN6zgbDPnqa"]]]],186]],[11,0,{},23,[12,"e892RDjrxNZISjs1LC/QQv",null,-115,[6,"b83efRkEFHkb4rhRYpbFYU",1,[[1,"Crowd-012",["_name"],39],[2,["_lpos"],39,[1,0.015,-0.039,0.115]],[2,["_lrot"],39,[3,0,0.9641463695807301,0,-0.26537101956373876]],[2,["_euler"],39,[1,0,-149.222,0]],[2,["_lscale"],39,[1,0.09090899999999998,0.090909,0.09090899999999998]],[1,3,["startingPoseIndex"],14],[1,true,["shouldGetRandomPose"],14],[1,12,["poses","length"],14],[3,["poses","0"],14,201],[3,["poses","1"],14,202],[3,["poses","2"],14,203],[3,["poses","3"],14,204],[3,["poses","4"],14,205],[3,["poses","5"],14,206],[3,["poses","6"],14,207],[3,["poses","7"],14,208],[3,["poses","8"],14,209],[3,["poses","9"],14,210],[3,["poses","10"],14,211],[3,["poses","11"],14,212],[1,null,["poses","12"],14],[1,null,["poses","13"],14],[1,null,["poses","14"],14],[1,null,["poses","15"],14],[1,null,["poses","16"],14],[1,null,["poses","17"],14],[1,null,["poses","18"],14],[1,null,["poses","19"],14],[25,["_materials","0"],[0,["3ew1Vo2adBpqZ739+OrPkj"]],213],[2,["_lrot"],-113,[3,0,0,0,1]],[2,["_euler"],-114,[1,0,0,0]]]],[[15,["mainRenderer"],[0,["0b8pE5sPNepqN6zgbDPnqa"]]]],200]],[11,0,{},24,[12,"e892RDjrxNZISjs1LC/QQv",null,-118,[6,"12+/6In5JHl4n4Af6qPY/e",1,[[1,"Crowd-013",["_name"],40],[2,["_lpos"],40,[1,0.015000000000000013,-0.039,0.1150000000000001]],[2,["_lrot"],40,[3,0,0.9641463695807301,0,-0.26537101956373876]],[2,["_euler"],40,[1,0,-149.222,0]],[2,["_lscale"],40,[1,0.09090899999999998,0.090909,0.09090899999999998]],[1,3,["startingPoseIndex"],15],[1,true,["shouldGetRandomPose"],15],[1,12,["poses","length"],15],[3,["poses","0"],15,219],[3,["poses","1"],15,220],[3,["poses","2"],15,221],[3,["poses","3"],15,222],[3,["poses","4"],15,223],[3,["poses","5"],15,224],[3,["poses","6"],15,225],[3,["poses","7"],15,226],[3,["poses","8"],15,227],[3,["poses","9"],15,228],[3,["poses","10"],15,229],[3,["poses","11"],15,230],[1,null,["poses","12"],15],[1,null,["poses","13"],15],[1,null,["poses","14"],15],[1,null,["poses","15"],15],[1,null,["poses","16"],15],[1,null,["poses","17"],15],[1,null,["poses","18"],15],[1,null,["poses","19"],15],[25,["_materials","0"],[0,["3ew1Vo2adBpqZ739+OrPkj"]],231],[2,["_lrot"],-116,[3,0,0,0,1]],[2,["_euler"],-117,[1,0,0,0]]]],[[15,["mainRenderer"],[0,["0b8pE5sPNepqN6zgbDPnqa"]]]],218]],[11,0,{},24,[12,"e892RDjrxNZISjs1LC/QQv",null,-121,[6,"0cVqf/Ut1JP6SsOgFmhT84",1,[[1,"Crowd-014",["_name"],41],[2,["_lpos"],41,[1,-0.359,-0.039,0.338]],[2,["_lrot"],41,[3,0,0.9641463695807301,0,-0.26537101956373876]],[2,["_euler"],41,[1,0,-149.222,0]],[2,["_lscale"],41,[1,0.09090899999999998,0.090909,0.09090899999999998]],[1,3,["startingPoseIndex"],16],[1,true,["shouldGetRandomPose"],16],[1,12,["poses","length"],16],[3,["poses","0"],16,233],[3,["poses","1"],16,234],[3,["poses","2"],16,235],[3,["poses","3"],16,236],[3,["poses","4"],16,237],[3,["poses","5"],16,238],[3,["poses","6"],16,239],[3,["poses","7"],16,240],[3,["poses","8"],16,241],[3,["poses","9"],16,242],[3,["poses","10"],16,243],[3,["poses","11"],16,244],[1,null,["poses","12"],16],[1,null,["poses","13"],16],[1,null,["poses","14"],16],[1,null,["poses","15"],16],[1,null,["poses","16"],16],[1,null,["poses","17"],16],[1,null,["poses","18"],16],[1,null,["poses","19"],16],[25,["_materials","0"],[0,["3ew1Vo2adBpqZ739+OrPkj"]],245],[2,["_lrot"],-119,[3,0,0,0,1]],[2,["_euler"],-120,[1,0,0,0]]]],[[15,["mainRenderer"],[0,["0b8pE5sPNepqN6zgbDPnqa"]]]],232]],[11,0,{},24,[12,"e892RDjrxNZISjs1LC/QQv",null,-124,[6,"46XJUk19dBX7AIShj5Enh1",1,[[1,"Crowd-015",["_name"],42],[2,["_lpos"],42,[1,0.019,-0.039,-0.301]],[2,["_lrot"],42,[3,0,0.9641463695807301,0,-0.26537101956373876]],[2,["_euler"],42,[1,0,-149.222,0]],[2,["_lscale"],42,[1,0.09090899999999998,0.090909,0.09090899999999998]],[1,3,["startingPoseIndex"],17],[1,true,["shouldGetRandomPose"],17],[1,12,["poses","length"],17],[3,["poses","0"],17,247],[3,["poses","1"],17,248],[3,["poses","2"],17,249],[3,["poses","3"],17,250],[3,["poses","4"],17,251],[3,["poses","5"],17,252],[3,["poses","6"],17,253],[3,["poses","7"],17,254],[3,["poses","8"],17,255],[3,["poses","9"],17,256],[3,["poses","10"],17,257],[3,["poses","11"],17,258],[1,null,["poses","12"],17],[1,null,["poses","13"],17],[1,null,["poses","14"],17],[1,null,["poses","15"],17],[1,null,["poses","16"],17],[1,null,["poses","17"],17],[1,null,["poses","18"],17],[1,null,["poses","19"],17],[25,["_materials","0"],[0,["3ew1Vo2adBpqZ739+OrPkj"]],259],[2,["_lrot"],-122,[3,0,0,0,1]],[2,["_euler"],-123,[1,0,0,0]]]],[[15,["mainRenderer"],[0,["0b8pE5sPNepqN6zgbDPnqa"]]]],246]],[37,"table",25,[[16,-125,[7,"deTNnoNB9NTLMva2adQnDU"],[0],[9],1]],[4,"10ESfIMLBIwaVSir/zn4LP",null,null,null,1,0],[1,0.4636607225537302,-0.010000000000000035,-4.688638441085814]],[37,"table",25,[[16,-126,[7,"b2Z19kY7FAf55bh/jPUWEl"],[2],[9],3]],[4,"c5gDeVNphK07gBWy+m5mVg",null,null,null,1,0],[1,0.4636607225537302,-0.010000000000000035,-4.688638441085814]],[0,["e3hqu0HdxNq4e2nv3hKDvO"]],[0,["e3hqu0HdxNq4e2nv3hKDvO"]],[36,"Beer_Bottle5",19,[[16,-127,[7,"c6JQL9MHlPfb60JC52BY90"],[32],[9],33]],[4,"7fhKCiwz9AOZ7ONBGxrmA0",null,null,null,1,0],[1,-0.017,0.008,-0.001],[1,1.1101818181818182,2.8880000000000003,1.1101818181818184]],[36,"Beer_Bottle6",19,[[16,-128,[7,"62Em35CyJIipi46b9puAUI"],[34],[9],35]],[4,"185S6iG9RAJoEkBDIQkItD",null,null,null,1,0],[1,0.126,0.008,0.186],[1,1.1101818181818182,2.8880000000000003,1.1101818181818184]],[32,"Amplifier-001",19,[[16,-129,[7,"0fG4NulrhCf6LLNQoYAkyg"],[36],[9],37]],[4,"505zWUpTxN3bLQMiOMWoZM",null,null,null,1,0],[1,-0.188,0.08,-0.344],[3,0,0.48709770525415746,0,0.8733474826986873],[1,15.609465165571734,18.4912109375,9.172158674760299],[1,0,58.3,0]],[0,["e3hqu0HdxNq4e2nv3hKDvO"]],[0,["e3hqu0HdxNq4e2nv3hKDvO"]],[32,"Beer_Bottle5",20,[[16,-130,[7,"014LF+vsRGo7KghXj8HLWE"],[66],[9],67]],[4,"4arvhPQbpFEbjVHJoUYBaW",null,null,null,1,0],[1,0.059,-0.011,0.029000000000000026],[3,-0.5913096483635822,0,0,0.8064446042674827],[1,1.1101818181818182,2.8880000000000003,1.110181818181818],[1,-72.49999999999999,0,0]],[32,"Beer_Bottle6",20,[[16,-131,[7,"17KopRePNNgoU5hJg0Vd1H"],[68],[9],69]],[4,"858D5KF9RAW6muQJcd2yOh",null,null,null,1,0],[1,-0.3420000000000001,0.008,0.387],[3,-0.44150585279174526,0,0,0.8972583696743284],[1,1.1101818181818182,2.8880000000000003,1.1101818181818184],[1,-52.400000000000006,0,0]],[0,["e3hqu0HdxNq4e2nv3hKDvO"]],[0,["e3hqu0HdxNq4e2nv3hKDvO"]],[0,["e3hqu0HdxNq4e2nv3hKDvO"]],[36,"Beer_Bottle2",21,[[16,-132,[7,"04bDtH8hhNAZlP0i3vn9r0"],[112],[9],113]],[4,"d8pL9OUC9IxK5ajeP4dHWc",null,null,null,1,0],[1,0.122,0.008,0.382],[1,1.1101818181818182,2.8880000000000003,1.1101818181818182]],[37,"table",21,[[16,-133,[7,"76r1HscolOn40AITIFbVUI"],[114],[9],115]],[4,"06Jf36UaBFBbBq3F2xl2sW",null,null,null,1,0],[1,0.644,-0.01,-4.483]],[37,"table-001",21,[[16,-134,[7,"49GzrBLzBJqZfSASKI6Ex/"],[116],[9],117]],[4,"8dJAPhFVxILItJwUX+1+DJ",null,null,null,1,0],[1,0.644,-0.01,-4.483]],[0,["e3hqu0HdxNq4e2nv3hKDvO"]],[0,["e3hqu0HdxNq4e2nv3hKDvO"]],[36,"Beer_Bottle2",22,[[16,-135,[7,"41F6rsSIZFwZblbdmUTcuP"],[146],[9],147]],[4,"f1ERcICB9NWY9pi02XS2fz",null,null,null,1,0],[1,0.138,0.008,-0.507],[1,1.1101818181818182,2.8880000000000003,1.1101818181818182]],[32,"Light_Stand-001",22,[[16,-136,[7,"a9fj/QbYFE87RhfvQE+Kb5"],[148],[9],149]],[4,"a257sNrkBHTZxuzB+KVpJc",null,null,null,1,0],[1,-0.009,0.011,0.317],[3,0,0.4293450097784799,0,0.90314055527272],[1,0.36363636363636365,0.36363636363636365,0.36363636363636365],[1,0,50.852,0]],[36,"Beer_Bottle3",22,[[16,-137,[7,"3c7MZzdVxOo60Qq0dahRhf"],[150],[9],151]],[4,"81Xelbl+pMj7yHXrvPveRI",null,null,null,1,0],[1,-0.019,0.008,0.053],[1,1.1101818181818182,2.8880000000000003,1.1101818181818182]],[0,["e3hqu0HdxNq4e2nv3hKDvO"]],[0,["e3hqu0HdxNq4e2nv3hKDvO"]],[32,"Beer_Bottle3",23,[[16,-138,[7,"e0Xbraey1P2K6X/yz8UZ6c"],[180],[9],181]],[4,"4ccPMgJCJAD6FCCKJDH5jR",null,null,null,1,0],[1,0.059,-0.011,0.029],[3,-0.5913096483635824,0,0,0.8064446042674825],[1,1.1101818181818182,2.8880000000000003,1.1101818181818182],[1,-72.5,0,0]],[32,"Beer_Bottle4",23,[[16,-139,[7,"53nASOc1hOeL9nIGYttJlg"],[182],[9],183]],[4,"e7hzTdKxVBFpt3KxArDBVK",null,null,null,1,0],[1,-0.188,0.008,-0.302],[3,-0.4415058527917452,0,0,0.8972583696743285],[1,1.1101818181818182,2.8880000000000003,1.1101818181818182],[1,-52.4,0,0]],[32,"Studio_Camera-001",23,[[16,-140,[7,"64a4c8rfhEw6dMvSKE2Irn"],[184],[9],185]],[4,"05MVqkQ69NBLYxY9H2Uljd",null,null,null,1,0],[1,-0.375,0.011,0.585],[3,0,0.6333065863819719,0,0.7739010063601248],[1,0.36363636363636365,0.36363636363636365,0.36363636363636365],[1,0,78.589,0]],[0,["e3hqu0HdxNq4e2nv3hKDvO"]],[0,["e3hqu0HdxNq4e2nv3hKDvO"]],[32,"Beer_Bottle3",24,[[16,-141,[7,"25/ZhE8CRC778SrDUcq3aI"],[214],[9],215]],[4,"dfNibg1hZN7JrKRGGGTM69",null,null,null,1,0],[1,0.059,-0.011,0.029],[3,-0.5913096483635824,0,0,0.8064446042674825],[1,1.1101818181818182,2.8880000000000003,1.1101818181818182],[1,-72.5,0,0]],[32,"Beer_Bottle4",24,[[16,-142,[7,"49ahH5y25Cl6S2eZ7YGokJ"],[216],[9],217]],[4,"2as7NmKWpJbp35egn235nQ",null,null,null,1,0],[1,-0.342,0.008,0.387],[3,-0.4415058527917452,0,0,0.8972583696743285],[1,1.1101818181818182,2.8880000000000003,1.1101818181818182],[1,-52.4,0,0]],[0,["e3hqu0HdxNq4e2nv3hKDvO"]],[0,["e3hqu0HdxNq4e2nv3hKDvO"]],[0,["e3hqu0HdxNq4e2nv3hKDvO"]]],0,[0,-1,57,0,-2,56,0,-3,55,0,-4,54,0,-5,53,0,-6,52,0,-7,51,0,-8,50,0,-9,49,0,-10,48,0,-11,47,0,-12,46,0,-13,45,0,-14,44,0,-15,43,0,-16,26,0,3,26,0,5,26,0,4,1,0,-1,25,0,-2,19,0,-3,20,0,-4,21,0,-5,22,0,-6,23,0,-7,24,0,21,18,0,2,1,0,2,1,0,-1,18,0,-1,25,0,-2,19,0,-3,20,0,-4,21,0,-5,22,0,-6,23,0,-7,24,0,-1,62,0,-2,63,0,-3,64,0,-4,44,0,-5,45,0,-1,67,0,-2,68,0,-3,46,0,-4,47,0,-5,48,0,-1,72,0,-2,73,0,-3,74,0,-4,49,0,-5,50,0,-1,77,0,-2,78,0,-3,79,0,-4,51,0,-5,52,0,-1,82,0,-2,83,0,-3,84,0,-4,53,0,-5,54,0,-1,87,0,-2,88,0,-3,55,0,-4,56,0,-5,57,0,-1,58,0,-2,59,0,-3,26,0,-4,43,0,1,27,0,1,27,0,1,27,0,1,27,0,1,27,0,1,60,0,1,60,0,4,26,0,1,61,0,1,61,0,4,43,0,1,65,0,1,65,0,4,44,0,1,66,0,1,66,0,4,45,0,1,69,0,1,69,0,4,46,0,1,70,0,1,70,0,4,47,0,1,71,0,1,71,0,4,48,0,1,75,0,1,75,0,4,49,0,1,76,0,1,76,0,4,50,0,1,80,0,1,80,0,4,51,0,1,81,0,1,81,0,4,52,0,1,85,0,1,85,0,4,53,0,1,86,0,1,86,0,4,54,0,1,89,0,1,89,0,4,55,0,1,90,0,1,90,0,4,56,0,1,91,0,1,91,0,4,57,0,2,58,0,2,59,0,2,62,0,2,63,0,2,64,0,2,67,0,2,68,0,2,72,0,2,73,0,2,74,0,2,77,0,2,78,0,2,79,0,2,82,0,2,83,0,2,84,0,2,87,0,2,88,0,14,1,142],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[-1,7,-1,7,6,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,7,-1,7,-1,7,6,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,7,-1,7,6,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,7,-1,7,-1,7,6,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,7,-1,7,-1,7,6,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,7,-1,7,-1,7,6,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,7,-1,7,6,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0],[22,41,22,42,6,29,30,31,32,33,34,27,28,23,24,25,26,19,6,29,30,31,32,33,34,27,28,23,24,25,26,19,17,18,17,18,17,58,6,29,30,31,32,33,34,27,28,23,24,25,26,19,6,29,30,31,32,33,34,27,28,23,24,25,26,19,17,18,17,18,6,29,30,31,32,33,34,27,28,23,24,25,26,19,6,29,30,31,32,33,34,27,28,23,24,25,26,19,6,29,30,31,32,33,34,27,28,23,24,25,26,19,17,18,22,41,22,42,6,29,30,31,32,33,34,27,28,23,24,25,26,19,6,29,30,31,32,33,34,27,28,23,24,25,26,19,17,18,17,59,17,18,6,29,30,31,32,33,34,27,28,23,24,25,26,19,6,29,30,31,32,33,34,27,28,23,24,25,26,19,17,18,17,18,17,60,6,29,30,31,32,33,34,27,28,23,24,25,26,19,6,29,30,31,32,33,34,27,28,23,24,25,26,19,17,18,17,18,6,29,30,31,32,33,34,27,28,23,24,25,26,19,6,29,30,31,32,33,34,27,28,23,24,25,26,19,6,29,30,31,32,33,34,27,28,23,24,25,26,19]],[[[44,"Collection_Texture",[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{"USE_ALBEDO_MAP":true,"USE_NORMAL_MAP":true,"USE_EMISSIVE_MAP":true},{},{},{}],[[[{"roughness":0,"specularIntensity":0.545},"mainTexture",6,0,"normalMap",6,1,"emissiveMap",6,2],{},{},{}],11,0,0,0]]],0,0,[0,0,0,0],[13,22,16,11],[204,205,206,38]],[[{"name":"bg_4_studio2","rect":{"x":0,"y":0,"width":1200,"height":1800},"offset":{"x":0,"y":0},"originalSize":{"width":1200,"height":1800},"rotated":false,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[-600,-900,0,600,-900,0,-600,900,0,600,900,0],"indexes":[0,1,2,2,1,3],"uv":[0,1800,1200,1800,0,0,1200,0],"nuv":[0,0,1,0,0,1,1,1],"minPos":{"x":-600,"y":-900,"z":0},"maxPos":{"x":600,"y":900,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[10],[207]],[[[31,".bin",3647431930,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":5088,"length":360,"count":180,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":5088,"count":106,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.005000002216547728,-0.004999998025596142,-0.004149103071540594],"maxPosition",8,[1,0.0049999975599348545,0.004999998956918716,0.004999999888241291]]],-1],0,0,[],[],[]],[[[31,".bin",557617586,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":2688,"length":168,"count":84,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":2688,"count":56,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.004999999888241291,-0.004999999888241291,-0.004173545632511377],"maxPosition",8,[1,0.004999999888241291,0.005000001285225153,0.004999999888241291]]],-1],0,0,[],[],[]],[[{"name":"RARITY_TABLE","rect":{"x":0,"y":0,"width":1035,"height":1079},"offset":{"x":0,"y":0},"originalSize":{"width":1035,"height":1079},"rotated":false,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[-517.5,-539.5,0,517.5,-539.5,0,-517.5,539.5,0,517.5,539.5,0],"indexes":[0,1,2,2,1,3],"uv":[0,1079,1035,1079,0,0,1035,0],"nuv":[0,0,1,0,0,1,1,1],"minPos":{"x":-517.5,"y":-539.5,"z":0},"maxPos":{"x":517.5,"y":539.5,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[10],[208]],[[{"name":"AVERAGE_SCORE","rect":{"x":0,"y":0,"width":1035,"height":759},"offset":{"x":0,"y":0},"originalSize":{"width":1035,"height":759},"rotated":false,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[-517.5,-379.5,0,517.5,-379.5,0,-517.5,379.5,0,517.5,379.5,0],"indexes":[0,1,2,2,1,3],"uv":[0,759,1035,759,0,0,1035,0],"nuv":[0,0,1,0,0,1,1,1],"minPos":{"x":-517.5,"y":-379.5,"z":0},"maxPos":{"x":517.5,"y":379.5,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[10],[209]],[[[54,"mat_dialog_box_text",1,[{"rasterizerState":{},"depthStencilState":{"depthTest":false},"blendState":{"targets":[{}]}}],[{"USE_TEXTURE":true}],[[[{},"mainTexture",6,0]],11]]],0,0,[0,0],[13,11],[115,51]],[[{"name":"img_post_pagination_active","rect":{"x":0,"y":0,"width":213,"height":213},"offset":{"x":0,"y":0},"originalSize":{"width":213,"height":213},"rotated":false,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[-106.5,-106.5,0,106.5,-106.5,0,-106.5,106.5,0,106.5,106.5,0],"indexes":[0,1,2,2,1,3],"uv":[0,213,213,213,0,0,213,0],"nuv":[0,0,1,0,0,1,1,1],"minPos":{"x":-106.5,"y":-106.5,"z":0},"maxPos":{"x":106.5,"y":106.5,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[10],[210]],[[{"name":"img_game_collectible_container","rect":{"x":0,"y":0,"width":1070,"height":290},"offset":{"x":0,"y":0},"originalSize":{"width":1070,"height":290},"rotated":false,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[-535,-145,0,535,-145,0,-535,145,0,535,145,0],"indexes":[0,1,2,2,1,3],"uv":[0,290,1070,290,0,0,1070,0],"nuv":[0,0,1,0,0,1,1,1],"minPos":{"x":-535,"y":-145,"z":0},"maxPos":{"x":535,"y":145,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[10],[211]],[[{"name":"img_game_collectible_chain_inactive","rect":{"x":0,"y":0,"width":170,"height":188},"offset":{"x":0,"y":0},"originalSize":{"width":170,"height":188},"rotated":false,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[-85,-94,0,85,-94,0,-85,94,0,85,94,0],"indexes":[0,1,2,2,1,3],"uv":[0,188,170,188,0,0,170,0],"nuv":[0,0,1,0,0,1,1,1],"minPos":{"x":-85,"y":-94,"z":0},"maxPos":{"x":85,"y":94,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[10],[212]],[[[58,"base_level"],[207,"base_level",[[71,-2,[7,"f1ckuztdhLK5yWzu2TPOoQ"]]],[4,"7f7WjHcwRBCY/EdrI6zFjb",null,null,null,-1,0]]],0,[0,4,1,0,2,1,0,14,1,2],[],[],[]],[[{"name":"img_wipeout_2","rect":{"x":0,"y":0,"width":864,"height":590},"offset":{"x":0,"y":0},"originalSize":{"width":864,"height":590},"rotated":false,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[-432,-295,0,432,-295,0,-432,295,0,432,295,0],"indexes":[0,1,2,2,1,3],"uv":[0,590,864,590,0,0,864,0],"nuv":[0,0,1,0,0,1,1,1],"minPos":{"x":-432,"y":-295,"z":0},"maxPos":{"x":432,"y":295,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[10],[213]],[[[58,"prefab_bouncer"],[100,"prefab_bouncer",[-3,-4,-5,-6,-7,-8,-9],[[261,-2,[7,"f5I5XJDSdfvYQMQzX5aAlh"]]],[4,"c4l2jKpBJeLYIawslllxkg",null,null,null,-1,0],[1,0,0,10]],[181,"spine",[[-10,[172,"pelvis.L",-11,[4,"547PPmj6df0ahawZbzpFw+",null,null,null,1,0],[3,-0.2032373381681038,-0.7763453061545025,-0.28841131686305554,0.5223039941370677],[1,-41.3139286471015,-111.82816443813599,0.8186666042964543]],[172,"pelvis.R",-12,[4,"c92qF78BZTJo/CbnFPa/p4",null,null,null,1,0],[3,-0.20323747597134467,0.7763451414466321,0.28841132210344145,0.522304182441181],[1,-41.31393886471129,111.82813324980204,-0.8186684908923704]],-13,-14],1,4,4,1,1],[4,"d7KLiZh65aGa9sj2/UkV4O",null,null,null,1,0],[1,0,0.0006169986445456743,0.011288166046142578],[3,0.7904553898650164,7.301801372229058e-8,9.42296112365399e-8,0.6125196132642045],[1,104.45617753397897,-0.0000034101690012135053,0.000013227872896161157]],[181,"spine.003",[[-15,-16,-17,[60,"breast.L",-18,[4,"88CYEPwo5c0pnAA4Q3Vyp1",null,null,null,1,0],[1,0.0010911773424595594,-0.00015230337157845497,-0.00048070764751173556],[3,-1.394098612153863e-7,0.6969361801616805,0.7171331541503468,3.020621576301467e-8],[1,-91.63658550561694,179.99998613130012,-0.000008651421762509973]],[60,"breast.R",-19,[4,"bcMrElH2Zcpo214UIiuFDc",null,null,null,1,0],[1,-0.0010911771096289158,-0.00015230337157845497,-0.0004807081713806838],[3,-1.394098612153863e-7,0.6969361801616805,0.7171331541503468,3.020621576301467e-8],[1,-91.63658550561694,179.99998613130012,-0.000008651421762509973]]],1,1,1,4,4],[4,"6derEvG7xRRrmUNIa8Blom",null,null,null,1,0],[1,-5.755235670471411e-18,0.0019324551103636622,0],[3,0.0016271261062624943,-3.909030575411322e-14,3.8793479056141447e-10,0.9999986762294408],[1,0.18645499952334563,-7.68117624215062e-11,4.4453986315375557e-8]],[173,"hand.L",[-20,-21,-22,-23],[4,"43PW/tW69VI7uA4heLTXHO",null,null,null,1,0],[1,6.274785691040563e-10,0.0014514133799821138,-1.8626451075975936e-11],[3,-0.0467019604646627,0.006994180411104641,0.14749899569427452,0.9879342359683232],[1,-5.658610428446997,1.6528065704506358,16.90497850977522]],[173,"hand.R",[-24,-25,-26,-27],[4,"4f0ETwP6lbGK8Sdm5bnU1b",null,null,null,1,0],[1,-1.0477379380757768e-11,0.0014514126814901829,6.519257911286047e-10],[3,-0.04670195296114855,-0.00699407795769368,-0.14749901042825558,0.9879342348485662],[1,-5.65860779297418,-1.6527944120273197,-16.904980812688464]],[41,"palm.01.L",4,[-28,-29],[4,"ebDlVevlldF76PTsC8ENg0",null,null,null,1,0],[1,-0.000016865888028405607,0.000375524687115103,0.000347176130162552],[3,0.09840946559748734,0.711642736025015,0.0604816036675326,0.6929806411159343],[1,2.9588951827221726,91.18683044727167,12.937610275322239]],[41,"palm.01.R",5,[-30,-31],[4,"cegLPvR/FV16o55Y8aLypt",null,null,null,1,0],[1,0.00001686431460257154,0.00037552526919171214,0.00034717528615146875],[3,0.09840950269057001,-0.71164279447393,-0.06048155141524502,0.6929805803858687],[1,2.958901456320494,-91.18683948284338,-12.93760936599645]],[102,"Bouncer Boots",1,[[115,-32,[7,"3dngILGdBS6rBBgEMXHEFb"],[0],[9],1,1,2]],[4,"3eHkR/m5pXgZCaT+IrXSAX",null,null,null,1,0],[3,-0.7071068407911908,0,0,0.7071067215818992],[1,100,100,100],[1,-90.00000965934633,0,0]],[102,"Bouncer Pants",1,[[115,-33,[7,"7eNmkoXydSAZOZj0Lt26C4"],[3],[9],1,4,5]],[4,"495J4t3I1RFbAa5/5pmzj4",null,null,null,1,0],[3,-0.7071068407911908,0,0,0.7071067215818992],[1,100,100,100],[1,-90.00000965934633,0,0]],[102,"Bouncer eyes",1,[[115,-34,[7,"dbMFbdp2ZXsaH7oYaLcDEi"],[6],[9],1,7,8]],[4,"edAgQa5PxULJuj0+lh0b9z",null,null,null,1,0],[3,-0.7071068407911908,0,0,0.7071067215818992],[1,100,100,100],[1,-90.00000965934633,0,0]],[102,"Bouncer beard",1,[[115,-35,[7,"a3dx4exllVWKz0TCF3Lu6X"],[9],[9],1,10,11]],[4,"86ZQs7OLNXhZN77zYlQKrT",null,null,null,1,0],[3,-0.7071068407911908,0,0,0.7071067215818992],[1,100,100,100],[1,-90.00000965934633,0,0]],[102,"Bouncer Head",1,[[115,-36,[7,"3bwHWWkVRX9JkfZs1LCZX6"],[12,13,14,15],[9],1,16,17]],[4,"5coa0v449c6KUR31y0/3i0",null,null,null,1,0],[3,-0.7071068407911908,0,0,0.7071067215818992],[1,100,100,100],[1,-90.00000965934633,0,0]],[102,"Bouncer Shirt",1,[[115,-37,[7,"e8VbGTC/Zb77TCVxMXEUYr"],[18,19],[9],1,20,21]],[4,"b13MJVGAlccrMJa2Fo1BLa",null,null,null,1,0],[3,-0.7071068407911908,0,0,0.7071067215818992],[1,100,100,100],[1,-90.00000965934633,0,0]],[208,"rig.001",1,[-38],[4,"bcb2//1NBcnZ0s/Jr0kPc8",null,null,null,1,0],[3,-0.7071068407911908,0,0,0.7071067215818992],[1,100,100,100],[1,-90.00000965934633,0,0]],[18,"root",14,[2],[4,"e5fDkzGi9aK6FqLRCySZR4",null,null,null,1,0]],[41,"spine.001",2,[-39],[4,"bcZR+e9Z9TXa+VcwLOBuTm",null,null,null,1,0],[1,3.552713599391162e-17,0.001701435772702098,1.1175870645585562e-10],[3,-0.06447634678673153,2.543359337299148e-14,-1.53723660919793e-8,0.9979192355621956],[1,-7.393573905530036,-1.1357497449543858e-7,-0.0000017578782274606864]],[41,"spine.002",16,[3],[4,"85eiZ4n2VSOrNzagtoKBHx",null,null,null,1,0],[1,3.608224697682861e-18,0.0015272579621523619,-1.5133991282390014e-11],[3,-0.0774641400090302,2.1638511777360493e-14,-1.8468888415920658e-8,0.996995138911249],[1,-8.885638392775853,-1.6394098511054206e-7,-0.0000021100194850840337]],[41,"spine.004",3,[-40],[4,"d0fFLPU8RRnrVGTcy1dfi5",null,null,null,1,0],[1,-3.0521477746055657e-18,0.002152550034224987,9.313225537987968e-12],[3,0.09451627569139381,-2.3735124036367295e-7,-4.660152002646343e-15,0.9955233164669587],[1,10.846958353941172,-0.000027076689772309674,-0.000002570696604501769]],[66,"spine.005",18,[[60,"spine.006",-41,[4,"9bUcGsFaZY35Wqe5qNtJTD",null,null,null,1,0],[1,8.374511351926698e-18,0.0006802943535149097,5.122274132629556e-11],[3,0.021908140156176915,1.1918065656192292e-7,-2.6116542674860087e-9,0.9997599878945364],[1,2.5106888043095994,0.000013660375899060557,-1.0439093160647143e-13]]],[4,"3c8OejEVhd/qP/t8cjYD1F",null,null,null,1,0],[1,7.244301559207117e-17,0.0007142263930290937,6.519258050063925e-11],[3,-0.10052248727412982,2.8824849369329664e-14,2.396642858365293e-8,0.9949347865826291],[1,-11.53851680384589,2.7607326106510224e-7,0.000002732439232681408]],[41,"shoulder.L",3,[-42],[4,"c5H9fzLyRXCoWMaJRTji/z",null,null,null,1,0],[1,0.000204548254259862,0.0015337913064286113,0.0008746508392505348],[3,-0.5406728954554975,-0.4071549751851822,-0.3748180548550603,0.6335685219898407],[1,-82.27322187145559,-67.18819012485051,-1.9868728514809042]],[41,"upper_arm.L",20,[-43],[4,"40iAiU3YhfuaQAQqnGymDM",null,null,null,1,0],[1,0.00005019124728278257,0.002853986108675599,-0.00026213633827865124],[3,-0.25918292626430595,0.685633589895247,-0.4530702764186393,0.5074033068145745],[1,38.21003225112055,127.26837652054792,-54.60593073964455]],[88,"upper_arm.001.L",21,[-44],[4,"d7pO4MLCRfeJxvo/+2aoYP",null,null,null,1,0],[1,1.6298144778215118e-10,0.0017552890349179506,-9.313225884932663e-11]],[41,"forearm.L",22,[-45],[4,"15zakGQyRUx5wQthpWgjPw",null,null,null,1,0],[1,-4.004687137459939e-10,0.0017552913632243872,1.490116086078075e-10],[3,0.24713147567235824,-9.226894576221715e-8,1.828559232235303e-7,0.9689819573820558],[1,28.615664761600794,-0.000015423611064574044,0.00001769082017077129]],[88,"forearm.001.L",23,[4],[4,"b9TGDT6sZUtohD0h4Zi+9C",null,null,null,1,0],[1,-3.3236574603634494e-10,0.0014514108188450336,-4.4703482582342247e-10]],[41,"f_index.01.L",6,[-46],[4,"91dJhGsdtQ1LqLJewsb8ij",null,null,null,1,0],[1,-3.7252903539730653e-10,0.0008516505477018654,-2.662272902131946e-10],[3,0.08334014021216372,0.0037974390188193342,-0.078078480462741,0.9934504272357754],[1,9.683252546535641,1.192362055568055,-8.887871041133979]],[66,"f_index.02.L",25,[[60,"f_index.03.L",-47,[4,"4ddbIpLPpUbomECYSKpaGx",null,null,null,1,0],[1,-2.98023217215615e-10,0.0004565373819787055,2.2204459996194763e-18],[3,0.11956738965937688,-0.00010907896181570746,0.004928292824217944,0.9928138492998884],[1,13.734829919978514,-0.07993811619586129,0.5591967874977352]]],[4,"6442cXssBaGL2kPEjVqqF+",null,null,null,1,0],[1,-5.9604643443123e-10,0.0005365844699554145,2.0489096530518225e-10],[3,0.07987436827454714,0.00015964925464855134,-0.0020153455412802892,0.9968028883320947],[1,9.16278090744389,0.036682575818801584,-0.2287425909498161]],[41,"thumb.01.L",6,[-48],[4,"5bswX0HE5eP76p3Nm999ai",null,null,null,1,0],[1,-0.000011958665709244087,-0.0002758750051725656,0.000032665804610587656],[3,-0.08978429415992345,0.8070785980698503,0.3205852799180072,0.48763510472452903],[1,-37.85998118002267,121.03798915819725,9.65593865751649]],[66,"thumb.02.L",27,[[60,"thumb.03.L",-49,[4,"27uWk9d45ScoxSqWZ+Mw7Q",null,null,null,1,0],[1,2.98023217215615e-10,0.0006212492007762194,-7.450580430390374e-11],[3,0.17263896365161083,-0.0018882706791522575,0.04608183992917129,0.9839048158698496],[1,19.954909179472374,-1.1291909823725133,5.165235761711311]]],[4,"ebB+vOsVxXZqD2ywSMJYKD",null,null,null,1,0],[1,1.7508864358362075e-9,0.000595939694903791,-2.60770322002557e-10],[3,0.1793942432087501,0.003217112005375527,-0.01764010432668032,0.98361383805498],[1,20.684492381455307,0.7256697070567505,-1.9225103012712186]],[41,"palm.02.L",4,[-50],[4,"aftKH/3XZd2Ycmbp6zMT9J",null,null,null,1,0],[1,-0.00006628243863815442,0.00038120910176075995,0.00012295845954213291],[3,0.05572447132119215,0.7090160784836884,0.02547224775079717,0.7025255499568024],[1,2.4332809641153457,90.38674389040064,6.592602934428787]],[41,"f_middle.01.L",29,[-51],[4,"5eMOkjP19fbo2WuchwFGI/",null,null,null,1,0],[1,2.2351741291171123e-10,0.0008314655860885978,1.1897646201575185e-9],[3,0.09278288432445689,0.0904385293502426,-0.034108049979439094,0.9909837787330326],[1,10.970755106049321,10.7086880252991,-2.9129548089601216]],[66,"f_middle.02.L",30,[[60,"f_middle.03.L",-52,[4,"68f+T67k9UDqY0A/Ovd9Lv",null,null,null,1,0],[1,-1.490116086078075e-10,0.00040583621012046933,-1.3224780159859506e-9],[3,0.07006749418204573,-0.00012028910555530247,0.0114314554611709,0.9974767433958646],[1,8.037456700986741,-0.10556160323352984,1.3057901839101704]]],[4,"e7aounD+FbZYQNP8H7HkcR",null,null,null,1,0],[1,-7.450580430390374e-11,0.0006599319167435169,-1.8626451769865326e-10],[3,0.10665977216571318,0.0005200700939412744,-0.004844840248159737,0.9942836366206704],[1,12.246313234995325,0.11847556695469637,-0.5456559897328305]],[41,"palm.03.L",4,[-53],[4,"f7eup5hYFeJbPKhrN7GQ52",null,null,null,1,0],[1,-0.0000304321147268638,0.0003448945644777268,-0.0000813515653135255],[3,-0.02896475962732311,0.6959938369787396,-0.009377564253513137,0.7174020371284251],[1,-1.6358221405832636,88.22043867344783,-3.0824845640343046]],[41,"f_ring.01.L",32,[-54],[4,"52NRBKt2RWJoXlHy3D01Wc",null,null,null,1,0],[1,-3.725290215195187e-11,0.0008211390813812613,-2.2351742678949904e-10],[3,0.13827787257822738,-0.04412568706972405,0.03270556758353015,0.9888693035709538],[1,16.06604121281976,-5.534603118638992,3.0082559314090984]],[66,"f_ring.02.L",33,[[60,"f_ring.03.L",-55,[4,"dbZLVyljle37zBfrnTVw1b",null,null,null,1,0],[1,-5.21540644005114e-10,0.00030607564258389175,1.1175871339474952e-10],[3,0.07716785539153344,-0.0004087218055928066,-0.027878523479317734,0.996628186922972],[1,8.860606007139557,0.20015602005962607,-3.1891324374085412]]],[4,"41SUv50hdUa5QZ68ud71KE",null,null,null,1,0],[1,-1.490116086078075e-10,0.0005932084750384092,3.7252903539730653e-10],[3,0.05648685506899852,-0.0009393378090503498,0.016603715387595076,0.9982648293334901],[1,6.480814637245605,-0.21504581733401137,1.8936086688171627]],[41,"palm.04.L",4,[-56],[4,"926yAzPIpTN6jU+2j07YJW",null,null,null,1,0],[1,-3.9265376017283415e-7,0.0002963495207950473,-0.00024083684547804296],[3,0.005755827211548503,0.6942412750745955,-0.1328547130282482,0.7073510780808157],[1,11.291805908000029,89.95588660176728,-10.367312463775585]],[41,"f_pinky.01.L",35,[-57],[4,"a476lgMihd+68uLsiVlnkI",null,null,null,1,0],[1,-0.00001118224099627696,0.0008466903818771243,1.317693403279918e-7],[3,0.12278641763697398,-0.20082490151636195,-0.007882034408215204,0.9718697073725522],[1,13.650133937172352,-22.906572761403776,-3.706054661522157]],[66,"f_pinky.02.L",36,[[60,"f_pinky.03.L",-58,[4,"450Uji8EJd1qFzma9kY80+",null,null,null,1,0],[1,1.490116086078075e-10,0.0002687423548195511,-5.21540644005114e-10],[3,0.032863219107767065,-0.00006388746409982195,-0.019808218347508576,0.9992635484366295],[1,3.768598516090495,0.06733196426676874,-2.269016612343762]]],[4,"7fe6vxMlNdxrRsDF7dJAhP",null,null,null,1,0],[1,-1.1175870645585562e-10,0.00035648050834424794,-1.862644934125246e-11],[3,0.10913410224562263,-0.001184286220713005,0.010787980815653148,0.9939677885440305],[1,12.53440571624185,-0.26986499030070693,1.2140347909025013]],[41,"shoulder.R",3,[-59],[4,"d7K5ylbRVQxaYDWgNEP3A7",null,null,null,1,0],[1,-0.0002045486617134884,0.0015337913064286113,0.000874650722835213],[3,-0.5406729693970401,0.4071548965746463,0.37481800518937697,0.6335685387900291],[1,-82.27322682212805,67.18817755242692,1.9868713869596155]],[41,"upper_arm.R",38,[-60],[4,"dcyPBygUtaNbfye9366Z+Q",null,null,null,1,0],[1,-0.00005019148738938384,0.0028539865743368864,-0.0002621362800709903],[3,-0.25918299044982007,-0.6856336616179655,0.4530702546240034,0.5074031965732678],[1,38.21003601350183,-127.26839639895981,54.60593105448145]],[88,"upper_arm.001.R",39,[-61],[4,"f2+UmM7l1a6qdVLUgl/GlW",null,null,null,1,0],[1,-7.287598857708133e-10,0.001755290082655847,1.1175870645585562e-10]],[41,"forearm.R",40,[-62],[4,"44qcYOhgtUHar/WmMhFj2k",null,null,null,1,0],[1,9.313225884932663e-11,0.0017552913632243872,5.587935322792781e-11],[3,0.2471314616812741,8.554101603019371e-8,-6.896144666087262e-8,0.9689819609503909],[1,28.61566310701647,0.000011451162518865335,-0.000005234831357806585]],[88,"forearm.001.R",41,[5],[4,"465tfltadaK5uRv+WTxGpg",null,null,null,1,0],[1,-5.675246939063072e-10,0.0014514115173369646,-9.313225884932663e-11]],[41,"f_index.01.R",7,[-63],[4,"47d72SFoJRxIhPbLitm6/6",null,null,null,1,0],[1,2.2351741291171123e-10,0.0008516515954397619,4.9039952654261754e-11],[3,0.08334023650529153,-0.0037974031371814064,0.07807846503279253,0.9934504205076258],[1,9.683263358786094,-1.192358635294291,8.887869506721138]],[66,"f_index.02.R",43,[[60,"f_index.03.R",-64,[4,"05uUqQmdFV9pnEZCjLWQ55",null,null,null,1,0],[1,2.7755574995243454e-19,0.0004565384006127715,9.87201875801702e-10],[3,0.11956732382490375,0.00010906486260285618,-0.004928303743309256,0.9928138571758657],[1,13.7348223157461,0.07993662462844413,-0.5591982282603177]]],[4,"22nSuJBeVcrrsEm+Wh3/yM",null,null,null,1,0],[1,1.490116086078075e-10,0.0005365851102396846,-9.592622252085903e-10],[3,0.07987430904870929,-0.00015974638944243804,0.0020153469478220738,0.9968028930594865],[1,9.162774120977646,-0.0366936704313993,0.22874186471464467]],[41,"thumb.01.R",7,[-65],[4,"b30IPwxOtTDYAlfKmTdVB1",null,null,null,1,0],[1,0.000011958368304476608,-0.00027587387012317777,0.000032665517210261896],[3,0.08978425034222291,0.807078665636877,0.320585432092413,-0.4876349009191241],[1,-37.85999719806008,-121.03801764466553,-9.655943093916768]],[66,"thumb.02.R",45,[[60,"thumb.03.R",-66,[4,"761iOttKpQ6ov3j0tmTzLS",null,null,null,1,0],[1,5.9604643443123e-10,0.0006212479784153402,-2.2351741291171123e-10],[3,0.17263897757029897,0.0018882856859823648,-0.046081906722147174,0.9839048102705368],[1,19.954911074884883,1.1291940940672942,-5.1652429923344405]]],[4,"b8SJINuiJVt4SZFD7UFDxr",null,null,null,1,0],[1,1.1548400014049776e-9,0.000595940335188061,1.1175870645585562e-10],[3,0.17939421462403632,-0.003216909231721331,0.01764005974292618,0.9836138447310948],[1,20.684488615895052,-0.725645864141499,1.9225094680596488]],[41,"palm.02.R",5,[-67],[4,"7db9wlFRdbxrvGLMciicz2",null,null,null,1,0],[1,0.00006628208211623132,0.0003812093927990645,0.00012295827036723495],[3,0.05572450850295549,-0.7090161371831848,-0.025472201152150393,0.7025254894552964],[1,2.433287230150452,-90.38675321818849,-6.5926023986796976]],[41,"f_middle.01.R",47,[-68],[4,"afedHAtJ9So5sm/Pv2r6aw",null,null,null,1,0],[1,5.9604643443123e-10,0.0008314653532579541,7.718335970352541e-10],[3,0.09278285344328645,-0.09043870711258468,0.03410799742877873,0.9909837672102023],[1,10.970751482652117,-10.708707708955638,2.9129472165895893]],[66,"f_middle.02.R",48,[[60,"f_middle.03.R",-69,[4,"6740UGKmFdKooAMfT6BZle",null,null,null,1,0],[1,2.2351741291171123e-10,0.000405834405682981,8.009374274919878e-10],[3,0.07006743486183023,0.00012028813106528709,-0.011431465752123447,0.9974767474449752],[1,8.037449887025938,0.10556149684600537,-1.3057913744461898]]],[4,"1ftK9XwSJTYal6LzZvYr38",null,null,null,1,0],[1,-2.2351741291171123e-10,0.0006599324988201261,-3.7252905621398824e-11],[3,0.10665980900987124,-0.0005199548407777483,0.004844823465786543,0.9942836328103397],[1,12.246317415623936,-0.11846224987747271,0.5456554819339133]],[41,"palm.03.R",5,[-70],[4,"9dVN3Ju1JZyaSdizjNMeMc",null,null,null,1,0],[1,0.0000304323712043697,0.0003448945644777268,-0.00008135182724799961],[3,-0.02896475776674658,-0.6959938370284462,0.009377562391537727,0.7174020371796607],[1,-1.6358221357751066,-88.22043867788713,3.082484262357868]],[41,"f_ring.01.R",50,[-71],[4,"19WBBqDsRZe7dSfPn8LBs9",null,null,null,1,0],[1,3.725290215195187e-11,0.0008211382664740086,-1.1082739170831246e-9],[3,0.1382778584965487,0.04412559419897067,-0.032705575227935255,0.9888693094313354],[1,16.066039361178074,5.5345926419874925,-3.008258365745355]],[66,"f_ring.02.R",51,[[60,"f_ring.03.R",-72,[4,"aca+d/9cNW1pURXH3IE0Ou",null,null,null,1,0],[1,-7.450580430390374e-11,0.00030607584631070495,4.4237821739123717e-10],[3,0.07716784070717804,0.00040885382171932093,0.02787846209035212,0.9966281897230386],[1,8.860603856971418,-0.20014032770913281,3.1891265930673183]]],[4,"87eHC5gKhcV47Jgys67ejE",null,null,null,1,0],[1,6.705522803684971e-10,0.0005932083586230874,2.887100003512444e-10],[3,0.05648684019815285,0.0009392016036305695,-0.016603741473537503,0.9982648298692367],[1,6.4808126841485025,0.21503036897595548,-1.8936125392389158]],[41,"palm.04.R",5,[-73],[4,"abe6IBRXFRN7yWcrQM5yBN",null,null,null,1,0],[1,3.935286088108114e-7,0.0002963492297567427,-0.0002408372820354998],[3,0.005755827211548503,-0.6942412750745955,0.1328547130282482,0.7073510780808157],[1,11.291805908000029,-89.95588660176728,10.367312463775585]],[41,"f_pinky.01.R",53,[-74],[4,"f64E3tiyVQQqCOavh62zN3",null,null,null,1,0],[1,0.000011182036359969061,0.0008466927683912218,1.2998178533507598e-7],[3,0.12278636736071762,0.20082485988415166,0.007882045704628532,0.97186972223564],[1,13.650128142108374,22.90656795308914,3.706054189242515]],[66,"f_pinky.02.R",54,[[60,"f_pinky.03.R",-75,[4,"671QdZokBQXLdyh7eO018+",null,null,null,1,0],[1,-5.9604643443123e-10,0.00026874308241531253,-6.519257911286047e-10],[3,0.032863196776647216,0.00006383012959253296,0.0198082239478743,0.9992635490636917],[1,3.768596085432126,-0.06733850502860741,2.2690170393075313]]],[4,"e3Sl+T4sNfvoF3f/OvT8VW",null,null,null,1,0],[1,0,0.00035647928598336875,-2.7939676613963904e-11],[3,0.10913411699099441,0.001184296579986234,-0.01078796124247886,0.9939677871251349],[1,12.534407418221468,0.26986594347061393,-1.2140324276745906]],[41,"thigh.L",2,[-76],[4,"2ck6848R9bQ6HBRpTaOUT/",null,null,null,1,0],[1,0.0015507964417338371,0.0008725866209715605,0.0003631394065450877],[3,0.9852613300559238,0.030073287239835,0.0982207143326287,0.13677865391577188],[1,164.65675100086818,-10.720057915590628,4.940954981976285]],[88,"thigh.001.L",56,[-77],[4,"15+9XypoReWaOMolyxnBvC",null,null,null,1,0],[1,5.646142928195097e-11,0.00247727008536458,-4.656612768993984e-12]],[41,"shin.L",57,[-78],[4,"7ftzg/tKlVtYLsbqXHHtd0",null,null,null,1,0],[1,1.303851610012785e-10,0.002477270783856511,9.313225537987968e-12],[3,0.07660141632953289,-4.773666574975024e-7,-1.4011005772566705e-8,0.9970617949836819],[1,8.786482903686945,-0.00005441847639474011,-0.0000057910907732944]],[88,"shin.001.L",58,[-79],[4,"2fS/lzS/lcaquppHw/ETbi",null,null,null,1,0],[1,-4.656612768993984e-12,0.0028734251391142607,-1.1175870645585562e-10]],[66,"foot.L",59,[[60,"toe.L",-80,[4,"8coKA8TNZZWaIflguoftxw",null,null,null,1,0],[1,-1.1703206979907232e-11,0.0019285700982436538,-8.381903504606214e-11],[3,-0.04137941834703547,0.9678546219017018,-0.24779182746120115,-0.01201602447622684],[1,28.814403960885173,-177.48463562956383,-4.252015887235345]]],[4,"9fggmIaTJcN5O/4coM7gSz",null,null,null,1,0],[1,-1.7229467852430957e-10,0.0028734251391142607,-5.587935322792781e-11],[3,-0.5191209824532904,-0.13889497283711247,-0.042129821363082784,0.8422865725210295],[1,-62.696182491559014,-16.168759922517477,4.1998636545099455]],[41,"thigh.R",2,[-81],[4,"4fyO8eAu9dOowtP2emaDLp",null,null,null,1,0],[1,-0.0015507962089031935,0.0008725866209715605,0.00036313862074166536],[3,0.9852613540855762,-0.030073293604554338,-0.098220457466424,0.1367786638782436],[1,164.65674866547494,10.720028377688307,-4.94095185786176]],[88,"thigh.001.R",61,[-82],[4,"a3mCW52W1XIYycwoDcME4N",null,null,null,1,0],[1,-2.4330801262628654e-10,0.002477269386872649,-1.9790604918745736e-11]],[41,"shin.R",62,[-83],[4,"d7FAmiBn9Z/YAxhw10P2xO",null,null,null,1,0],[1,-2.7755574995243454e-19,0.002477269619703293,-1.734723437202716e-20],[3,0.07660142373639535,4.727984926870845e-7,1.2843417954053203e-8,0.9970617944146359],[1,8.78648375495214,0.00005390679023762762,0.0000056175898015713965]],[88,"shin.001.R",63,[-84],[4,"1cv1p2dDJfJp4bStJGAmSl",null,null,null,1,0],[1,1.396983917434369e-11,0.0028734239749610424,3.725290215195187e-11]],[66,"foot.R",64,[[60,"toe.R",-85,[4,"165JrhcNJeQZDoXYnVyo48",null,null,null,1,0],[1,8.676806495522271e-11,0.0019285700982436538,2.7939676613963904e-11],[3,0.04137947472606356,0.9678545739842818,-0.24779202416848348,0.012015633465837842],[1,28.814426030016957,177.4846766253246,4.252032791272003]]],[4,"7d6orHGKlS4pnkxaF8oQt4",null,null,null,1,0],[1,1.7229467852430957e-10,0.0028734251391142607,-3.725290215195187e-11],[3,-0.5191206960435624,0.13889478222930005,0.04213002719655618,0.8422867701781502],[1,-62.69614767890356,16.168754555927052,-4.199826837368366]]],0,[0,4,1,0,2,1,0,-1,8,0,-2,9,0,-3,10,0,-4,11,0,-5,12,0,-6,13,0,-7,14,0,-1,16,0,12,2,0,12,2,0,-4,56,0,-5,61,0,-1,18,0,-2,20,0,-3,38,0,12,3,0,12,3,0,-1,6,0,-2,29,0,-3,32,0,-4,35,0,-1,7,0,-2,47,0,-3,50,0,-4,53,0,-1,25,0,-2,27,0,-1,43,0,-2,45,0,2,8,0,2,9,0,2,10,0,2,11,0,2,12,0,2,13,0,-1,15,0,-1,17,0,-1,19,0,12,19,0,-1,21,0,-1,22,0,-1,23,0,-1,24,0,-1,26,0,12,26,0,-1,28,0,12,28,0,-1,30,0,-1,31,0,12,31,0,-1,33,0,-1,34,0,12,34,0,-1,36,0,-1,37,0,12,37,0,-1,39,0,-1,40,0,-1,41,0,-1,42,0,-1,44,0,12,44,0,-1,46,0,12,46,0,-1,48,0,-1,49,0,12,49,0,-1,51,0,-1,52,0,12,52,0,-1,54,0,-1,55,0,12,55,0,-1,57,0,-1,58,0,-1,59,0,-1,60,0,12,60,0,-1,62,0,-1,63,0,-1,64,0,-1,65,0,12,65,0,14,1,2,12,15,3,12,17,4,12,24,5,12,42,85],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[-1,7,24,-1,7,24,-1,7,24,-1,7,24,-1,-2,-3,-4,7,24,-1,-2,7,24],[214,215,216,217,218,219,116,220,221,117,222,223,116,117,224,225,226,227,228,229,230,231]],[[[58,"Crowd"],[228,"Crowd",[-4],[-3],[240,"e892RDjrxNZISjs1LC/QQv",null,null,-2,0,[[243,["mainRenderer"],-1,[0,["0b8pE5sPNepqN6zgbDPnqa"]]]]]],[22,"Quad",1,[-5],[4,"e3hqu0HdxNq4e2nv3hKDvO",null,null,null,1,0],[1,0,1.45,0],[1,2.7,2.7,2.7]],[184,"Quad<ModelComponent>",2,[7,"3ew1Vo2adBpqZ739+OrPkj"],[0],[9]],[262,null,1,[7,"8dt/KCiu1GOJ6DGYai+gUP"],3]],0,[0,5,4,0,4,1,0,-1,4,0,-1,2,0,-1,3,0,14,1,5],[0,3],[-1,7],[7,10]],[[{"name":"bg_1_cash","rect":{"x":0,"y":0,"width":1200,"height":1800},"offset":{"x":0,"y":0},"originalSize":{"width":1200,"height":1800},"rotated":false,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[-600,-900,0,600,-900,0,-600,900,0,600,900,0],"indexes":[0,1,2,2,1,3],"uv":[0,1800,1200,1800,0,0,1200,0],"nuv":[0,0,1,0,0,1,1,1],"minPos":{"x":-600,"y":-900,"z":0},"maxPos":{"x":600,"y":900,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[10],[232]],[[{"name":"bg_3_spotify","rect":{"x":0,"y":0,"width":1200,"height":1800},"offset":{"x":0,"y":0},"originalSize":{"width":1200,"height":1800},"rotated":false,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[-600,-900,0,600,-900,0,-600,900,0,600,900,0],"indexes":[0,1,2,2,1,3],"uv":[0,1800,1200,1800,0,0,1200,0],"nuv":[0,0,1,0,0,1,1,1],"minPos":{"x":-600,"y":-900,"z":0},"maxPos":{"x":600,"y":900,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[10],[233]],[[[44,"Stage_Runner_Exterior_Textures_3",[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{"USE_ALBEDO_MAP":true,"USE_NORMAL_MAP":true,"USE_EMISSIVE_MAP":true},{},{},{}],[[[{"roughness":1},"emissive",8,[4,4290559164],"mainTexture",6,0,"normalMap",6,1,"emissiveMap",6,2],{},{},{}],11,0,0,0]]],0,0,[0,0,0,0],[13,22,16,11],[111,234,235,38]],[[{"name":"img_game_collectible_watch_active","rect":{"x":0,"y":0,"width":100,"height":69},"offset":{"x":0,"y":0},"originalSize":{"width":100,"height":69},"rotated":false,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[-50,-34.5,0,50,-34.5,0,-50,34.5,0,50,34.5,0],"indexes":[0,1,2,2,1,3],"uv":[0,69,100,69,0,0,100,0],"nuv":[0,0,1,0,0,1,1,1],"minPos":{"x":-50,"y":-34.5,"z":0},"maxPos":{"x":50,"y":34.5,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[10],[236]],[[[54,"mat_level_lightray_blue",1,[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{"USE_INSTANCING":true,"USE_TEXTURE":true,"ALPHA_TEST_CHANNEL":"r"}],[[[{"alphaThreshold":0.536},"mainColor",8,[4,2533030440],"mainTexture",6,0]],11]]],0,0,[0,0],[13,11],[77,51]],[[{"name":"ESR_CONTAINER_COLLECTIBLES","rect":{"x":0,"y":0,"width":758,"height":208},"offset":{"x":0,"y":0},"originalSize":{"width":758,"height":208},"rotated":false,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[-379,-104,0,379,-104,0,-379,104,0,379,104,0],"indexes":[0,1,2,2,1,3],"uv":[0,208,758,208,0,0,758,0],"nuv":[0,0,1,0,0,1,1,1],"minPos":{"x":-379,"y":-104,"z":0},"maxPos":{"x":379,"y":104,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[10],[237]],[[[44,"Bouncer Shirt",[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{"USE_ALBEDO_MAP":true,"USE_NORMAL_MAP":true,"USE_ALPHA_TEST":true},{},{},{}],[[[{"roughness":1},"mainColor",8,[4,4293388263],"mainTexture",6,0,"normalMap",6,1],{},{},{}],11,0,0,0]]],0,0,[0,0,0],[13,22,11],[238,239,38]],[[{"name":"img_wipeout_4","rect":{"x":0,"y":0,"width":720,"height":493},"offset":{"x":0,"y":0},"originalSize":{"width":720,"height":493},"rotated":false,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[-360,-246.5,0,360,-246.5,0,-360,246.5,0,360,246.5,0],"indexes":[0,1,2,2,1,3],"uv":[0,493,720,493,0,0,720,0],"nuv":[0,0,1,0,0,1,1,1],"minPos":{"x":-360,"y":-246.5,"z":0},"maxPos":{"x":360,"y":246.5,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[10],[240]],[[{"name":"img_celebmoment_image_container","rect":{"x":0,"y":0,"width":911,"height":1206},"offset":{"x":0,"y":0},"originalSize":{"width":911,"height":1206},"rotated":false,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[-455.5,-603,0,455.5,-603,0,-455.5,603,0,455.5,603,0],"indexes":[0,1,2,2,1,3],"uv":[0,1206,911,1206,0,0,911,0],"nuv":[0,0,1,0,0,1,1,1],"minPos":{"x":-455.5,"y":-603,"z":0},"maxPos":{"x":455.5,"y":603,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[10],[241]],[[[58,"collectible_basic"],[100,"collectible_basic",[-5],[[151,true,-2,[7,"10xKv9M+NB76grKAcqfOdS"]],[249,4,false,-4,[7,"20mYf0f05EmqMt4pzuZT7h"],-3]],[4,"99XOIpw/tEtZYaNHTD56XL",null,null,null,-1,0],[1,0,1,0]],[36,"Music_note_two",1,[[16,-6,[7,"652EdPpMtNmIzyjcIYIyfp"],[0],[9],1]],[4,"b9vQPDEz5J9a9GOHtP7FML",null,null,null,1,0],[1,-0.002,-0.658,-0.018],[1,15.008,15.008,26.647]]],0,[0,4,1,0,2,1,0,21,2,0,2,1,0,-1,2,0,2,2,0,14,1,6],[0,0],[-1,7],[56,242]],[[{"name":"img_game_collectible_mic_active","rect":{"x":0,"y":0,"width":31,"height":101},"offset":{"x":0,"y":0},"originalSize":{"width":31,"height":101},"rotated":false,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[-15.5,-50.5,0,15.5,-50.5,0,-15.5,50.5,0,15.5,50.5,0],"indexes":[0,1,2,2,1,3],"uv":[0,101,31,101,0,0,31,0],"nuv":[0,0,1,0,0,1,1,1],"minPos":{"x":-15.5,"y":-50.5,"z":0},"maxPos":{"x":15.5,"y":50.5,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[10],[243]],[[[44,"placeholder_mat_level_celeb",[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{"USE_INSTANCING":true},{},{},{}],[[[{},"mainColor",8,[4,4278247679]],{},{},{}],11,0,0,0]]],0,0,[0],[11],[38]],[[{"name":"img_game_collectible_mic_inactive","rect":{"x":0,"y":0,"width":120,"height":183},"offset":{"x":0,"y":0},"originalSize":{"width":120,"height":183},"rotated":false,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[-60,-91.5,0,60,-91.5,0,-60,91.5,0,60,91.5,0],"indexes":[0,1,2,2,1,3],"uv":[0,183,120,183,0,0,120,0],"nuv":[0,0,1,0,0,1,1,1],"minPos":{"x":-60,"y":-91.5,"z":0},"maxPos":{"x":60,"y":91.5,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[10],[244]],[[{"name":"bg_1_lights","rect":{"x":0,"y":0,"width":1200,"height":1800},"offset":{"x":0,"y":0},"originalSize":{"width":1200,"height":1800},"rotated":false,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[-600,-900,0,600,-900,0,-600,900,0,600,900,0],"indexes":[0,1,2,2,1,3],"uv":[0,1800,1200,1800,0,0,1200,0],"nuv":[0,0,1,0,0,1,1,1],"minPos":{"x":-600,"y":-900,"z":0},"maxPos":{"x":600,"y":900,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[10],[245]],[[[44,"Cloth and everything",[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{"USE_ALBEDO_MAP":true},{},{},{}],[[[{},"mainTexture",6,0],{},{},{}],11,0,0,0]]],0,0,[0,0],[13,11],[246,38]],[[{"name":"pose1","rect":{"x":232,"y":174,"width":456,"height":1093},"offset":{"x":35,"y":-47.5},"originalSize":{"width":850,"height":1346},"rotated":false,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[-228,-546.5,0,228,-546.5,0,-228,546.5,0,228,546.5,0],"indexes":[0,1,2,2,1,3],"uv":[232,1172,688,1172,232,79,688,79],"nuv":[0.27294117647058824,0.058692421991084695,0.8094117647058824,0.058692421991084695,0.27294117647058824,0.8707280832095097,0.8094117647058824,0.8707280832095097],"minPos":{"x":-228,"y":-546.5,"z":0},"maxPos":{"x":228,"y":546.5,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[10],[247]],[[{"name":"img_game_heart_inactive","rect":{"x":0,"y":0,"width":108,"height":96},"offset":{"x":0,"y":0},"originalSize":{"width":108,"height":96},"rotated":false,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[-54,-48,0,54,-48,0,-54,48,0,54,48,0],"indexes":[0,1,2,2,1,3],"uv":[0,96,108,96,0,0,108,0],"nuv":[0,0,1,0,0,1,1,1],"minPos":{"x":-54,"y":-48,"z":0},"maxPos":{"x":54,"y":48,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[10],[248]],[[[54,"mat_level_lightray_gold",1,[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{"USE_INSTANCING":true,"USE_TEXTURE":true,"ALPHA_TEST_CHANNEL":"r"}],[[[{"alphaThreshold":0.536},"mainColor",8,[4,2516698612],"mainTexture",6,0]],11]]],0,0,[0,0],[13,11],[77,51]],[[[58,"obstacle_nonjumpable"],[0,["8dt/KCiu1GOJ6DGYai+gUP"]],[122,0,{},[12,"e892RDjrxNZISjs1LC/QQv",null,-7,[24,"1cVaU83N5Md67JoqqCBd5z",-6,[[26,[0,["e892RDjrxNZISjs1LC/QQv"]],[-5]]],[[1,"Crowd",["_name"],-1],[2,["_lpos"],-2,[1,0,0.181,0.644]],[2,["_lrot"],-3,[3,0,0,0,1]],[2,["_euler"],-4,[1,0,0,0]],[1,true,["isRunwayNPC"],1],[1,true,["shouldGetRandomPose"],1],[1,2,["tripTexture","length"],1],[3,["tripTexture","0"],1,22],[3,["tripTexture","1"],1,23],[1,8,["poses","length"],1],[3,["poses","0"],1,24],[3,["poses","1"],1,25],[3,["poses","2"],1,26],[3,["poses","3"],1,27],[3,["poses","4"],1,28],[3,["poses","5"],1,29],[3,["poses","6"],1,30],[3,["poses","7"],1,31]],[[0,["8dt/KCiu1GOJ6DGYai+gUP"]]]],[[15,["mainRenderer"],[0,["0b8pE5sPNepqN6zgbDPnqa"]]]],0]],[182,"obstacle_nonjumpable",[-14],[[[258,true,-12,[7,"c4eLbX1vFAJL+J7zNe/ExY"],[1,0,2,0],[1,1,9.257,1]],-13],4,1],[93,"969XNiWY5HsaEzSoCn2x/3",null,-11,0,[[5,["mainRenderer"],2,[0,["8dt/KCiu1GOJ6DGYai+gUP"]],2,[0,["3ew1Vo2adBpqZ739+OrPkj"]]],[21,["graphicNode"],-8,2,[0,["e3hqu0HdxNq4e2nv3hKDvO"]]],[23,-9,2,[0,["8fFvIyGEBFCqgGREWfd/YJ"]]],[21,["mainRenderer"],-10,2,[0,["3ew1Vo2adBpqZ739+OrPkj"]]]],[2]]],[0,["e892RDjrxNZISjs1LC/QQv"]],[27,2,[7,"8fFvIyGEBFCqgGREWfd/YJ"],[2,3,4,5,6,7,8,9,10,11],[12,13,14,15,16,17,18,19,20,21]],[18,"Parent",3,[2],[4,"acUtatGuVN06wkU24sOluQ",null,null,null,3,0]],[246,"Quad<ModelComponent>",[7,"3ew1Vo2adBpqZ739+OrPkj"],[1],[9]],[22,"Quad",2,[7],[4,"e3hqu0HdxNq4e2nv3hKDvO",null,null,null,3,0],[1,0,1.45,0],[1,2.7,2.7,2.7]],[263,3,[7,"78j3SJeChFWY5tDVNRr9co"],8,[2]]],0,[0,1,4,0,1,4,0,1,4,0,1,4,0,-1,5,0,27,3,0,4,2,0,5,9,0,5,5,0,5,5,0,4,3,0,2,3,0,-2,9,0,-1,6,0,14,3,2,12,6,5,9,7,7,2,8,14],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7],[6,-1,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,0,0,0,0,0,0,0,0,0,0,7],[6,7,8,11,12,13,14,1,2,3,4,5,249,250,251,252,253,0,0,0,0,0,15,0,1,2,3,4,5,254,255,256,10]],[[{"name":"img_game_collectible_hat_inactive","rect":{"x":0,"y":0,"width":205,"height":192},"offset":{"x":0,"y":0},"originalSize":{"width":205,"height":192},"rotated":false,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[-102.5,-96,0,102.5,-96,0,-102.5,96,0,102.5,96,0],"indexes":[0,1,2,2,1,3],"uv":[0,192,205,192,0,0,205,0],"nuv":[0,0,1,0,0,1,1,1],"minPos":{"x":-102.5,"y":-96,"z":0},"maxPos":{"x":102.5,"y":96,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[10],[257]],[[[44,"Bouncer Body",[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{"USE_ALBEDO_MAP":true,"USE_NORMAL_MAP":true},{},{},{}],[[[{"roughness":1,"specularIntensity":0},"mainColor",8,[4,4291743438],"mainTexture",6,0,"normalMap",6,1],{},{},{}],11,0,0,0]]],0,0,[0,0,0],[13,22,11],[258,259,38]],[[{"name":"img_rarity_rare","rect":{"x":65,"y":54,"width":125,"height":133},"offset":{"x":-0.5,"y":7.5},"originalSize":{"width":256,"height":256},"rotated":false,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[-62.5,-66.5,0,62.5,-66.5,0,-62.5,66.5,0,62.5,66.5,0],"indexes":[0,1,2,2,1,3],"uv":[65,202,190,202,65,69,190,69],"nuv":[0.25390625,0.26953125,0.7421875,0.26953125,0.25390625,0.7890625,0.7421875,0.7890625],"minPos":{"x":-62.5,"y":-66.5,"z":0},"maxPos":{"x":62.5,"y":66.5,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[10],[65]],[[{"name":"img_rarity_label_rare","rect":{"x":5,"y":145,"width":503,"height":108},"offset":{"x":0.5,"y":8},"originalSize":{"width":512,"height":414},"rotated":false,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[-251.5,-54,0,251.5,-54,0,-251.5,54,0,251.5,54,0],"indexes":[0,1,2,2,1,3],"uv":[5,269,508,269,5,161,508,161],"nuv":[0.009765625,0.3888888888888889,0.9921875,0.3888888888888889,0.009765625,0.6497584541062802,0.9921875,0.6497584541062802],"minPos":{"x":-251.5,"y":-54,"z":0},"maxPos":{"x":251.5,"y":54,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[10],[260]],[[{"name":"DreadnoughtusUltra","rect":{"x":6,"y":7,"width":785,"height":792},"offset":{"x":0,"y":0},"originalSize":{"width":797,"height":806},"rotated":false,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[-392.5,-396,0,392.5,-396,0,-392.5,396,0,392.5,396,0],"indexes":[0,1,2,2,1,3],"uv":[6,799,791,799,6,7,791,7],"nuv":[0.0075282308657465494,0.008684863523573201,0.9924717691342535,0.008684863523573201,0.0075282308657465494,0.9913151364764268,0.9924717691342535,0.9913151364764268],"minPos":{"x":-392.5,"y":-396,"z":0},"maxPos":{"x":392.5,"y":396,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[10],[261]],[[[265,"game_scene"],[122,0,{},[10,"dcUGJ+ZTFInJojW5FrFp9x",null,null,-5,[52,"e1HhcCBmdPOIyCTMup6ad1",null,[[1,"level_prefab",["_name"],-1],[2,["_lpos"],-2,[1,0,0,4]],[2,["_lrot"],-3,[3,0,0,0,1]],[2,["_euler"],-4,[1,0,0,0]],[39,true,["showImmediately"],[0,["3eg10WXAtOL4VUg00stry/","f58yxP6+VLmJBUo4AeYIQX"]]],[39,true,["showImmediately"],[0,["98hbnQ9m1BcIRzQLdh71wI","f58yxP6+VLmJBUo4AeYIQX"]]],[39,true,["showImmediately"],[0,["e32fxvZr1CQ5PWe3bbQU3M","f58yxP6+VLmJBUo4AeYIQX"]]],[39,true,["showImmediately"],[0,["b1ivkT2bxI/JfkgSkk5K9o","f58yxP6+VLmJBUo4AeYIQX"]]],[39,true,["showImmediately"],[0,["6aFkSfgOlJh7rQgis93D4p"]]],[39,true,["showImmediately"],[0,["54CoI8JxpOjY14uirfid+e"]]],[39,true,["showImmediately"],[0,["8ff7MIb/NKFL+Hv5yTmBuw"]]],[39,true,["showImmediately"],[0,["e1GpKWgoZG95Yf6pIEbiQh"]]]]],62]],[209,"group",[-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28]],[210,"Stage",[-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48],[1,0,0.397,-45]],[211,"Canvas",33554432,"0ex8e2OiJJKpofd1nX9KJo",[-54,-55,-56,-57,-58,-59,-60,-61,-62,-63,-64,-65,-66,-67,-68,-69],[[14,-49,[5,1080,1920]],[266,-51,-50],[267,45,-1.1368683772161603e-13,-1.1368683772161603e-13,-1.1368683772161603e-13,1.1368683772161603e-13,-52],[280,-53]],[1,539.9999999999999,960.0000000000001,0]],[229,"EnterClubCutscene","28EBo8oYxFnLNfq7m4x0kw",[-71,-72,-73,-74,-75,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87],[-70],[1,-91.231,0.72,61.319]],[144,"Stagerunner Environment Exterior Export 4",5,[2,-88,-89,-90,-91,-92,-93,-94,-95,-96,-97,-98,-99,-100,-101,-102,-103],[1,6.108,0,9.932],[3,0,-0.7071067811865475,0,0.7071067811865476],[1,7.8,7.8,7.8],[1,0,-90,0]],[174,"ctn_bottom",33554432,[-106,-107,-108,-109,-110,-111,-112,-113,-114,-115,-116,-117,-118],[[14,-104,[5,1242,654]],[33,2,-105,109]],[1,0,-518.284,0],[1,0.9,0.9,0.9]],[132,"panel_celebMoment",false,33554432,4,[7,-124,-125,-126,-127,-128,-129,-130,-131,-132],[[[14,-119,[5,1080,1920]],[82,45,720,1280,-120],-121,[117,1,0,-122,185],-123],4,4,1,4,1]],[132,"panel_gameOver",false,33554432,4,[-137,-138,-139,-140,-141,-142,-143,-144,-145,-146,-147],[[[14,-133,[5,1080,1920]],[33,0,-134,205],[157,45,531.676,245.33899999999997,1,-135],-136],4,4,4,1]],[286,"game_scene",[-200,-201,-202,-203,-204,4,-205,-206,5,-207,-208,-209,-210],[241,null,null,"7a14f410-9d2f-4694-8471-f0542c4ae58a",null,[[5,["graphicNode"],-169,[0,["241X3IKs9FF4yJXokjPJIp"]],-168,[0,["80uBm8yWFB6pLHnN7QiT5t"]]],[5,["graphicNode"],1,[0,["3eg10WXAtOL4VUg00stry/","f58yxP6+VLmJBUo4AeYIQX"]],1,[0,["3eg10WXAtOL4VUg00stry/","aeIQ1y+rZKOoF/V5cr94ZO"]]],[5,["obstacleGraphic","0"],1,[0,["3eg10WXAtOL4VUg00stry/","f58yxP6+VLmJBUo4AeYIQX"]],1,[0,["3eg10WXAtOL4VUg00stry/","60EZConk5FTpTqUh5EbqMR"]]],[5,["obstacleGraphic","1"],1,[0,["3eg10WXAtOL4VUg00stry/","f58yxP6+VLmJBUo4AeYIQX"]],1,[0,["3eg10WXAtOL4VUg00stry/","da6prD9hlLlrYWOqh4cYsb"]]],[5,["obstacleGraphic","2"],1,[0,["3eg10WXAtOL4VUg00stry/","f58yxP6+VLmJBUo4AeYIQX"]],1,[0,["3eg10WXAtOL4VUg00stry/","0a77OF2GpG4KIC+Yw11xi+"]]],[5,["obstacleGraphic","3"],1,[0,["3eg10WXAtOL4VUg00stry/","f58yxP6+VLmJBUo4AeYIQX"]],1,[0,["3eg10WXAtOL4VUg00stry/","a9M8Z8hedMYpDNj2qHU3FF"]]],[5,["obstacleGraphic","4"],1,[0,["3eg10WXAtOL4VUg00stry/","f58yxP6+VLmJBUo4AeYIQX"]],1,[0,["3eg10WXAtOL4VUg00stry/","67mea4kdBIKardKeCOtMrt"]]],[5,["obstacleGraphic","5"],1,[0,["3eg10WXAtOL4VUg00stry/","f58yxP6+VLmJBUo4AeYIQX"]],1,[0,["3eg10WXAtOL4VUg00stry/","abRHfE37RBoqbU9CB/HBK0"]]],[5,["obstacleGraphic","6"],1,[0,["3eg10WXAtOL4VUg00stry/","f58yxP6+VLmJBUo4AeYIQX"]],1,[0,["3eg10WXAtOL4VUg00stry/","52lk1V4rVC9bgtEV+xGfi2"]]],[5,["graphicNode"],1,[0,["98hbnQ9m1BcIRzQLdh71wI","f58yxP6+VLmJBUo4AeYIQX"]],1,[0,["98hbnQ9m1BcIRzQLdh71wI","aeIQ1y+rZKOoF/V5cr94ZO"]]],[5,["obstacleGraphic","0"],1,[0,["98hbnQ9m1BcIRzQLdh71wI","f58yxP6+VLmJBUo4AeYIQX"]],1,[0,["98hbnQ9m1BcIRzQLdh71wI","60EZConk5FTpTqUh5EbqMR"]]],[5,["obstacleGraphic","1"],1,[0,["98hbnQ9m1BcIRzQLdh71wI","f58yxP6+VLmJBUo4AeYIQX"]],1,[0,["98hbnQ9m1BcIRzQLdh71wI","da6prD9hlLlrYWOqh4cYsb"]]],[5,["obstacleGraphic","2"],1,[0,["98hbnQ9m1BcIRzQLdh71wI","f58yxP6+VLmJBUo4AeYIQX"]],1,[0,["98hbnQ9m1BcIRzQLdh71wI","0a77OF2GpG4KIC+Yw11xi+"]]],[5,["obstacleGraphic","3"],1,[0,["98hbnQ9m1BcIRzQLdh71wI","f58yxP6+VLmJBUo4AeYIQX"]],1,[0,["98hbnQ9m1BcIRzQLdh71wI","a9M8Z8hedMYpDNj2qHU3FF"]]],[5,["obstacleGraphic","4"],1,[0,["98hbnQ9m1BcIRzQLdh71wI","f58yxP6+VLmJBUo4AeYIQX"]],1,[0,["98hbnQ9m1BcIRzQLdh71wI","67mea4kdBIKardKeCOtMrt"]]],[5,["obstacleGraphic","5"],1,[0,["98hbnQ9m1BcIRzQLdh71wI","f58yxP6+VLmJBUo4AeYIQX"]],1,[0,["98hbnQ9m1BcIRzQLdh71wI","abRHfE37RBoqbU9CB/HBK0"]]],[5,["obstacleGraphic","6"],1,[0,["98hbnQ9m1BcIRzQLdh71wI","f58yxP6+VLmJBUo4AeYIQX"]],1,[0,["98hbnQ9m1BcIRzQLdh71wI","52lk1V4rVC9bgtEV+xGfi2"]]],[5,["graphicNode"],1,[0,["e32fxvZr1CQ5PWe3bbQU3M","f58yxP6+VLmJBUo4AeYIQX"]],1,[0,["e32fxvZr1CQ5PWe3bbQU3M","aeIQ1y+rZKOoF/V5cr94ZO"]]],[5,["obstacleGraphic","0"],1,[0,["e32fxvZr1CQ5PWe3bbQU3M","f58yxP6+VLmJBUo4AeYIQX"]],1,[0,["e32fxvZr1CQ5PWe3bbQU3M","60EZConk5FTpTqUh5EbqMR"]]],[5,["obstacleGraphic","1"],1,[0,["e32fxvZr1CQ5PWe3bbQU3M","f58yxP6+VLmJBUo4AeYIQX"]],1,[0,["e32fxvZr1CQ5PWe3bbQU3M","da6prD9hlLlrYWOqh4cYsb"]]],[5,["obstacleGraphic","2"],1,[0,["e32fxvZr1CQ5PWe3bbQU3M","f58yxP6+VLmJBUo4AeYIQX"]],1,[0,["e32fxvZr1CQ5PWe3bbQU3M","0a77OF2GpG4KIC+Yw11xi+"]]],[5,["obstacleGraphic","3"],1,[0,["e32fxvZr1CQ5PWe3bbQU3M","f58yxP6+VLmJBUo4AeYIQX"]],1,[0,["e32fxvZr1CQ5PWe3bbQU3M","a9M8Z8hedMYpDNj2qHU3FF"]]],[5,["obstacleGraphic","4"],1,[0,["e32fxvZr1CQ5PWe3bbQU3M","f58yxP6+VLmJBUo4AeYIQX"]],1,[0,["e32fxvZr1CQ5PWe3bbQU3M","67mea4kdBIKardKeCOtMrt"]]],[5,["obstacleGraphic","5"],1,[0,["e32fxvZr1CQ5PWe3bbQU3M","f58yxP6+VLmJBUo4AeYIQX"]],1,[0,["e32fxvZr1CQ5PWe3bbQU3M","abRHfE37RBoqbU9CB/HBK0"]]],[5,["obstacleGraphic","6"],1,[0,["e32fxvZr1CQ5PWe3bbQU3M","f58yxP6+VLmJBUo4AeYIQX"]],1,[0,["e32fxvZr1CQ5PWe3bbQU3M","52lk1V4rVC9bgtEV+xGfi2"]]],[5,["graphicNode"],1,[0,["b1ivkT2bxI/JfkgSkk5K9o","f58yxP6+VLmJBUo4AeYIQX"]],1,[0,["b1ivkT2bxI/JfkgSkk5K9o","aeIQ1y+rZKOoF/V5cr94ZO"]]],[5,["obstacleGraphic","0"],1,[0,["b1ivkT2bxI/JfkgSkk5K9o","f58yxP6+VLmJBUo4AeYIQX"]],1,[0,["b1ivkT2bxI/JfkgSkk5K9o","60EZConk5FTpTqUh5EbqMR"]]],[5,["obstacleGraphic","1"],1,[0,["b1ivkT2bxI/JfkgSkk5K9o","f58yxP6+VLmJBUo4AeYIQX"]],1,[0,["b1ivkT2bxI/JfkgSkk5K9o","da6prD9hlLlrYWOqh4cYsb"]]],[5,["obstacleGraphic","2"],1,[0,["b1ivkT2bxI/JfkgSkk5K9o","f58yxP6+VLmJBUo4AeYIQX"]],1,[0,["b1ivkT2bxI/JfkgSkk5K9o","0a77OF2GpG4KIC+Yw11xi+"]]],[5,["obstacleGraphic","3"],1,[0,["b1ivkT2bxI/JfkgSkk5K9o","f58yxP6+VLmJBUo4AeYIQX"]],1,[0,["b1ivkT2bxI/JfkgSkk5K9o","a9M8Z8hedMYpDNj2qHU3FF"]]],[5,["obstacleGraphic","4"],1,[0,["b1ivkT2bxI/JfkgSkk5K9o","f58yxP6+VLmJBUo4AeYIQX"]],1,[0,["b1ivkT2bxI/JfkgSkk5K9o","67mea4kdBIKardKeCOtMrt"]]],[5,["obstacleGraphic","5"],1,[0,["b1ivkT2bxI/JfkgSkk5K9o","f58yxP6+VLmJBUo4AeYIQX"]],1,[0,["b1ivkT2bxI/JfkgSkk5K9o","abRHfE37RBoqbU9CB/HBK0"]]],[5,["obstacleGraphic","6"],1,[0,["b1ivkT2bxI/JfkgSkk5K9o","f58yxP6+VLmJBUo4AeYIQX"]],1,[0,["b1ivkT2bxI/JfkgSkk5K9o","52lk1V4rVC9bgtEV+xGfi2"]]],[21,["player"],-171,-170,[0,["c0MhR5YZhBeLHzS1so9tYr"]]],[21,["bouncer"],-173,-172,[0,["f5I5XJDSdfvYQMQzX5aAlh"]]],[21,["player"],-175,-174,[0,["c0MhR5YZhBeLHzS1so9tYr"]]],[5,["_skinningRoot"],-177,[0,["5dWrBgYXJL1Jy386Zase5R","42dW3gQkld1551T7wdTZD6"]],-176,[0,["5dWrBgYXJL1Jy386Zase5R","81FRMkOkFQi58JZdhoLZoo"]]],[5,["male_model"],-179,[0,["c0MhR5YZhBeLHzS1so9tYr"]],-178,[0,["5dWrBgYXJL1Jy386Zase5R","59LEYUNoVWXLnifIRv41+a"]]],[5,["female_model"],-181,[0,["c0MhR5YZhBeLHzS1so9tYr"]],-180,[0,["93BMBZY51IwLZ78wWl2Qiv","efQFIU83NeiaklFm46Bm7I"]]],[5,["_skinningRoot"],-183,[0,["93BMBZY51IwLZ78wWl2Qiv","b0grOINK1Rf7o7486sG6l8"]],-182,[0,["93BMBZY51IwLZ78wWl2Qiv","d01ZKbfD1UNY0IFXxRJGXC"]]],[5,["_skinningRoot"],-185,[0,["93BMBZY51IwLZ78wWl2Qiv","5cMeXiiQRD6ZtqdiMZLSEQ"]],-184,[0,["93BMBZY51IwLZ78wWl2Qiv","d01ZKbfD1UNY0IFXxRJGXC"]]],[5,["_skinningRoot"],-187,[0,["93BMBZY51IwLZ78wWl2Qiv","109+MGMfFdPKyRcw4vYqeL"]],-186,[0,["93BMBZY51IwLZ78wWl2Qiv","d01ZKbfD1UNY0IFXxRJGXC"]]],[5,["_skinningRoot"],-189,[0,["79QU/cW7xNDI3evByQ0+Ce","a0pYis9KZblpdYCnVixCF4"]],-188,[0,["79QU/cW7xNDI3evByQ0+Ce","cd88M+WxReRrBQWmu7U1va"]]],[5,["_skinningRoot"],-191,[0,["1bLc1J6lJPWo/1zwVkFCSf"]],-190,[0,["bdZS6cKSNJWpAyZqAjkxIA"]]],[21,["playerAnimation"],-193,-192,[0,["c0MhR5YZhBeLHzS1so9tYr"]]],[5,["mainRenderer"],-195,[0,["8dt/KCiu1GOJ6DGYai+gUP"]],-194,[0,["3ew1Vo2adBpqZ739+OrPkj"]]],[5,["_skinningRoot"],-197,[0,["d9V5I7VnhJg44qdSOG9qpe"]],-196,[0,["d9EDY0C/VCSZpdCTSO7b1b"]]],[5,["_skinningRoot"],-199,[0,["3bjpTodZZNybzE3YwDhfyq"]],-198,[0,["d9EDY0C/VCSZpdCTSO7b1b"]]]],[-148,-149,-150,-151,-152,-153,-154,-155,-156,-157,-158,1,-159,-160,-161,-162,-163,-164,-165,-166,-167]],[287,[288,0.8,[2,1,1,1,0.520833125],[2,1,1,1,1],[2,0.452588,0.607642,0.755699,0],[2,0.618555,0.577848,0.544564,0]],[289,[4,4283190348]],[290,440,441],[291,0.05,0.001,200,7.75,[4,4293632632]],[292],[293]]],[145,"panel_postGame",false,33554432,4,[-232,-233,-234,-235,-236,-237,-238,-239],[[14,-211,[5,1080,1920]],[33,0,-212,159],[157,45,531.676,245.33899999999997,1,-213],[294,-231,[-226,-227,-228,-229,-230],[-221,-222,-223,-224,-225],[160,161],-220,-219,-218,-217,-216,-215,-214]]],[11,0,{},5,[12,"882mn23ORGWYtzEyZty1hb",null,-246,[52,"68WR9ojF5ItbCsuhUA4Vav",null,[[1,"player_models",["_name"],-240],[2,["_lpos"],-241,[1,0,0,13.8]],[2,["_lrot"],-242,[3,0,1,0,6.123233995736766e-17]],[2,["_euler"],-243,[1,0,180,0]],[3,["_defaultClip"],-244,345],[1,true,["playOnLoad"],-245],[39,true,["playOnLoad"],[0,["522cEV2A1H0pPCSz0RcHxV"]]]]],[[15,["female_model"],[0,["4dllHMqepaHINuOP4/bbON"]]],[15,["male_model"],[0,["70a4oLGBJdk7197BjlWhhv"]]]],344]],[122,0,{},[12,"882mn23ORGWYtzEyZty1hb",null,-251,[52,"f3FfXgyjJIj7VTXaIR5wZl",null,[[1,"player_models",["_name"],-247],[2,["_lpos"],-248,[1,0,0,-0.586]],[2,["_lrot"],-249,[3,0,1,0,6.123233995736766e-17]],[2,["_euler"],-250,[1,0,180,0]],[25,["_defaultClip"],[0,["20eNVHQRFEgrrOqpc8+O20"]],4],[39,false,["_active"],[0,["50ATZHGcBBDKPbLX3Hcid9"]]]]],[[15,["female_model"],[0,["4dllHMqepaHINuOP4/bbON"]]],[15,["male_model"],[0,["70a4oLGBJdk7197BjlWhhv"]]]],3]],[84,"container",33554432,[-254,-255,-256,-257,-258,-259,-260,-261,-262],[[14,-252,[5,865.641,249.901]],[268,17,200,-253]],[1,0,635.0495,0]],[84,"Container",33554432,[-267,-268,-269,-270,-271,-272],[[14,-263,[5,1035,659]],[56,-264,215],[55,0,-265],[269,20,-669.5,-266]],[1,0,-1300,0]],[0,["8dt/KCiu1GOJ6DGYai+gUP"]],[0,["8dt/KCiu1GOJ6DGYai+gUP"]],[0,["8dt/KCiu1GOJ6DGYai+gUP"]],[0,["8dt/KCiu1GOJ6DGYai+gUP"]],[0,["8dt/KCiu1GOJ6DGYai+gUP"]],[235,"Mask",33554432,[-278,-279,-280,-281,-282],[[-273,[296,true,0.7,-274],[298,1,1,-275,[4,16777215]],[128,45,30,30,30,30,699.0599999999998,1261.9361238449596,-276],[53,-277]],1,4,4,4,4]],[132,"ctn_help",false,33554432,8,[-289,-290,-291],[[[14,-283,[5,1080,1920]],[82,45,100,100,-284],[56,-285,122],[82,45,1080,1920,-286],-287,[300,-288]],4,4,4,4,1,4]],[236,"container_collectible",33554432,[-295,-296,-297,-298,-299,-300],[[[14,-292,[5,1070,290]],[56,-293,227],-294],4,4,1],[1,19.745,1152.95,0],[1,1.29,1.29,1]],[145,"panel_gameHUD",false,33554432,4,[-314,-315,-316,-317],[[14,-301,[5,1080,1920]],[82,45,100,100,-302],[301,-313,[-310,-311,-312],[-305,-306,-307,-308,-309],-304,-303]]],[64,"container_collectible",33554432,24,[-321,-322,-323,-324,-325],[[[77,-318,[5,1070,290],[0,0.5,1]],[56,-319,89],-320],4,4,1],[1,10.267,959.519,0]],[123,"container_collectible",33554432,9,[-329,-330,-331,-332,-333],[[14,-326,[5,1070,290]],[56,-327,202],[270,18,1350.904,23.228,-579.689,0,-328]],[1,23.228,-579.689,0],[1,1.29,1.29,1]],[174,"ctn_main",33554432,[-336,-337,-338,-339],[[14,-334,[5,531.676,169.30699999999996]],[135,0,-335,[4,4284703587],98]],[1,0,69.49699999999996,0],[1,0,0,0]],[129,"btn_skip_forCM",false,33554432,4,[-345],[[14,-340,[5,400,101.189]],[117,1,0,-341,183],[139,3,0.9,-343,[4,4292269782],-342,184],[134,36,63.62299999999999,58.2305,-344]],[1,276.377,-851.175,0]],[103,"effect_PowerUp",33554432,4,[21,-364,-365,-366],[[14,-346,[5,1080,1920]],[157,45,100,100,1,-347],[305,-363,-362,-361,-360,-359,-358,-357,-356,[-350,-351,-352,-353,-354,-355],[235],-349,-348,[49,1,[48,[0,0.5076923076923077,1],[[96,2,0.0996168582375479,1,0.0996168582375479,1],[133,2,0.5555555555555556,0.23297491039426488,0.23297491039426488],[92,1,0.9027777777777777,1,0.9027777777777777,1]]]],[49,1,[48,[0,0.1,0.5,0.9,1],[[126,2,0.2357022603955158,1],[59,2,0.5],[154,2,0.5,0.574370915739836,0.4975599751265973],[59,2,0.5],[92,1,5.000000000000001,1,5.000000000000001,1]]]]]]],[129,"btn_skip_forclubexterior",false,33554432,4,[-372],[[14,-367,[5,400,101.189]],[117,1,0,-368,239],[139,3,0.9,-370,[4,4292269782],-369,240],[134,36,63.62299999999999,58.2305,-371]],[1,276.377,-851.175,0]],[129,"btn_skip_forEnd",false,33554432,4,[-378],[[14,-373,[5,400,101.189]],[117,1,0,-374,242],[139,3,0.9,-376,[4,4292269782],-375,243],[134,36,63.62299999999999,58.2305,-377]],[1,276.377,-851.175,0]],[237,"Player","2ddyIK7PNL27xBU0xxH4uO",10,[-382,13],[[[306,4,-379,[1,0,0,0]],[308,0.3,1.5,-380,[1,0,0.75,-0.6]],-381],4,4,1]],[129,"btn_pause",false,33554432,24,[-388],[[14,-383,[5,80,80]],[117,1,0,-384,73],[302,2,-386,[4,4292269782],-385,74,75,76,77],[271,33,0.065,97.974,false,-387]],[1,273.2,502.02599999999995,0]],[64,"btn_resume",33554432,27,[-393],[[[14,-389,[5,72.01300000000003,65.982]],[117,1,0,-390,95],-391,[272,33,-26.595000000000027,-29.876499999999993,-392]],4,4,1,4],[1,256.42650000000003,81.53899999999997,0]],[64,"tgl_sfx",33554432,27,[-397,-398],[[[14,-394,[5,115.66,50.4]],-395,[200,"Sound",40,-396]],4,1,4],[1,95,-23.01299999999992,0]],[64,"tgl_bgm",33554432,27,[-402,-403],[[[14,-399,[5,104.45,50.4]],-400,[200,"Music",40,-401]],4,1,4],[1,-110.499,-24.496999999999957,0]],[84,"content",33554432,[-405,-406,-407,-408,-409],[[14,-404,[5,638.6890000000001,1033.327]]],[1,0,39.95699999999988,0]],[84,"Node",33554432,[-413,-414,-415],[[14,-410,[5,610.4650000000001,984.8879999999999]],[118,-411],[119,-412,[4,16777215]]],[1,0,37.338,0]],[84,"Node-001",33554432,[-419,-420,-421],[[14,-416,[5,610.4650000000001,984.8879999999999]],[118,-417],[119,-418,[4,16777215]]],[1,0,37.485,0]],[84,"Node-002",33554432,[-425,-426,-427],[[14,-422,[5,610.4650000000001,984.8879999999999]],[118,-423],[119,-424,[4,16777215]]],[1,0,36.868,0]],[84,"Node-003",33554432,[-431,-432,-433],[[14,-428,[5,610.4650000000001,984.8879999999999]],[118,-429],[119,-430,[4,16777215]]],[1,0,35.305,0]],[84,"Node",33554432,[-437,-438,-439],[[14,-434,[5,610.4650000000001,984.8879999999999]],[118,-435],[119,-436,[4,16777215]]],[1,0.0595000000001088,37.37249999999995,0]],[84,"pagination",33554432,[-441,-442,-443,-444,-445],[[14,-440,[5,269.728,100]]],[1,0,-507.689,0]],[64,"left_invisible_butotn",33554432,11,[-450],[[[14,-446,[5,160,1066.364]],[136,1,0,-447,[4,255],156],-448,[116,10,43.235,-449]],4,4,1,4],[1,-460,43.235,0]],[64,"right_invisible_butotn",33554432,11,[-455],[[[14,-451,[5,160,1066.364]],[136,1,0,-452,[4,255],157],-453,[116,34,43.235,-454]],4,4,1,4],[1,460,43.235,0]],[175,"World Manager","c9LJbkICxJYphTmeyl5aH4",10,[-460,3,-461,1],[[317,10,-20,24,-459,[63,64,65],3,-458,-457,-456,66]]],[61,"Occluder",3,[[191,-462,[1,0,2.5,0],[1,5.2,23.7,1]],[318,-463],[307,4,-464],[319,-465]],[1,0,0.20400001096725462,0.8499984741210938],[1,10,1,1]],[43,"container_heart",33554432,24,[-468,-469,-470],[[14,-466,[5,352.54600000000005,95.99999999999997]],[158,9,46.279000000000025,244.38400000000027,-467]],[1,-317.448,667.6159999999998,0]],[103,"panel_paused",33554432,4,[-478,27],[[14,-471,[5,1080,1920]],[82,45,531.676,245.33899999999997,-472],[321,-477,27,-476,-475,-474,-473]]],[34,"btn_help",33554432,7,[[14,-479,[5,137.79555555555555,137.79555555555555]],[33,0,-480,105],[139,3,0.9,-482,[4,4292269782],-481,106]],[1,377.5355555555557,-164.50000000000006,0]],[34,"img_cameraFrame",33554432,8,[[77,-483,[5,953,1641],[0,0.5,0]],[57,2,false,-484,117],[55,0,-485],[273,18,-486]],[1,0,-820.5,0]],[34,"btn_back",33554432,22,[[14,-487,[5,400,337]],[56,-488,120],[303,3,0.9,-489,121],[116,18,-828.204,-490]],[1,0,-828.204,0]],[122,0,{},[12,"882mn23ORGWYtzEyZty1hb",null,-499,[52,"50bLJ2DoNL6IbwKRRVkmuN",null,[[1,"player_models",["_name"],-491],[2,["_lpos"],-492,[1,-0.572,0,-1.378]],[2,["_lrot"],-493,[3,0,0,0,1]],[2,["_euler"],-494,[1,0,0,0]],[3,["_defaultClip"],-495,126],[1,true,["playOnLoad"],-496],[3,["_defaultClip"],-497,127],[1,true,["playOnLoad"],-498]]],[[15,["female_model"],[0,["4dllHMqepaHINuOP4/bbON"]]],[15,["male_model"],[0,["70a4oLGBJdk7197BjlWhhv"]]]],125]],[64,"btn_home",33554432,11,[-503],[[[14,-500,[5,151.95,151.95]],[83,0,false,-501],-502],4,4,1],[1,-370.657,-740.931,0]],[64,"btn_costumization",33554432,11,[-507],[[[14,-504,[5,157.744,157.744]],[86,0,-505],-506],4,4,1],[1,-156.883,-740.93,0]],[64,"btn_tryAgain",33554432,11,[-511],[[[14,-508,[5,468.0479999999999,154.8473074792243]],[83,0,false,-509],-510],4,4,1],[1,211.385,-739.482,0]],[43,"ScrollingContainer",33554432,11,[37,43],[[14,-512,[5,682.9270000000001,1214.301]],[116,18,-52.257,-513]],[1,0,-52.257,0]],[64,"btn_home",33554432,9,[-517],[[[14,-514,[5,151.95,151.95]],[83,0,false,-515],-516],4,4,1],[1,-370.657,-784.3415000000001,0]],[64,"btn_costumization",33554432,9,[-521],[[[14,-518,[5,157.744,157.744]],[86,0,-519],-520],4,4,1],[1,-156.88299999999998,-784.3410000000001,0]],[64,"btn_tryAgain",33554432,9,[-525],[[[14,-522,[5,468.0479999999999,154.8473074792243]],[83,0,false,-523],-524],4,4,1],[1,211.38499999999996,-782.8925000000002,0]],[132,"pnl_rarityCutscene",false,33554432,4,[15,23],[[[14,-526,[5,1080,1920]],[82,45,100,100,-527],-528],4,4,1]],[62,"effect_Fade",33554432,4,[[14,-529,[5,1080,1920]],[136,1,0,-530,[4,4278190080],228],[82,45,100,40,-531],[322,-532],[55,0,-533]]],[11,0,{},5,[10,"c4l2jKpBJeLYIawslllxkg",null,null,-545,[52,"c6KfjXddlN4ZKTx0F8RUcr",null,[[1,"prefab_bouncer",["_name"],-534],[2,["_lpos"],-535,[1,1.164,0,9.813]],[2,["_lrot"],-536,[3,0,-0.21814324139654254,0,0.9759167619387474]],[2,["_euler"],-537,[1,0,-25.2,0]],[1,2,["_clips","length"],-538],[3,["_clips","0"],-539,341],[3,["_defaultClip"],-540,342],[1,true,["playOnLoad"],-541],[3,["_clips","1"],-542,343],[148,["_skinningRoot"],[0,["dbMFbdp2ZXsaH7oYaLcDEi"]],-543],[148,["_skinningRoot"],[0,["3bwHWWkVRX9JkfZs1LCZX6"]],-544]]],340]],[212,"Artist",3,[-546,-547,-548,-549],[1,0,0.58,-4.397]],[0,["e8i386ajJeyZaP+PTbEXDb"]],[0,["49ZoazuiFBlbZzgmT6kxzi"]],[0,["49ZoazuiFBlbZzgmT6kxzi"]],[0,["49ZoazuiFBlbZzgmT6kxzi"]],[0,["49ZoazuiFBlbZzgmT6kxzi"]],[0,["49ZoazuiFBlbZzgmT6kxzi"]],[0,["49ZoazuiFBlbZzgmT6kxzi"]],[0,["49ZoazuiFBlbZzgmT6kxzi"]],[0,["49ZoazuiFBlbZzgmT6kxzi"]],[43,"img_heart1BG",33554432,48,[-552],[[14,-550,[5,108,96]],[159,false,-551,[4,4287466893],68]],[1,-122.27300000000002,0,0]],[103,"img_heart2BG",33554432,48,[-555],[[14,-553,[5,108,96]],[159,false,-554,[4,4287466893],70]]],[43,"img_heart3BG",33554432,48,[-558],[[14,-556,[5,108,96]],[159,false,-557,[4,4287466893],72]],[1,122.273,0,0]],[64,"txt_score",33554432,24,[-562],[[[77,-559,[5,430.549,63.7],[0,0,0.5]],[309,"SCORE:",0,46,46,1,false,-560,78],-561],4,4,1],[1,-497.419,572.9209999999999,0]],[43,"img_hat_bg",33554432,25,[-565],[[14,-563,[5,205,192]],[56,-564,80]],[1,-267.406,-123.875,0]],[43,"img_glasses_bg",33554432,25,[-568],[[14,-566,[5,215,160]],[56,-567,82]],[1,-123.567,-126.939,0]],[43,"img_necklace_bg",33554432,25,[-571],[[14,-569,[5,170,188]],[56,-570,84]],[1,23.189,-127.303,0]],[43,"img_watch_bg",33554432,25,[-574],[[14,-572,[5,190,160]],[56,-573,86]],[1,160.687,-125.658,0]],[43,"img_mic_bg",33554432,25,[-577],[[14,-575,[5,120,183]],[56,-576,88]],[1,266.664,-113.634,0]],[145,"panel_cutscene_bouncer",false,33554432,4,[14],[[14,-578,[5,1080,1920]],[82,45,720,1280,-579]]],[63,"overlay_bg",33554432,49,[[[14,-580,[5,1080,1920]],[136,1,0,-581,[4,4278190080],94],[82,45,100,40,-582],-583],4,4,4,1]],[43,"img_background-player",33554432,7,[-586,-587],[[14,-584,[5,112,95]],[87,-585,[4,4289835441],102]],[1,-92.057,168.646,0]],[43,"img_background-celeb",33554432,7,[-590,-591],[[14,-588,[5,112,95]],[87,-589,[4,4289835441],103]],[1,-92.057,66.502,0]],[43,"img_background-background",33554432,7,[-594,-595],[[14,-592,[5,112,95]],[87,-593,[4,4289835441],104]],[1,-92.057,-38.3,0]],[45,"btn_done",33554432,7,[[[14,-596,[5,592.4755555555555,253.70300155301425]],[57,0,false,-597,107],-598],4,4,1],[1,-2.5594444444443303,-343.48388888888906,0]],[43,"img_celebContainer",33554432,8,[-601],[[14,-599,[5,719.864,952.9703446761802]],[57,0,false,-600,111]],[1,0,216,0]],[64,"img_background",33554432,89,[-605],[[[14,-602,[5,671.864,903.9703446761802]],-603,[53,-604]],4,1,4],[1,0,2.5,0]],[103,"Node",33554432,90,[-609],[[14,-606,[5,671.864,903.9703446761802]],[118,-607],[119,-608,[4,16777215]]]],[63,"img_cameraFlashEffects",33554432,8,[[[14,-610,[5,1080,1920]],-611,[82,45,200,200,-612],[135,0,-613,[4,4278190080],112]],4,1,4,4]],[45,"Sprite",33554432,8,[[[77,-614,[5,1003,1429],[0,0,1]],[33,2,-615,113],-616,[158,9,-82.82700000000003,-95.24300000000005,-617]],4,4,1,4],[1,-622.827,1055.243,0]],[45,"Sprite-001",33554432,8,[[[77,-618,[5,907,921],[0,1,0]],[57,2,false,-619,114],-620,[134,36,-49.66300000000001,-34.851999999999975,-621]],4,4,1,4],[1,589.663,-994.852,0]],[45,"Sprite-002",33554432,8,[[[77,-622,[5,1052,883],[0,0,0]],[33,2,-623,115],-624,[274,12,-115.17200000000003,-16.08699999999999,-625]],4,4,1,4],[1,-655.172,-976.087,0]],[45,"Sprite-003",33554432,8,[[[77,-626,[5,900,1057],[0,1,1]],[33,2,-627,116],-628,[275,33,238.43,-58.430000000000064,-53.04500000000007,900,-629]],4,4,1,4],[1,598.4300000000001,1013.0450000000001,0]],[213,"CelebMoment",false,"c4wRrGOR5PH58BXVygs8jh",10,[-630,-631,53],[1,-99,0,0]],[123,"Sprite-004",33554432,37,[38],[[14,-632,[5,832,1280]],[33,0,-633,139]],[1,220,0,0],[1,0.8,0.8,0.8]],[123,"Sprite-003",33554432,37,[39],[[14,-634,[5,832,1280]],[33,0,-635,143]],[1,180,0,0],[1,0.85,0.85,0.85]],[123,"Sprite-002",33554432,37,[40],[[14,-636,[5,832,1280]],[33,0,-637,147]],[1,140,0,0],[1,0.9,0.9,0.9]],[123,"Sprite-001",33554432,37,[41],[[14,-638,[5,832,1280]],[33,0,-639,151]],[1,90,0,0],[1,0.95,0.95,0.95]],[103,"Sprite",33554432,37,[42],[[14,-640,[5,832,1280]],[281,1,0,false,-641,155]]],[43,"img_hat_bg",33554432,26,[-644],[[14,-642,[5,240,225]],[33,0,-643,193]],[1,-267.406,18.609,0]],[43,"img_glasses_bg",33554432,26,[-647],[[14,-645,[5,233.05891472868217,173.4391923562286]],[33,0,-646,195]],[1,-123.567,16.18508527131783,0]],[43,"img_necklace_bg",33554432,26,[-650],[[14,-648,[5,188.05891472868217,207.9710351117191]],[33,0,-649,197]],[1,24.13953488372107,20.883720930232414,0]],[43,"img_watch_bg",33554432,26,[-653],[[14,-651,[5,208.05891472868217,175.2075071399429]],[33,0,-652,199]],[1,160.687,17.063596899224805,0]],[43,"img_mic_bg",33554432,26,[-656],[[14,-654,[5,129.5046511627907,196.30620155038758]],[33,0,-655,201]],[1,270.9410852713179,26.716279069767268,0]],[43,"img_hat_bg",33554432,23,[-659],[[14,-657,[5,240,225]],[33,0,-658,217]],[1,-267.406,18.609,0]],[43,"img_glasses_bg",33554432,23,[-662],[[14,-660,[5,233.05891472868217,173.4391923562286]],[33,0,-661,219]],[1,-123.567,16.18508527131783,0]],[43,"img_necklace_bg",33554432,23,[-665],[[14,-663,[5,188.05891472868217,207.9710351117191]],[33,0,-664,221]],[1,24.13953488372107,20.883720930232414,0]],[43,"img_watch_bg",33554432,23,[-668],[[14,-666,[5,208.05891472868217,175.2075071399429]],[33,0,-667,223]],[1,160.687,17.063596899224805,0]],[43,"img_mic_bg",33554432,23,[-671],[[14,-669,[5,129.5046511627907,196.30620155038758]],[33,0,-670,225]],[1,270.9410852713179,26.716279069767268,0]],[124,"lbl_powerUp",false,33554432,29,[[14,-672,[5,911.61,60.4]],[310,"DANCE SLIDE",100,100,60.4,false,-673,230],[276,18,115.32052035030384,-1000,-111,-674]],[1,-1000,-111,0]],[103,"effect_cinematicBars",33554432,4,[-677,-678],[[14,-675,[5,1080,1920]],[82,45,100,100,-676]]],[89,"Sprite",33554432,114,[[77,-679,[5,1080,500],[0,0.5,1]],[135,0,-680,[4,4278190080],236],[194,41,5.684341886080802e-14,40,-681]],[1,0,960,0],[1,1,0,1]],[89,"Sprite-001",33554432,114,[[77,-682,[5,1080,500],[0,0.5,0]],[135,0,-683,[4,4278190080],237],[194,44,5.684341886080802e-14,40,-684]],[1,0,-960,0],[1,1,0,1]],[130,"LightRay",5,[-687],[[141,true,-686,-685]],[1,5.174,0.653,13.354],[1,11,11,11]],[0,["f5I5XJDSdfvYQMQzX5aAlh"]],[11,0,{},5,[12,"e892RDjrxNZISjs1LC/QQv",null,-693,[52,"bdDA2OZiFIDKBKCqH0w3Su",null,[[1,"Crowd",["_name"],-688],[2,["_lpos"],-689,[1,2.796,-0.097,15.223]],[2,["_lrot"],-690,[3,0,0.08541692313736747,0,0.9963452961909064]],[2,["_euler"],-691,[1,0,9.8,0]],[1,true,["_active"],-692],[1,0,["startingPoseIndex"],16],[1,4,["poses","length"],16],[3,["poses","0"],16,349],[3,["poses","1"],16,350],[3,["poses","2"],16,351],[3,["poses","3"],16,352],[3,["poses","4"],16,353],[3,["poses","5"],16,354],[3,["poses","6"],16,355],[3,["poses","7"],16,356],[1,0,["tripTexture","length"],16],[1,null,["tripTexture","0"],16]]],[[15,["mainRenderer"],[0,["0b8pE5sPNepqN6zgbDPnqa"]]]],348]],[0,["e892RDjrxNZISjs1LC/QQv"]],[0,["e892RDjrxNZISjs1LC/QQv"]],[0,["e892RDjrxNZISjs1LC/QQv"]],[0,["e892RDjrxNZISjs1LC/QQv"]],[0,["e892RDjrxNZISjs1LC/QQv"]],[239,"CameraContainer",false,"f8EXMDl21G55sIcg9/tEyI",10,[-696],[-694,-695]],[0,["882mn23ORGWYtzEyZty1hb"]],[61,"levelEnd",46,[[192,true,-697,[1,0,2.5,0],[1,1,10,1]],[202,"LevelEnd",-698]],[1,0,0.601,-200],[1,10,1,1]],[0,["80uBm8yWFB6pLHnN7QiT5t"]],[0,["80uBm8yWFB6pLHnN7QiT5t"]],[0,["80uBm8yWFB6pLHnN7QiT5t"]],[0,["80uBm8yWFB6pLHnN7QiT5t"]],[0,["80uBm8yWFB6pLHnN7QiT5t"]],[0,["80uBm8yWFB6pLHnN7QiT5t"]],[0,["80uBm8yWFB6pLHnN7QiT5t"]],[0,["80uBm8yWFB6pLHnN7QiT5t"]],[0,["c4l2jKpBJeLYIawslllxkg"]],[0,["f5I5XJDSdfvYQMQzX5aAlh"]],[214,"finishLine",46,[-700],[[191,-699,[1,0,0,-11.9],[1,9,0.2,27]]],[1,0,0,-45]],[0,["dcUGJ+ZTFInJojW5FrFp9x"]],[62,"img_heart1",33554432,74,[[14,-701,[5,127,114]],[160,false,-702,67],[53,-703]]],[62,"img_heart2",33554432,75,[[14,-704,[5,127,114]],[160,false,-705,69],[53,-706]]],[62,"img_heart3",33554432,76,[[14,-707,[5,127,114]],[160,false,-708,71],[53,-709]]],[215,"img_hat",false,33554432,78,[[14,-710,[5,119,101]],[56,-711,79],[53,-712]]],[124,"img_glasses",false,33554432,79,[[14,-713,[5,131,72]],[56,-714,81],[53,-715]],[1,-2.964,0.406,0]],[124,"img_necklace",false,33554432,80,[[14,-716,[5,82,101]],[56,-717,83],[53,-718]],[1,1.62,-4.425,0]],[124,"img_watch",false,33554432,81,[[14,-719,[5,100,69]],[56,-720,85],[53,-721]],[1,0.978,-2.179,0]],[124,"img_mic",false,33554432,82,[[14,-722,[5,31,101]],[56,-723,87],[53,-724]],[1,-1.522,-6.929,0]],[45,"img_white_border",33554432,14,[[[14,-725,[5,948,416]],[137,2,1,-726,93],-727],4,4,1],[1,-39.679500000000075,6.233500000000049,0]],[34,"bg_Checkmark",33554432,35,[[14,-728,[5,26,26]],[33,0,-729,96],[195,32,-40,26,-730]],[1,84.83,0,0]],[45,"Checkmark",33554432,35,[[[77,-731,[5,26,26],[0,0,0.5]],-732,[196,32,-40,-733]],4,1,4],[1,71.83,0,0]],[34,"bg_Checkmark",33554432,36,[[14,-734,[5,26,26]],[33,0,-735,97],[195,32,-40,26,-736]],[1,79.225,0,0]],[45,"Checkmark",33554432,36,[[[77,-737,[5,26,26],[0,0,0.5]],-738,[196,32,-40,-739]],4,1,4],[1,66.225,0,0]],[43,"img_background-player-label",33554432,7,[-742],[[14,-740,[5,466,95]],[87,-741,[4,4288256409],99]],[1,221.749,168.646,0]],[43,"img_background-celeb-label",33554432,7,[-745],[[14,-743,[5,466,95]],[87,-744,[4,4288256409],100]],[1,221.749,66.502,0]],[43,"img_background-background-label",33554432,7,[-748],[[14,-746,[5,466,95]],[87,-747,[4,4288256409],101]],[1,221.749,-38.3,0]],[63,"img_player",33554432,85,[[[14,-749,[5,150,150]],-750,[53,-751]],4,1,4]],[63,"img_celebrity",33554432,86,[[[14,-752,[5,150,150]],-753,[53,-754]],4,1,4]],[63,"img_background",33554432,87,[[[14,-755,[5,150,150]],-756,[53,-757]],4,1,4]],[45,"img_background",33554432,7,[[[14,-758,[5,351.0466666666667,283.85414062500007]],-759,[53,-760]],4,1,4],[1,0,-177.25900000000001,0]],[63,"img_rendertexture",33554432,91,[[[14,-761,[5,671.864,903.9703446761802]],-762,-763],4,1,1]],[34,"img_averageScore",33554432,22,[[14,-764,[5,1035,759]],[56,-765,118],[116,18,494.138,-766]],[1,0,494.138,0]],[34,"img_rarityTable",33554432,22,[[14,-767,[5,1021.266,1041.5368752362947]],[33,0,-768,119],[116,18,-266.788,-769]],[1,0,-266.788,0]],[0,["882mn23ORGWYtzEyZty1hb"]],[34,"lbl_wipeoutTitle",33554432,11,[[14,-770,[5,886.906,255.476]],[201,"Are you good enough to be VVIP?",62,72,100,2,false,true,-771,132]],[1,0,673.282,0]],[43,"img_wipeout",33554432,9,[-774],[[14,-772,[5,758,531]],[33,2,-773,188]],[1,0,303.482,0]],[62,"img_hat",33554432,103,[[14,-775,[5,143.14418604651163,121.49212429157711]],[33,0,-776,192],[55,0,-777]]],[34,"img_glasses",33554432,104,[[14,-778,[5,149.05891472868217,85.4391923562286]],[33,0,-779,194],[55,0,-780]],[1,-2.9639999999999986,2.4410000000000025,0]],[34,"img_necklace",33554432,105,[[14,-781,[5,100.05891472868217,120.97103511171909]],[33,0,-782,196],[55,0,-783]],[1,1.6199999999999974,-2.3900000000000006,0]],[34,"img_watch",33554432,106,[[14,-784,[5,118.05891472868217,84.20750713994289]],[33,0,-785,198],[55,0,-786]],[1,0.9780000000000015,-0.14399999999999835,0]],[34,"img_mic",33554432,107,[[14,-787,[5,40.50465116279071,114.30620155038758]],[33,0,-788,200],[55,0,-789]],[1,-1.5219999999999985,-4.893999999999998,0]],[43,"Sprite",33554432,15,[-792],[[14,-790,[5,466,95]],[87,-791,[4,4290032820],212]],[1,161.183,133.599,0]],[63,"TXT",33554432,171,[[[14,-793,[5,420,40]],-794,[53,-795]],4,1,4]],[43,"Sprite-001",33554432,15,[-798],[[14,-796,[5,466,95]],[87,-797,[4,4290032820],213]],[1,161.183,22.644,0]],[63,"TXT-001",33554432,173,[[[14,-799,[5,420,40]],-800,[53,-801]],4,1,4]],[43,"Sprite-002",33554432,15,[-804],[[14,-802,[5,466,95]],[87,-803,[4,4290032820],214]],[1,161.183,-133.37,0]],[63,"TXT-002",33554432,175,[[[14,-805,[5,420,40]],-806,[53,-807]],4,1,4]],[62,"img_hat",33554432,108,[[14,-808,[5,143.14418604651163,121.49212429157711]],[33,0,-809,216],[55,0,-810]]],[34,"img_glasses",33554432,109,[[14,-811,[5,149.05891472868217,85.4391923562286]],[33,0,-812,218],[55,0,-813]],[1,-2.9639999999999986,2.4410000000000025,0]],[34,"img_necklace",33554432,110,[[14,-814,[5,100.05891472868217,120.97103511171909]],[33,0,-815,220],[55,0,-816]],[1,1.6199999999999974,-2.3900000000000006,0]],[34,"img_watch",33554432,111,[[14,-817,[5,118.05891472868217,84.20750713994289]],[33,0,-818,222],[55,0,-819]],[1,0.9780000000000015,-0.14399999999999835,0]],[34,"img_mic",33554432,112,[[14,-820,[5,40.50465116279071,114.30620155038758]],[33,0,-821,224],[55,0,-822]],[1,-1.5219999999999985,-4.893999999999998,0]],[11,0,{},4,[10,"77W+6bif5C+7QqikgGf0ph",null,null,-828,[244,"2013E/RvJDM4XZhLU4Xxt3",null,[[183,[0,["77W+6bif5C+7QqikgGf0ph"]],[[197,45,-420,-420,1920,1920,-827]]],[183,[0,["9epFuimylEMqj9fZIF7CmK"]],[[277,45,420,420,1080,1920]]]],[[1,"effect_Wipeout",["_name"],-823],[2,["_lpos"],-824,[1,0,0,0]],[2,["_lrot"],-825,[3,0,0,0,1]],[2,["_euler"],-826,[1,0,0,0]]]],229]],[0,["77W+6bif5C+7QqikgGf0ph"]],[45,"topRight",33554432,21,[[[14,-829,[5,1080,30]],-830,[128,45,-30,-30,-29.999999999999943,1860,720,1280,-831]],4,1,4],[1,0,945,0]],[45,"topLeft",33554432,21,[[[14,-832,[5,1080,30]],-833,[128,45,-30,-30,-29.999999999999986,1860,720,1280,-834]],4,1,4],[1,0,945,0]],[63,"middle",33554432,21,[[[14,-835,[5,1080,1860]],-836,[197,45,-30,-30,720,1280,-837]],4,1,4]],[45,"bottomRight",33554432,21,[[[14,-838,[5,1080,30]],-839,[128,45,-30,-30,1860,-30,720,1280,-840]],4,1,4],[1,0,-945,0]],[45,"bottomLeft",33554432,21,[[[14,-841,[5,1080,30]],-842,[128,45,-30,-30,1860,-29.99999999999997,720,1280,-843]],4,1,4],[1,0,-945,0]],[104,"Particle2D",false,33554432,29,[[[14,-844,[5,0,0]],[203,"Node<ParticleSystem2D>",1,999.999985098839,0.20000000298023224,0.5,360,360,3.369999885559082,50,30.31999969482422,-47.369998931884766,-47.369998931884766,-142.11000061035156,0,190.7899932861328,-92.11000061035156,65.79000091552734,-671.0499877929688,65.79000091552734,100,true,200,-845,[0,7,7],[0,0.25,0.8600000143051147],[4,2734749183],[4,2751463679],[4,3607101439],[4,4294967295],231,232],-846],4,4,1],[1,0,950,-1]],[104,"Particle2D-001",false,33554432,29,[[[14,-847,[5,0,0]],[203,"Node<ParticleSystem2D>",1,999.999985098839,0.20000000298023224,0.5,360,360,3.369999885559082,50,30.31999969482422,-47.369998931884766,-47.369998931884766,-142.11000061035156,0,190.7899932861328,-92.11000061035156,65.79000091552734,-671.0499877929688,65.79000091552734,100,true,200,-848,[0,7,7],[0,0.25,0.8600000143051147],[4,2734749183],[4,255],[4,3607101439],[4,16777215],233,234],-849],4,4,1],[1,0,950,-1]],[0,["c4l2jKpBJeLYIawslllxkg"]],[0,["882mn23ORGWYtzEyZty1hb"]],[324,5,115,116,30,83],[175,"3dDialog","beIceg9NNP0rT5grw+Ufae",10,[-851,-852],[[325,-850,[[99,"BOUNCER_1",[400,401,402]],[99,"BOUNCER_2",[403,404,405]],[99,"BOUNCER_3",[406,407,408]],[99,"BOUNCER",[409,410,411,412,413]],[99,"PLAYER",[414]],[99,"CELEB_1",[415,416,417,418,419]],[99,"CELEB_2",[420,421,422,423,424]]],425]]],[176,"Main Camera",125,[[326,5,50,100,1822425087,-853,[4,4278190080]],[330,-854]],[1,0,5.004,6.383],[3,-0.17364817766693033,1.7480270361173457e-18,7.6320516348881e-20,0.984807753012208],[1,-20,1.987846699118444e-16,-2.6170497384269075e-17]],[253,1,false,false,10,[0],[40],[30,1],[8],[8],[30,3],[8],[8],[8],[8],[30,0.5],[8],[8],[8],[[331,[30,100]]],[94,[40]],[256,true,3,[30,1]],[125,true,[49,1,[48,[0,1],[[110,2,1,1.6584362139917679,1,1.6584362139917679,1],[96,2,-3.4541062801932356,1,-3.4541062801932356,1]]]],[8],[8],[8]],[67,[8],[8],[8],[30,0.5]],[68,[8],[8],[8]],[69,[8],[8],[8],[8]],[81,[8],[8],[8]],[95,[49,1,[48,[0,1],[[59,2,1],[59,2,1]]]],[8]],[97],[70,[30,1],[8],[40],[40],-855],[127,1,2]],[152,false,1,[7],[40],[30,0.5],[8],[8],[85,3,0.1,0.3],[8],[8],[8],[8],[85,3,1,2],[8],[30,10],[8],[94,[74,1,[80,[[75,255],[50,255,0.4107142857142857],[50,0,1]]]]],[153,true,3,2,[30,1]],[125,true,[49,1,[48,[0,0.8153846153846154,1],[[110,2,1,0.009826152683295702,1,0.009826152683295702,1],[133,2,0.5333333333333333,-1.9861111111111112,-1.9861111111111112],[96,2,-0.24586288416075647,1,-0.24586288416075647,1]]]],[8],[8],[8]],[67,[8],[8],[8],[30,1]],[68,[8],[8],[8]],[69,[8],[8],[8],[8]],[81,[8],[8],[8]],[95,[49,1,[48,[0,1],[[59,2,1],[59,2,1]]]],[8]],[97],[70,[30,1],[8],[40],[40],-856],[127,8,9]],[152,false,1,[10],[40],[30,0.5],[8],[8],[85,3,0.1,0.3],[8],[8],[8],[8],[85,3,1,2],[8],[30,10],[8],[94,[74,1,[80,[[75,255],[50,255,0.4107142857142857],[50,0,1]]]]],[153,true,3,2,[30,1]],[125,true,[49,1,[48,[0,0.8153846153846154,1],[[110,2,1,0.009826152683295702,1,0.009826152683295702,1],[133,2,0.5333333333333333,-1.9861111111111112,-1.9861111111111112],[96,2,-0.24586288416075647,1,-0.24586288416075647,1]]]],[8],[8],[8]],[67,[8],[8],[8],[30,1]],[68,[8],[8],[8]],[69,[8],[8],[8],[8]],[81,[8],[8],[8]],[95,[49,1,[48,[0,1],[[59,2,1],[59,2,1]]]],[8]],[97],[70,[30,1],[8],[40],[40],-857],[127,11,12]],[152,false,1,[13],[40],[30,0.5],[8],[8],[85,3,0.1,0.3],[8],[8],[8],[8],[85,3,1,2],[8],[30,10],[8],[94,[74,1,[80,[[75,255],[50,255,0.4107142857142857],[50,0,1]]]]],[153,true,3,2,[30,1]],[125,true,[49,1,[48,[0,0.8153846153846154,1],[[110,2,1,0.009826152683295702,1,0.009826152683295702,1],[133,2,0.5333333333333333,-1.9861111111111112,-1.9861111111111112],[96,2,-0.24586288416075647,1,-0.24586288416075647,1]]]],[8],[8],[8]],[67,[8],[8],[8],[30,1]],[68,[8],[8],[8]],[69,[8],[8],[8],[8]],[81,[8],[8],[8]],[95,[49,1,[48,[0,1],[[59,2,1],[59,2,1]]]],[8]],[97],[70,[30,1],[8],[40],[40],-858],[127,14,15]],[216,"endGameCam",false,3,[[204,"Camera<CameraComponent>",3,60,1822425087,-859,[4,4286073907]]],[1,0,4.507,6.895],[3,-0.17364817766693033,3.965788770164004e-20,-2.2491105752675194e-19,0.984807753012208],[1,-20,0,-2.6170497384269084e-17]],[11,0,null,3,[10,"e8i386ajJeyZaP+PTbEXDb",null,null,-860,[52,"a2r+DBPuNEF61HQLpQRWoY",null,[[1,"Stagerunner Environment Goal Export 4",["_name"],65],[2,["_lpos"],65,[1,0,0.42,-65.474]],[2,["_lrot"],65,[3,0,0,0,1]],[2,["_euler"],65,[1,0,0,0]],[2,["_lscale"],65,[1,5,5,5]],[25,["_materials","0"],[0,["8dii9ie6pd/KutBEKTD+BK"]],19],[25,["_materials","0"],[0,["58Q8hHSX9cMZ7UMUnK4Ubb"]],20]]],18]],[217,"level_prefab",2,3,[-861,-862],[1,0,-0.394,1.113]],[105,1,false,false,true,1,[[25,null],6,0],[90,[4,3875536895]],[30,5],[8],[8],[8],[8],[8],[8],[8],[30,6],[8],[30,100],[8],[107,true,[74,1,[80,[[75,255],[50,255,0.7812499999999999],[50,0,0.9866071428571429]]]]],[108,true,0,0.0001,[30,1]],[91,[8],[8],[8],[8]],[67,[8],[8],[8],[30,1]],[68,[8],[8],[8]],[69,[8],[8],[8],[8]],[81,[8],[8],[8]],[109,true,10,1,10,[49,1,[48,[0,1],[[111,1,1,1,1],[92,1,1,1,1,1]]]],[106,3,8]],[112,1,1,1],[70,[30,1],[8],[40],[40],-863],[113,3,26,27]],[105,1,false,false,true,1,[[28,null],6,0],[90,[4,3875536895]],[30,5],[8],[8],[8],[8],[8],[8],[8],[30,6],[8],[30,100],[8],[107,true,[74,1,[80,[[75,255],[50,255,0.7812499999999999],[50,0,0.9866071428571429]]]]],[108,true,0,0.0001,[30,1]],[91,[8],[8],[8],[8]],[67,[8],[8],[8],[30,1]],[68,[8],[8],[8]],[69,[8],[8],[8],[8]],[81,[8],[8],[8]],[109,true,10,1,10,[49,1,[48,[0,1],[[111,1,1,1,1],[92,1,1,1,1,1]]]],[106,3,8]],[112,1,1,1],[70,[30,1],[8],[40],[40],-864],[113,3,29,30]],[105,1,false,false,true,1,[[31,null],6,0],[90,[4,3875536895]],[30,5],[8],[8],[8],[8],[8],[8],[8],[30,6],[8],[30,100],[8],[107,true,[74,1,[80,[[75,255],[50,255,0.7812499999999999],[50,0,0.9866071428571429]]]]],[108,true,0,0.0001,[30,1]],[91,[8],[8],[8],[8]],[67,[8],[8],[8],[30,1]],[68,[8],[8],[8]],[69,[8],[8],[8],[8]],[81,[8],[8],[8]],[109,true,10,1,10,[49,1,[48,[0,1],[[111,1,1,1,1],[92,1,1,1,1,1]]]],[106,3,8]],[112,1,1,1],[70,[30,1],[8],[40],[40],-865],[113,3,32,33]],[105,1,false,false,true,1,[[34,null],6,0],[90,[4,3875536895]],[30,5],[8],[8],[8],[8],[8],[8],[8],[30,6],[8],[30,100],[8],[107,true,[74,1,[80,[[75,255],[50,255,0.7812499999999999],[50,0,0.9866071428571429]]]]],[108,true,0,0.0001,[30,1]],[91,[8],[8],[8],[8]],[67,[8],[8],[8],[30,1]],[68,[8],[8],[8]],[69,[8],[8],[8],[8]],[81,[8],[8],[8]],[109,true,10,1,10,[49,1,[48,[0,1],[[111,1,1,1,1],[92,1,1,1,1,1]]]],[106,3,8]],[112,1,1,1],[70,[30,1],[8],[40],[40],-866],[113,3,35,36]],[105,1,false,false,true,1,[[37,null],6,0],[90,[4,3875536895]],[30,5],[8],[8],[8],[8],[8],[8],[8],[30,6],[8],[30,100],[8],[107,true,[74,1,[80,[[75,255],[50,255,0.7812499999999999],[50,0,0.9866071428571429]]]]],[108,true,0,0.0001,[30,1]],[91,[8],[8],[8],[8]],[67,[8],[8],[8],[30,1]],[68,[8],[8],[8]],[69,[8],[8],[8],[8]],[81,[8],[8],[8]],[109,true,10,1,10,[49,1,[48,[0,1],[[111,1,1,1,1],[92,1,1,1,1,1]]]],[106,3,8]],[112,1,1,1],[70,[30,1],[8],[40],[40],-867],[113,3,38,39]],[105,1,false,false,true,1,[[40,null],6,0],[90,[4,3875536895]],[30,5],[8],[8],[8],[8],[8],[8],[8],[30,6],[8],[30,100],[8],[107,true,[74,1,[80,[[75,255],[50,255,0.7812499999999999],[50,0,0.9866071428571429]]]]],[108,true,0,0.0001,[30,1]],[91,[8],[8],[8],[8]],[67,[8],[8],[8],[30,1]],[68,[8],[8],[8]],[69,[8],[8],[8],[8]],[81,[8],[8],[8]],[109,true,10,1,10,[49,1,[48,[0,1],[[111,1,1,1,1],[92,1,1,1,1,1]]]],[106,3,8]],[112,1,1,1],[70,[30,1],[8],[40],[40],-868],[113,3,41,42]],[11,0,{},3,[10,"49ZoazuiFBlbZzgmT6kxzi",null,null,-869,[52,"2bHHYAGztKg4fgWcmj4YKE",null,[[1,"LightRay",["_name"],66],[2,["_lpos"],66,[1,-4.581,10.573,-11.918]],[2,["_lrot"],66,[3,0,0,0,1]],[2,["_euler"],66,[1,0,0,0]],[2,["_lscale"],66,[1,7,5,7]],[2,["_lrot"],128,[3,-2.57615271284253e-17,0.3857623959480874,0.9225981648975847,9.711885527786078e-17]],[2,["_euler"],128,[1,-134.61784221856647,180,9.128804681057886e-15]],[2,["_lpos"],128,[1,0,-0.619,0.562]],[2,["_lscale"],128,[1,20.000000000000004,84.74715951963499,1.2782925191459689]],[25,["_materials","0"],[0,["84hii9rK1CFYkehKUt7qCw"]],44],[39,true,["shouldShow"],[0,["241X3IKs9FF4yJXokjPJIp"]]]]],43]],[11,0,{},3,[10,"49ZoazuiFBlbZzgmT6kxzi",null,null,-870,[52,"ae7PA5oMdPr538UTnvoiPv",null,[[1,"LightRay-002",["_name"],67],[2,["_lpos"],67,[1,4.581,10.573,-11.918]],[2,["_lrot"],67,[3,0,0,0,1]],[2,["_euler"],67,[1,0,0,0]],[2,["_lscale"],67,[1,7,5,7]],[2,["_lrot"],129,[3,-2.57615271284253e-17,0.3857623959480874,0.9225981648975847,9.711885527786078e-17]],[2,["_euler"],129,[1,-134.61784221856647,180,9.128804681057886e-15]],[2,["_lpos"],129,[1,0,-0.619,0.562]],[2,["_lscale"],129,[1,20.000000000000004,84.74715951963499,1.2782925191459689]],[25,["_materials","0"],[0,["84hii9rK1CFYkehKUt7qCw"]],46],[39,true,["shouldShow"],[0,["241X3IKs9FF4yJXokjPJIp"]]]]],45]],[11,0,{},3,[10,"49ZoazuiFBlbZzgmT6kxzi",null,null,-871,[52,"51vZx5QjZNf6wC5BDA96n6",null,[[1,"LightRay-003",["_name"],68],[2,["_lpos"],68,[1,-10.02,10.573,-6.273]],[2,["_lrot"],68,[3,0,0,0,1]],[2,["_euler"],68,[1,0,0,0]],[2,["_lscale"],68,[1,7,5,7]],[2,["_lrot"],130,[3,-0.3707084022555971,-0.3538339962426542,-0.8443772788637661,0.15621713906827672]],[2,["_euler"],130,[1,-134.49091645543587,-132.55858386078216,-0.08445027246595439]],[2,["_lpos"],130,[1,0.414,-0.619,0.387]],[2,["_lscale"],130,[1,19.744937123490327,91.56414340995155,1.3861794533154081]],[25,["_materials","0"],[0,["84hii9rK1CFYkehKUt7qCw"]],48],[39,true,["shouldShow"],[0,["241X3IKs9FF4yJXokjPJIp"]]]]],47]],[11,0,{},3,[10,"49ZoazuiFBlbZzgmT6kxzi",null,null,-872,[52,"2675d97iZKEbQURwwVKH0l",null,[[1,"LightRay-004",["_name"],69],[2,["_lpos"],69,[1,10.02,10.573,-6.273]],[2,["_lrot"],69,[3,0,0,0,1]],[2,["_euler"],69,[1,0,0,0]],[2,["_lscale"],69,[1,7,5,7]],[2,["_lrot"],131,[3,-0.38177467807118604,0.3504555889219353,0.8402002791280424,0.1596636036489891]],[2,["_euler"],131,[1,-134.69857338854604,131.11035478052315,0.04060377064140148]],[2,["_lpos"],131,[1,-0.41486235406776406,-0.6190000000000002,0.38607541643745336]],[2,["_lscale"],131,[1,19.09937631402609,96.84146544552948,1.4944289324746949]],[25,["_materials","0"],[0,["84hii9rK1CFYkehKUt7qCw"]],50],[39,true,["shouldShow"],[0,["241X3IKs9FF4yJXokjPJIp"]]]]],49]],[11,0,{},3,[10,"49ZoazuiFBlbZzgmT6kxzi",null,null,-873,[52,"c1G/e5krxKEpY4huNOEFGm",null,[[1,"LightRay-005",["_name"],70],[2,["_lpos"],70,[1,9.709,6.992,-4.199]],[2,["_lrot"],70,[3,0,0,0,1]],[2,["_euler"],70,[1,0,0,0]],[2,["_lscale"],70,[1,7,5,7]],[2,["_lrot"],132,[3,-2.57615271284253e-17,0.3857623959480874,0.9225981648975847,9.711885527786078e-17]],[2,["_euler"],132,[1,-134.61784221856647,180,9.128804681057886e-15]],[2,["_lpos"],132,[1,0,-0.619,0.562]],[2,["_lscale"],132,[1,20.000000000000004,84.74715951963499,1.2782925191459689]],[25,["_materials","0"],[0,["84hii9rK1CFYkehKUt7qCw"]],52],[39,true,["shouldShow"],[0,["241X3IKs9FF4yJXokjPJIp"]]]]],51]],[11,0,{},3,[10,"49ZoazuiFBlbZzgmT6kxzi",null,null,-874,[52,"f3r6iAE19NR7qV6B50vPXR",null,[[1,"LightRay-006",["_name"],71],[2,["_lpos"],71,[1,-9.709,6.992,-4.199]],[2,["_lrot"],71,[3,0,0,0,1]],[2,["_euler"],71,[1,0,0,0]],[2,["_lscale"],71,[1,7,5,7]],[2,["_lrot"],133,[3,-2.57615271284253e-17,0.3857623959480874,0.9225981648975847,9.711885527786078e-17]],[2,["_euler"],133,[1,-134.61784221856647,180,9.128804681057886e-15]],[2,["_lpos"],133,[1,0,-0.619,0.562]],[2,["_lscale"],133,[1,20.000000000000004,84.74715951963499,1.2782925191459689]],[25,["_materials","0"],[0,["84hii9rK1CFYkehKUt7qCw"]],54],[39,true,["shouldShow"],[0,["241X3IKs9FF4yJXokjPJIp"]]]]],53]],[11,0,{},3,[10,"49ZoazuiFBlbZzgmT6kxzi",null,null,-875,[52,"ddp6W+smdApLhg2EMRylVb",null,[[1,"LightRay-007",["_name"],72],[2,["_lpos"],72,[1,-13.447,10.275,-3.577]],[2,["_lrot"],72,[3,0,0,0,1]],[2,["_euler"],72,[1,0,0,0]],[2,["_lscale"],72,[1,7,5,7]],[2,["_lrot"],134,[3,-2.57615271284253e-17,0.3857623959480874,0.9225981648975847,9.711885527786078e-17]],[2,["_euler"],134,[1,-134.61784221856647,180,9.128804681057886e-15]],[2,["_lpos"],134,[1,0,-0.619,0.562]],[2,["_lscale"],134,[1,20.000000000000004,84.74715951963499,1.2782925191459689]],[25,["_materials","0"],[0,["84hii9rK1CFYkehKUt7qCw"]],56],[39,true,["shouldShow"],[0,["241X3IKs9FF4yJXokjPJIp"]]]]],55]],[11,0,{},3,[10,"49ZoazuiFBlbZzgmT6kxzi",null,null,-876,[52,"05MBut2zNJvJDYnj4HSI0M",null,[[1,"LightRay-008",["_name"],73],[2,["_lpos"],73,[1,13.547,10.275,-3.577]],[2,["_lrot"],73,[3,0,0,0,1]],[2,["_euler"],73,[1,0,0,0]],[2,["_lscale"],73,[1,7,5,7]],[2,["_lrot"],135,[3,-2.57615271284253e-17,0.3857623959480874,0.9225981648975847,9.711885527786078e-17]],[2,["_euler"],135,[1,-134.61784221856647,180,9.128804681057886e-15]],[2,["_lpos"],135,[1,0,-0.619,0.562]],[2,["_lscale"],135,[1,20.000000000000004,84.74715951963499,1.2782925191459689]],[25,["_materials","0"],[0,["84hii9rK1CFYkehKUt7qCw"]],58],[39,true,["shouldShow"],[0,["241X3IKs9FF4yJXokjPJIp"]]]]],57]],[11,0,{},3,[10,"c4l2jKpBJeLYIawslllxkg",null,null,-877,[52,"87z1w9Mh1JQ70nzUbPDFnd",null,[[1,"prefab_bouncer",["_name"],136],[2,["_lpos"],136,[1,5.374,0.622,-4.504]],[2,["_lrot"],136,[3,0,-0.37136783555023484,0,0.9284858268809135]],[2,["_euler"],136,[1,0,-43.6,0]],[1,1,["_clips","length"],137],[3,["_clips","0"],137,60],[3,["_defaultClip"],137,61],[1,true,["playOnLoad"],137]]],59]],[61,"finishLine",138,[[192,true,-878,[1,0,2.5,0],[1,1,10,1]],[202,"FinishLine",-879]],[1,0,0.601,0],[1,10,1,1]],[104,"lbl_countdown",false,33554432,4,[[[14,-880,[5,798.9760000000001,312.51599999999996]],-881],4,1],[1,0,68.87199999999996,0]],[62,"Label",33554432,33,[[14,-882,[5,100,40]],[162,"Pause",20,20,1,false,-883,[4,4278190080]]]],[45,"txt_score-001",33554432,77,[[[77,-884,[5,430.549,63.7],[0,0,0.5]],-885],4,1],[1,243.449,0,0]],[34,"img_empty",33554432,14,[[14,-886,[5,827,302]],[137,2,1,-887,90]],[1,111.32049999999992,6.233500000000049,0]],[45,"img_fill",33554432,14,[[[14,-888,[5,660,130]],-889],4,1],[1,111.32049999999992,6.233500000000049,0]],[34,"img_highlight",33554432,14,[[14,-890,[5,643,126]],[137,2,1,-891,91]],[1,111.32049999999992,14.90949999999998,0]],[34,"img_gradient_border",33554432,14,[[14,-892,[5,728,416]],[137,2,1,-893,92]],[1,-149.67950000000008,6.233500000000049,0]],[45,"img_like",33554432,14,[[[14,-894,[5,155,143]],-895],4,1],[1,-305.32050000000004,14.90949999999998,0]],[45,"img_star3",33554432,14,[[[14,-896,[5,62,60]],-897],4,1],[1,355.8934999999999,-95.50350000000003,0]],[45,"img_star2",33554432,14,[[[14,-898,[5,62,60]],-899],4,1],[1,286.30549999999994,-94.95049999999992,0]],[45,"img_star1",33554432,14,[[[14,-900,[5,62,60]],-901],4,1],[1,217.43449999999996,-94.95049999999992,0]],[34,"pased_Label",33554432,27,[[14,-902,[5,380.12799999999993,70.4]],[311,"PAUSED",79,78.7,2,true,-903]],[1,0,81.53899999999999,0]],[62,"Label",33554432,34,[[14,-904,[5,196.8,40]],[312,"X",32.5,32.5,1,false,true,-905,[4,4278190080]]]],[63,"txt_player",33554432,153,[[[14,-906,[5,426.0000000000001,70]],-907],4,1]],[63,"txt_celebrity",33554432,154,[[[14,-908,[5,426.0000000000001,70]],-909],4,1]],[63,"txt_background",33554432,155,[[[14,-910,[5,426.00000000000017,70]],-911],4,1]],[104,"Particle2D",false,33554432,85,[[[156,-912],-913],4,1],[1,-5.684341886080802e-14,-1.1368683772161603e-13,-0.9999999999999998]],[104,"Particle2D",false,33554432,86,[[[156,-914],-915],4,1],[1,-5.684341886080802e-14,-1.1368683772161603e-13,-0.9999999999999998]],[104,"Particle2D",false,33554432,87,[[[156,-916],-917],4,1],[1,-5.684341886080802e-14,-1.1368683772161603e-13,-0.9999999999999998]],[34,"lbl_celebrity",33554432,7,[[14,-918,[5,300,65]],[163,"Celebrity Pose",2,40,30,1,-919,[4,4294769191]]],[1,-326.251,66.502,0]],[34,"lbl_player",33554432,7,[[14,-920,[5,300,65]],[163,"Player Pose",2,40,30,1,-921,[4,4294769191]]],[1,-326.251,168.646,0]],[34,"lbl_background",33554432,7,[[14,-922,[5,300,65]],[163,"Background",2,40,30,1,-923,[4,4294769191]]],[1,-326.251,-41.937,0]],[34,"img_divider",33554432,7,[[14,-924,[5,913,84]],[56,-925,108]],[1,0,-113.906,0]],[34,"img_title",33554432,8,[[14,-926,[5,417.974,191.0271796875]],[33,0,-927,110]],[1,1.1368683772161603e-13,802.3959999999998,0]],[332,8,[-928,-929,-930],[128,129,130,131],50,11,[162,163,164,165],[166,167,168,169],97,89,7,51,[170,171,172],[[142,[173,174,175]],[142,[176,177]],[142,[178,179]],[142,[180,181]]],52,28],[62,"btn_home-001",33554432,54,[[14,-931,[5,320,320]],[57,0,false,-932,133]]],[62,"btn_costumization-001",33554432,55,[[14,-933,[5,320,320]],[33,0,-934,134]]],[62,"btn_tryAgain-001",33554432,56,[[14,-935,[5,626.0179999999999,311.2748781163434]],[57,0,false,-936,135]]],[34,"Sprite",33554432,38,[[14,-937,[5,671.951,1007.9265000000001]],[33,0,-938,136]],[1,-0.05950000000007094,-6.184499999999957,0]],[89,"Sprite-001",33554432,38,[[14,-939,[5,390.04791666666665,617.6523480392157]],[57,0,false,-940,137]],[1,-0.05999999999960437,-60.19737499999974,0],[1,1.2,1.2,1.2]],[34,"Sprite-002",33554432,38,[[14,-941,[5,167.808,167.808]],[57,0,false,-942,138]],[1,233.9685,427.8450000000001,0]],[34,"Sprite",33554432,39,[[14,-943,[5,671.951,1007.9265000000001]],[33,0,-944,140]],[1,-0.05950000000007094,-6.184499999999957,0]],[89,"Sprite-001",33554432,39,[[14,-945,[5,420.9313725490196,666.5572087658593]],[57,0,false,-946,141]],[1,-0.05999999999994543,-81.27500000000009,0],[1,1.2,1.2,1.2]],[34,"Sprite-002",33554432,39,[[14,-947,[5,167.808,167.808]],[57,0,false,-948,142]],[1,233.9685,427.8450000000001,0]],[34,"Sprite",33554432,40,[[14,-949,[5,671.951,1007.9265000000001]],[33,0,-950,144]],[1,-0.05950000000007094,-6.184499999999957,0]],[89,"Sprite-001",33554432,40,[[14,-951,[5,343.65370370370374,544.1857472766884]],[57,0,false,-952,145]],[1,-0.05999999999994543,-34.027444444444654,0],[1,1.2,1.2,1.2]],[34,"Sprite-002",33554432,40,[[14,-953,[5,167.808,167.808]],[57,0,false,-954,146]],[1,233.9685,427.8450000000001,0]],[34,"Sprite",33554432,41,[[14,-955,[5,671.951,1007.9265000000001]],[33,0,-956,148]],[1,-0.05950000000007094,-6.184499999999957,0]],[89,"Sprite-001",33554432,41,[[14,-957,[5,428.340350877193,678.2895438596491]],[57,0,false,-958,149]],[1,-14.166315789473401,-37.67815789473684,0],[1,1.2,1.2,1.2]],[34,"Sprite-002",33554432,41,[[14,-959,[5,167.808,167.808]],[57,0,false,-960,150]],[1,233.9685,427.8450000000001,0]],[34,"Sprite-002",33554432,42,[[14,-961,[5,671.951,1007.9265000000001]],[33,0,-962,152]],[1,-0.05950000000007094,-6.184499999999957,0]],[89,"Sprite-003",33554432,42,[[14,-963,[5,390.0466666666667,617.650368627451]],[57,0,false,-964,153]],[1,-0.059499999999957254,-62.84299999999996,0],[1,1.2,1.2,1.2]],[34,"Sprite",33554432,42,[[14,-965,[5,167.808,167.808]],[57,0,false,-966,154]],[1,233.9685,427.8450000000001,0]],[45,"pagination1",33554432,43,[[[14,-967,[5,181.71999999999997,181.71999999999997]],-968],4,1],[1,-89.93899999999996,0,0]],[45,"pagination2",33554432,43,[[[14,-969,[5,181.71999999999997,181.71999999999997]],-970],4,1],[1,-45.07099999999997,0,0]],[45,"pagination3",33554432,43,[[[14,-971,[5,181.71999999999997,181.71999999999997]],-972],4,1],[1,-1.5509999999999309,0,0]],[45,"pagination4",33554432,43,[[[14,-973,[5,181.71999999999997,181.71999999999997]],-974],4,1],[1,41.96900000000005,0,0]],[45,"pagination5",33554432,43,[[[14,-975,[5,181.71999999999997,181.71999999999997]],-976],4,1],[1,85.48900000000003,0,0]],[177,"Label",512,33554432,44,[[14,-977,[5,100,40]],[162,"button",20,20,1,false,-978,[4,4278190080]]]],[177,"Label",512,33554432,45,[[14,-979,[5,100,40]],[162,"button",20,20,1,false,-980,[4,4278190080]]]],[34,"lbl_wipeoutTitle-001",33554432,11,[[14,-981,[5,886.906,119.076]],[201,"Follow us @gobackstage",35,35,100,2,false,true,-982,158]],[1,0,-884.083,0]],[146,"Label",512,33554432,28,[[14,-983,[5,342.44,40]],[164,"TAP TO SKIP",40,false,false,-984,182]],[1,0,-1.574,0]],[34,"lbl_score",33554432,9,[[14,-985,[5,332.42,102.5]],[140,"SCORE",70,70,102.5,false,false,-986,186]],[1,6.057,-95.711,0]],[34,"container_wipeout",33554432,9,[[14,-987,[5,1035,941]],[33,2,-988,187]],[1,0,373.91,0]],[45,"txt_wipeout",33554432,9,[[[14,-989,[5,714.04,147.96800000000002]],-990],4,1],[1,-0.8315,653.0019999999998,0]],[63,"Sprite",33554432,165,[[[14,-991,[5,716.67,490.71987499999994]],-992],4,1]],[45,"txt_score",33554432,9,[[[14,-993,[5,698.61,50]],-994],4,1],[1,1.1368683772161603e-13,-216.17600000000016,0]],[62,"btn_home-001",33554432,58,[[14,-995,[5,320,320]],[57,0,false,-996,189]]],[62,"btn_costumization-001",33554432,59,[[14,-997,[5,320,320]],[33,0,-998,190]]],[62,"btn_tryAgain-001",33554432,60,[[14,-999,[5,626.0179999999999,311.2748781163434]],[57,0,false,-1000,191]]],[34,"txt_title",33554432,9,[[14,-1001,[5,700.39,102.5]],[140,"WIPE OUT",100,100,102.5,false,false,-1002,203]],[1,5.994,829.565,0]],[34,"lbl_swag",33554432,9,[[14,-1003,[5,292.92,102.5]],[140,"SWAG",70,70,102.5,false,false,-1004,204]],[1,6.057000000000016,-385.054,0]],[34,"Label",33554432,15,[[14,-1005,[5,420,40]],[165,"Outfit Score",2,40,1,false,-1006,[4,4294769191]]],[1,-311.766,133.599,0]],[34,"Label-001",33554432,15,[[14,-1007,[5,420,40]],[165,"Runner Score",2,40,1,false,-1008,[4,4294769191]]],[1,-311.766,22.644,0]],[34,"Label-002",33554432,15,[[14,-1009,[5,420,40]],[165,"Player Score",2,40,1,false,-1010,[4,4294769191]]],[1,-311.766,-133.37,0]],[89,"lbl_swag",33554432,23,[[14,-1011,[5,292.92,102.5]],[140,"SWAG",70,70,102.5,false,false,-1012,226]],[1,-13.310852713178235,150.87984496124028,0],[1,0.7751937984496123,0.7751937984496123,1]],[146,"Label",512,33554432,30,[[14,-1013,[5,342.44,40]],[164,"TAP TO SKIP",40,false,false,-1014,238]],[1,0,-1.574,0]],[146,"Label",512,33554432,31,[[14,-1015,[5,342.44,40]],[164,"TAP TO SKIP",40,false,false,-1016,241]],[1,0,-1.574,0]],[178,"car",5,[-1017],[1,-98.260925,0,6.127],[1,7.8,7.8,7.8]],[144,"group1",6,[-1018,-1019],[1,7.818057060241699,0.030286723747849464,-10.236532211303711],[3,0,-0.3576463270865601,0,0.9338571115119771],[1,1.7601354122161865,1.7601354122161865,1.7601354122161865],[1,0,-41.91143817474341,0]],[38,"Cone-003",117,[[79,"Cone<ModelComponent>",-1020,[332],[9],333]],[1,8.881784197001252e-16,0.9593189021819822,-0.28232471361245803],[3,-0.14262029627303718,0,0,0.9897774755423518],[1,20,100,1],[1,-16.398999999999997,0,0]],[130,"LightRay-001",5,[-1023],[[141,true,-1022,-1021]],[1,14.981,0.653,6.791],[1,11,11,11]],[38,"Cone-003",290,[[79,"Cone<ModelComponent>",-1024,[334],[9],335]],[1,-0.003,0.952,-0.305],[3,-0.1622348619657702,0.11733018221289243,-0.023370563835972875,0.9794729677999418],[1,20,100,1],[1,-18.266,12.888,-4.81]],[130,"LightRay-002",5,[-1027],[[141,true,-1026,-1025]],[1,-10.759,0.653,7.42],[1,11,11,11]],[61,"Cone-003",292,[[79,"Cone<ModelComponent>",-1028,[336],[9],337]],[1,0,1.006,0],[1,20,100,1]],[130,"LightRay-003",5,[-1031],[[141,true,-1030,-1029]],[1,4.037,0.653,-1.123],[1,11,11,11]],[61,"Cone-003",294,[[79,"Cone<ModelComponent>",-1032,[338],[9],339]],[1,8.881784197001252e-16,0.9593189021819822,0],[1,20,100,1]],[11,0,{},5,[12,"e892RDjrxNZISjs1LC/QQv",null,-1033,[52,"218IHfMRdAG4rHuyc2tiwo",null,[[1,"Crowd-001",["_name"],121],[2,["_lpos"],121,[1,3.885,-0.097,14.838]],[2,["_lrot"],121,[3,0,0.08541692313736747,0,0.9963452961909064]],[2,["_euler"],121,[1,0,9.8,0]],[1,true,["_active"],121],[1,0,["startingPoseIndex"],17],[1,4,["poses","length"],17],[3,["poses","0"],17,358],[3,["poses","1"],17,359],[3,["poses","2"],17,360],[3,["poses","3"],17,361],[3,["poses","4"],17,362],[3,["poses","5"],17,363],[3,["poses","6"],17,364],[3,["poses","7"],17,365],[1,0,["tripTexture","length"],17],[1,null,["tripTexture","0"],17]]],[[15,["mainRenderer"],[0,["0b8pE5sPNepqN6zgbDPnqa"]]]],357]],[11,0,{},5,[12,"e892RDjrxNZISjs1LC/QQv",null,-1034,[52,"84TrrsLCVHzLQjQM9M81sH",null,[[1,"Crowd-002",["_name"],122],[2,["_lpos"],122,[1,5.601,-0.097,15.594]],[2,["_lrot"],122,[3,0,0.08541692313736747,0,0.9963452961909064]],[2,["_euler"],122,[1,0,9.8,0]],[1,true,["_active"],122],[1,0,["startingPoseIndex"],18],[1,4,["poses","length"],18],[3,["poses","0"],18,367],[3,["poses","1"],18,368],[3,["poses","2"],18,369],[3,["poses","3"],18,370],[3,["poses","4"],18,371],[3,["poses","5"],18,372],[3,["poses","6"],18,373],[3,["poses","7"],18,374],[1,0,["tripTexture","length"],18],[1,null,["tripTexture","0"],18]]],[[15,["mainRenderer"],[0,["0b8pE5sPNepqN6zgbDPnqa"]]]],366]],[11,0,{},5,[12,"e892RDjrxNZISjs1LC/QQv",null,-1035,[52,"5amoyoonpGT7N2lOUs/dJ4",null,[[1,"Crowd-003",["_name"],123],[2,["_lpos"],123,[1,7.263,-0.097,14.942]],[2,["_lrot"],123,[3,0,0.08541692313736747,0,0.9963452961909064]],[2,["_euler"],123,[1,0,9.8,0]],[1,true,["_active"],123],[1,0,["startingPoseIndex"],19],[1,4,["poses","length"],19],[3,["poses","0"],19,376],[3,["poses","1"],19,377],[3,["poses","2"],19,378],[3,["poses","3"],19,379],[3,["poses","4"],19,380],[3,["poses","5"],19,381],[3,["poses","6"],19,382],[3,["poses","7"],19,383],[1,0,["tripTexture","length"],19],[1,null,["tripTexture","0"],19]]],[[15,["mainRenderer"],[0,["0b8pE5sPNepqN6zgbDPnqa"]]]],375]],[11,0,{},5,[12,"e892RDjrxNZISjs1LC/QQv",null,-1036,[52,"35qEb1zSdMqJTXHRdsrbny",null,[[1,"Crowd-004",["_name"],124],[2,["_lpos"],124,[1,8.626,-0.097,15.581]],[2,["_lrot"],124,[3,0,0.08541692313736747,0,0.9963452961909064]],[2,["_euler"],124,[1,0,9.8,0]],[1,true,["_active"],124],[1,0,["startingPoseIndex"],20],[1,4,["poses","length"],20],[3,["poses","0"],20,385],[3,["poses","1"],20,386],[3,["poses","2"],20,387],[3,["poses","3"],20,388],[3,["poses","4"],20,389],[3,["poses","5"],20,390],[3,["poses","6"],20,391],[3,["poses","7"],20,392],[1,0,["tripTexture","length"],20],[1,null,["tripTexture","0"],20]]],[[15,["mainRenderer"],[0,["0b8pE5sPNepqN6zgbDPnqa"]]]],384]],[231,"powerUpEffect","c9KmuMSrZO6r1HuaSlJDhJ",10,[[-1037,[333,-1039,-1038]],1,4],[1,0,13.79,-7],[3,0.7071067811865475,0,0,0.7071067811865476],[1,90,0,0]],[251,false,300,[[393,null],6,0],[74,4,[255,[[334,[4,4278190335]],[143,0.18080357142857145,[4,4294901995]],[143,0.45758928571428575,[4,4294906880]],[143,0.734375,[4,4280286976]],[143,0.9910714285714286,[4,4278234623]]],[[75,255]]]],[85,3,0.3,0.6],[8],[8],[85,3,10,20],[8],[8],[254,1,180,[48,[0,1],[[110,2,1,-2,1,-2,1],[126,2,1,1]]]],[8],[85,3,2,4],[8],[30,10],[8],[94,[40]],[257,true,0,[30,1],[1,0,-6.2,0],[1,0,180,0],[1,16,36.3,1]],[125,true,[49,1,[48,[0,1],[[110,2,1,-2,1,-2,1],[126,2,1,1]]]],[8],[8],[8]],[67,[8],[8],[8],[30,1]],[68,[8],[8],[8]],[69,[8],[8],[8],[8]],[81,[8],[8],[8]],[95,[49,1,[48,[0,1],[[59,2,1],[59,2,1]]]],[8]],[97],[70,[30,1],[8],[40],[40],-1040],[127,394,395]],[232,"AudioManger","c51+zPeK9EHIxbV9tZMrDU",10,[[-1041,[335,-1043,-1042,[[65,"JUMP",[426]],[65,"COLLECT",[427]],[65,"SPECIALCOLLECT",[428]],[65,"POWERUP",[429]],[65,"HIT",[430]],[65,"DEAD",[431]],[65,"COUNTDOWN",[432]],[65,"COUNTDOWNGO",[433]],[65,"WIN",[434]]],[[65,"SEGMENT1",[435]],[65,"SEGMENT2",[436]],[65,"SEGMENT3",[437]],[65,"SEGMENT4A",[438]],[65,"SEGMENT4B",[439]]]]],1,4]],[336,7,125,32],[73,"Particle",32,[196],[1,0,0.795,0],[3,0.707079856728401,-0.006170592268477773,0.006170592268477771,0.7070798567284011],[1,89.99999999999999,-0.9999999742825998,-9.93923337957349e-17]],[337,2,0.75,0.25,null,3,32,13,[49,1,[48,[0,0.5,1],[[96,2,5.431111111111112,0.37040587162749145,5.431111111111112,1],[154,2,1,0.21886350670658009,0.4103232772351275],[96,2,-5.578544061302685,1,-5.578544061302685,1]]]],[49,1,[48,[0,0.717948717948718,1],[[126,2,0.37040587162749145,1],[154,2,1,0.21886350670658009,0.4103232772351275],[126,2,1,1]]]],[5],196],[320,125,[6]],[218,"Main Light","c0y6F5f+pAvI805TdmxIjx",10,[[338,-1044,[4,4287315274],[339]]],[3,-0.26763109564669374,-0.6012621807401565,-0.11105580411557703,0.7446636791376254],[1,-32.6,-75.2,9]],[179,"Swipe Manager","8bXrnCFfRGran+rVRtMCRR",10,[[340,100,0.5,-1045]]],[73,"RarityParticle",64,[197],[1,0,1.29,0],[3,0.7071067811865475,0,0,0.7071067811865476],[1,89.99999999999999,0,0]],[73,"RarityParticle-001",64,[198],[1,0,1.29,0],[3,0.7071067811865475,0,0,0.7071067811865476],[1,89.99999999999999,0,0]],[73,"RarityParticle-002",64,[199],[1,0,1.29,0],[3,0.7071067811865475,0,0,0.7071067811865476],[1,89.99999999999999,0,0]],[61,"Celebrity Placeholder",64,[[79,"Capsule<ModelComponent>",-1046,[16],[9],17]],[1,0,1,0],[1,0.85,0.85,0.85]],[61,"Plane",202,[[79,"Plane<ModelComponent>",-1047,[21],[9],22]],[1,-0.452,-0.393,-5.024],[1,1.8,1,2.4]],[178,"Stagerunner Environment Export 2",202,[-1048],[1,0,-0.244,-82.5],[1,11,11,11]],[61,"pCube487",314,[[35,-1049,[23],[9],24]],[1,0.0755172073841095,-0.0008892230689525604,6.388121604919434],[1,43.6334114074707,1,221.53329467773438]],[73,"Particle",3,[203],[1,-2.836,2.872,1.974],[3,0.7071067811865475,0,0,0.7071067811865477],[1,89.99999999999999,0,0]],[73,"Particle-001",3,[204],[1,-5.299,2.872,-0.179],[3,0.7071067811865475,0,0,0.7071067811865477],[1,89.99999999999999,0,0]],[73,"Particle-002",3,[205],[1,-7.828,2.872,-2.586],[3,0.7071067811865475,0,0,0.7071067811865477],[1,89.99999999999999,0,0]],[73,"Particle-003",3,[206],[1,7.821,2.872,-2.586],[3,0.7071067811865475,0,0,0.7071067811865477],[1,89.99999999999999,0,0]],[73,"Particle-004",3,[207],[1,5.618,2.872,-0.179],[3,0.7071067811865475,0,0,0.7071067811865477],[1,89.99999999999999,0,0]],[73,"Particle-005",3,[208],[1,3.155,2.872,1.974],[3,0.7071067811865475,0,0,0.7071067811865477],[1,89.99999999999999,0,0]],[227,"Camera",4,[-1050],[1,0,0,1000]],[327,0,100,959.9999999999999,2000,6,33554432,322,[4,4278190080]],[313,"GO!",200,200,1,false,true,219],[314,"000",0,46,46,1,false,221],[158,9,42.58100000000002,355.22900000000004,77],[278,1,0.48099999999999454,1,25],[282,3,2,223],[53,148],[138,2,1,226],[138,2,1,227],[138,2,1,228],[138,2,1,229],[55,0,84],[304,2,34,[4,4292269782],34],[86,0,150],[205,2,35,[4,4292269782],35,336],[86,0,152],[205,2,36,[4,4292269782],36,338],[166,"player",36,35,35,2,232,[4,4294769191]],[166,"celebrity",36,35,35,2,233,[4,4294769191]],[166,"background",36,35,35,2,234,[4,4294769191]],[168,"Node<ParticleSystem2D>",1,999.999985098839,0.20000000298023224,0.5,360,360,3.369999885559082,50,30.31999969482422,-47.369998931884766,-47.369998931884766,-142.11000061035156,0,190.7899932861328,-92.11000061035156,65.79000091552734,-671.0499877929688,65.79000091552734,100,100,true,200,235,[0,7,7],[0,0.25,0.8600000143051147],[4,2740373706],[4,3333292005],[4,3591610797],[4,3170498923]],[83,0,false,156],[168,"Node<ParticleSystem2D>",1,999.999985098839,0.20000000298023224,0.5,360,360,3.369999885559082,50,30.31999969482422,-47.369998931884766,-47.369998931884766,-142.11000061035156,0,190.7899932861328,-92.11000061035156,65.79000091552734,-671.0499877929688,65.79000091552734,100,100,true,200,236,[0,7,7],[0,0.25,0.8600000143051147],[4,2740373706],[4,3333292005],[4,3591610797],[4,3170498923]],[83,0,false,157],[168,"Node<ParticleSystem2D>",1,999.999985098839,0.20000000298023224,0.5,360,360,3.369999885559082,50,30.31999969482422,-47.369998931884766,-47.369998931884766,-142.11000061035156,0,190.7899932861328,-92.11000061035156,65.79000091552734,-671.0499877929688,65.79000091552734,100,100,true,200,237,[0,7,7],[0,0.25,0.8600000143051147],[4,2740373706],[4,3333292005],[4,3591610797],[4,3170498923]],[83,0,false,158],[83,0,false,159],[98,3,0.9,88,[4,4292269782],88],[83,0,false,160],[53,160],[83,0,false,90],[55,0,92],[55,0,93],[55,0,94],[55,0,95],[55,0,96],[53,22],[328,"Camera<CameraComponent>",100,60,960.0000000000001,6,1083179008,[4,4278190080]],[73,"CameraRenderTexture",97,[360],[1,-0.2,1.414,2.159],[3,-0.054950179912445746,0,0,0.9984890974505379],[1,-6.3,0,0]],[219,"Celebrity Placeholder",97,[[79,"Capsule<ModelComponent>",-1051,[123],[9],124]],[1,0.197,1,-1.846]],[0,["20eNVHQRFEgrrOqpc8+O20"]],[0,["522cEV2A1H0pPCSz0RcHxV"]],[98,3,0.9,54,[4,4292269782],54],[98,3,0.9,55,[4,4292269782],55],[98,3,0.9,56,[4,4292269782],56],[86,0,262],[86,0,263],[86,0,264],[86,0,265],[86,0,266],[199,44,[4,4292269782],44],[199,45,[4,4292269782],45],[206,false,8],[315,"Not so easy is it. You ain't the only one racing the floor.",45,45,50,1,true,273,[4,4294967086]],[83,0,false,274],[316,"99999999",100,100,50,false,275],[98,3,0.9,58,[4,4292269782],58],[98,3,0.9,59,[4,4292269782],59],[98,3,0.9,60,[4,4292269782],60],[341,9,376,378,[103,104,105,106,107],381,379,380,377,[206,207,208,209,210,211]],[167,"200",40,1,false,false,172],[167,"200",40,1,false,false,174],[167,"200",40,1,false,false,176],[279,17,-380,19.745,652.698,23],[342,61,15,386,[108,109,110,111,112],384,383,385],[161,3,0,1,-0.5,184,[4,4282122239],[0,0.5,0.5]],[283,3,0,0.5,185,[4,4282122239],[0,0.5,0.5]],[284,3,1,0,1,186,[4,4282122239],[0,0.5,0.5]],[161,3,0,0.5,0.5,187,[4,4282122239],[0,0.5,0.5]],[161,3,0,0.5,-0.5,188,[4,4282122239],[0,0.5,0.5]],[14,21,[5,1020,1860]],[198,9,540,540,10,1,189],[198,33,540,540,10,1,190],[179,"ScoreManager","edcHCcl59PPrfROZNzQohx",10,[[343,-1052,325,[197,198,199],[244,245,246,247]]]],[220,"GameManager","01hCSguQ1F76hk0win6Yg9",10,[[344,-1053,324,382,243,303,5,24,193,200,387,31]],[1,-92,0,39]],[73,"CutsceneCamera",5,[-1054],[1,1.839,3,16.579],[3,-0.0752069869135445,0.15313538710972485,0.011689031340312876,0.9852699269136685],[1,-8.73,17.669,0]],[329,60,1822425087,398,[4,4288560802]],[38,"Sphere",5,[[79,"Sphere<ModelComponent>",-1055,[248],[9],249]],[1,0.521,0,10.233],[3,0,-0.964157947658004,0,-0.2653289504895866],[1,100,100,100],[1,0,-210.773,0]],[61,"pasted__pCube516",287,[[35,-1056,[250],[9],251]],[1,9.519014358520508,-0.0023821883369237185,0.511020839214325],[1,0.5798535943031311,0.5798535943031311,0.5798535943031311]],[221,"BouncerCutscene",false,5,[-1057]],[176,"Camera",402,[[204,"Camera<CameraComponent>",2,60,1822425087,-1058,[4,4286073907]]],[1,-2.683,4.034,17.807],[3,-0.10729441031541136,-0.1134030247060897,-0.012319510866272157,0.9876618313747849],[1,-12.4,-13.1,0]],[38,"pasted__pCube472",2,[[35,-1059,[252],[9],253]],[1,-4.953984260559082,0.0019401619210839272,0.5652859210968018],[3,0,0.7071067811865476,0,0.7071067811865476],[1,1.0782103538513184,1.4207334518432617,1.1444876194000244],[1,0,90.00000000000003,0]],[38,"pasted__pCube473",2,[[35,-1060,[254],[9],255]],[1,-5.1741557121276855,0.0019401619210839272,0.5652859210968018],[3,0,0.7071067811865476,0,0.7071067811865476],[1,1.0782103538513184,1.4207334518432617,1.1444876194000244],[1,0,90.00000000000003,0]],[38,"pasted__pCube474",2,[[35,-1061,[256],[9],257]],[1,-5.6186723709106445,0.0019401619210839272,0.5652859210968018],[3,0,0.7071067811865476,0,0.7071067811865476],[1,1.0782103538513184,1.4207334518432617,1.1444876194000244],[1,0,90.00000000000003,0]],[38,"pasted__pCube475",2,[[35,-1062,[258],[9],259]],[1,-5.398500919342041,0.0019401619210839272,0.5652859210968018],[3,0,0.7071067811865476,0,0.7071067811865476],[1,1.0782103538513184,1.4207334518432617,1.1444876194000244],[1,0,90.00000000000003,0]],[61,"pasted__pCube476",2,[[35,-1063,[260],[9],261]],[1,0.4414992034435272,0.0019401619210839272,-5.070068359375],[1,1.0782103538513184,1.4207334518432617,1.1444876194000244]],[38,"pasted__pCube477",2,[[35,-1064,[262],[9],263]],[1,-5.398500919342041,0.0019401619210839272,0.3127540051937103],[3,0,0.7071067811865476,0,0.7071067811865476],[1,1.0782103538513184,1.4207334518432617,1.1444876194000244],[1,0,90.00000000000003,0]],[38,"pasted__pCube478",2,[[35,-1065,[264],[9],265]],[1,-5.1741557121276855,0.0019401619210839272,0.3127540051937103],[3,0,0.7071067811865476,0,0.7071067811865476],[1,1.0782103538513184,1.4207334518432617,1.1444876194000244],[1,0,90.00000000000003,0]],[38,"pasted__pCube479",2,[[35,-1066,[266],[9],267]],[1,0.21470986306667328,0.0019401619210839272,5.933473587036133],[3,6.123234262925839e-17,1,6.123234262925839e-17,6.123234262925839e-17],[1,1.0782103538513184,1.4207334518432617,1.1444876194000244],[1,-7.0167096047110005e-15,180,7.0167096047110005e-15]],[38,"pasted__pCube480",2,[[35,-1067,[268],[9],269]],[1,0.21524319052696228,0.0019401619210839272,6.156184673309326],[3,6.123234262925839e-17,1,6.123234262925839e-17,6.123234262925839e-17],[1,1.0782103538513184,1.4207334518432617,1.1444876194000244],[1,-7.0167096047110005e-15,180,7.0167096047110005e-15]],[61,"pasted__pCube481",2,[[35,-1068,[270],[9],271]],[1,1.1097232103347778,0.0019401619210839272,-4.594799041748047],[1,1.0782103538513184,1.4207334518432617,1.1444876194000244]],[38,"pasted__pCube517",2,[[35,-1069,[272],[9],273]],[1,0.21470986306667328,0.0019401619210839272,5.71157169342041],[3,6.123234262925839e-17,1,6.123234262925839e-17,6.123234262925839e-17],[1,1.0782103538513184,1.4207334518432617,1.1444876194000244],[1,-7.0167096047110005e-15,180,7.0167096047110005e-15]],[38,"pasted__pCube518",2,[[35,-1070,[274],[9],275]],[1,0.21470986306667328,0.0019401619210839272,5.046015739440918],[3,6.123234262925839e-17,1,6.123234262925839e-17,6.123234262925839e-17],[1,1.0782103538513184,1.4207334518432617,1.1444876194000244],[1,-7.0167096047110005e-15,180,7.0167096047110005e-15]],[38,"pasted__pCube519",2,[[35,-1071,[276],[9],277]],[1,0.21470986306667328,0.0019401619210839272,5.267917633056641],[3,6.123234262925839e-17,1,6.123234262925839e-17,6.123234262925839e-17],[1,1.0782103538513184,1.4207334518432617,1.1444876194000244],[1,-7.0167096047110005e-15,180,7.0167096047110005e-15]],[38,"pasted__pCube520",2,[[35,-1072,[278],[9],279]],[1,0.21524319052696228,0.0019401619210839272,5.490628719329834],[3,6.123234262925839e-17,1,6.123234262925839e-17,6.123234262925839e-17],[1,1.0782103538513184,1.4207334518432617,1.1444876194000244],[1,-7.0167096047110005e-15,180,7.0167096047110005e-15]],[38,"pasted__pCube521",2,[[35,-1073,[280],[9],281]],[1,0.21470986306667328,0.0019401619210839272,4.822988033294678],[3,6.123234262925839e-17,1,6.123234262925839e-17,6.123234262925839e-17],[1,1.0782103538513184,1.4207334518432617,1.1444876194000244],[1,-7.0167096047110005e-15,180,7.0167096047110005e-15]],[38,"pasted__pCube522",2,[[35,-1074,[282],[9],283]],[1,0.4280904531478882,0.0019401619210839272,4.820582866668701],[3,6.123234262925839e-17,1,6.123234262925839e-17,6.123234262925839e-17],[1,1.0782103538513184,1.4207334518432617,1.1444876194000244],[1,-7.0167096047110005e-15,180,7.0167096047110005e-15]],[38,"pasted__pCube523",2,[[35,-1075,[284],[9],285]],[1,0.4280904531478882,0.0019401619210839272,5.265511989593506],[3,6.123234262925839e-17,1,6.123234262925839e-17,6.123234262925839e-17],[1,1.0782103538513184,1.4207334518432617,1.1444876194000244],[1,-7.0167096047110005e-15,180,7.0167096047110005e-15]],[38,"pasted__pCube524",2,[[35,-1076,[286],[9],287]],[1,0.4280904531478882,0.0019401619210839272,5.043610095977783],[3,6.123234262925839e-17,1,6.123234262925839e-17,6.123234262925839e-17],[1,1.0782103538513184,1.4207334518432617,1.1444876194000244],[1,-7.0167096047110005e-15,180,7.0167096047110005e-15]],[38,"pasted__pCube525",2,[[35,-1077,[288],[9],289]],[1,0.4286237955093384,0.0019401619210839272,5.488223075866699],[3,6.123234262925839e-17,1,6.123234262925839e-17,6.123234262925839e-17],[1,1.0782103538513184,1.4207334518432617,1.1444876194000244],[1,-7.0167096047110005e-15,180,7.0167096047110005e-15]],[38,"pasted__pCube526",2,[[35,-1078,[290],[9],291]],[1,0.4280904531478882,0.0019401619210839272,5.709166526794434],[3,6.123234262925839e-17,1,6.123234262925839e-17,6.123234262925839e-17],[1,1.0782103538513184,1.4207334518432617,1.1444876194000244],[1,-7.0167096047110005e-15,180,7.0167096047110005e-15]],[38,"pasted__pCube527",2,[[35,-1079,[292],[9],293]],[1,0.4280904531478882,0.0019401619210839272,5.931068420410156],[3,6.123234262925839e-17,1,6.123234262925839e-17,6.123234262925839e-17],[1,1.0782103538513184,1.4207334518432617,1.1444876194000244],[1,-7.0167096047110005e-15,180,7.0167096047110005e-15]],[38,"pasted__pCube528",2,[[35,-1080,[294],[9],295]],[1,0.4286237955093384,0.0019401619210839272,6.15377950668335],[3,6.123234262925839e-17,1,6.123234262925839e-17,6.123234262925839e-17],[1,1.0782103538513184,1.4207334518432617,1.1444876194000244],[1,-7.0167096047110005e-15,180,7.0167096047110005e-15]],[38,"pasted__pCube529",2,[[35,-1081,[296],[9],297]],[1,-4.953984260559082,0.0019401619210839272,0.3142752945423126],[3,0,0.7071067811865476,0,0.7071067811865476],[1,1.0782103538513184,1.4207334518432617,1.1444876194000244],[1,0,90.00000000000003,0]],[38,"pasted__Stage_Light12",288,[[35,-1082,[298],[9],299]],[1,1.0661725997924805,-0.0023470756132155657,6.064582824707031],[3,0,-0.7071067811865476,0,0.7071067811865476],[1,0.2891865670681,0.2891865670681,0.2891865670681],[1,0,-90.00000000000003,0]],[38,"pasted__Stage_Light13",288,[[35,-1083,[300],[9],301]],[1,-0.2015366405248642,-0.0023470756132155657,5.831631183624268],[3,0,-0.5557291622899818,0,0.8313633971858968],[1,0.2891865670681,0.2891865670681,0.2891865670681],[1,0,-67.52190472850648,0]],[144,"group2",6,[-1084],[1,11.195284843444824,0.030286723747849464,6.098292350769043],[3,-8.421810245332829e-17,-0.8522480007546591,-8.421810245332829e-17,0.5231379791314013],[1,1.7601354122161865,1.7601354122161865,1.7601354122161865],[1,-1.3273415000013062e-14,-116.91404539864308,3.1761367074794977e-15]],[38,"pasted__Stage_Light12",429,[[35,-1085,[302],[9],303]],[1,1.2318503856658936,-0.0023470756132155657,5.737415790557861],[3,4.2807636878471035e-33,-0.7071067811865476,4.2807636878471035e-33,0.7071067811865476],[1,0.2891865670681,0.2891865670681,0.2891865670681],[1,6.937274508806902e-31,-90.00000000000003,0]],[131,"pPlane28",6,[[35,-1086,[304],[9],305]]],[131,"pCube72",6,[[35,-1087,[306],[9],307]]],[38,"pCylinder1",6,[[35,-1088,[308],[9],309]],[1,-0.09051886200904846,0.19508957862854004,1.111017107963562],[3,0,0,0.7071067811865476,0.7071067811865476],[1,16.522417068481445,1.7789942026138306,16.522417068481445],[1,0,0,90]],[131,"pCube125",6,[[35,-1089,[310],[9],311]]],[38,"pPlane36",6,[[35,-1090,[312],[9],313]],[1,-0.0744834840297699,0.9221276044845581,0.5008662939071655],[3,0,0,-0.7071067811865476,0.7071067811865476],[1,12.484889030456543,44.074153900146484,166.17320251464844],[1,0,0,-90]],[38,"pPlane37",6,[[35,-1091,[314],[9],315]],[1,-1.0079761743545532,0.9221276044845581,0.5008662939071655],[3,0,0,0.7071067811865476,0.7071067811865476],[1,12.484889030456543,44.074153900146484,166.17320251464844],[1,0,0,90]],[131,"pCube126",6,[[35,-1092,[316],[9],317]]],[38,"pPlane38",6,[[35,-1093,[318],[9],319]],[1,-0.19705986976623535,0.9221276044845581,-0.6617430448532104],[3,0,0,-0.7071067811865476,0.7071067811865476],[1,12.484889030456543,44.074153900146484,166.17320251464844],[1,0,0,-90]],[38,"pPlane39",6,[[35,-1094,[320],[9],321]],[1,-0.36873769760131836,0.9221276044845581,-0.8289247155189514],[3,-0.4999999999999999,-0.5,0.5,0.5000000000000001],[1,12.484889030456543,44.074153900146484,166.17320251464844],[1,0,-90,90]],[38,"pPlane40",6,[[35,-1095,[322],[9],323]],[1,-0.30936285853385925,0.9221276044845581,-0.3302956819534302],[3,-0.5,-0.5,0.5,0.5],[1,12.484889030456543,44.074153900146484,166.17320251464844],[1,0,-90,90]],[38,"pPlane41",6,[[35,-1096,[324],[9],325]],[1,-0.770445704460144,0.9221276044845581,1.3319035768508911],[3,0.5,0.5,0.5,0.5],[1,12.484889030456543,44.074153900146484,166.17320251464844],[1,0,90,90]],[38,"pPlane42",6,[[35,-1097,[326],[9],327]],[1,0.30630216002464294,0.443204402923584,-0.03402784839272499],[3,0,0,-0.7071067811865476,0.7071067811865476],[1,10.116033554077148,44.074153900146484,166.17320251464844],[1,0,0,-90]],[38,"pPlane43",6,[[35,-1098,[328],[9],329]],[1,0.1378544718027115,0.443204402923584,0.49779555201530457],[3,0.5,-0.5,-0.5,0.5],[1,10.116033554077148,44.074153900146484,166.17320251464844],[1,0,-90,-90]],[38,"pPlane44",6,[[35,-1099,[330],[9],331]],[1,0.08509619534015656,0.443204402923584,-0.20492690801620483],[3,-0.5,0.5,-0.5,0.5],[1,10.116033554077148,44.074153900146484,166.17320251464844],[1,0,90,-90]],[0,["20eNVHQRFEgrrOqpc8+O20"]],[61,"Quad",5,[[79,"Quad<ModelComponent>",-1100,[346],[9],347]],[1,-1.093,5,10.834],[1,4.444,2.605,1.563]],[61,"Quad",194,[[79,"Quad<ModelComponent>",-1101,[396],[9],397]],[1,-0.5999999999999943,0.75,0],[1,2.4525,1.7519999999999998,1.7519999999999998]],[61,"Quad-001",194,[[79,"Quad<ModelComponent>",-1102,[398],[9],399]],[1,-0.5999999999999943,0.843,0.0344999999999942],[1,1.5,1.5,1.5]],[206,false,302]],0,[0,1,139,0,1,139,0,1,139,0,1,139,0,4,1,0,-1,404,0,-2,405,0,-3,406,0,-4,407,0,-5,408,0,-6,409,0,-7,410,0,-8,411,0,-9,412,0,-10,413,0,-11,414,0,-12,415,0,-13,416,0,-14,417,0,-15,418,0,-16,419,0,-17,420,0,-18,421,0,-19,422,0,-20,423,0,-21,424,0,-22,425,0,-23,426,0,-1,64,0,-2,47,0,-3,200,0,-4,201,0,-5,202,0,-6,316,0,-7,317,0,-8,318,0,-9,319,0,-10,320,0,-11,321,0,-12,209,0,-13,210,0,-14,211,0,-15,212,0,-16,213,0,-17,214,0,-18,215,0,-19,216,0,-20,217,0,2,4,0,34,323,0,2,4,0,2,4,0,2,4,0,-1,322,0,-2,219,0,-3,24,0,-4,83,0,-5,49,0,-6,8,0,-7,9,0,-8,11,0,-9,61,0,-10,62,0,-11,182,0,-12,29,0,-13,114,0,-14,30,0,-15,28,0,-16,31,0,-1,193,0,-1,398,0,-2,400,0,-3,287,0,-4,402,0,-5,6,0,-6,117,0,-7,290,0,-8,292,0,-9,294,0,-10,63,0,-11,12,0,-12,446,0,-13,119,0,-14,296,0,-15,297,0,-16,298,0,-17,299,0,-2,288,0,-3,429,0,-4,431,0,-5,432,0,-6,433,0,-7,434,0,-8,435,0,-9,436,0,-10,437,0,-11,438,0,-12,439,0,-13,440,0,-14,441,0,-15,442,0,-16,443,0,-17,444,0,2,7,0,2,7,0,-1,153,0,-2,154,0,-3,155,0,-4,85,0,-5,86,0,-6,87,0,-7,238,0,-8,239,0,-9,240,0,-10,159,0,-11,50,0,-12,88,0,-13,241,0,2,8,0,2,8,0,-3,243,0,2,8,0,-5,375,0,-2,242,0,-3,89,0,-4,92,0,-5,93,0,-6,94,0,-7,95,0,-8,96,0,-9,51,0,-10,22,0,2,9,0,2,9,0,2,9,0,-4,382,0,-1,271,0,-2,272,0,-3,273,0,-4,165,0,-5,275,0,-6,58,0,-7,59,0,-8,60,0,-9,26,0,-10,279,0,-11,280,0,-1,13,0,-2,201,0,-3,209,0,-4,210,0,-5,211,0,-6,212,0,-7,213,0,-8,214,0,-9,215,0,-10,216,0,-11,217,0,-13,182,0,-14,63,0,-15,12,0,-16,119,0,-17,296,0,-18,297,0,-19,298,0,-20,299,0,-21,53,0,3,117,0,5,117,0,3,12,0,5,193,0,3,63,0,5,193,0,3,53,0,5,243,0,3,13,0,5,13,0,3,13,0,5,13,0,3,13,0,5,13,0,3,12,0,5,12,0,3,12,0,5,12,0,3,12,0,5,12,0,3,13,0,5,13,0,3,12,0,5,12,0,3,13,0,5,305,0,3,119,0,5,119,0,3,53,0,5,53,0,3,12,0,5,12,0,-1,125,0,-2,307,0,-3,32,0,-4,308,0,-5,46,0,-7,396,0,-8,397,0,-10,97,0,-11,300,0,-12,194,0,-13,302,0,2,11,0,2,11,0,2,11,0,35,57,0,36,164,0,37,374,0,38,373,0,39,366,0,40,365,0,41,367,0,-1,368,0,-2,369,0,-3,370,0,-4,371,0,-5,372,0,-1,102,0,-2,101,0,-3,100,0,-4,99,0,-5,98,0,2,11,0,-1,164,0,-2,54,0,-3,55,0,-4,56,0,-5,57,0,-6,44,0,-7,45,0,-8,269,0,1,192,0,1,192,0,1,192,0,1,192,0,1,445,0,1,445,0,4,12,0,1,126,0,1,126,0,1,126,0,1,126,0,4,13,0,2,14,0,2,14,0,-1,222,0,-2,223,0,-3,224,0,-4,225,0,-5,148,0,-6,226,0,-7,227,0,-8,228,0,-9,229,0,2,15,0,2,15,0,2,15,0,2,15,0,-1,281,0,-2,282,0,-3,283,0,-4,171,0,-5,173,0,-6,175,0,-1,393,0,2,21,0,2,21,0,2,21,0,2,21,0,-1,184,0,-2,185,0,-3,186,0,-4,187,0,-5,188,0,2,22,0,2,22,0,2,22,0,2,22,0,-5,359,0,2,22,0,-1,161,0,-2,162,0,-3,52,0,2,23,0,2,23,0,-3,386,0,-1,108,0,-2,109,0,-3,110,0,-4,111,0,-5,112,0,-6,284,0,2,24,0,2,24,0,42,327,0,43,326,0,-1,78,0,-2,79,0,-3,80,0,-4,81,0,-5,82,0,-1,74,0,-2,75,0,-3,76,0,2,24,0,-1,48,0,-2,33,0,-3,77,0,-4,25,0,2,25,0,2,25,0,-3,327,0,-1,78,0,-2,79,0,-3,80,0,-4,81,0,-5,82,0,2,26,0,2,26,0,2,26,0,-1,103,0,-2,104,0,-3,105,0,-4,106,0,-5,107,0,2,27,0,2,27,0,-1,230,0,-2,34,0,-3,35,0,-4,36,0,2,28,0,2,28,0,25,28,0,2,28,0,2,28,0,-1,270,0,2,29,0,2,29,0,44,395,0,45,394,0,-1,203,0,-2,204,0,-3,205,0,-4,206,0,-5,207,0,-6,208,0,46,113,0,47,391,0,48,392,0,49,390,0,50,389,0,51,388,0,32,393,0,2,29,0,-2,113,0,-3,189,0,-4,190,0,2,30,0,2,30,0,25,30,0,2,30,0,2,30,0,-1,285,0,2,31,0,2,31,0,25,31,0,2,31,0,2,31,0,-1,286,0,2,32,0,2,32,0,-3,305,0,-1,304,0,2,33,0,2,33,0,25,33,0,2,33,0,2,33,0,-1,220,0,2,34,0,2,34,0,-3,335,0,2,34,0,-1,231,0,2,35,0,-2,337,0,2,35,0,-1,149,0,-2,150,0,2,36,0,-2,339,0,2,36,0,-1,151,0,-2,152,0,2,37,0,-1,98,0,-2,99,0,-3,100,0,-4,101,0,-5,102,0,2,38,0,2,38,0,2,38,0,-1,247,0,-2,248,0,-3,249,0,2,39,0,2,39,0,2,39,0,-1,250,0,-2,251,0,-3,252,0,2,40,0,2,40,0,2,40,0,-1,253,0,-2,254,0,-3,255,0,2,41,0,2,41,0,2,41,0,-1,256,0,-2,257,0,-3,258,0,2,42,0,2,42,0,2,42,0,-1,259,0,-2,260,0,-3,261,0,2,43,0,-1,262,0,-2,263,0,-3,264,0,-4,265,0,-5,266,0,2,44,0,2,44,0,-3,373,0,2,44,0,-1,267,0,2,45,0,2,45,0,-3,374,0,2,45,0,-1,268,0,52,127,0,53,138,0,54,47,0,2,46,0,-1,127,0,-3,138,0,2,47,0,2,47,0,2,47,0,2,47,0,2,48,0,2,48,0,-1,74,0,-2,75,0,-3,76,0,2,49,0,2,49,0,55,337,0,56,339,0,57,335,0,58,334,0,2,49,0,-1,84,0,2,50,0,2,50,0,25,50,0,2,50,0,2,51,0,2,51,0,2,51,0,2,51,0,2,52,0,2,52,0,2,52,0,2,52,0,1,163,0,1,163,0,1,163,0,1,163,0,1,363,0,1,363,0,1,364,0,1,364,0,4,53,0,2,54,0,2,54,0,-3,365,0,-1,244,0,2,55,0,2,55,0,-3,366,0,-1,245,0,2,56,0,2,56,0,-3,367,0,-1,246,0,2,57,0,2,57,0,2,58,0,2,58,0,-3,379,0,-1,276,0,2,59,0,2,59,0,-3,380,0,-1,277,0,2,60,0,2,60,0,-3,381,0,-1,278,0,2,61,0,2,61,0,-3,387,0,2,62,0,2,62,0,2,62,0,2,62,0,2,62,0,1,191,0,1,191,0,1,191,0,1,191,0,1,118,0,1,118,0,1,118,0,1,118,0,1,118,0,0,63,0,0,63,0,4,63,0,-1,309,0,-2,310,0,-3,311,0,-4,312,0,2,74,0,2,74,0,-1,140,0,2,75,0,2,75,0,-1,141,0,2,76,0,2,76,0,-1,142,0,2,77,0,2,77,0,-3,326,0,-1,221,0,2,78,0,2,78,0,-1,143,0,2,79,0,2,79,0,-1,144,0,2,80,0,2,80,0,-1,145,0,2,81,0,2,81,0,-1,146,0,2,82,0,2,82,0,-1,147,0,2,83,0,2,83,0,2,84,0,2,84,0,2,84,0,-4,334,0,2,85,0,2,85,0,-1,235,0,-2,156,0,2,86,0,2,86,0,-1,236,0,-2,157,0,2,87,0,2,87,0,-1,237,0,-2,158,0,2,88,0,2,88,0,-3,350,0,2,89,0,2,89,0,-1,90,0,2,90,0,-2,353,0,2,90,0,-1,91,0,2,91,0,2,91,0,2,91,0,-1,160,0,2,92,0,-2,354,0,2,92,0,2,92,0,2,93,0,2,93,0,-3,355,0,2,93,0,2,94,0,2,94,0,-3,356,0,2,94,0,2,95,0,2,95,0,-3,357,0,2,95,0,2,96,0,2,96,0,-3,358,0,2,96,0,-1,361,0,-2,362,0,2,98,0,2,98,0,2,99,0,2,99,0,2,100,0,2,100,0,2,101,0,2,101,0,2,102,0,2,102,0,2,103,0,2,103,0,-1,166,0,2,104,0,2,104,0,-1,167,0,2,105,0,2,105,0,-1,168,0,2,106,0,2,106,0,-1,169,0,2,107,0,2,107,0,-1,170,0,2,108,0,2,108,0,-1,177,0,2,109,0,2,109,0,-1,178,0,2,110,0,2,110,0,-1,179,0,2,111,0,2,111,0,-1,180,0,2,112,0,2,112,0,-1,181,0,2,113,0,2,113,0,2,113,0,2,114,0,2,114,0,-1,115,0,-2,116,0,2,115,0,2,115,0,2,115,0,2,116,0,2,116,0,2,116,0,21,289,0,2,117,0,-1,289,0,1,120,0,1,120,0,1,120,0,1,120,0,1,120,0,4,119,0,-1,303,0,-2,306,0,-1,195,0,2,127,0,2,127,0,2,138,0,-1,218,0,2,140,0,2,140,0,2,140,0,2,141,0,2,141,0,2,141,0,2,142,0,2,142,0,2,142,0,2,143,0,2,143,0,2,143,0,2,144,0,2,144,0,2,144,0,2,145,0,2,145,0,2,145,0,2,146,0,2,146,0,2,146,0,2,147,0,2,147,0,2,147,0,2,148,0,2,148,0,-3,329,0,2,149,0,2,149,0,2,149,0,2,150,0,-2,336,0,2,150,0,2,151,0,2,151,0,2,151,0,2,152,0,-2,338,0,2,152,0,2,153,0,2,153,0,-1,232,0,2,154,0,2,154,0,-1,233,0,2,155,0,2,155,0,-1,234,0,2,156,0,-2,344,0,2,156,0,2,157,0,-2,346,0,2,157,0,2,158,0,-2,348,0,2,158,0,2,159,0,-2,349,0,2,159,0,2,160,0,-2,351,0,-3,352,0,2,161,0,2,161,0,2,161,0,2,162,0,2,162,0,2,162,0,2,164,0,2,164,0,2,165,0,2,165,0,-1,274,0,2,166,0,2,166,0,2,166,0,2,167,0,2,167,0,2,167,0,2,168,0,2,168,0,2,168,0,2,169,0,2,169,0,2,169,0,2,170,0,2,170,0,2,170,0,2,171,0,2,171,0,-1,172,0,2,172,0,-2,383,0,2,172,0,2,173,0,2,173,0,-1,174,0,2,174,0,-2,384,0,2,174,0,2,175,0,2,175,0,-1,176,0,2,176,0,-2,385,0,2,176,0,2,177,0,2,177,0,2,177,0,2,178,0,2,178,0,2,178,0,2,179,0,2,179,0,2,179,0,2,180,0,2,180,0,2,180,0,2,181,0,2,181,0,2,181,0,1,183,0,1,183,0,1,183,0,1,183,0,2,182,0,4,182,0,2,184,0,-2,388,0,2,184,0,2,185,0,-2,389,0,2,185,0,2,186,0,-2,390,0,2,186,0,2,187,0,-2,391,0,2,187,0,2,188,0,-2,392,0,2,188,0,2,189,0,2,189,0,-3,394,0,2,190,0,2,190,0,-3,395,0,2,194,0,-1,447,0,-2,448,0,2,195,0,2,195,0,17,196,0,17,197,0,17,198,0,17,199,0,2,200,0,4,201,0,-1,313,0,-2,314,0,17,203,0,17,204,0,17,205,0,17,206,0,17,207,0,17,208,0,4,209,0,4,210,0,4,211,0,4,212,0,4,213,0,4,214,0,4,215,0,4,216,0,4,217,0,2,218,0,2,218,0,2,219,0,-2,324,0,2,220,0,2,220,0,2,221,0,-2,325,0,2,222,0,2,222,0,2,223,0,-2,328,0,2,224,0,2,224,0,2,225,0,2,225,0,2,226,0,-2,330,0,2,227,0,-2,331,0,2,228,0,-2,332,0,2,229,0,-2,333,0,2,230,0,2,230,0,2,231,0,2,231,0,2,232,0,-2,340,0,2,233,0,-2,341,0,2,234,0,-2,342,0,2,235,0,-2,343,0,2,236,0,-2,345,0,2,237,0,-2,347,0,2,238,0,2,238,0,2,239,0,2,239,0,2,240,0,2,240,0,2,241,0,2,241,0,2,242,0,2,242,0,-1,343,0,-2,345,0,-3,347,0,2,244,0,2,244,0,2,245,0,2,245,0,2,246,0,2,246,0,2,247,0,2,247,0,2,248,0,2,248,0,2,249,0,2,249,0,2,250,0,2,250,0,2,251,0,2,251,0,2,252,0,2,252,0,2,253,0,2,253,0,2,254,0,2,254,0,2,255,0,2,255,0,2,256,0,2,256,0,2,257,0,2,257,0,2,258,0,2,258,0,2,259,0,2,259,0,2,260,0,2,260,0,2,261,0,2,261,0,2,262,0,-2,368,0,2,263,0,-2,369,0,2,264,0,-2,370,0,2,265,0,-2,371,0,2,266,0,-2,372,0,2,267,0,2,267,0,2,268,0,2,268,0,2,269,0,2,269,0,2,270,0,2,270,0,2,271,0,2,271,0,2,272,0,2,272,0,2,273,0,-2,376,0,2,274,0,-2,377,0,2,275,0,-2,378,0,2,276,0,2,276,0,2,277,0,2,277,0,2,278,0,2,278,0,2,279,0,2,279,0,2,280,0,2,280,0,2,281,0,2,281,0,2,282,0,2,282,0,2,283,0,2,283,0,2,284,0,2,284,0,2,285,0,2,285,0,2,286,0,2,286,0,-1,401,0,-1,427,0,-2,428,0,2,289,0,21,291,0,2,290,0,-1,291,0,2,291,0,21,293,0,2,292,0,-1,293,0,2,293,0,21,295,0,2,294,0,-1,295,0,2,295,0,4,296,0,4,297,0,4,298,0,4,299,0,-1,301,0,59,301,0,2,300,0,17,301,0,-1,449,0,60,449,0,2,302,0,2,307,0,2,308,0,2,312,0,2,313,0,-1,315,0,2,315,0,-1,323,0,2,362,0,2,396,0,2,397,0,-1,399,0,2,400,0,2,401,0,-1,403,0,2,403,0,2,404,0,2,405,0,2,406,0,2,407,0,2,408,0,2,409,0,2,410,0,2,411,0,2,412,0,2,413,0,2,414,0,2,415,0,2,416,0,2,417,0,2,418,0,2,419,0,2,420,0,2,421,0,2,422,0,2,423,0,2,424,0,2,425,0,2,426,0,2,427,0,2,428,0,-1,430,0,2,430,0,2,431,0,2,432,0,2,433,0,2,434,0,2,435,0,2,436,0,2,437,0,2,438,0,2,439,0,2,440,0,2,441,0,2,442,0,2,443,0,2,444,0,2,446,0,2,447,0,2,448,0,61,10,1,12,46,2,12,6,3,12,46,4,12,10,5,12,10,7,12,8,13,12,32,14,12,83,15,12,61,21,12,29,23,12,61,27,12,49,37,12,57,38,12,98,39,12,99,40,12,100,41,12,101,42,12,102,43,12,57,53,12,97,193,62,330,193,63,331,193,64,332,193,65,333,193,66,329,193,67,328,193,68,287,193,69,399,196,2,304,197,2,309,198,2,310,199,2,311,203,2,316,204,2,317,205,2,318,206,2,319,207,2,320,208,2,321,243,70,359,243,71,375,243,72,358,243,73,357,243,74,356,243,75,355,243,76,354,243,77,352,243,78,353,243,79,350,243,80,349,243,81,348,243,82,346,243,83,344,243,84,351,243,85,360,243,86,342,243,87,340,243,88,341,303,89,306,360,2,361,1102],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,306,324,325,328,330,331,332,333,335,335,335,335,336,337,338,339,343,343,344,345,345,346,347,347,348,349,350,353,368,369,370,371,372,373,373,373,373,374,374,374,374,377,378,383,384,385,388,389,390,391,392,193],[-1,18,19,6,0,-1,-1,-1,18,19,-1,18,19,-1,18,19,-1,7,6,0,0,-1,7,-1,7,-1,18,19,-1,18,19,-1,18,19,-1,18,19,-1,18,19,-1,18,19,6,0,6,0,6,0,6,0,6,0,6,0,6,0,6,0,6,0,0,6,-1,-2,-3,90,8,8,8,8,8,8,8,20,28,29,30,15,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,20,8,8,8,8,8,8,8,8,8,8,8,8,8,8,20,8,-1,7,6,0,0,-1,-2,-3,-4,15,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,15,8,-1,-2,-1,-2,-3,-4,-1,-2,-3,-4,-1,-2,-3,-1,-2,-3,-1,-2,-1,-2,-1,-2,15,8,20,8,15,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,15,15,8,-1,-2,-3,-4,-5,-6,8,8,8,8,8,8,8,8,8,8,8,8,8,8,15,8,8,6,15,26,8,26,8,-1,8,8,15,8,20,15,8,20,-1,-2,-3,-4,-1,7,-1,7,-1,7,-1,7,-1,7,-1,7,-1,7,-1,7,-1,7,-1,7,-1,7,-1,7,-1,7,-1,7,-1,7,-1,7,-1,7,-1,7,-1,7,-1,7,-1,7,-1,7,-1,7,-1,7,-1,7,-1,7,-1,7,-1,7,-1,7,-1,7,-1,7,-1,7,-1,7,-1,7,-1,7,-1,7,-1,7,-1,7,-1,7,-1,7,-1,7,-1,7,-1,7,-1,7,-1,7,-1,7,6,0,0,0,6,0,-1,7,6,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,-1,18,19,-1,7,-1,7,-1,-2,-3,-1,-2,-3,-1,-2,-3,-1,-2,-3,-4,-5,-1,-1,-2,-3,-4,-5,-1,-2,-3,-4,-5,91,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,92,93,94,15,15,8,8,8,8,8,20,28,29,30,8,20,8,20,26,8,8,26,8,8,26,8,8,8,20,8,8,8,8,8,8,20,28,29,30,20,28,29,30,8,15,15,15,15,8,8,8,8,8,95],[118,118,119,90,120,262,121,57,57,65,57,57,65,57,57,65,263,122,264,265,266,123,124,22,125,43,43,55,43,43,55,43,43,55,43,43,55,43,43,55,43,43,55,44,78,44,79,44,61,44,91,44,78,44,91,44,79,44,61,126,127,127,74,267,268,269,128,92,93,92,93,92,93,48,48,48,80,81,53,94,95,96,97,98,99,100,101,102,103,104,270,271,272,273,48,48,82,82,274,62,62,62,105,105,105,129,129,130,275,276,277,278,40,279,280,281,282,283,284,285,131,131,286,287,122,90,288,289,290,291,292,293,49,132,133,134,135,294,83,66,136,295,63,66,137,296,83,66,138,297,63,66,139,298,63,66,40,40,49,299,140,67,300,301,83,63,141,302,303,304,305,306,307,135,139,137,136,138,308,309,310,142,49,64,64,311,53,312,313,132,133,134,94,95,96,97,98,99,100,101,102,103,104,53,53,314,315,143,316,317,318,319,62,62,62,320,94,95,96,97,98,99,100,101,102,103,53,104,40,321,53,144,145,144,145,322,40,40,49,64,64,49,64,64,323,57,324,325,326,327,328,329,36,330,36,331,36,332,36,333,36,334,36,335,36,336,36,337,36,338,36,339,36,340,36,341,36,342,36,343,36,344,36,345,36,346,36,347,36,348,36,349,36,350,36,351,36,352,106,353,106,354,106,355,107,356,357,358,359,360,107,361,50,362,50,363,107,364,50,365,50,366,50,367,50,368,50,369,50,370,50,371,79,68,61,68,78,68,61,68,126,146,146,372,90,120,373,10,6,23,24,25,26,69,70,71,72,6,23,24,25,26,69,70,71,72,6,23,24,25,26,69,70,71,72,6,23,24,25,26,69,70,71,72,6,23,24,25,26,69,70,71,72,147,147,148,374,10,149,10,115,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,149,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,121,53,53,415,416,108,108,108,48,48,80,81,150,82,150,82,109,73,83,109,73,63,109,73,63,141,130,142,140,67,67,67,67,40,48,80,81,40,48,80,81,143,49,49,49,49,40,40,40,40,40,417]],[[[54,"mat_rarity_02rare",1,[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{}],[[[{},"tintColor",8,[4,4294967295],"mainTexture",6,0]],11]]],0,0,[0,0],[13,11],[65,52]],[[{"name":"img_post_frame","rect":{"x":0,"y":0,"width":733,"height":1133},"offset":{"x":0,"y":0},"originalSize":{"width":733,"height":1133},"rotated":false,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[-366.5,-566.5,0,366.5,-566.5,0,-366.5,566.5,0,366.5,566.5,0],"indexes":[0,1,2,2,1,3],"uv":[0,1133,733,1133,0,0,733,0],"nuv":[0,0,1,0,0,1,1,1],"minPos":{"x":-366.5,"y":-566.5,"z":0},"maxPos":{"x":366.5,"y":566.5,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[10],[418]],[[[54,"DJ_Booth_and_Equipments_Texture_runway",1,[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{"USE_INSTANCING":true,"USE_ALBEDO_MAP":true,"USE_EMISSIVE_MAP":true},{},{}],[[[{},"emissive",8,[4,4290559164],"mainTexture",6,0,"emissiveMap",6,1],{},{}],11,0,0]]],0,0,[0,0,0],[13,16,11],[86,87,89]],[[{"name":"default_sprite_splash","rect":{"x":0,"y":0,"width":2,"height":2},"offset":{"x":0,"y":0},"originalSize":{"width":2,"height":2},"rotated":false,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[-1,-1,0,1,-1,0,-1,1,0,1,1,0],"indexes":[0,1,2,2,1,3],"uv":[0,2,2,2,0,0,2,0],"nuv":[0,0,1,0,0,1,1,1],"minPos":{"x":-1,"y":-1,"z":0},"maxPos":{"x":1,"y":1,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[10],[419]],[[{"name":"bg_2_neon","rect":{"x":0,"y":0,"width":1200,"height":1800},"offset":{"x":0,"y":0},"originalSize":{"width":1200,"height":1800},"rotated":false,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[-600,-900,0,600,-900,0,-600,900,0,600,900,0],"indexes":[0,1,2,2,1,3],"uv":[0,1800,1200,1800,0,0,1200,0],"nuv":[0,0,1,0,0,1,1,1],"minPos":{"x":-600,"y":-900,"z":0},"maxPos":{"x":600,"y":900,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[10],[420]],[[{"name":"img_game_collectible_hat_active","rect":{"x":0,"y":0,"width":119,"height":101},"offset":{"x":0,"y":0},"originalSize":{"width":119,"height":101},"rotated":false,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[-59.5,-50.5,0,59.5,-50.5,0,-59.5,50.5,0,59.5,50.5,0],"indexes":[0,1,2,2,1,3],"uv":[0,101,119,101,0,0,119,0],"nuv":[0,0,1,0,0,1,1,1],"minPos":{"x":-59.5,"y":-50.5,"z":0},"maxPos":{"x":59.5,"y":50.5,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[10],[421]],[[{"name":"bg_1_studio","rect":{"x":0,"y":0,"width":1200,"height":1800},"offset":{"x":0,"y":0},"originalSize":{"width":1200,"height":1800},"rotated":false,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[-600,-900,0,600,-900,0,-600,900,0,600,900,0],"indexes":[0,1,2,2,1,3],"uv":[0,1800,1200,1800,0,0,1200,0],"nuv":[0,0,1,0,0,1,1,1],"minPos":{"x":-600,"y":-900,"z":0},"maxPos":{"x":600,"y":900,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[10],[422]],[[{"name":"img_bar_empty","rect":{"x":0,"y":0,"width":827,"height":302},"offset":{"x":0,"y":0},"originalSize":{"width":827,"height":302},"rotated":false,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[-413.5,-151,0,413.5,-151,0,-413.5,151,0,413.5,151,0],"indexes":[0,1,2,2,1,3],"uv":[0,302,827,302,0,0,827,0],"nuv":[0,0,1,0,0,1,1,1],"minPos":{"x":-413.5,"y":-151,"z":0},"maxPos":{"x":413.5,"y":151,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[10],[423]],[[[54,"mat_crowd_general",1,[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{"USE_ALBEDO_MAP":true,"USE_ALPHA_TEST":true},{},{}],[[[{"roughness":1},"mainTexture",6,0],{},{}],11,0,0]]],0,0,[0,0],[13,11],[27,89]],[[[58,"obstacle_graphic"],[121,"obstacle_graphic",[-4],[[245,-3,[7,"376PwH4jdK3K3SIOGw9DsB"],-2,[1,2,3,4,5,6],[7,8,9,10,11,12]]],[4,"c1A9sG8V1OlqPhhySK/Coe",null,null,null,-1,0]],[22,"Quad",1,[-5],[4,"854tChFohKeYSTZmJTQ80q",null,null,null,1,0],[1,0,1.327,0],[1,2.7,2.7,2.7]],[184,"Quad<ModelComponent>",2,[7,"abiQgE6U1EApBrj5zXGd6B"],[0],[9]]],0,[0,4,1,0,9,3,0,2,1,0,-1,2,0,-1,3,0,14,1,5],[0,0,0,0,0,0,0,0,0,0,0,0,0,3],[-1,-1,-2,-3,-4,-5,-6,-1,-2,-3,-4,-5,-6,7],[7,151,152,153,154,155,156,151,152,153,154,155,156,10]],[[{"name":"img_bar_like","rect":{"x":0,"y":0,"width":155,"height":143},"offset":{"x":0,"y":0},"originalSize":{"width":155,"height":143},"rotated":false,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[-77.5,-71.5,0,77.5,-71.5,0,-77.5,71.5,0,77.5,71.5,0],"indexes":[0,1,2,2,1,3],"uv":[0,143,155,143,0,0,155,0],"nuv":[0,0,1,0,0,1,1,1],"minPos":{"x":-77.5,"y":-71.5,"z":0},"maxPos":{"x":77.5,"y":71.5,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[10],[424]],[[[54,"EYE.001",1,[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{"USE_ALBEDO_MAP":true},{},{}],[[[{},"mainTexture",6,0],{},{}],11,0,0]]],0,0,[0,0],[13,11],[425,38]],[[[114,"atom",".plist"],-1],0,0,[0],[23],[73]],[[{"name":"img_rarity_ultrarare","rect":{"x":35,"y":47,"width":185,"height":173},"offset":{"x":-0.5,"y":-5.5},"originalSize":{"width":256,"height":256},"rotated":false,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[-92.5,-86.5,0,92.5,-86.5,0,-92.5,86.5,0,92.5,86.5,0],"indexes":[0,1,2,2,1,3],"uv":[35,209,220,209,35,36,220,36],"nuv":[0.13671875,0.140625,0.859375,0.140625,0.13671875,0.81640625,0.859375,0.81640625],"minPos":{"x":-92.5,"y":-86.5,"z":0},"maxPos":{"x":92.5,"y":86.5,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[10],[157]],[[[44,"Bouncer Head",[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{"USE_ALBEDO_MAP":true,"USE_PBR_MAP":true},{},{},{}],[[[{"roughness":1,"specularIntensity":0.175},"mainColor",8,[4,4293519849],"mainTexture",6,0,"pbrMap",6,1],{},{},{}],11,0,0,0]]],0,0,[0,0,0],[13,96,11],[426,427,38]],[[{"name":"img_celebmoment_item_name","rect":{"x":0,"y":0,"width":466,"height":95},"offset":{"x":0,"y":0},"originalSize":{"width":466,"height":95},"rotated":false,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[-233,-47.5,0,233,-47.5,0,-233,47.5,0,233,47.5,0],"indexes":[0,1,2,2,1,3],"uv":[0,95,466,95,0,0,466,0],"nuv":[0,0,1,0,0,1,1,1],"minPos":{"x":-233,"y":-47.5,"z":0},"maxPos":{"x":233,"y":47.5,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[10],[428]],[[{"name":"Help_Button","rect":{"x":0,"y":0,"width":358,"height":358},"offset":{"x":0,"y":0},"originalSize":{"width":358,"height":358},"rotated":false,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[-179,-179,0,179,-179,0,-179,179,0,179,179,0],"indexes":[0,1,2,2,1,3],"uv":[0,358,358,358,0,0,358,0],"nuv":[0,0,1,0,0,1,1,1],"minPos":{"x":-179,"y":-179,"z":0},"maxPos":{"x":179,"y":179,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[10],[429]],[[[31,".bin",136565952,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":1152,"length":72,"count":36,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":1152,"count":24,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.004999990575015545,-0.004999998956918716,-0.004999995231628418],"maxPosition",8,[1,0.004999999888241291,0.004999999888241291,0.005000002216547728]]],-1],0,0,[],[],[]],[[[31,".bin",113280362,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":25200,"length":1824,"count":912,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":25200,"count":525,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,2.021418809890747,0.0004052066942676902,0.6489534974098206],"maxPosition",8,[1,2.4829506874084473,0.44504913687705994,1.196861982345581]]],-1],0,0,[],[],[]],[[[31,".bin",978772190,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":30000,"length":2232,"count":1116,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":30000,"count":625,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,0.08837249875068665,-0.029965195804834366,0.6032262444496155],"maxPosition",8,[1,0.37351134419441223,0.5811828374862671,0.8554946184158325]]],-1],0,0,[],[],[]],[[{"name":"bg_3_magazine","rect":{"x":0,"y":0,"width":1200,"height":1800},"offset":{"x":0,"y":0},"originalSize":{"width":1200,"height":1800},"rotated":false,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[-600,-900,0,600,-900,0,-600,900,0,600,900,0],"indexes":[0,1,2,2,1,3],"uv":[0,1800,1200,1800,0,0,1200,0],"nuv":[0,0,1,0,0,1,1,1],"minPos":{"x":-600,"y":-900,"z":0},"maxPos":{"x":600,"y":900,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[10],[430]],[[[54,"mat_level_lightray_red",1,[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{"USE_INSTANCING":true,"USE_TEXTURE":true,"ALPHA_TEST_CHANNEL":"r"}],[[[{"alphaThreshold":0.536},"mainColor",8,[4,2518959590],"mainTexture",6,0]],11]]],0,0,[0,0],[13,11],[77,51]],[[[44,"DJ_Booth_and_Equipments_Texture",[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{"USE_INSTANCING":true,"USE_ALBEDO_MAP":true,"USE_EMISSIVE_MAP":true},{},{},{}],[[[{},"emissive",8,[4,4294967295],"mainTexture",6,0,"emissiveMap",6,1],{},{},{}],11,0,0,0]]],0,0,[0,0,0],[13,16,11],[86,87,38]],[[{"name":"img_wipeout_bg","rect":{"x":0,"y":0,"width":1080,"height":1920},"offset":{"x":0,"y":0},"originalSize":{"width":1080,"height":1920},"rotated":false,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[-540,-960,0,540,-960,0,-540,960,0,540,960,0],"indexes":[0,1,2,2,1,3],"uv":[0,1920,1080,1920,0,0,1080,0],"nuv":[0,0,1,0,0,1,1,1],"minPos":{"x":-540,"y":-960,"z":0},"maxPos":{"x":540,"y":960,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[10],[431]],[[{"name":"img_game_collectible_watch_inactive","rect":{"x":0,"y":0,"width":190,"height":160},"offset":{"x":0,"y":0},"originalSize":{"width":190,"height":160},"rotated":false,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[-95,-80,0,95,-80,0,-95,80,0,95,80,0],"indexes":[0,1,2,2,1,3],"uv":[0,160,190,160,0,0,190,0],"nuv":[0,0,1,0,0,1,1,1],"minPos":{"x":-95,"y":-80,"z":0},"maxPos":{"x":95,"y":80,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[10],[432]],[[[31,".bin",3478657294,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":192,"length":12,"count":6,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":192,"count":4,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.009999999776482582,-0.009999999776482582,0],"maxPosition",8,[1,0.009999999776482582,0.009999999776482582,0]]],-1],0,0,[],[],[]],[[{"name":"img_bar_highlight","rect":{"x":0,"y":0,"width":643,"height":126},"offset":{"x":0,"y":0},"originalSize":{"width":643,"height":126},"rotated":false,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[-321.5,-63,0,321.5,-63,0,-321.5,63,0,321.5,63,0],"indexes":[0,1,2,2,1,3],"uv":[0,126,643,126,0,0,643,0],"nuv":[0,0,1,0,0,1,1,1],"minPos":{"x":-321.5,"y":-63,"z":0},"maxPos":{"x":321.5,"y":63,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[10],[433]],[[[44,"Glass",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"DCC_APP_NAME":2,"HAS_EXPORTED_METALLIC":true,"USE_ALBEDO_MAP":true}],[[[{"shininessExponent":50.280993041913376,"emissiveScale":1,"metallic":0.6981818079948425,"specularFactor":0.2800000011920929,"transparencyFactor":0.6472730040550232},"mainColor",8,[4,4293388263],"emissive",8,[4,4278190080],"mainTexture",6,0]],11]]],0,0,[0,0],[13,11],[434,47]],[[[31,".bin",2417318915,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":54720,"length":3420,"count":1710,"stride":2}},{"primitiveMode":7,"vertexBundelIndices":[1],"indexView":{"offset":99612,"length":2592,"count":1296,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":54720,"count":1140,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]},{"view":{"offset":58140,"length":41472,"count":864,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-1,-0.02783375419676304,-13.002493858337402],"maxPosition",8,[1,5,2.0257599353790283,11.003570556640625]]],-1],0,0,[],[],[]],[[[169],[180,"stage test 2 (scrolling colors)",[-2],[4,"d6BfGiK+FQ5418iedYUqF0",null,null,null,-1,0]],[37,"V 5",1,[[16,-3,[7,"c9pXQOuMhVYo8BLmL/bfnO"],[0,1],[9],2]],[4,"56YXfSsh5bdYeFo17q+vla",null,null,null,1,0],[1,0,0,-10.003570556640625]]],0,[0,4,1,0,-1,2,0,2,2,0,14,1,3],[0,0,0],[-1,-2,7],[435,436,437]],[[[44,"Fake GLow",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"DCC_APP_NAME":2,"HAS_EXPORTED_METALLIC":true,"USE_ALBEDO_MAP":true,"USE_ALPHA_TEST":false,"USE_TRANSPARENCY_MAP":true}],[[[{"shininessExponent":25,"emissiveScale":1,"metallic":0,"specularFactor":0.25},"mainColor",8,[4,4293388263],"emissive",8,[4,4278190080],"mainTexture",6,0,"transparencyMap",6,1]],11]]],0,0,[0,0,0],[13,97,11],[438,439,47]],[[[58,"effect_Wipeout"],[238,"effect_Wipeout",33554432,[-10],[[-2,[297,1,true,-3,[7,"4dHNBUfnVI17HQvmGxB5D5"]],[299,-4,[7,"f4nQy3X8BK85mQnY0FEmgt"],[4,16777215]],[345,-8,[7,"ceW9AadTNGRoL3fxDJtT2c"],-7,-6,-5],-9],1,4,4,4,1],[4,"77W+6bif5C+7QqikgGf0ph",null,null,null,-1,0]],[233,"Sprite",33554432,1,[[-11,[285,2,0,-12,[7,"b4KmomqV9BZ5v/Vscl2RFL"],0]],1,4],[4,"9epFuimylEMqj9fZIF7CmK",null,null,null,1,0]],[193,2,[7,"0ay5BElMhKDK5OsjoQtNfN"],[5,1080,1920]],[193,1,[7,"c8IksEp75P2bBuQd6nAVp2"],[5,1920,1920]],[295,0,1,[7,"45nkE11upDxLzruv1wQGc/"]]],0,[0,4,1,0,-1,4,0,2,1,0,2,1,0,98,5,0,99,3,0,32,4,0,2,1,0,-5,5,0,-1,2,0,-1,3,0,2,2,0,14,1,12],[0],[8],[440]],[[[44,"Misc_Texture_2",[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{"USE_INSTANCING":true,"DCC_APP_NAME":5,"USE_ALBEDO_MAP":true,"USE_EMISSIVE_MAP":true},{},{}],[[[{"albedoScale":0.800000011920929},"emissive",8,[4,4290559164],"mainTexture",6,0,"emissiveMap",6,1],{},{}],11,0,0]]],0,0,[0,0,0],[13,16,11],[441,442,47]],[[{"name":"img_rarity_superrare","rect":{"x":51,"y":60,"width":151,"height":128},"offset":{"x":-1.5,"y":4},"originalSize":{"width":256,"height":256},"rotated":false,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[-75.5,-64,0,75.5,-64,0,-75.5,64,0,75.5,64,0],"indexes":[0,1,2,2,1,3],"uv":[51,196,202,196,51,68,202,68],"nuv":[0.19921875,0.265625,0.7890625,0.265625,0.19921875,0.765625,0.7890625,0.765625],"minPos":{"x":-75.5,"y":-64,"z":0},"maxPos":{"x":75.5,"y":64,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[10],[158]],[[[58,"collectible_powerup"],[100,"collectible_powerup",[-5],[[151,true,-2,[7,"1cwje7Jo1PV585TPJ3qLx9"]],[346,5,-4,[7,"cbPjD5oURJAYj8McW89ocI"],-3]],[4,"c3cWwkhP5He5dmsvAVgOFv",null,null,null,-1,0],[1,0,1,0]],[222,"Disco_Star",1,[-7],[[16,-6,[7,"66qc/3qnlOCrnK7H4mk+1F"],[3],[9],4]],[4,"57zrDjMe5LUK/phybS5pp4",null,null,null,1,0],[1,0,-0.24,0],[1,84.362,84.362,9.5]],[234,"Particle",2,[[-8,[185,-942,-9,[7,"01DkZCnShC6K86sZMWtCG1"]]],1,4],[4,"83uijB+l5ByqaNh0ZRjx39",null,null,null,1,0],[1,0,0.002519121737689636,-0.02069167212493992],[3,0.7071067811865472,0,0,0.7071067811865478],[1,1.9999999999999998,2,1.9999999999999998],[1,89.99999999999996,0,0]],[252,1.4681366081220584,1.4547917963074268,2.0866383872725605,1,3,[7,"e9+yFnJAFHlIWOSYHHFtAV"],[[0,null],6,0],[90,[4,4283839487]],[30,1],[8],[8],[8],[8],[8],[8],[8],[30,500],[8],[30,1],[8],[94,[74,1,[80,[[75,0],[50,255,0.4598214285714286],[50,0,1]]]]],[186,3,0.094,[30,1]],[91,[8],[8],[8],[8]],[67,[8],[8],[8],[30,1]],[68,[8],[8],[8]],[69,[8],[8],[8],[8]],[187,true,[8],[8],[30,0.47123889803846897]],[95,[49,1,[48,[0,1],[[59,2,1],[59,2,1]]]],[8]],[97],[70,[30,1],[8],[40],[40],-10],[188,3,1,1,2]]],0,[0,4,1,0,2,1,0,21,2,0,2,1,0,-1,2,0,2,2,0,-1,3,0,-1,4,0,2,3,0,17,4,0,14,1,10],[0,0,0,0,0],[-1,18,19,-1,7],[75,75,88,56,443]],[[{"name":"img_celebmoment_flash2","rect":{"x":0,"y":0,"width":907,"height":921},"offset":{"x":0,"y":0},"originalSize":{"width":907,"height":921},"rotated":false,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[-453.5,-460.5,0,453.5,-460.5,0,-453.5,460.5,0,453.5,460.5,0],"indexes":[0,1,2,2,1,3],"uv":[0,921,907,921,0,0,907,0],"nuv":[0,0,1,0,0,1,1,1],"minPos":{"x":-453.5,"y":-460.5,"z":0},"maxPos":{"x":453.5,"y":460.5,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[10],[444]],[[[31,".bin",1325680009,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":14160,"length":1236,"count":618,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":14160,"count":295,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.6599960923194885,-0.004953654017299414,4.415029048919678],"maxPosition",8,[1,-0.32794123888015747,0.08223891258239746,4.694779396057129]]],-1],0,0,[],[],[]],[[[31,".bin",3647431930,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":5088,"length":360,"count":180,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":5088,"count":106,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.005000002216547728,-0.004999998025596142,-0.004149103071540594],"maxPosition",8,[1,0.0049999975599348545,0.004999998956918716,0.004999999888241291]]],-1],0,0,[],[],[]],[[[31,".bin",2185329590,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":3456,"length":264,"count":132,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":3456,"count":72,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.006328906863927841,-0.004999999888241291,-0.006328887771815062],"maxPosition",8,[1,0.006483349949121475,0.005000001285225153,0.006483383011072874]]],-1],0,0,[],[],[]],[[[31,".bin",3912897121,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":12000,"length":888,"count":444,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":12000,"count":250,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,3.7568438053131104,-0.012944324873387814,0.745139479637146],"maxPosition",8,[1,3.9946699142456055,0.2611581087112427,0.9846943616867065]]],-1],0,0,[],[],[]],[[[31,".bin",3270186665,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":2688,"length":168,"count":84,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":2688,"count":56,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.004999847617000341,-0.004999999888241291,-0.004999999888241291],"maxPosition",8,[1,0.004999999888241291,0.00979599915444851,0.00500003807246685]]],-1],0,0,[],[],[]],[[[31,".bin",1749035479,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":24864,"length":1824,"count":912,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":24864,"count":518,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.03372086212038994,-0.015386381186544895,-0.0048147584311664104],"maxPosition",8,[1,0.030292320996522903,0.009517954662442207,0.005000002216547728]]],-1],0,0,[],[],[]],[[[31,".bin",2761828524,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":6528,"length":480,"count":240,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":6528,"count":136,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.3379068374633789,-0.00024182320339605212,4.64430046081543],"maxPosition",8,[1,-0.2932030260562897,0.08293905109167099,5.023181915283203]]],-1],0,0,[],[],[]],[[[31,".bin",1651571170,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":14112,"length":1236,"count":618,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":14112,"count":294,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.6599960923194885,-0.004953654017299414,4.6949968338012695],"maxPosition",8,[1,-0.32794123888015747,0.08223891258239746,4.974747180938721]]],-1],0,0,[],[],[]],[[{"name":"img_celebmoment_flash4","rect":{"x":0,"y":0,"width":900,"height":1057},"offset":{"x":0,"y":0},"originalSize":{"width":900,"height":1057},"rotated":false,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[-450,-528.5,0,450,-528.5,0,-450,528.5,0,450,528.5,0],"indexes":[0,1,2,2,1,3],"uv":[0,1057,900,1057,0,0,900,0],"nuv":[0,0,1,0,0,1,1,1],"minPos":{"x":-450,"y":-528.5,"z":0},"maxPos":{"x":450,"y":528.5,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[10],[445]],[[[44,"pasted__Stage_Runner_Exterior_Texture",[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{"DCC_APP_NAME":5,"USE_ALBEDO_MAP":true,"USE_EMISSIVE_MAP":true},{},{}],[[[{"albedoScale":0.800000011920929},"emissive",8,[4,4290559164],"mainTexture",6,0,"emissiveMap",6,1],{},{}],11,0,0]]],0,0,[0,0,0],[13,16,11],[446,447,47]],[[{"name":"img_post_bg","rect":{"x":0,"y":0,"width":1242,"height":2208},"offset":{"x":0,"y":0},"originalSize":{"width":1242,"height":2208},"rotated":false,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[-621,-1104,0,621,-1104,0,-621,1104,0,621,1104,0],"indexes":[0,1,2,2,1,3],"uv":[0,2208,1242,2208,0,0,1242,0],"nuv":[0,0,1,0,0,1,1,1],"minPos":{"x":-621,"y":-1104,"z":0},"maxPos":{"x":621,"y":1104,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[10],[448]],[[[31,".bin",3848068573,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":6528,"length":480,"count":240,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":6528,"count":136,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.3379068374633789,-0.00024182320339605212,4.810801029205322],"maxPosition",8,[1,-0.2932030260562897,0.08293905109167099,5.023181915283203]]],-1],0,0,[],[],[]],[[[31,".bin",3848068573,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":6528,"length":480,"count":240,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":6528,"count":136,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.3379068374633789,-0.00024182320339605212,4.810801029205322],"maxPosition",8,[1,-0.2932030260562897,0.08293905109167099,5.023181915283203]]],-1],0,0,[],[],[]],[[[31,".bin",3848068573,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":6528,"length":480,"count":240,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":6528,"count":136,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.3379068374633789,-0.00024182320339605212,4.810801029205322],"maxPosition",8,[1,-0.2932030260562897,0.08293905109167099,5.023181915283203]]],-1],0,0,[],[],[]],[[[31,".bin",3848068573,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":6528,"length":480,"count":240,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":6528,"count":136,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.3379068374633789,-0.00024182320339605212,4.810801029205322],"maxPosition",8,[1,-0.2932030260562897,0.08293905109167099,5.023181915283203]]],-1],0,0,[],[],[]],[[[31,".bin",3848068573,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":6528,"length":480,"count":240,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":6528,"count":136,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.3379068374633789,-0.00024182320339605212,4.810801029205322],"maxPosition",8,[1,-0.2932030260562897,0.08293905109167099,5.023181915283203]]],-1],0,0,[],[],[]],[[[31,".bin",3848068573,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":6528,"length":480,"count":240,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":6528,"count":136,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.3379068374633789,-0.00024182320339605212,4.810801029205322],"maxPosition",8,[1,-0.2932030260562897,0.08293905109167099,5.023181915283203]]],-1],0,0,[],[],[]],[[[31,".bin",3848068573,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":6528,"length":480,"count":240,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":6528,"count":136,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.3379068374633789,-0.00024182320339605212,4.810801029205322],"maxPosition",8,[1,-0.2932030260562897,0.08293905109167099,5.023181915283203]]],-1],0,0,[],[],[]],[[[31,".bin",3848068573,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":6528,"length":480,"count":240,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":6528,"count":136,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.3379068374633789,-0.00024182320339605212,4.810801029205322],"maxPosition",8,[1,-0.2932030260562897,0.08293905109167099,5.023181915283203]]],-1],0,0,[],[],[]],[[[31,".bin",1406094330,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":192,"length":12,"count":6,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":192,"count":4,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.004999999888241291,0,-0.0010234954534098506],"maxPosition",8,[1,0.004999999888241291,0,0.0012902613962069154]]],-1],0,0,[],[],[]],[[[31,".bin",4276949001,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":21696,"length":1464,"count":732,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":21696,"count":452,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.06343217939138412,0.396890789270401,-0.21097147464752197],"maxPosition",8,[1,0.3121587634086609,0.505247950553894,0.5012766122817993]]],-1],0,0,[],[],[]],[[[31,".bin",3848068573,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":6528,"length":480,"count":240,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":6528,"count":136,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.3379068374633789,-0.00024182320339605212,4.810801029205322],"maxPosition",8,[1,-0.2932030260562897,0.08293905109167099,5.023181915283203]]],-1],0,0,[],[],[]],[[[31,".bin",2844541751,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":192,"length":12,"count":6,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":192,"count":4,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.004999999888241291,0,-0.0010234954534098506],"maxPosition",8,[1,0.004999999888241291,0,0.003176627214998007]]],-1],0,0,[],[],[]],[[[31,".bin",3579268000,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":192,"length":12,"count":6,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":192,"count":4,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.004999999888241291,0,-0.004999999888241291],"maxPosition",8,[1,0.004999999888241291,0,0.004999999888241291]]],-1],0,0,[],[],[]],[[[31,".bin",667544443,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":4032,"length":480,"count":240,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":4032,"count":84,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.010000002570450306,-0.009999999776482582,-0.010000004433095455],"maxPosition",8,[1,0.009999999776482582,0.009999999776482582,0.010000001639127731]]],-1],0,0,[],[],[]],[[[31,".bin",3848068573,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":6528,"length":480,"count":240,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":6528,"count":136,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.3379068374633789,-0.00024182320339605212,4.810801029205322],"maxPosition",8,[1,-0.2932030260562897,0.08293905109167099,5.023181915283203]]],-1],0,0,[],[],[]],[[[31,".bin",3848068573,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":6528,"length":480,"count":240,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":6528,"count":136,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.3379068374633789,-0.00024182320339605212,4.810801029205322],"maxPosition",8,[1,-0.2932030260562897,0.08293905109167099,5.023181915283203]]],-1],0,0,[],[],[]],[[[31,".bin",2907485831,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":11808,"length":1032,"count":516,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":11808,"count":246,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,2.68880033493042,-0.014504251070320606,1.4743274450302124],"maxPosition",8,[1,6.631387710571289,0.5269973874092102,2.2867376804351807]]],-1],0,0,[],[],[]],[[[31,".bin",3848068573,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":6528,"length":480,"count":240,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":6528,"count":136,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.3379068374633789,-0.00024182320339605212,4.810801029205322],"maxPosition",8,[1,-0.2932030260562897,0.08293905109167099,5.023181915283203]]],-1],0,0,[],[],[]],[[[31,".bin",3848068573,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":6528,"length":480,"count":240,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":6528,"count":136,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.3379068374633789,-0.00024182320339605212,4.810801029205322],"maxPosition",8,[1,-0.2932030260562897,0.08293905109167099,5.023181915283203]]],-1],0,0,[],[],[]],[[[31,".bin",3848068573,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":6528,"length":480,"count":240,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":6528,"count":136,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.3379068374633789,-0.00024182320339605212,4.810801029205322],"maxPosition",8,[1,-0.2932030260562897,0.08293905109167099,5.023181915283203]]],-1],0,0,[],[],[]],[[[31,".bin",3848068573,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":6528,"length":480,"count":240,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":6528,"count":136,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.3379068374633789,-0.00024182320339605212,4.810801029205322],"maxPosition",8,[1,-0.2932030260562897,0.08293905109167099,5.023181915283203]]],-1],0,0,[],[],[]],[[[31,".bin",3397167443,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":12000,"length":888,"count":444,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":12000,"count":250,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,3.7568438053131104,-0.012944324873387814,0.7416220903396606],"maxPosition",8,[1,3.9946699142456055,0.26590391993522644,1.0031499862670898]]],-1],0,0,[],[],[]],[[[31,".bin",3848068573,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":6528,"length":480,"count":240,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":6528,"count":136,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.3379068374633789,-0.00024182320339605212,4.810801029205322],"maxPosition",8,[1,-0.2932030260562897,0.08293905109167099,5.023181915283203]]],-1],0,0,[],[],[]],[[[31,".bin",351176822,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":29952,"length":2172,"count":1086,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":29952,"count":624,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-1.0130854845046997,-0.05156537890434265,-0.8396499156951904],"maxPosition",8,[1,0.316946417093277,1.1517032384872437,1.3410531282424927]]],-1],0,0,[],[],[]],[[[31,".bin",426429719,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":192,"length":12,"count":6,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":192,"count":4,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.004999999888241291,0,-0.007992475293576717],"maxPosition",8,[1,0.004999999888241291,0,0.004999999888241291]]],-1],0,0,[],[],[]],[[[31,".bin",3848068573,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":6528,"length":480,"count":240,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":6528,"count":136,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.3379068374633789,-0.00024182320339605212,4.810801029205322],"maxPosition",8,[1,-0.2932030260562897,0.08293905109167099,5.023181915283203]]],-1],0,0,[],[],[]],[[[31,".bin",3848068573,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":6528,"length":480,"count":240,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":6528,"count":136,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.3379068374633789,-0.00024182320339605212,4.810801029205322],"maxPosition",8,[1,-0.2932030260562897,0.08293905109167099,5.023181915283203]]],-1],0,0,[],[],[]],[[[31,".bin",3361607245,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":4224,"length":264,"count":132,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":4224,"count":88,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.3379068374633789,-0.00024182320339605212,4.978477954864502],"maxPosition",8,[1,-0.2932030260562897,0.08293905109167099,5.023181915283203]]],-1],0,0,[],[],[]],[[[31,".bin",154249219,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":192,"length":12,"count":6,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":192,"count":4,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.004999999888241291,0,-0.0010234954534098506],"maxPosition",8,[1,0.004999999888241291,0,0.0012902613962069154]]],-1],0,0,[],[],[]],[[[31,".bin",3848068573,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":6528,"length":480,"count":240,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":6528,"count":136,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.3379068374633789,-0.00024182320339605212,4.810801029205322],"maxPosition",8,[1,-0.2932030260562897,0.08293905109167099,5.023181915283203]]],-1],0,0,[],[],[]],[[[31,".bin",3397167443,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":12000,"length":888,"count":444,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":12000,"count":250,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,3.7568438053131104,-0.012944324873387814,0.7416220903396606],"maxPosition",8,[1,3.9946699142456055,0.26590391993522644,1.0031499862670898]]],-1],0,0,[],[],[]],[[[31,".bin",3080357025,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":63360,"length":4200,"count":2100,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":63360,"count":1320,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-1.0128623247146606,0.8469632863998413,-0.8344764113426208],"maxPosition",8,[1,-0.06668295711278915,0.9903656840324402,1.3392480611801147]]],-1],0,0,[],[],[]],[[[31,".bin",3848068573,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":6528,"length":480,"count":240,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":6528,"count":136,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.3379068374633789,-0.00024182320339605212,4.810801029205322],"maxPosition",8,[1,-0.2932030260562897,0.08293905109167099,5.023181915283203]]],-1],0,0,[],[],[]],[[[31,".bin",3848068573,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":6528,"length":480,"count":240,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":6528,"count":136,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.3379068374633789,-0.00024182320339605212,4.810801029205322],"maxPosition",8,[1,-0.2932030260562897,0.08293905109167099,5.023181915283203]]],-1],0,0,[],[],[]],[[[31,".bin",1084121665,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":109152,"length":12408,"count":6204,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":109152,"count":2274,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-2.008030414581299,-0.02078288607299328,-1.6498773097991943],"maxPosition",8,[1,1.663090467453003,0.9093379378318787,2.317077398300171]]],-1],0,0,[],[],[]],[[[31,".bin",3848068573,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":6528,"length":480,"count":240,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":6528,"count":136,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.3379068374633789,-0.00024182320339605212,4.810801029205322],"maxPosition",8,[1,-0.2932030260562897,0.08293905109167099,5.023181915283203]]],-1],0,0,[],[],[]],[[[31,".bin",1524118825,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":192,"length":12,"count":6,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":192,"count":4,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.004999999888241291,0,-0.0010234954534098506],"maxPosition",8,[1,0.004999999888241291,0,0.0038362168706953526]]],-1],0,0,[],[],[]],[[[31,".bin",500668190,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":192,"length":12,"count":6,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":192,"count":4,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.004999999888241291,0,-0.0010234954534098506],"maxPosition",8,[1,0.004999999888241291,0,0.0019735218957066536]]],-1],0,0,[],[],[]],[[[31,".bin",746371236,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":192,"length":12,"count":6,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":192,"count":4,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.004999999888241291,0,-0.0014091491466388106],"maxPosition",8,[1,0.004999999888241291,0,0.00417869258671999]]],-1],0,0,[],[],[]],[[[31,".bin",20261884,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":192,"length":12,"count":6,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":192,"count":4,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.004999999888241291,0,-0.0014091491466388106],"maxPosition",8,[1,0.004999999888241291,0,0.00417869258671999]]],-1],0,0,[],[],[]],[[[31,".bin",3397167443,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":12000,"length":888,"count":444,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":12000,"count":250,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,3.7568438053131104,-0.012944324873387814,0.7416220903396606],"maxPosition",8,[1,3.9946699142456055,0.26590391993522644,1.0031499862670898]]],-1],0,0,[],[],[]],[[{"name":"img_wipeout_container","rect":{"x":0,"y":0,"width":758,"height":531},"offset":{"x":0,"y":0},"originalSize":{"width":758,"height":531},"rotated":false,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[-379,-265.5,0,379,-265.5,0,-379,265.5,0,379,265.5,0],"indexes":[0,1,2,2,1,3],"uv":[0,531,758,531,0,0,758,0],"nuv":[0,0,1,0,0,1,1,1],"minPos":{"x":-379,"y":-265.5,"z":0},"maxPos":{"x":379,"y":265.5,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[10],[449]],[[[44,"black floor",[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{"USE_INSTANCING":true}],[[[{},"mainColor",8,[4,4278190080]]],11]]],0,0,[0],[11],[51]],[[{"name":"img_game_collectible_chain_active","rect":{"x":0,"y":0,"width":82,"height":101},"offset":{"x":0,"y":0},"originalSize":{"width":82,"height":101},"rotated":false,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[-41,-50.5,0,41,-50.5,0,-41,50.5,0,41,50.5,0],"indexes":[0,1,2,2,1,3],"uv":[0,101,82,101,0,0,82,0],"nuv":[0,0,1,0,0,1,1,1],"minPos":{"x":-41,"y":-50.5,"z":0},"maxPos":{"x":41,"y":50.5,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[10],[450]],[[{"name":"img_game_collectible_shades_inactive","rect":{"x":0,"y":0,"width":215,"height":160},"offset":{"x":0,"y":0},"originalSize":{"width":215,"height":160},"rotated":false,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[-107.5,-80,0,107.5,-80,0,-107.5,80,0,107.5,80,0],"indexes":[0,1,2,2,1,3],"uv":[0,160,215,160,0,0,215,0],"nuv":[0,0,1,0,0,1,1,1],"minPos":{"x":-107.5,"y":-80,"z":0},"maxPos":{"x":107.5,"y":80,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[10],[451]],[[[54,"mat_rarity_03veryrare",1,[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{}],[[[{},"tintColor",8,[4,4294967295],"mainTexture",6,0]],11]]],0,0,[0,0],[13,11],[158,52]],[[[54,"mat_dialog_box",1,[{"rasterizerState":{},"depthStencilState":{"depthTest":false},"blendState":{"targets":[{}]}}],[{"USE_TEXTURE":true}],[[[{},"mainTexture",6,0]],11]]],0,0,[0,0],[13,11],[452,51]],[[{"name":"bg_2_glamour","rect":{"x":0,"y":0,"width":1200,"height":1800},"offset":{"x":0,"y":0},"originalSize":{"width":1200,"height":1800},"rotated":false,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[-600,-900,0,600,-900,0,-600,900,0,600,900,0],"indexes":[0,1,2,2,1,3],"uv":[0,1800,1200,1800,0,0,1200,0],"nuv":[0,0,1,0,0,1,1,1],"minPos":{"x":-600,"y":-900,"z":0},"maxPos":{"x":600,"y":900,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[10],[453]],[[[58,"mainLevel3"],[121,"mainLevel3",[-193,-194,-195,-196,-197,-198,-199,-200,-201,-202,-203,-204],[[147,-192,[7,"66LG4A+fVEtLmUarsb0xZF"],841]],[93,"74dqmcKUJGj5r3Wu29KIZA",null,-191,0,[[5,["graphicNode"],-100,[0,["78j3SJeChFWY5tDVNRr9co"]],-99,[0,["1cVaU83N5Md67JoqqCBd5z","e3hqu0HdxNq4e2nv3hKDvO"]]],[5,["obstacleGraphic","0"],-102,[0,["78j3SJeChFWY5tDVNRr9co"]],-101,[0,["7aaD9DKUZKD74A1tB8ax+i"]]],[5,["graphicNode"],-104,[0,["78j3SJeChFWY5tDVNRr9co"]],-103,[0,["1cVaU83N5Md67JoqqCBd5z","e3hqu0HdxNq4e2nv3hKDvO"]]],[5,["obstacleGraphic","0"],-106,[0,["78j3SJeChFWY5tDVNRr9co"]],-105,[0,["7aaD9DKUZKD74A1tB8ax+i"]]],[5,["graphicNode"],-108,[0,["78j3SJeChFWY5tDVNRr9co"]],-107,[0,["1cVaU83N5Md67JoqqCBd5z","e3hqu0HdxNq4e2nv3hKDvO"]]],[5,["obstacleGraphic","0"],-110,[0,["78j3SJeChFWY5tDVNRr9co"]],-109,[0,["7aaD9DKUZKD74A1tB8ax+i"]]],[5,["graphicNode"],-112,[0,["78j3SJeChFWY5tDVNRr9co"]],-111,[0,["1cVaU83N5Md67JoqqCBd5z","e3hqu0HdxNq4e2nv3hKDvO"]]],[5,["obstacleGraphic","0"],-114,[0,["78j3SJeChFWY5tDVNRr9co"]],-113,[0,["7aaD9DKUZKD74A1tB8ax+i"]]],[5,["graphicNode"],-116,[0,["78j3SJeChFWY5tDVNRr9co"]],-115,[0,["1cVaU83N5Md67JoqqCBd5z","e3hqu0HdxNq4e2nv3hKDvO"]]],[5,["obstacleGraphic","0"],-118,[0,["78j3SJeChFWY5tDVNRr9co"]],-117,[0,["7aaD9DKUZKD74A1tB8ax+i"]]],[5,["graphicNode"],-120,[0,["78j3SJeChFWY5tDVNRr9co"]],-119,[0,["1cVaU83N5Md67JoqqCBd5z","e3hqu0HdxNq4e2nv3hKDvO"]]],[5,["obstacleGraphic","0"],-122,[0,["78j3SJeChFWY5tDVNRr9co"]],-121,[0,["1cVaU83N5Md67JoqqCBd5z","e892RDjrxNZISjs1LC/QQv"]]],[5,["graphicNode"],-124,[0,["78j3SJeChFWY5tDVNRr9co"]],-123,[0,["1cVaU83N5Md67JoqqCBd5z","e3hqu0HdxNq4e2nv3hKDvO"]]],[5,["obstacleGraphic","0"],-126,[0,["78j3SJeChFWY5tDVNRr9co"]],-125,[0,["7aaD9DKUZKD74A1tB8ax+i"]]],[5,["graphicNode"],-128,[0,["78j3SJeChFWY5tDVNRr9co"]],-127,[0,["1cVaU83N5Md67JoqqCBd5z","e3hqu0HdxNq4e2nv3hKDvO"]]],[5,["obstacleGraphic","0"],-130,[0,["78j3SJeChFWY5tDVNRr9co"]],-129,[0,["7aaD9DKUZKD74A1tB8ax+i"]]],[5,["graphicNode"],-132,[0,["78j3SJeChFWY5tDVNRr9co"]],-131,[0,["1cVaU83N5Md67JoqqCBd5z","e3hqu0HdxNq4e2nv3hKDvO"]]],[5,["obstacleGraphic","0"],-134,[0,["78j3SJeChFWY5tDVNRr9co"]],-133,[0,["7aaD9DKUZKD74A1tB8ax+i"]]],[5,["graphicNode"],-136,[0,["78j3SJeChFWY5tDVNRr9co"]],-135,[0,["1cVaU83N5Md67JoqqCBd5z","e3hqu0HdxNq4e2nv3hKDvO"]]],[5,["obstacleGraphic","0"],-138,[0,["78j3SJeChFWY5tDVNRr9co"]],-137,[0,["7aaD9DKUZKD74A1tB8ax+i"]]],[5,["graphicNode"],-140,[0,["78j3SJeChFWY5tDVNRr9co"]],-139,[0,["1cVaU83N5Md67JoqqCBd5z","e3hqu0HdxNq4e2nv3hKDvO"]]],[5,["obstacleGraphic","0"],-142,[0,["78j3SJeChFWY5tDVNRr9co"]],-141,[0,["7aaD9DKUZKD74A1tB8ax+i"]]],[5,["graphicNode"],-144,[0,["78j3SJeChFWY5tDVNRr9co"]],-143,[0,["1cVaU83N5Md67JoqqCBd5z","e3hqu0HdxNq4e2nv3hKDvO"]]],[5,["obstacleGraphic","0"],-146,[0,["78j3SJeChFWY5tDVNRr9co"]],-145,[0,["7aaD9DKUZKD74A1tB8ax+i"]]],[5,["graphicNode"],-148,[0,["78j3SJeChFWY5tDVNRr9co"]],-147,[0,["1cVaU83N5Md67JoqqCBd5z","e3hqu0HdxNq4e2nv3hKDvO"]]],[5,["obstacleGraphic","0"],-150,[0,["78j3SJeChFWY5tDVNRr9co"]],-149,[0,["7aaD9DKUZKD74A1tB8ax+i"]]],[5,["graphicNode"],-152,[0,["78j3SJeChFWY5tDVNRr9co"]],-151,[0,["1cVaU83N5Md67JoqqCBd5z","e3hqu0HdxNq4e2nv3hKDvO"]]],[5,["obstacleGraphic","0"],-154,[0,["78j3SJeChFWY5tDVNRr9co"]],-153,[0,["7aaD9DKUZKD74A1tB8ax+i"]]],[5,["graphicNode"],-156,[0,["78j3SJeChFWY5tDVNRr9co"]],-155,[0,["1cVaU83N5Md67JoqqCBd5z","e3hqu0HdxNq4e2nv3hKDvO"]]],[5,["obstacleGraphic","0"],-158,[0,["78j3SJeChFWY5tDVNRr9co"]],-157,[0,["7aaD9DKUZKD74A1tB8ax+i"]]],[5,["graphicNode"],-160,[0,["78j3SJeChFWY5tDVNRr9co"]],-159,[0,["1cVaU83N5Md67JoqqCBd5z","e3hqu0HdxNq4e2nv3hKDvO"]]],[5,["obstacleGraphic","0"],-162,[0,["78j3SJeChFWY5tDVNRr9co"]],-161,[0,["7aaD9DKUZKD74A1tB8ax+i"]]],[5,["graphicNode"],-164,[0,["78j3SJeChFWY5tDVNRr9co"]],-163,[0,["1cVaU83N5Md67JoqqCBd5z","e3hqu0HdxNq4e2nv3hKDvO"]]],[5,["obstacleGraphic","0"],-166,[0,["78j3SJeChFWY5tDVNRr9co"]],-165,[0,["7aaD9DKUZKD74A1tB8ax+i"]]],[5,["graphicNode"],-168,[0,["78j3SJeChFWY5tDVNRr9co"]],-167,[0,["1cVaU83N5Md67JoqqCBd5z","e3hqu0HdxNq4e2nv3hKDvO"]]],[5,["obstacleGraphic","0"],-170,[0,["78j3SJeChFWY5tDVNRr9co"]],-169,[0,["7aaD9DKUZKD74A1tB8ax+i"]]],[5,["graphicNode"],-172,[0,["78j3SJeChFWY5tDVNRr9co"]],-171,[0,["1cVaU83N5Md67JoqqCBd5z","e3hqu0HdxNq4e2nv3hKDvO"]]],[5,["obstacleGraphic","0"],-174,[0,["78j3SJeChFWY5tDVNRr9co"]],-173,[0,["7aaD9DKUZKD74A1tB8ax+i"]]],[5,["graphicNode"],-176,[0,["78j3SJeChFWY5tDVNRr9co"]],-175,[0,["1cVaU83N5Md67JoqqCBd5z","e3hqu0HdxNq4e2nv3hKDvO"]]],[5,["obstacleGraphic","0"],-178,[0,["78j3SJeChFWY5tDVNRr9co"]],-177,[0,["7aaD9DKUZKD74A1tB8ax+i"]]],[5,["graphicNode"],-180,[0,["78j3SJeChFWY5tDVNRr9co"]],-179,[0,["1cVaU83N5Md67JoqqCBd5z","e3hqu0HdxNq4e2nv3hKDvO"]]],[5,["obstacleGraphic","0"],-182,[0,["78j3SJeChFWY5tDVNRr9co"]],-181,[0,["7aaD9DKUZKD74A1tB8ax+i"]]],[5,["graphicNode"],-184,[0,["78j3SJeChFWY5tDVNRr9co"]],-183,[0,["1cVaU83N5Md67JoqqCBd5z","e3hqu0HdxNq4e2nv3hKDvO"]]],[5,["obstacleGraphic","0"],-186,[0,["78j3SJeChFWY5tDVNRr9co"]],-185,[0,["7aaD9DKUZKD74A1tB8ax+i"]]],[5,["graphicNode"],-188,[0,["78j3SJeChFWY5tDVNRr9co"]],-187,[0,["1cVaU83N5Md67JoqqCBd5z","e3hqu0HdxNq4e2nv3hKDvO"]]],[5,["obstacleGraphic","0"],-190,[0,["78j3SJeChFWY5tDVNRr9co"]],-189,[0,["7aaD9DKUZKD74A1tB8ax+i"]]]],[-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-61,-62,-63,-64,-65,-66,-67,-68,-69,-70,-71,-72,-73,-74,-75,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,-88,-89,-90,-91,-92,-93,-94,-95,-96,-97,-98]]],[78,"base_level-004",1,[-207,-208,-209,-210,-211,-212,-213,-214,-215,-216,-217,-218],[[76,-205,[7,"e8Ue7ZrVNMGrmP6zqw0714"],[1,0,0,-11.9],[1,9,0.2,27]],[71,-206,[7,"70/KqskrFAwLsg01r94V9s"]]],[4,"1eUz4vAtpM+ID9E/Jjedxv",null,null,null,1,0],[1,0,0,-72]],[0,["8dt/KCiu1GOJ6DGYai+gUP"]],[0,["8dt/KCiu1GOJ6DGYai+gUP"]],[0,["8dt/KCiu1GOJ6DGYai+gUP"]],[0,["8dt/KCiu1GOJ6DGYai+gUP"]],[0,["8dt/KCiu1GOJ6DGYai+gUP"]],[0,["8dt/KCiu1GOJ6DGYai+gUP"]],[0,["8dt/KCiu1GOJ6DGYai+gUP"]],[0,["8dt/KCiu1GOJ6DGYai+gUP"]],[0,["8dt/KCiu1GOJ6DGYai+gUP"]],[0,["8dt/KCiu1GOJ6DGYai+gUP"]],[0,["8dt/KCiu1GOJ6DGYai+gUP"]],[0,["8dt/KCiu1GOJ6DGYai+gUP"]],[0,["8dt/KCiu1GOJ6DGYai+gUP"]],[0,["8dt/KCiu1GOJ6DGYai+gUP"]],[0,["8dt/KCiu1GOJ6DGYai+gUP"]],[0,["8dt/KCiu1GOJ6DGYai+gUP"]],[0,["8dt/KCiu1GOJ6DGYai+gUP"]],[0,["8dt/KCiu1GOJ6DGYai+gUP"]],[0,["8dt/KCiu1GOJ6DGYai+gUP"]],[0,["8dt/KCiu1GOJ6DGYai+gUP"]],[0,["8dt/KCiu1GOJ6DGYai+gUP"]],[0,["8dt/KCiu1GOJ6DGYai+gUP"]],[0,["8dt/KCiu1GOJ6DGYai+gUP"]],[0,["8dt/KCiu1GOJ6DGYai+gUP"]],[0,["8dt/KCiu1GOJ6DGYai+gUP"]],[78,"base_level-008",1,[-221,-222,-223,-224,-225,-226,-227,-228,-229,-230],[[76,-219,[7,"40h7bqWsNF8a597nRht8jk"],[1,0,0,-11.9],[1,9,0.2,27]],[71,-220,[7,"c4VXxTshtO0bP/ibXKRPoN"]]],[4,"88EvO3paFCUaeCfyAwlhGp",null,null,null,1,0],[1,0,0,-168]],[78,"base_level-007",1,[-233,-234,-235,-236,-237,-238,-239,-240,-241],[[76,-231,[7,"c2cDjx0eNEWKPjwQ7pRhrr"],[1,0,0,-11.9],[1,9,0.2,27]],[71,-232,[7,"ffTkU2GMROtqwvITS/Lv6S"]]],[4,"16/dxQXt9LupnT1rZEnXrw",null,null,null,1,0],[1,0,0,-144]],[78,"base_level-012",1,[-244,-245,-246,-247,-248,-249,-250,-251,-252],[[76,-242,[7,"2bDjFrDdxB55RAOLW93pzu"],[1,0,0,-11.9],[1,9,0.2,27]],[71,-243,[7,"68lWHKHstO9rKbPj/zl99I"]]],[4,"5acAnFg4VDh4Bnjwr0sis3",null,null,null,1,0],[1,0,0,-264]],[78,"base_level-002",1,[-255,-256,-257,-258,-259,-260,-261,-262],[[76,-253,[7,"4dlB2gBWlB45nq+GZ0eiyM"],[1,0,0,-11.9],[1,9,0.2,27]],[71,-254,[7,"2acNTMtixBDarTbcZ/5Ohz"]]],[4,"14tDPU+mhKW4v1LQWRT+94",null,null,null,1,0],[1,0,0,-24]],[78,"base_level-006",1,[-265,-266,-267,-268,-269,-270,-271,-272],[[76,-263,[7,"8a9mcuA+FEHr5c89+KaPUl"],[1,0,0,-11.9],[1,9,0.2,27]],[71,-264,[7,"93+lGJ0lJIMI2J1WAKVqWS"]]],[4,"ddT++mk1tIQK1iptSbJATr",null,null,null,1,0],[1,0,0,-120]],[78,"base_level-010",1,[-275,-276,-277,-278,-279,-280,-281,-282],[[76,-273,[7,"f2Pzl7A41MlYTonlNR7ykj"],[1,0,0,-11.9],[1,9,0.2,27]],[71,-274,[7,"7fp87k3sJM2ZjXfKdkqKS/"]]],[4,"14jiGtyNZDD6tzceZ5j2f8",null,null,null,1,0],[1,0,0,-216]],[223,"base_level-001",1,[-285,-286,-287,-288,-289,-290,-291],[[76,-283,[7,"4fUQiRy4RAYrLGKK1ZRKN/"],[1,0,0,-11.9],[1,9,0.2,27]],[71,-284,[7,"8av4wN4GBICKql6rhZM00L"]]],[4,"21/RORNJxLFomJvsblxJsl",null,null,null,1,0]],[78,"base_level-003",1,[-294,-295,-296,-297,-298,-299,-300],[[76,-292,[7,"d5qrpq+IRPhqrOzcdXTSMp"],[1,0,0,-11.9],[1,9,0.2,27]],[71,-293,[7,"c8qKap39FBnqMJBIj5igoB"]]],[4,"71MmGRNzlIaqSFnXNJhXI4",null,null,null,1,0],[1,0,0,-48]],[78,"base_level-005",1,[-303,-304,-305,-306,-307,-308,-309],[[76,-301,[7,"daJv4vgmRHD7nGc9/P10A6"],[1,0,0,-11.9],[1,9,0.2,27]],[71,-302,[7,"a24WpvHfpAVLkoT3b+Sl4d"]]],[4,"6644Ex0T1LPpUkemAy9e9e",null,null,null,1,0],[1,0,0,-96]],[78,"base_level-011",1,[-312,-313,-314,-315,-316,-317,-318],[[76,-310,[7,"66M5bbJAxC6Zz0cQpPtnY+"],[1,0,0,-11.9],[1,9,0.2,27]],[71,-311,[7,"98fwSkD/9KIa/dszCkT9Ef"]]],[4,"896YXTpklJ9q8w+FWO6gEI",null,null,null,1,0],[1,0,0,-240]],[11,0,{},34,[12,"969XNiWY5HsaEzSoCn2x/3",null,-330,[6,"03wh9hKk9KmaLCyRo1GwOr",1,[[1,"obstacle_nonjumpable",["_name"],-326],[2,["_lpos"],-327,[1,0,0,-21]],[2,["_lrot"],-328,[3,0,0,0,1]],[2,["_euler"],-329,[1,0,0,0]]]],[[5,["mainRenderer"],-320,[0,["8dt/KCiu1GOJ6DGYai+gUP"]],-319,[0,["3ew1Vo2adBpqZ739+OrPkj"]]],[20,["graphicNode"],-321,[0,["e3hqu0HdxNq4e2nv3hKDvO"]]],[23,-323,-322,[0,["8fFvIyGEBFCqgGREWfd/YJ"]]],[21,["mainRenderer"],-325,-324,[0,["3ew1Vo2adBpqZ739+OrPkj"]]]],8]],[19,0,{},[18,"Parent",38,[-337],[4,"acUtatGuVN06wkU24sOluQ",null,null,null,1,0]],[12,"e892RDjrxNZISjs1LC/QQv",null,-336,[24,"1cVaU83N5Md67JoqqCBd5z",38,[[26,[0,["e892RDjrxNZISjs1LC/QQv"]],[-335]]],[[1,"Crowd",["_name"],-331],[2,["_lpos"],-332,[1,0,0.181,0.644]],[2,["_lrot"],-333,[3,0,0,0,1]],[2,["_euler"],-334,[1,0,0,0]],[1,true,["isRunwayNPC"],3],[1,true,["shouldGetRandomPose"],3],[1,2,["tripTexture","length"],3],[3,["tripTexture","0"],3,31],[3,["tripTexture","1"],3,32],[1,8,["poses","length"],3],[3,["poses","0"],3,33],[3,["poses","1"],3,34],[3,["poses","2"],3,35],[3,["poses","3"],3,36],[3,["poses","4"],3,37],[1,null,["poses","5"],3],[1,null,["poses","6"],3],[1,null,["poses","7"],3]],[[0,["8dt/KCiu1GOJ6DGYai+gUP"]]]],[[15,["mainRenderer"],[0,["0b8pE5sPNepqN6zgbDPnqa"]]]],9]],[11,0,{},31,[12,"969XNiWY5HsaEzSoCn2x/3",null,-349,[6,"39TfdSEQhLlpHTWU4alNuT",1,[[1,"obstacle_nonjumpable",["_name"],-345],[2,["_lpos"],-346,[1,0,0,-16]],[2,["_lrot"],-347,[3,0,0,0,1]],[2,["_euler"],-348,[1,0,0,0]]]],[[5,["mainRenderer"],-339,[0,["8dt/KCiu1GOJ6DGYai+gUP"]],-338,[0,["3ew1Vo2adBpqZ739+OrPkj"]]],[20,["graphicNode"],-340,[0,["e3hqu0HdxNq4e2nv3hKDvO"]]],[23,-342,-341,[0,["8fFvIyGEBFCqgGREWfd/YJ"]]],[21,["mainRenderer"],-344,-343,[0,["3ew1Vo2adBpqZ739+OrPkj"]]]],47]],[19,0,{},[18,"Parent",40,[-356],[4,"acUtatGuVN06wkU24sOluQ",null,null,null,1,0]],[12,"e892RDjrxNZISjs1LC/QQv",null,-355,[24,"1cVaU83N5Md67JoqqCBd5z",40,[[26,[0,["e892RDjrxNZISjs1LC/QQv"]],[-354]]],[[1,"Crowd",["_name"],-350],[2,["_lpos"],-351,[1,0,0.181,0.644]],[2,["_lrot"],-352,[3,0,0,0,1]],[2,["_euler"],-353,[1,0,0,0]],[1,true,["isRunwayNPC"],4],[1,true,["shouldGetRandomPose"],4],[1,2,["tripTexture","length"],4],[3,["tripTexture","0"],4,70],[3,["tripTexture","1"],4,71],[1,8,["poses","length"],4],[3,["poses","0"],4,72],[3,["poses","1"],4,73],[3,["poses","2"],4,74],[3,["poses","3"],4,75],[3,["poses","4"],4,76],[1,null,["poses","5"],4],[1,null,["poses","6"],4],[1,null,["poses","7"],4]],[[0,["8dt/KCiu1GOJ6DGYai+gUP"]]]],[[15,["mainRenderer"],[0,["0b8pE5sPNepqN6zgbDPnqa"]]]],48]],[11,0,{},35,[12,"969XNiWY5HsaEzSoCn2x/3",null,-368,[6,"b9qRZR1vBOYrl/Gu651qoO",1,[[1,"obstacle_nonjumpable",["_name"],-364],[2,["_lpos"],-365,[1,-2,0,-14]],[2,["_lrot"],-366,[3,0,0,0,1]],[2,["_euler"],-367,[1,0,0,0]]]],[[5,["mainRenderer"],-358,[0,["8dt/KCiu1GOJ6DGYai+gUP"]],-357,[0,["3ew1Vo2adBpqZ739+OrPkj"]]],[20,["graphicNode"],-359,[0,["e3hqu0HdxNq4e2nv3hKDvO"]]],[23,-361,-360,[0,["8fFvIyGEBFCqgGREWfd/YJ"]]],[21,["mainRenderer"],-363,-362,[0,["3ew1Vo2adBpqZ739+OrPkj"]]]],85]],[19,0,{},[18,"Parent",42,[-375],[4,"acUtatGuVN06wkU24sOluQ",null,null,null,1,0]],[12,"e892RDjrxNZISjs1LC/QQv",null,-374,[24,"1cVaU83N5Md67JoqqCBd5z",42,[[26,[0,["e892RDjrxNZISjs1LC/QQv"]],[-373]]],[[1,"Crowd",["_name"],-369],[2,["_lpos"],-370,[1,0,0.181,0.644]],[2,["_lrot"],-371,[3,0,0,0,1]],[2,["_euler"],-372,[1,0,0,0]],[1,true,["isRunwayNPC"],5],[1,true,["shouldGetRandomPose"],5],[1,2,["tripTexture","length"],5],[3,["tripTexture","0"],5,108],[3,["tripTexture","1"],5,109],[1,8,["poses","length"],5],[3,["poses","0"],5,110],[3,["poses","1"],5,111],[3,["poses","2"],5,112],[3,["poses","3"],5,113],[3,["poses","4"],5,114],[1,null,["poses","5"],5],[1,null,["poses","6"],5],[1,null,["poses","7"],5]],[[0,["8dt/KCiu1GOJ6DGYai+gUP"]]]],[[15,["mainRenderer"],[0,["0b8pE5sPNepqN6zgbDPnqa"]]]],86]],[19,0,{},[18,"Parent",-384,[-383],[4,"acUtatGuVN06wkU24sOluQ",null,null,null,1,0]],[12,"e892RDjrxNZISjs1LC/QQv",null,-382,[24,"1cVaU83N5Md67JoqqCBd5z",-381,[[26,[0,["e892RDjrxNZISjs1LC/QQv"]],[-380]]],[[1,"Crowd",["_name"],-376],[2,["_lpos"],-377,[1,0,0.181,0.644]],[2,["_lrot"],-378,[3,0,0,0,1]],[2,["_euler"],-379,[1,0,0,0]],[1,true,["isRunwayNPC"],6],[1,true,["shouldGetRandomPose"],6],[1,2,["tripTexture","length"],6],[3,["tripTexture","0"],6,153],[3,["tripTexture","1"],6,154],[1,8,["poses","length"],6],[3,["poses","0"],6,155],[3,["poses","1"],6,156],[3,["poses","2"],6,157],[3,["poses","3"],6,158],[3,["poses","4"],6,159],[1,null,["poses","5"],6],[1,null,["poses","6"],6],[1,null,["poses","7"],6]],[[0,["8dt/KCiu1GOJ6DGYai+gUP"]]]],[[15,["mainRenderer"],[0,["0b8pE5sPNepqN6zgbDPnqa"]]]],131]],[19,0,{},[18,"Parent",-393,[-392],[4,"acUtatGuVN06wkU24sOluQ",null,null,null,1,0]],[12,"e892RDjrxNZISjs1LC/QQv",null,-391,[24,"1cVaU83N5Md67JoqqCBd5z",-390,[[26,[0,["e892RDjrxNZISjs1LC/QQv"]],[-389]]],[[1,"Crowd",["_name"],-385],[2,["_lpos"],-386,[1,0,0.181,0.644]],[2,["_lrot"],-387,[3,0,0,0,1]],[2,["_euler"],-388,[1,0,0,0]],[1,true,["isRunwayNPC"],7],[1,true,["shouldGetRandomPose"],7],[1,2,["tripTexture","length"],7],[3,["tripTexture","0"],7,183],[3,["tripTexture","1"],7,184],[1,8,["poses","length"],7],[3,["poses","0"],7,185],[3,["poses","1"],7,186],[3,["poses","2"],7,187],[3,["poses","3"],7,188],[3,["poses","4"],7,189],[1,null,["poses","5"],7],[1,null,["poses","6"],7],[1,null,["poses","7"],7]],[[0,["8dt/KCiu1GOJ6DGYai+gUP"]]]],[[15,["mainRenderer"],[0,["0b8pE5sPNepqN6zgbDPnqa"]]]],161]],[11,0,{},36,[12,"969XNiWY5HsaEzSoCn2x/3",null,-405,[6,"28JRB6ZCNGW6KCd/2X3vXh",1,[[1,"obstacle_nonjumpable",["_name"],-401],[2,["_lpos"],-402,[1,-2,0,-11]],[2,["_lrot"],-403,[3,0,0,0,1]],[2,["_euler"],-404,[1,0,0,0]]]],[[5,["mainRenderer"],-395,[0,["8dt/KCiu1GOJ6DGYai+gUP"]],-394,[0,["3ew1Vo2adBpqZ739+OrPkj"]]],[20,["graphicNode"],-396,[0,["e3hqu0HdxNq4e2nv3hKDvO"]]],[23,-398,-397,[0,["8fFvIyGEBFCqgGREWfd/YJ"]]],[21,["mainRenderer"],-400,-399,[0,["3ew1Vo2adBpqZ739+OrPkj"]]]],194]],[19,0,{},[18,"Parent",46,[-412],[4,"acUtatGuVN06wkU24sOluQ",null,null,null,1,0]],[12,"e892RDjrxNZISjs1LC/QQv",null,-411,[24,"1cVaU83N5Md67JoqqCBd5z",46,[[26,[0,["e892RDjrxNZISjs1LC/QQv"]],[-410]]],[[1,"Crowd",["_name"],-406],[2,["_lpos"],-407,[1,0,0.181,0.644]],[2,["_lrot"],-408,[3,0,0,0,1]],[2,["_euler"],-409,[1,0,0,0]],[1,true,["isRunwayNPC"],8],[1,true,["shouldGetRandomPose"],8],[1,2,["tripTexture","length"],8],[3,["tripTexture","0"],8,217],[3,["tripTexture","1"],8,218],[1,8,["poses","length"],8],[3,["poses","0"],8,219],[3,["poses","1"],8,220],[3,["poses","2"],8,221],[3,["poses","3"],8,222],[3,["poses","4"],8,223],[1,null,["poses","5"],8],[1,null,["poses","6"],8],[1,null,["poses","7"],8]],[[0,["8dt/KCiu1GOJ6DGYai+gUP"]]]],[[15,["mainRenderer"],[0,["0b8pE5sPNepqN6zgbDPnqa"]]]],195]],[11,0,{},36,[12,"969XNiWY5HsaEzSoCn2x/3",null,-425,[6,"fa9Kp20IdA15GE6+0RypIX",1,[[1,"obstacle_nonjumpable-001",["_name"],-420],[2,["_lpos"],-421,[1,0,0,-15]],[2,["_lrot"],-422,[3,0,0,0,1]],[2,["_euler"],-423,[1,0,0,0]],[148,["obstacleGraphic","0"],[0,["78j3SJeChFWY5tDVNRr9co"]],-424]]],[[5,["mainRenderer"],-414,[0,["8dt/KCiu1GOJ6DGYai+gUP"]],-413,[0,["3ew1Vo2adBpqZ739+OrPkj"]]],[20,["graphicNode"],-415,[0,["e3hqu0HdxNq4e2nv3hKDvO"]]],[23,-417,-416,[0,["8fFvIyGEBFCqgGREWfd/YJ"]]],[21,["mainRenderer"],-419,-418,[0,["3ew1Vo2adBpqZ739+OrPkj"]]]],224]],[19,0,{},[18,"Parent",48,[-432],[4,"acUtatGuVN06wkU24sOluQ",null,null,null,1,0]],[12,"e892RDjrxNZISjs1LC/QQv",null,-431,[24,"1cVaU83N5Md67JoqqCBd5z",48,[[26,[0,["e892RDjrxNZISjs1LC/QQv"]],[-430]]],[[1,"Crowd",["_name"],-426],[2,["_lpos"],-427,[1,0,0.181,0.644]],[2,["_lrot"],-428,[3,0,0,0,1]],[2,["_euler"],-429,[1,0,0,0]],[1,true,["isRunwayNPC"],9],[1,true,["shouldGetRandomPose"],9],[1,2,["tripTexture","length"],9],[3,["tripTexture","0"],9,249],[3,["tripTexture","1"],9,250],[1,8,["poses","length"],9],[3,["poses","0"],9,251],[3,["poses","1"],9,252],[3,["poses","2"],9,253],[3,["poses","3"],9,254],[3,["poses","4"],9,255],[1,null,["poses","5"],9],[1,null,["poses","6"],9],[1,null,["poses","7"],9]],[[0,["8dt/KCiu1GOJ6DGYai+gUP"]]]],[[15,["mainRenderer"],[0,["0b8pE5sPNepqN6zgbDPnqa"]]]],227]],[19,0,{},[18,"Parent",-441,[-440],[4,"acUtatGuVN06wkU24sOluQ",null,null,null,1,0]],[12,"e892RDjrxNZISjs1LC/QQv",null,-439,[24,"1cVaU83N5Md67JoqqCBd5z",-438,[[26,[0,["e892RDjrxNZISjs1LC/QQv"]],[-437]]],[[1,"Crowd",["_name"],-433],[2,["_lpos"],-434,[1,0,0.181,0.644]],[2,["_lrot"],-435,[3,0,0,0,1]],[2,["_euler"],-436,[1,0,0,0]],[1,true,["isRunwayNPC"],10],[1,true,["shouldGetRandomPose"],10],[1,2,["tripTexture","length"],10],[3,["tripTexture","0"],10,285],[3,["tripTexture","1"],10,286],[1,8,["poses","length"],10],[3,["poses","0"],10,287],[3,["poses","1"],10,288],[3,["poses","2"],10,289],[3,["poses","3"],10,290],[3,["poses","4"],10,291],[1,null,["poses","5"],10],[1,null,["poses","6"],10],[1,null,["poses","7"],10]],[[0,["8dt/KCiu1GOJ6DGYai+gUP"]]]],[[15,["mainRenderer"],[0,["0b8pE5sPNepqN6zgbDPnqa"]]]],263]],[11,0,{},32,[12,"969XNiWY5HsaEzSoCn2x/3",null,-453,[6,"d8lm3c0PdINoS2TtPhKWuT",1,[[1,"obstacle_nonjumpable-001",["_name"],-449],[2,["_lpos"],-450,[1,-2,0,-11]],[2,["_lrot"],-451,[3,0,0,0,1]],[2,["_euler"],-452,[1,0,0,0]]]],[[5,["mainRenderer"],-443,[0,["8dt/KCiu1GOJ6DGYai+gUP"]],-442,[0,["3ew1Vo2adBpqZ739+OrPkj"]]],[20,["graphicNode"],-444,[0,["e3hqu0HdxNq4e2nv3hKDvO"]]],[23,-446,-445,[0,["8fFvIyGEBFCqgGREWfd/YJ"]]],[21,["mainRenderer"],-448,-447,[0,["3ew1Vo2adBpqZ739+OrPkj"]]]],292]],[19,0,{},[18,"Parent",51,[-460],[4,"acUtatGuVN06wkU24sOluQ",null,null,null,1,0]],[12,"e892RDjrxNZISjs1LC/QQv",null,-459,[24,"1cVaU83N5Md67JoqqCBd5z",51,[[26,[0,["e892RDjrxNZISjs1LC/QQv"]],[-458]]],[[1,"Crowd",["_name"],-454],[2,["_lpos"],-455,[1,0,0.181,0.644]],[2,["_lrot"],-456,[3,0,0,0,1]],[2,["_euler"],-457,[1,0,0,0]],[1,true,["isRunwayNPC"],11],[1,true,["shouldGetRandomPose"],11],[1,2,["tripTexture","length"],11],[3,["tripTexture","0"],11,315],[3,["tripTexture","1"],11,316],[1,8,["poses","length"],11],[3,["poses","0"],11,317],[3,["poses","1"],11,318],[3,["poses","2"],11,319],[3,["poses","3"],11,320],[3,["poses","4"],11,321],[1,null,["poses","5"],11],[1,null,["poses","6"],11],[1,null,["poses","7"],11]],[[0,["8dt/KCiu1GOJ6DGYai+gUP"]]]],[[15,["mainRenderer"],[0,["0b8pE5sPNepqN6zgbDPnqa"]]]],293]],[11,0,{},32,[12,"969XNiWY5HsaEzSoCn2x/3",null,-472,[6,"6bgeHDn8JFNrmIWG6VgaPn",1,[[1,"obstacle_nonjumpable-002",["_name"],-468],[2,["_lpos"],-469,[1,2,0,-11]],[2,["_lrot"],-470,[3,0,0,0,1]],[2,["_euler"],-471,[1,0,0,0]]]],[[5,["mainRenderer"],-462,[0,["8dt/KCiu1GOJ6DGYai+gUP"]],-461,[0,["3ew1Vo2adBpqZ739+OrPkj"]]],[20,["graphicNode"],-463,[0,["e3hqu0HdxNq4e2nv3hKDvO"]]],[23,-465,-464,[0,["8fFvIyGEBFCqgGREWfd/YJ"]]],[21,["mainRenderer"],-467,-466,[0,["3ew1Vo2adBpqZ739+OrPkj"]]]],322]],[19,0,{},[18,"Parent",53,[-479],[4,"acUtatGuVN06wkU24sOluQ",null,null,null,1,0]],[12,"e892RDjrxNZISjs1LC/QQv",null,-478,[24,"1cVaU83N5Md67JoqqCBd5z",53,[[26,[0,["e892RDjrxNZISjs1LC/QQv"]],[-477]]],[[1,"Crowd",["_name"],-473],[2,["_lpos"],-474,[1,0,0.181,0.644]],[2,["_lrot"],-475,[3,0,0,0,1]],[2,["_euler"],-476,[1,0,0,0]],[1,true,["isRunwayNPC"],12],[1,true,["shouldGetRandomPose"],12],[1,2,["tripTexture","length"],12],[3,["tripTexture","0"],12,345],[3,["tripTexture","1"],12,346],[1,8,["poses","length"],12],[3,["poses","0"],12,347],[3,["poses","1"],12,348],[3,["poses","2"],12,349],[3,["poses","3"],12,350],[3,["poses","4"],12,351],[1,null,["poses","5"],12],[1,null,["poses","6"],12],[1,null,["poses","7"],12]],[[0,["8dt/KCiu1GOJ6DGYai+gUP"]]]],[[15,["mainRenderer"],[0,["0b8pE5sPNepqN6zgbDPnqa"]]]],323]],[11,0,{},29,[12,"969XNiWY5HsaEzSoCn2x/3",null,-491,[6,"20C+4rvD9Hv7ddPDnckdai",1,[[1,"obstacle_nonjumpable",["_name"],-487],[2,["_lpos"],-488,[1,2,0,-6]],[2,["_lrot"],-489,[3,0,0,0,1]],[2,["_euler"],-490,[1,0,0,0]]]],[[5,["mainRenderer"],-481,[0,["8dt/KCiu1GOJ6DGYai+gUP"]],-480,[0,["3ew1Vo2adBpqZ739+OrPkj"]]],[20,["graphicNode"],-482,[0,["e3hqu0HdxNq4e2nv3hKDvO"]]],[23,-484,-483,[0,["8fFvIyGEBFCqgGREWfd/YJ"]]],[21,["mainRenderer"],-486,-485,[0,["3ew1Vo2adBpqZ739+OrPkj"]]]],359]],[19,0,{},[18,"Parent",55,[-498],[4,"acUtatGuVN06wkU24sOluQ",null,null,null,1,0]],[12,"e892RDjrxNZISjs1LC/QQv",null,-497,[24,"1cVaU83N5Md67JoqqCBd5z",55,[[26,[0,["e892RDjrxNZISjs1LC/QQv"]],[-496]]],[[1,"Crowd",["_name"],-492],[2,["_lpos"],-493,[1,0,0.181,0.644]],[2,["_lrot"],-494,[3,0,0,0,1]],[2,["_euler"],-495,[1,0,0,0]],[1,true,["isRunwayNPC"],13],[1,true,["shouldGetRandomPose"],13],[1,2,["tripTexture","length"],13],[3,["tripTexture","0"],13,382],[3,["tripTexture","1"],13,383],[1,8,["poses","length"],13],[3,["poses","0"],13,384],[3,["poses","1"],13,385],[3,["poses","2"],13,386],[3,["poses","3"],13,387],[3,["poses","4"],13,388],[1,null,["poses","5"],13],[1,null,["poses","6"],13],[1,null,["poses","7"],13]],[[0,["8dt/KCiu1GOJ6DGYai+gUP"]]]],[[15,["mainRenderer"],[0,["0b8pE5sPNepqN6zgbDPnqa"]]]],360]],[11,0,{},29,[12,"969XNiWY5HsaEzSoCn2x/3",null,-510,[6,"2cr7wle6dJe6oSgk+z7Hva",1,[[1,"obstacle_nonjumpable-001",["_name"],-506],[2,["_lpos"],-507,[1,2,0,-11]],[2,["_lrot"],-508,[3,0,0,0,1]],[2,["_euler"],-509,[1,0,0,0]]]],[[5,["mainRenderer"],-500,[0,["8dt/KCiu1GOJ6DGYai+gUP"]],-499,[0,["3ew1Vo2adBpqZ739+OrPkj"]]],[20,["graphicNode"],-501,[0,["e3hqu0HdxNq4e2nv3hKDvO"]]],[23,-503,-502,[0,["8fFvIyGEBFCqgGREWfd/YJ"]]],[21,["mainRenderer"],-505,-504,[0,["3ew1Vo2adBpqZ739+OrPkj"]]]],389]],[19,0,{},[18,"Parent",57,[-517],[4,"acUtatGuVN06wkU24sOluQ",null,null,null,1,0]],[12,"e892RDjrxNZISjs1LC/QQv",null,-516,[24,"1cVaU83N5Md67JoqqCBd5z",57,[[26,[0,["e892RDjrxNZISjs1LC/QQv"]],[-515]]],[[1,"Crowd",["_name"],-511],[2,["_lpos"],-512,[1,0,0.181,0.644]],[2,["_lrot"],-513,[3,0,0,0,1]],[2,["_euler"],-514,[1,0,0,0]],[1,true,["isRunwayNPC"],14],[1,true,["shouldGetRandomPose"],14],[1,2,["tripTexture","length"],14],[3,["tripTexture","0"],14,412],[3,["tripTexture","1"],14,413],[1,8,["poses","length"],14],[3,["poses","0"],14,414],[3,["poses","1"],14,415],[3,["poses","2"],14,416],[3,["poses","3"],14,417],[3,["poses","4"],14,418],[1,null,["poses","5"],14],[1,null,["poses","6"],14],[1,null,["poses","7"],14]],[[0,["8dt/KCiu1GOJ6DGYai+gUP"]]]],[[15,["mainRenderer"],[0,["0b8pE5sPNepqN6zgbDPnqa"]]]],390]],[11,0,{},29,[12,"969XNiWY5HsaEzSoCn2x/3",null,-529,[6,"2e5Mm49phNYJwOXyBCbUSB",1,[[1,"obstacle_nonjumpable-002",["_name"],-525],[2,["_lpos"],-526,[1,-2,0,-11]],[2,["_lrot"],-527,[3,0,0,0,1]],[2,["_euler"],-528,[1,0,0,0]]]],[[5,["mainRenderer"],-519,[0,["8dt/KCiu1GOJ6DGYai+gUP"]],-518,[0,["3ew1Vo2adBpqZ739+OrPkj"]]],[20,["graphicNode"],-520,[0,["e3hqu0HdxNq4e2nv3hKDvO"]]],[23,-522,-521,[0,["8fFvIyGEBFCqgGREWfd/YJ"]]],[21,["mainRenderer"],-524,-523,[0,["3ew1Vo2adBpqZ739+OrPkj"]]]],419]],[19,0,{},[18,"Parent",59,[-536],[4,"acUtatGuVN06wkU24sOluQ",null,null,null,1,0]],[12,"e892RDjrxNZISjs1LC/QQv",null,-535,[24,"1cVaU83N5Md67JoqqCBd5z",59,[[26,[0,["e892RDjrxNZISjs1LC/QQv"]],[-534]]],[[1,"Crowd",["_name"],-530],[2,["_lpos"],-531,[1,0,0.181,0.644]],[2,["_lrot"],-532,[3,0,0,0,1]],[2,["_euler"],-533,[1,0,0,0]],[1,true,["isRunwayNPC"],15],[1,true,["shouldGetRandomPose"],15],[1,2,["tripTexture","length"],15],[3,["tripTexture","0"],15,442],[3,["tripTexture","1"],15,443],[1,8,["poses","length"],15],[3,["poses","0"],15,444],[3,["poses","1"],15,445],[3,["poses","2"],15,446],[3,["poses","3"],15,447],[3,["poses","4"],15,448],[1,null,["poses","5"],15],[1,null,["poses","6"],15],[1,null,["poses","7"],15]],[[0,["8dt/KCiu1GOJ6DGYai+gUP"]]]],[[15,["mainRenderer"],[0,["0b8pE5sPNepqN6zgbDPnqa"]]]],420]],[11,0,{},28,[12,"969XNiWY5HsaEzSoCn2x/3",null,-548,[6,"81QXBcZ8JHs5Z1HoNspuG5",1,[[1,"obstacle_nonjumpable",["_name"],-544],[2,["_lpos"],-545,[1,0,0,-11]],[2,["_lrot"],-546,[3,0,0,0,1]],[2,["_euler"],-547,[1,0,0,0]]]],[[5,["mainRenderer"],-538,[0,["8dt/KCiu1GOJ6DGYai+gUP"]],-537,[0,["3ew1Vo2adBpqZ739+OrPkj"]]],[20,["graphicNode"],-539,[0,["e3hqu0HdxNq4e2nv3hKDvO"]]],[23,-541,-540,[0,["8fFvIyGEBFCqgGREWfd/YJ"]]],[21,["mainRenderer"],-543,-542,[0,["3ew1Vo2adBpqZ739+OrPkj"]]]],458]],[19,0,{},[18,"Parent",61,[-555],[4,"acUtatGuVN06wkU24sOluQ",null,null,null,1,0]],[12,"e892RDjrxNZISjs1LC/QQv",null,-554,[24,"1cVaU83N5Md67JoqqCBd5z",61,[[26,[0,["e892RDjrxNZISjs1LC/QQv"]],[-553]]],[[1,"Crowd",["_name"],-549],[2,["_lpos"],-550,[1,0,0.181,0.644]],[2,["_lrot"],-551,[3,0,0,0,1]],[2,["_euler"],-552,[1,0,0,0]],[1,true,["isRunwayNPC"],16],[1,true,["shouldGetRandomPose"],16],[1,2,["tripTexture","length"],16],[3,["tripTexture","0"],16,481],[3,["tripTexture","1"],16,482],[1,8,["poses","length"],16],[3,["poses","0"],16,483],[3,["poses","1"],16,484],[3,["poses","2"],16,485],[3,["poses","3"],16,486],[3,["poses","4"],16,487],[1,null,["poses","5"],16],[1,null,["poses","6"],16],[1,null,["poses","7"],16]],[[0,["8dt/KCiu1GOJ6DGYai+gUP"]]]],[[15,["mainRenderer"],[0,["0b8pE5sPNepqN6zgbDPnqa"]]]],459]],[11,0,{},28,[12,"969XNiWY5HsaEzSoCn2x/3",null,-567,[6,"e3xvuriG9ILJHLl/6SpSlK",1,[[1,"obstacle_nonjumpable-001",["_name"],-563],[2,["_lpos"],-564,[1,0,0,-15]],[2,["_lrot"],-565,[3,0,0,0,1]],[2,["_euler"],-566,[1,0,0,0]]]],[[5,["mainRenderer"],-557,[0,["8dt/KCiu1GOJ6DGYai+gUP"]],-556,[0,["3ew1Vo2adBpqZ739+OrPkj"]]],[20,["graphicNode"],-558,[0,["e3hqu0HdxNq4e2nv3hKDvO"]]],[23,-560,-559,[0,["8fFvIyGEBFCqgGREWfd/YJ"]]],[21,["mainRenderer"],-562,-561,[0,["3ew1Vo2adBpqZ739+OrPkj"]]]],488]],[19,0,{},[18,"Parent",63,[-574],[4,"acUtatGuVN06wkU24sOluQ",null,null,null,1,0]],[12,"e892RDjrxNZISjs1LC/QQv",null,-573,[24,"1cVaU83N5Md67JoqqCBd5z",63,[[26,[0,["e892RDjrxNZISjs1LC/QQv"]],[-572]]],[[1,"Crowd",["_name"],-568],[2,["_lpos"],-569,[1,0,0.181,0.644]],[2,["_lrot"],-570,[3,0,0,0,1]],[2,["_euler"],-571,[1,0,0,0]],[1,true,["isRunwayNPC"],17],[1,true,["shouldGetRandomPose"],17],[1,2,["tripTexture","length"],17],[3,["tripTexture","0"],17,511],[3,["tripTexture","1"],17,512],[1,8,["poses","length"],17],[3,["poses","0"],17,513],[3,["poses","1"],17,514],[3,["poses","2"],17,515],[3,["poses","3"],17,516],[3,["poses","4"],17,517],[1,null,["poses","5"],17],[1,null,["poses","6"],17],[1,null,["poses","7"],17]],[[0,["8dt/KCiu1GOJ6DGYai+gUP"]]]],[[15,["mainRenderer"],[0,["0b8pE5sPNepqN6zgbDPnqa"]]]],489]],[78,"base_level-009",1,[-577,-578,-579,-580,-581,-582],[[76,-575,[7,"ac6nWC2ehORp2lzb63pMPc"],[1,0,0,-11.9],[1,9,0.2,27]],[71,-576,[7,"d3FJGy7Y5J0qghuogurTP+"]]],[4,"9eW4n7PIFN84JLB7E/qp6h",null,null,null,1,0],[1,0,0,-192]],[11,0,{},65,[12,"969XNiWY5HsaEzSoCn2x/3",null,-594,[6,"18PjuiKSdDj63qDTRLRkt3",1,[[1,"obstacle_nonjumpable",["_name"],-590],[2,["_lpos"],-591,[1,0,0,-22]],[2,["_lrot"],-592,[3,0,0,0,1]],[2,["_euler"],-593,[1,0,0,0]]]],[[5,["mainRenderer"],-584,[0,["8dt/KCiu1GOJ6DGYai+gUP"]],-583,[0,["3ew1Vo2adBpqZ739+OrPkj"]]],[20,["graphicNode"],-585,[0,["e3hqu0HdxNq4e2nv3hKDvO"]]],[23,-587,-586,[0,["8fFvIyGEBFCqgGREWfd/YJ"]]],[21,["mainRenderer"],-589,-588,[0,["3ew1Vo2adBpqZ739+OrPkj"]]]],522]],[19,0,{},[18,"Parent",66,[-601],[4,"acUtatGuVN06wkU24sOluQ",null,null,null,1,0]],[12,"e892RDjrxNZISjs1LC/QQv",null,-600,[24,"1cVaU83N5Md67JoqqCBd5z",66,[[26,[0,["e892RDjrxNZISjs1LC/QQv"]],[-599]]],[[1,"Crowd",["_name"],-595],[2,["_lpos"],-596,[1,0,0.181,0.644]],[2,["_lrot"],-597,[3,0,0,0,1]],[2,["_euler"],-598,[1,0,0,0]],[1,true,["isRunwayNPC"],18],[1,true,["shouldGetRandomPose"],18],[1,2,["tripTexture","length"],18],[3,["tripTexture","0"],18,545],[3,["tripTexture","1"],18,546],[1,8,["poses","length"],18],[3,["poses","0"],18,547],[3,["poses","1"],18,548],[3,["poses","2"],18,549],[3,["poses","3"],18,550],[3,["poses","4"],18,551],[1,null,["poses","5"],18],[1,null,["poses","6"],18],[1,null,["poses","7"],18]],[[0,["8dt/KCiu1GOJ6DGYai+gUP"]]]],[[15,["mainRenderer"],[0,["0b8pE5sPNepqN6zgbDPnqa"]]]],523]],[11,0,{},65,[12,"969XNiWY5HsaEzSoCn2x/3",null,-613,[6,"23GPXKvgVJHaEi7N4iJQgQ",1,[[1,"obstacle_nonjumpable-001",["_name"],-609],[2,["_lpos"],-610,[1,2,0,-5]],[2,["_lrot"],-611,[3,0,0,0,1]],[2,["_euler"],-612,[1,0,0,0]]]],[[5,["mainRenderer"],-603,[0,["8dt/KCiu1GOJ6DGYai+gUP"]],-602,[0,["3ew1Vo2adBpqZ739+OrPkj"]]],[20,["graphicNode"],-604,[0,["e3hqu0HdxNq4e2nv3hKDvO"]]],[23,-606,-605,[0,["8fFvIyGEBFCqgGREWfd/YJ"]]],[21,["mainRenderer"],-608,-607,[0,["3ew1Vo2adBpqZ739+OrPkj"]]]],552]],[19,0,{},[18,"Parent",68,[-620],[4,"acUtatGuVN06wkU24sOluQ",null,null,null,1,0]],[12,"e892RDjrxNZISjs1LC/QQv",null,-619,[24,"1cVaU83N5Md67JoqqCBd5z",68,[[26,[0,["e892RDjrxNZISjs1LC/QQv"]],[-618]]],[[1,"Crowd",["_name"],-614],[2,["_lpos"],-615,[1,0,0.181,0.644]],[2,["_lrot"],-616,[3,0,0,0,1]],[2,["_euler"],-617,[1,0,0,0]],[1,true,["isRunwayNPC"],19],[1,true,["shouldGetRandomPose"],19],[1,2,["tripTexture","length"],19],[3,["tripTexture","0"],19,575],[3,["tripTexture","1"],19,576],[1,8,["poses","length"],19],[3,["poses","0"],19,577],[3,["poses","1"],19,578],[3,["poses","2"],19,579],[3,["poses","3"],19,580],[3,["poses","4"],19,581],[1,null,["poses","5"],19],[1,null,["poses","6"],19],[1,null,["poses","7"],19]],[[0,["8dt/KCiu1GOJ6DGYai+gUP"]]]],[[15,["mainRenderer"],[0,["0b8pE5sPNepqN6zgbDPnqa"]]]],553]],[11,0,{},33,[12,"969XNiWY5HsaEzSoCn2x/3",null,-632,[6,"178zWgN3BCZLsYkpKXnYC+",1,[[1,"obstacle_nonjumpable",["_name"],-628],[2,["_lpos"],-629,[1,-2,0,-6]],[2,["_lrot"],-630,[3,0,0,0,1]],[2,["_euler"],-631,[1,0,0,0]]]],[[5,["mainRenderer"],-622,[0,["8dt/KCiu1GOJ6DGYai+gUP"]],-621,[0,["3ew1Vo2adBpqZ739+OrPkj"]]],[20,["graphicNode"],-623,[0,["e3hqu0HdxNq4e2nv3hKDvO"]]],[23,-625,-624,[0,["8fFvIyGEBFCqgGREWfd/YJ"]]],[21,["mainRenderer"],-627,-626,[0,["3ew1Vo2adBpqZ739+OrPkj"]]]],589]],[19,0,{},[18,"Parent",70,[-639],[4,"acUtatGuVN06wkU24sOluQ",null,null,null,1,0]],[12,"e892RDjrxNZISjs1LC/QQv",null,-638,[24,"1cVaU83N5Md67JoqqCBd5z",70,[[26,[0,["e892RDjrxNZISjs1LC/QQv"]],[-637]]],[[1,"Crowd",["_name"],-633],[2,["_lpos"],-634,[1,0,0.181,0.644]],[2,["_lrot"],-635,[3,0,0,0,1]],[2,["_euler"],-636,[1,0,0,0]],[1,true,["isRunwayNPC"],20],[1,true,["shouldGetRandomPose"],20],[1,2,["tripTexture","length"],20],[3,["tripTexture","0"],20,612],[3,["tripTexture","1"],20,613],[1,8,["poses","length"],20],[3,["poses","0"],20,614],[3,["poses","1"],20,615],[3,["poses","2"],20,616],[3,["poses","3"],20,617],[3,["poses","4"],20,618],[1,null,["poses","5"],20],[1,null,["poses","6"],20],[1,null,["poses","7"],20]],[[0,["8dt/KCiu1GOJ6DGYai+gUP"]]]],[[15,["mainRenderer"],[0,["0b8pE5sPNepqN6zgbDPnqa"]]]],590]],[11,0,{},33,[12,"969XNiWY5HsaEzSoCn2x/3",null,-651,[6,"e4Mn4nEndGnKKPuLmaQa34",1,[[1,"obstacle_nonjumpable-004",["_name"],-647],[2,["_lpos"],-648,[1,-2,0,-16]],[2,["_lrot"],-649,[3,0,0,0,1]],[2,["_euler"],-650,[1,0,0,0]]]],[[5,["mainRenderer"],-641,[0,["8dt/KCiu1GOJ6DGYai+gUP"]],-640,[0,["3ew1Vo2adBpqZ739+OrPkj"]]],[20,["graphicNode"],-642,[0,["e3hqu0HdxNq4e2nv3hKDvO"]]],[23,-644,-643,[0,["8fFvIyGEBFCqgGREWfd/YJ"]]],[21,["mainRenderer"],-646,-645,[0,["3ew1Vo2adBpqZ739+OrPkj"]]]],619]],[19,0,{},[18,"Parent",72,[-658],[4,"acUtatGuVN06wkU24sOluQ",null,null,null,1,0]],[12,"e892RDjrxNZISjs1LC/QQv",null,-657,[24,"1cVaU83N5Md67JoqqCBd5z",72,[[26,[0,["e892RDjrxNZISjs1LC/QQv"]],[-656]]],[[1,"Crowd",["_name"],-652],[2,["_lpos"],-653,[1,0,0.181,0.644]],[2,["_lrot"],-654,[3,0,0,0,1]],[2,["_euler"],-655,[1,0,0,0]],[1,true,["isRunwayNPC"],21],[1,true,["shouldGetRandomPose"],21],[1,2,["tripTexture","length"],21],[3,["tripTexture","0"],21,642],[3,["tripTexture","1"],21,643],[1,8,["poses","length"],21],[3,["poses","0"],21,644],[3,["poses","1"],21,645],[3,["poses","2"],21,646],[3,["poses","3"],21,647],[3,["poses","4"],21,648],[1,null,["poses","5"],21],[1,null,["poses","6"],21],[1,null,["poses","7"],21]],[[0,["8dt/KCiu1GOJ6DGYai+gUP"]]]],[[15,["mainRenderer"],[0,["0b8pE5sPNepqN6zgbDPnqa"]]]],620]],[11,0,{},37,[12,"969XNiWY5HsaEzSoCn2x/3",null,-670,[6,"c4yLEjs/9K4KXZ3soc3cee",1,[[1,"obstacle_nonjumpable",["_name"],-666],[2,["_lpos"],-667,[1,2,0,-7]],[2,["_lrot"],-668,[3,0,0,0,1]],[2,["_euler"],-669,[1,0,0,0]]]],[[5,["mainRenderer"],-660,[0,["8dt/KCiu1GOJ6DGYai+gUP"]],-659,[0,["3ew1Vo2adBpqZ739+OrPkj"]]],[20,["graphicNode"],-661,[0,["e3hqu0HdxNq4e2nv3hKDvO"]]],[23,-663,-662,[0,["8fFvIyGEBFCqgGREWfd/YJ"]]],[21,["mainRenderer"],-665,-664,[0,["3ew1Vo2adBpqZ739+OrPkj"]]]],654]],[19,0,{},[18,"Parent",74,[-677],[4,"acUtatGuVN06wkU24sOluQ",null,null,null,1,0]],[12,"e892RDjrxNZISjs1LC/QQv",null,-676,[24,"1cVaU83N5Md67JoqqCBd5z",74,[[26,[0,["e892RDjrxNZISjs1LC/QQv"]],[-675]]],[[1,"Crowd",["_name"],-671],[2,["_lpos"],-672,[1,0,0.181,0.644]],[2,["_lrot"],-673,[3,0,0,0,1]],[2,["_euler"],-674,[1,0,0,0]],[1,true,["isRunwayNPC"],22],[1,true,["shouldGetRandomPose"],22],[1,2,["tripTexture","length"],22],[3,["tripTexture","0"],22,677],[3,["tripTexture","1"],22,678],[1,8,["poses","length"],22],[3,["poses","0"],22,679],[3,["poses","1"],22,680],[3,["poses","2"],22,681],[3,["poses","3"],22,682],[3,["poses","4"],22,683],[1,null,["poses","5"],22],[1,null,["poses","6"],22],[1,null,["poses","7"],22]],[[0,["8dt/KCiu1GOJ6DGYai+gUP"]]]],[[15,["mainRenderer"],[0,["0b8pE5sPNepqN6zgbDPnqa"]]]],655]],[11,0,{},37,[12,"969XNiWY5HsaEzSoCn2x/3",null,-689,[6,"acSXkVjUlKJ7lt0/w4q+OI",1,[[1,"obstacle_nonjumpable-001",["_name"],-685],[2,["_lpos"],-686,[1,0,0,-12]],[2,["_lrot"],-687,[3,0,0,0,1]],[2,["_euler"],-688,[1,0,0,0]]]],[[5,["mainRenderer"],-679,[0,["8dt/KCiu1GOJ6DGYai+gUP"]],-678,[0,["3ew1Vo2adBpqZ739+OrPkj"]]],[20,["graphicNode"],-680,[0,["e3hqu0HdxNq4e2nv3hKDvO"]]],[23,-682,-681,[0,["8fFvIyGEBFCqgGREWfd/YJ"]]],[21,["mainRenderer"],-684,-683,[0,["3ew1Vo2adBpqZ739+OrPkj"]]]],684]],[19,0,{},[18,"Parent",76,[-696],[4,"acUtatGuVN06wkU24sOluQ",null,null,null,1,0]],[12,"e892RDjrxNZISjs1LC/QQv",null,-695,[24,"1cVaU83N5Md67JoqqCBd5z",76,[[26,[0,["e892RDjrxNZISjs1LC/QQv"]],[-694]]],[[1,"Crowd",["_name"],-690],[2,["_lpos"],-691,[1,0,0.181,0.644]],[2,["_lrot"],-692,[3,0,0,0,1]],[2,["_euler"],-693,[1,0,0,0]],[1,true,["isRunwayNPC"],23],[1,true,["shouldGetRandomPose"],23],[1,2,["tripTexture","length"],23],[3,["tripTexture","0"],23,707],[3,["tripTexture","1"],23,708],[1,8,["poses","length"],23],[3,["poses","0"],23,709],[3,["poses","1"],23,710],[3,["poses","2"],23,711],[3,["poses","3"],23,712],[3,["poses","4"],23,713],[1,null,["poses","5"],23],[1,null,["poses","6"],23],[1,null,["poses","7"],23]],[[0,["8dt/KCiu1GOJ6DGYai+gUP"]]]],[[15,["mainRenderer"],[0,["0b8pE5sPNepqN6zgbDPnqa"]]]],685]],[11,0,{},37,[12,"969XNiWY5HsaEzSoCn2x/3",null,-708,[6,"428xedITFDXavS0DxU06HY",1,[[1,"obstacle_nonjumpable-002",["_name"],-704],[2,["_lpos"],-705,[1,-2,0,-7]],[2,["_lrot"],-706,[3,0,0,0,1]],[2,["_euler"],-707,[1,0,0,0]]]],[[5,["mainRenderer"],-698,[0,["8dt/KCiu1GOJ6DGYai+gUP"]],-697,[0,["3ew1Vo2adBpqZ739+OrPkj"]]],[20,["graphicNode"],-699,[0,["e3hqu0HdxNq4e2nv3hKDvO"]]],[23,-701,-700,[0,["8fFvIyGEBFCqgGREWfd/YJ"]]],[21,["mainRenderer"],-703,-702,[0,["3ew1Vo2adBpqZ739+OrPkj"]]]],714]],[19,0,{},[18,"Parent",78,[-715],[4,"acUtatGuVN06wkU24sOluQ",null,null,null,1,0]],[12,"e892RDjrxNZISjs1LC/QQv",null,-714,[24,"1cVaU83N5Md67JoqqCBd5z",78,[[26,[0,["e892RDjrxNZISjs1LC/QQv"]],[-713]]],[[1,"Crowd",["_name"],-709],[2,["_lpos"],-710,[1,0,0.181,0.644]],[2,["_lrot"],-711,[3,0,0,0,1]],[2,["_euler"],-712,[1,0,0,0]],[1,true,["isRunwayNPC"],24],[1,true,["shouldGetRandomPose"],24],[1,2,["tripTexture","length"],24],[3,["tripTexture","0"],24,737],[3,["tripTexture","1"],24,738],[1,8,["poses","length"],24],[3,["poses","0"],24,739],[3,["poses","1"],24,740],[3,["poses","2"],24,741],[3,["poses","3"],24,742],[3,["poses","4"],24,743],[1,null,["poses","5"],24],[1,null,["poses","6"],24],[1,null,["poses","7"],24]],[[0,["8dt/KCiu1GOJ6DGYai+gUP"]]]],[[15,["mainRenderer"],[0,["0b8pE5sPNepqN6zgbDPnqa"]]]],715]],[11,0,{},30,[12,"969XNiWY5HsaEzSoCn2x/3",null,-727,[6,"c60JZod+5E46XJiandIzdD",1,[[1,"obstacle_nonjumpable",["_name"],-723],[2,["_lpos"],-724,[1,2,0,-9]],[2,["_lrot"],-725,[3,0,0,0,1]],[2,["_euler"],-726,[1,0,0,0]]]],[[5,["mainRenderer"],-717,[0,["8dt/KCiu1GOJ6DGYai+gUP"]],-716,[0,["3ew1Vo2adBpqZ739+OrPkj"]]],[20,["graphicNode"],-718,[0,["e3hqu0HdxNq4e2nv3hKDvO"]]],[23,-720,-719,[0,["8fFvIyGEBFCqgGREWfd/YJ"]]],[21,["mainRenderer"],-722,-721,[0,["3ew1Vo2adBpqZ739+OrPkj"]]]],751]],[19,0,{},[18,"Parent",80,[-734],[4,"acUtatGuVN06wkU24sOluQ",null,null,null,1,0]],[12,"e892RDjrxNZISjs1LC/QQv",null,-733,[24,"1cVaU83N5Md67JoqqCBd5z",80,[[26,[0,["e892RDjrxNZISjs1LC/QQv"]],[-732]]],[[1,"Crowd",["_name"],-728],[2,["_lpos"],-729,[1,0,0.181,0.644]],[2,["_lrot"],-730,[3,0,0,0,1]],[2,["_euler"],-731,[1,0,0,0]],[1,true,["isRunwayNPC"],25],[1,true,["shouldGetRandomPose"],25],[1,2,["tripTexture","length"],25],[3,["tripTexture","0"],25,774],[3,["tripTexture","1"],25,775],[1,8,["poses","length"],25],[3,["poses","0"],25,776],[3,["poses","1"],25,777],[3,["poses","2"],25,778],[3,["poses","3"],25,779],[3,["poses","4"],25,780],[1,null,["poses","5"],25],[1,null,["poses","6"],25],[1,null,["poses","7"],25]],[[0,["8dt/KCiu1GOJ6DGYai+gUP"]]]],[[15,["mainRenderer"],[0,["0b8pE5sPNepqN6zgbDPnqa"]]]],752]],[11,0,{},30,[12,"969XNiWY5HsaEzSoCn2x/3",null,-746,[6,"acp/m4epdMDJ7GVClsRmAb",1,[[1,"obstacle_nonjumpable-001",["_name"],-742],[2,["_lpos"],-743,[1,2,0,-21]],[2,["_lrot"],-744,[3,0,0,0,1]],[2,["_euler"],-745,[1,0,0,0]]]],[[5,["mainRenderer"],-736,[0,["8dt/KCiu1GOJ6DGYai+gUP"]],-735,[0,["3ew1Vo2adBpqZ739+OrPkj"]]],[20,["graphicNode"],-737,[0,["e3hqu0HdxNq4e2nv3hKDvO"]]],[23,-739,-738,[0,["8fFvIyGEBFCqgGREWfd/YJ"]]],[21,["mainRenderer"],-741,-740,[0,["3ew1Vo2adBpqZ739+OrPkj"]]]],781]],[19,0,{},[18,"Parent",82,[-753],[4,"acUtatGuVN06wkU24sOluQ",null,null,null,1,0]],[12,"e892RDjrxNZISjs1LC/QQv",null,-752,[24,"1cVaU83N5Md67JoqqCBd5z",82,[[26,[0,["e892RDjrxNZISjs1LC/QQv"]],[-751]]],[[1,"Crowd",["_name"],-747],[2,["_lpos"],-748,[1,0,0.181,0.644]],[2,["_lrot"],-749,[3,0,0,0,1]],[2,["_euler"],-750,[1,0,0,0]],[1,true,["isRunwayNPC"],26],[1,true,["shouldGetRandomPose"],26],[1,2,["tripTexture","length"],26],[3,["tripTexture","0"],26,804],[3,["tripTexture","1"],26,805],[1,8,["poses","length"],26],[3,["poses","0"],26,806],[3,["poses","1"],26,807],[3,["poses","2"],26,808],[3,["poses","3"],26,809],[3,["poses","4"],26,810],[1,null,["poses","5"],26],[1,null,["poses","6"],26],[1,null,["poses","7"],26]],[[0,["8dt/KCiu1GOJ6DGYai+gUP"]]]],[[15,["mainRenderer"],[0,["0b8pE5sPNepqN6zgbDPnqa"]]]],782]],[11,0,{},30,[12,"969XNiWY5HsaEzSoCn2x/3",null,-765,[6,"30WV+WjV9JVquNN8qvHDIT",1,[[1,"obstacle_nonjumpable-002",["_name"],-761],[2,["_lpos"],-762,[1,-2,0,-21]],[2,["_lrot"],-763,[3,0,0,0,1]],[2,["_euler"],-764,[1,0,0,0]]]],[[5,["mainRenderer"],-755,[0,["8dt/KCiu1GOJ6DGYai+gUP"]],-754,[0,["3ew1Vo2adBpqZ739+OrPkj"]]],[20,["graphicNode"],-756,[0,["e3hqu0HdxNq4e2nv3hKDvO"]]],[23,-758,-757,[0,["8fFvIyGEBFCqgGREWfd/YJ"]]],[21,["mainRenderer"],-760,-759,[0,["3ew1Vo2adBpqZ739+OrPkj"]]]],811]],[19,0,{},[18,"Parent",84,[-772],[4,"acUtatGuVN06wkU24sOluQ",null,null,null,1,0]],[12,"e892RDjrxNZISjs1LC/QQv",null,-771,[24,"1cVaU83N5Md67JoqqCBd5z",84,[[26,[0,["e892RDjrxNZISjs1LC/QQv"]],[-770]]],[[1,"Crowd",["_name"],-766],[2,["_lpos"],-767,[1,0,0.181,0.644]],[2,["_lrot"],-768,[3,0,0,0,1]],[2,["_euler"],-769,[1,0,0,0]],[1,true,["isRunwayNPC"],27],[1,true,["shouldGetRandomPose"],27],[1,2,["tripTexture","length"],27],[3,["tripTexture","0"],27,834],[3,["tripTexture","1"],27,835],[1,8,["poses","length"],27],[3,["poses","0"],27,836],[3,["poses","1"],27,837],[3,["poses","2"],27,838],[3,["poses","3"],27,839],[3,["poses","4"],27,840],[1,null,["poses","5"],27],[1,null,["poses","6"],27],[1,null,["poses","7"],27]],[[0,["8dt/KCiu1GOJ6DGYai+gUP"]]]],[[15,["mainRenderer"],[0,["0b8pE5sPNepqN6zgbDPnqa"]]]],812]],[11,0,{},2,[12,"969XNiWY5HsaEzSoCn2x/3",null,-779,[6,"62q+Mb90hH3bK5rv0RqiJX",1,[[1,"obstacle_nonjumpable",["_name"],-775],[2,["_lpos"],-776,[1,2,0,-13]],[2,["_lrot"],-777,[3,0,0,0,1]],[2,["_euler"],-778,[1,0,0,0]]]],[[5,["mainRenderer"],44,[0,["8dt/KCiu1GOJ6DGYai+gUP"]],44,[0,["3ew1Vo2adBpqZ739+OrPkj"]]],[20,["graphicNode"],44,[0,["e3hqu0HdxNq4e2nv3hKDvO"]]],[23,-773,44,[0,["8fFvIyGEBFCqgGREWfd/YJ"]]],[21,["mainRenderer"],-774,44,[0,["3ew1Vo2adBpqZ739+OrPkj"]]]],130]],[11,0,{},2,[12,"969XNiWY5HsaEzSoCn2x/3",null,-786,[6,"29PyjFq4lIuoKHJWSGtop5",1,[[1,"obstacle_nonjumpable-001",["_name"],-782],[2,["_lpos"],-783,[1,-2,0,-13]],[2,["_lrot"],-784,[3,0,0,0,1]],[2,["_euler"],-785,[1,0,0,0]]]],[[5,["mainRenderer"],45,[0,["8dt/KCiu1GOJ6DGYai+gUP"]],45,[0,["3ew1Vo2adBpqZ739+OrPkj"]]],[20,["graphicNode"],45,[0,["e3hqu0HdxNq4e2nv3hKDvO"]]],[23,-780,45,[0,["8fFvIyGEBFCqgGREWfd/YJ"]]],[21,["mainRenderer"],-781,45,[0,["3ew1Vo2adBpqZ739+OrPkj"]]]],160]],[11,0,{},36,[12,"969XNiWY5HsaEzSoCn2x/3",null,-792,[6,"3c29lNNxZMUpHlTZ+Uxot3",1,[[1,"obstacle_jumpable",["_name"],-788],[2,["_lpos"],-789,[1,-2,0,-17]],[2,["_lrot"],-790,[3,0,0,0,1]],[2,["_euler"],-791,[1,0,0,0]]]],[[20,["graphicNode"],-787,[0,["854tChFohKeYSTZmJTQ80q"]]]],225]],[11,0,{},34,[12,"969XNiWY5HsaEzSoCn2x/3",null,-798,[6,"b17vGmYydMV6B6LonWG6Wp",1,[[1,"obstacle_jumpable",["_name"],-794],[2,["_lpos"],-795,[1,2,0,-12.525]],[2,["_lrot"],-796,[3,0,0,0,1]],[2,["_euler"],-797,[1,0,0,0]]]],[[20,["graphicNode"],-793,[0,["854tChFohKeYSTZmJTQ80q"]]]],4]],[11,0,{},34,[12,"969XNiWY5HsaEzSoCn2x/3",null,-804,[6,"af+57ALoRAwp+Le5wGAg+6",1,[[1,"obstacle_jumpable-001",["_name"],-800],[2,["_lpos"],-801,[1,-2,0,-15.525]],[2,["_lrot"],-802,[3,0,0,0,1]],[2,["_euler"],-803,[1,0,0,0]]]],[[20,["graphicNode"],-799,[0,["854tChFohKeYSTZmJTQ80q"]]]],6]],[11,0,{},31,[12,"969XNiWY5HsaEzSoCn2x/3",null,-810,[6,"0fkPlzkZ5K9rtIoSZ/rRqP",1,[[1,"obstacle_jumpable",["_name"],-806],[2,["_lpos"],-807,[1,-2,0,-16]],[2,["_lrot"],-808,[3,0,0,0,1]],[2,["_euler"],-809,[1,0,0,0]]]],[[20,["graphicNode"],-805,[0,["854tChFohKeYSTZmJTQ80q"]]]],43]],[11,0,{},31,[12,"969XNiWY5HsaEzSoCn2x/3",null,-816,[6,"58bZK70N5D7b3lzRwHU6jM",1,[[1,"obstacle_jumpable-001",["_name"],-812],[2,["_lpos"],-813,[1,2,0,-16]],[2,["_lrot"],-814,[3,0,0,0,1]],[2,["_euler"],-815,[1,0,0,0]]]],[[20,["graphicNode"],-811,[0,["854tChFohKeYSTZmJTQ80q"]]]],45]],[11,0,{},35,[12,"969XNiWY5HsaEzSoCn2x/3",null,-822,[6,"bdZ8jinGBLZIxy2VzwR8EQ",1,[[1,"obstacle_jumpable",["_name"],-818],[2,["_lpos"],-819,[1,2,0,-16]],[2,["_lrot"],-820,[3,0,0,0,1]],[2,["_euler"],-821,[1,0,0,0]]]],[[20,["graphicNode"],-817,[0,["854tChFohKeYSTZmJTQ80q"]]]],81]],[11,0,{},35,[12,"969XNiWY5HsaEzSoCn2x/3",null,-828,[6,"d8s62WYstCYJ3ISmU4Gjxg",1,[[1,"obstacle_jumpable-001",["_name"],-824],[2,["_lpos"],-825,[1,-2,0,-18]],[2,["_lrot"],-826,[3,0,0,0,1]],[2,["_euler"],-827,[1,0,0,0]]]],[[20,["graphicNode"],-823,[0,["854tChFohKeYSTZmJTQ80q"]]]],83]],[11,0,{},2,[12,"969XNiWY5HsaEzSoCn2x/3",null,-834,[6,"2ef2Aa/9FOOZIi3Z247iNp",1,[[1,"obstacle_jumpable",["_name"],-830],[2,["_lpos"],-831,[1,2,0,-8]],[2,["_lrot"],-832,[3,0,0,0,1]],[2,["_euler"],-833,[1,0,0,0]]]],[[20,["graphicNode"],-829,[0,["854tChFohKeYSTZmJTQ80q"]]]],120]],[11,0,{},2,[12,"969XNiWY5HsaEzSoCn2x/3",null,-840,[6,"6aNHTOnVtPOqPis8Su0zch",1,[[1,"obstacle_jumpable-001",["_name"],-836],[2,["_lpos"],-837,[1,-2,0,-8]],[2,["_lrot"],-838,[3,0,0,0,1]],[2,["_euler"],-839,[1,0,0,0]]]],[[20,["graphicNode"],-835,[0,["854tChFohKeYSTZmJTQ80q"]]]],122]],[11,0,{},2,[12,"969XNiWY5HsaEzSoCn2x/3",null,-846,[6,"f5Roy/DOhNMJe36iHCb803",1,[[1,"obstacle_jumpable-002",["_name"],-842],[2,["_lpos"],-843,[1,0,0,-13]],[2,["_lrot"],-844,[3,0,0,0,1]],[2,["_euler"],-845,[1,0,0,0]]]],[[20,["graphicNode"],-841,[0,["854tChFohKeYSTZmJTQ80q"]]]],124]],[11,0,{},2,[12,"969XNiWY5HsaEzSoCn2x/3",null,-852,[6,"8dsESP9YVN7Y0uSq2APDEw",1,[[1,"obstacle_jumpable-003",["_name"],-848],[2,["_lpos"],-849,[1,-2,0,-19]],[2,["_lrot"],-850,[3,0,0,0,1]],[2,["_euler"],-851,[1,0,0,0]]]],[[20,["graphicNode"],-847,[0,["854tChFohKeYSTZmJTQ80q"]]]],126]],[11,0,{},2,[12,"969XNiWY5HsaEzSoCn2x/3",null,-858,[6,"30fS8DqKZHp7oOm3YcXrQR",1,[[1,"obstacle_jumpable-004",["_name"],-854],[2,["_lpos"],-855,[1,2,0,-19]],[2,["_lrot"],-856,[3,0,0,0,1]],[2,["_euler"],-857,[1,0,0,0]]]],[[20,["graphicNode"],-853,[0,["854tChFohKeYSTZmJTQ80q"]]]],128]],[11,0,{},32,[12,"969XNiWY5HsaEzSoCn2x/3",null,-864,[6,"43iTAFkDxA/YYq5Ripe/EW",1,[[1,"obstacle_jumpable",["_name"],-860],[2,["_lpos"],-861,[1,0,0,-17]],[2,["_lrot"],-862,[3,0,0,0,1]],[2,["_euler"],-863,[1,0,0,0]]]],[[20,["graphicNode"],-859,[0,["854tChFohKeYSTZmJTQ80q"]]]],260]],[11,0,{},32,[12,"969XNiWY5HsaEzSoCn2x/3",null,-871,[6,"f68m3NBeNM0rFVbKjS2Uvu",1,[[1,"obstacle_nonjumpable",["_name"],-867],[2,["_lpos"],-868,[1,-2,0,-6]],[2,["_lrot"],-869,[3,0,0,0,1]],[2,["_euler"],-870,[1,0,0,0]]]],[[5,["mainRenderer"],50,[0,["8dt/KCiu1GOJ6DGYai+gUP"]],50,[0,["3ew1Vo2adBpqZ739+OrPkj"]]],[20,["graphicNode"],50,[0,["e3hqu0HdxNq4e2nv3hKDvO"]]],[23,-865,50,[0,["8fFvIyGEBFCqgGREWfd/YJ"]]],[21,["mainRenderer"],-866,50,[0,["3ew1Vo2adBpqZ739+OrPkj"]]]],262]],[11,0,{},29,[12,"969XNiWY5HsaEzSoCn2x/3",null,-877,[6,"f5M67Xbi1IX4YOvsjJk1oB",1,[[1,"obstacle_jumpable",["_name"],-873],[2,["_lpos"],-874,[1,0,0,-17]],[2,["_lrot"],-875,[3,0,0,0,1]],[2,["_euler"],-876,[1,0,0,0]]]],[[20,["graphicNode"],-872,[0,["854tChFohKeYSTZmJTQ80q"]]]],357]],[11,0,{},28,[12,"969XNiWY5HsaEzSoCn2x/3",null,-883,[6,"40Z3EmAXZJkaaowynv/t6I",1,[[1,"obstacle_jumpable",["_name"],-879],[2,["_lpos"],-880,[1,-2,0,-15]],[2,["_lrot"],-881,[3,0,0,0,1]],[2,["_euler"],-882,[1,0,0,0]]]],[[20,["graphicNode"],-878,[0,["854tChFohKeYSTZmJTQ80q"]]]],456]],[11,0,{},33,[12,"969XNiWY5HsaEzSoCn2x/3",null,-889,[6,"77RmJ5BP5KnI0lrNeYlN85",1,[[1,"obstacle_jumpable",["_name"],-885],[2,["_lpos"],-886,[1,0,0,-10]],[2,["_lrot"],-887,[3,0,0,0,1]],[2,["_euler"],-888,[1,0,0,0]]]],[[20,["graphicNode"],-884,[0,["854tChFohKeYSTZmJTQ80q"]]]],587]],[11,0,{},37,[12,"969XNiWY5HsaEzSoCn2x/3",null,-895,[6,"1de538g8dNqKnaN7sw8756",1,[[1,"obstacle_jumpable",["_name"],-891],[2,["_lpos"],-892,[1,2,0,-10]],[2,["_lrot"],-893,[3,0,0,0,1]],[2,["_euler"],-894,[1,0,0,0]]]],[[20,["graphicNode"],-890,[0,["854tChFohKeYSTZmJTQ80q"]]]],652]],[11,0,{},30,[12,"969XNiWY5HsaEzSoCn2x/3",null,-901,[6,"2fKOhz86lKT4POLAEdDaaa",1,[[1,"obstacle_jumpable",["_name"],-897],[2,["_lpos"],-898,[1,-2,0,-8]],[2,["_lrot"],-899,[3,0,0,0,1]],[2,["_euler"],-900,[1,0,0,0]]]],[[20,["graphicNode"],-896,[0,["854tChFohKeYSTZmJTQ80q"]]]],749]],[0,["99XOIpw/tEtZYaNHTD56XL"]],[0,["99XOIpw/tEtZYaNHTD56XL"]],[0,["99XOIpw/tEtZYaNHTD56XL"]],[0,["99XOIpw/tEtZYaNHTD56XL"]],[0,["969XNiWY5HsaEzSoCn2x/3"]],[0,["c1A9sG8V1OlqPhhySK/Coe"]],[0,["969XNiWY5HsaEzSoCn2x/3"]],[0,["c1A9sG8V1OlqPhhySK/Coe"]],[0,["969XNiWY5HsaEzSoCn2x/3"]],[0,["e892RDjrxNZISjs1LC/QQv"]],[0,["99XOIpw/tEtZYaNHTD56XL"]],[0,["99XOIpw/tEtZYaNHTD56XL"]],[0,["99XOIpw/tEtZYaNHTD56XL"]],[0,["99XOIpw/tEtZYaNHTD56XL"]],[0,["99XOIpw/tEtZYaNHTD56XL"]],[0,["969XNiWY5HsaEzSoCn2x/3"]],[0,["c1A9sG8V1OlqPhhySK/Coe"]],[0,["969XNiWY5HsaEzSoCn2x/3"]],[0,["c1A9sG8V1OlqPhhySK/Coe"]],[0,["969XNiWY5HsaEzSoCn2x/3"]],[0,["e892RDjrxNZISjs1LC/QQv"]],[0,["99XOIpw/tEtZYaNHTD56XL"]],[0,["99XOIpw/tEtZYaNHTD56XL"]],[0,["99XOIpw/tEtZYaNHTD56XL"]],[0,["66Ba72ak1JOYCB5CSozCYH"]],[0,["969XNiWY5HsaEzSoCn2x/3"]],[0,["c1A9sG8V1OlqPhhySK/Coe"]],[0,["969XNiWY5HsaEzSoCn2x/3"]],[0,["c1A9sG8V1OlqPhhySK/Coe"]],[0,["969XNiWY5HsaEzSoCn2x/3"]],[0,["e892RDjrxNZISjs1LC/QQv"]],[0,["99XOIpw/tEtZYaNHTD56XL"]],[0,["99XOIpw/tEtZYaNHTD56XL"]],[0,["99XOIpw/tEtZYaNHTD56XL"]],[0,["99XOIpw/tEtZYaNHTD56XL"]],[0,["99XOIpw/tEtZYaNHTD56XL"]],[0,["969XNiWY5HsaEzSoCn2x/3"]],[0,["c1A9sG8V1OlqPhhySK/Coe"]],[0,["969XNiWY5HsaEzSoCn2x/3"]],[0,["c1A9sG8V1OlqPhhySK/Coe"]],[0,["969XNiWY5HsaEzSoCn2x/3"]],[0,["c1A9sG8V1OlqPhhySK/Coe"]],[0,["969XNiWY5HsaEzSoCn2x/3"]],[0,["c1A9sG8V1OlqPhhySK/Coe"]],[0,["969XNiWY5HsaEzSoCn2x/3"]],[0,["c1A9sG8V1OlqPhhySK/Coe"]],[0,["969XNiWY5HsaEzSoCn2x/3"]],[0,["e892RDjrxNZISjs1LC/QQv"]],[0,["969XNiWY5HsaEzSoCn2x/3"]],[0,["e892RDjrxNZISjs1LC/QQv"]],[0,["99XOIpw/tEtZYaNHTD56XL"]],[0,["99XOIpw/tEtZYaNHTD56XL"]],[0,["99XOIpw/tEtZYaNHTD56XL"]],[0,["66Ba72ak1JOYCB5CSozCYH"]],[0,["969XNiWY5HsaEzSoCn2x/3"]],[0,["e892RDjrxNZISjs1LC/QQv"]],[0,["969XNiWY5HsaEzSoCn2x/3"]],[0,["969XNiWY5HsaEzSoCn2x/3"]],[0,["c1A9sG8V1OlqPhhySK/Coe"]],[0,["e892RDjrxNZISjs1LC/QQv"]],[0,["99XOIpw/tEtZYaNHTD56XL"]],[0,["99XOIpw/tEtZYaNHTD56XL"]],[0,["99XOIpw/tEtZYaNHTD56XL"]],[0,["99XOIpw/tEtZYaNHTD56XL"]],[0,["969XNiWY5HsaEzSoCn2x/3"]],[0,["c1A9sG8V1OlqPhhySK/Coe"]],[0,["969XNiWY5HsaEzSoCn2x/3"]],[0,["e892RDjrxNZISjs1LC/QQv"]],[0,["969XNiWY5HsaEzSoCn2x/3"]],[0,["e892RDjrxNZISjs1LC/QQv"]],[0,["969XNiWY5HsaEzSoCn2x/3"]],[0,["e892RDjrxNZISjs1LC/QQv"]],[0,["99XOIpw/tEtZYaNHTD56XL"]],[0,["99XOIpw/tEtZYaNHTD56XL"]],[0,["99XOIpw/tEtZYaNHTD56XL"]],[0,["99XOIpw/tEtZYaNHTD56XL"]],[0,["66Ba72ak1JOYCB5CSozCYH"]],[0,["969XNiWY5HsaEzSoCn2x/3"]],[0,["c1A9sG8V1OlqPhhySK/Coe"]],[0,["969XNiWY5HsaEzSoCn2x/3"]],[0,["e892RDjrxNZISjs1LC/QQv"]],[0,["969XNiWY5HsaEzSoCn2x/3"]],[0,["e892RDjrxNZISjs1LC/QQv"]],[0,["969XNiWY5HsaEzSoCn2x/3"]],[0,["e892RDjrxNZISjs1LC/QQv"]],[0,["99XOIpw/tEtZYaNHTD56XL"]],[0,["99XOIpw/tEtZYaNHTD56XL"]],[0,["99XOIpw/tEtZYaNHTD56XL"]],[0,["99XOIpw/tEtZYaNHTD56XL"]],[0,["99XOIpw/tEtZYaNHTD56XL"]],[0,["99XOIpw/tEtZYaNHTD56XL"]],[0,["99XOIpw/tEtZYaNHTD56XL"]],[0,["969XNiWY5HsaEzSoCn2x/3"]],[0,["c1A9sG8V1OlqPhhySK/Coe"]],[0,["969XNiWY5HsaEzSoCn2x/3"]],[0,["e892RDjrxNZISjs1LC/QQv"]],[0,["969XNiWY5HsaEzSoCn2x/3"]],[0,["e892RDjrxNZISjs1LC/QQv"]],[0,["99XOIpw/tEtZYaNHTD56XL"]],[0,["99XOIpw/tEtZYaNHTD56XL"]],[0,["99XOIpw/tEtZYaNHTD56XL"]],[0,["66Ba72ak1JOYCB5CSozCYH"]],[0,["969XNiWY5HsaEzSoCn2x/3"]],[0,["e892RDjrxNZISjs1LC/QQv"]],[0,["969XNiWY5HsaEzSoCn2x/3"]],[0,["e892RDjrxNZISjs1LC/QQv"]],[0,["99XOIpw/tEtZYaNHTD56XL"]],[0,["99XOIpw/tEtZYaNHTD56XL"]],[0,["99XOIpw/tEtZYaNHTD56XL"]],[0,["99XOIpw/tEtZYaNHTD56XL"]],[0,["c3cWwkhP5He5dmsvAVgOFv"]],[0,["969XNiWY5HsaEzSoCn2x/3"]],[0,["c1A9sG8V1OlqPhhySK/Coe"]],[0,["969XNiWY5HsaEzSoCn2x/3"]],[0,["e892RDjrxNZISjs1LC/QQv"]],[0,["969XNiWY5HsaEzSoCn2x/3"]],[0,["e892RDjrxNZISjs1LC/QQv"]],[0,["99XOIpw/tEtZYaNHTD56XL"]],[0,["99XOIpw/tEtZYaNHTD56XL"]],[0,["99XOIpw/tEtZYaNHTD56XL"]],[0,["969XNiWY5HsaEzSoCn2x/3"]],[0,["c1A9sG8V1OlqPhhySK/Coe"]],[0,["969XNiWY5HsaEzSoCn2x/3"]],[0,["e892RDjrxNZISjs1LC/QQv"]],[0,["969XNiWY5HsaEzSoCn2x/3"]],[0,["e892RDjrxNZISjs1LC/QQv"]],[0,["969XNiWY5HsaEzSoCn2x/3"]],[0,["e892RDjrxNZISjs1LC/QQv"]],[0,["99XOIpw/tEtZYaNHTD56XL"]],[0,["99XOIpw/tEtZYaNHTD56XL"]],[0,["99XOIpw/tEtZYaNHTD56XL"]],[0,["99XOIpw/tEtZYaNHTD56XL"]],[0,["66Ba72ak1JOYCB5CSozCYH"]],[0,["969XNiWY5HsaEzSoCn2x/3"]],[0,["c1A9sG8V1OlqPhhySK/Coe"]],[0,["969XNiWY5HsaEzSoCn2x/3"]],[0,["e892RDjrxNZISjs1LC/QQv"]],[0,["969XNiWY5HsaEzSoCn2x/3"]],[0,["e892RDjrxNZISjs1LC/QQv"]],[0,["969XNiWY5HsaEzSoCn2x/3"]],[0,["e892RDjrxNZISjs1LC/QQv"]],[11,0,{},34,[10,"99XOIpw/tEtZYaNHTD56XL",null,null,-902,[6,"ecaYmexoVA7q69Q69K7lwq",1,[[1,"basic_collectible-003",["_name"],107],[2,["_lpos"],107,[1,0,1,-12]],[2,["_lrot"],107,[3,0,0,0,1]],[2,["_euler"],107,[1,0,0,0]],[17,["_lpos"],[0,["68kW3uhlJDxJxe3kV3iMqw"]],[1,0,0,-0.093]]]],0]],[11,0,{},34,[10,"99XOIpw/tEtZYaNHTD56XL",null,null,-903,[6,"6f+NyZEBNEjpqEKvc7iRmI",1,[[1,"basic_collectible-005",["_name"],108],[2,["_lpos"],108,[1,0,1,-16]],[2,["_lrot"],108,[3,0,0,0,1]],[2,["_euler"],108,[1,0,0,0]],[17,["_lpos"],[0,["68kW3uhlJDxJxe3kV3iMqw"]],[1,0,0,-0.093]]]],1]],[11,0,{},34,[10,"99XOIpw/tEtZYaNHTD56XL",null,null,-904,[6,"3a4grWbT5D2pJUDSQK3XHd",1,[[1,"basic_collectible-007",["_name"],109],[2,["_lpos"],109,[1,-2,1,-20]],[2,["_lrot"],109,[3,0,0,0,1]],[2,["_euler"],109,[1,0,0,0]],[17,["_lpos"],[0,["68kW3uhlJDxJxe3kV3iMqw"]],[1,0,0,-0.093]]]],2]],[11,0,{},34,[10,"99XOIpw/tEtZYaNHTD56XL",null,null,-905,[6,"36FgFUDlBMLqLzWimbxeJS",1,[[1,"basic_collectible-008",["_name"],110],[2,["_lpos"],110,[1,-2,1,-24]],[2,["_lrot"],110,[3,0,0,0,1]],[2,["_euler"],110,[1,0,0,0]],[17,["_lpos"],[0,["68kW3uhlJDxJxe3kV3iMqw"]],[1,0,0,-0.093]]]],3]],[19,0,{},[18,"Parent",89,[-907],[4,"12InrzwKdCEKrV07dQs4zX",null,null,null,1,0]],[10,"c1A9sG8V1OlqPhhySK/Coe",null,null,-906,[6,"76om5tMkJAELdAAefMkO6v",89,[[1,"obstacle_graphic",["_name"],112],[2,["_lpos"],112,[1,0,0,0]],[2,["_lrot"],112,[3,0,0,0,1]],[2,["_euler"],112,[1,0,0,0]]]],5]],[19,0,{},[18,"Parent",90,[-909],[4,"12InrzwKdCEKrV07dQs4zX",null,null,null,1,0]],[10,"c1A9sG8V1OlqPhhySK/Coe",null,null,-908,[6,"76om5tMkJAELdAAefMkO6v",90,[[1,"obstacle_graphic",["_name"],114],[2,["_lpos"],114,[1,0,0,0]],[2,["_lrot"],114,[3,0,0,0,1]],[2,["_euler"],114,[1,0,0,0]]]],7]],[27,39,[7,"8fFvIyGEBFCqgGREWfd/YJ"],[11,12,13,14,15,16,17,18,19,20],[21,22,23,24,25,26,27,28,29,30]],[11,0,{},31,[10,"99XOIpw/tEtZYaNHTD56XL",null,null,-910,[6,"dat/BNLxxAR5qN2l+lPRSz",1,[[1,"basic_collectible-002",["_name"],117],[2,["_lpos"],117,[1,-2,1,-12]],[2,["_lrot"],117,[3,0,0,0,1]],[2,["_euler"],117,[1,0,0,0]],[17,["_lpos"],[0,["68kW3uhlJDxJxe3kV3iMqw"]],[1,0,0,0]]]],38]],[11,0,{},31,[10,"99XOIpw/tEtZYaNHTD56XL",null,null,-911,[6,"61bh9cXdxBwLcr0c3RVSA0",1,[[1,"basic_collectible-003",["_name"],118],[2,["_lpos"],118,[1,-2,2.5,-14]],[2,["_lrot"],118,[3,0,0,0,1]],[2,["_euler"],118,[1,0,0,0]],[17,["_lpos"],[0,["68kW3uhlJDxJxe3kV3iMqw"]],[1,0,0,0]]]],39]],[11,0,{},31,[10,"99XOIpw/tEtZYaNHTD56XL",null,null,-912,[6,"2bDt6ttRFLc5Cy7GohehjW",1,[[1,"basic_collectible-005",["_name"],119],[2,["_lpos"],119,[1,-2,3.5,-16]],[2,["_lrot"],119,[3,0,0,0,1]],[2,["_euler"],119,[1,0,0,0]],[17,["_lpos"],[0,["68kW3uhlJDxJxe3kV3iMqw"]],[1,0,0,0]]]],40]],[11,0,{},31,[10,"99XOIpw/tEtZYaNHTD56XL",null,null,-913,[6,"28BaYGYhVHZZkH41AHPMEz",1,[[1,"basic_collectible-007",["_name"],120],[2,["_lpos"],120,[1,-2,2.5,-18]],[2,["_lrot"],120,[3,0,0,0,1]],[2,["_euler"],120,[1,0,0,0]]]],41]],[11,0,{},31,[10,"99XOIpw/tEtZYaNHTD56XL",null,null,-914,[6,"81aABqQ35PNIPQXDJBG6LQ",1,[[1,"basic_collectible-008",["_name"],121],[2,["_lpos"],121,[1,-2,1,-20]],[2,["_lrot"],121,[3,0,0,0,1]],[2,["_euler"],121,[1,0,0,0]],[17,["_lpos"],[0,["68kW3uhlJDxJxe3kV3iMqw"]],[1,0,0,0]]]],42]],[19,0,{},[18,"Parent",91,[-916],[4,"12InrzwKdCEKrV07dQs4zX",null,null,null,1,0]],[10,"c1A9sG8V1OlqPhhySK/Coe",null,null,-915,[6,"76om5tMkJAELdAAefMkO6v",91,[[1,"obstacle_graphic",["_name"],123],[2,["_lpos"],123,[1,0,0,0]],[2,["_lrot"],123,[3,0,0,0,1]],[2,["_euler"],123,[1,0,0,0]]]],44]],[19,0,{},[18,"Parent",92,[-918],[4,"12InrzwKdCEKrV07dQs4zX",null,null,null,1,0]],[10,"c1A9sG8V1OlqPhhySK/Coe",null,null,-917,[6,"76om5tMkJAELdAAefMkO6v",92,[[1,"obstacle_graphic",["_name"],125],[2,["_lpos"],125,[1,0,0,0]],[2,["_lrot"],125,[3,0,0,0,1]],[2,["_euler"],125,[1,0,0,0]]]],46]],[27,41,[7,"8fFvIyGEBFCqgGREWfd/YJ"],[50,51,52,53,54,55,56,57,58,59],[60,61,62,63,64,65,66,67,68,69]],[11,0,{},35,[10,"99XOIpw/tEtZYaNHTD56XL",null,null,-919,[6,"76weHENgxCf6BhYdNStduo",1,[[1,"basic_collectible-002",["_name"],128],[2,["_lpos"],128,[1,-2,1,-9]],[2,["_lrot"],128,[3,0,0,0,1]],[2,["_euler"],128,[1,0,0,0]],[17,["_lpos"],[0,["68kW3uhlJDxJxe3kV3iMqw"]],[1,0,0,0]]]],77]],[11,0,{},35,[10,"99XOIpw/tEtZYaNHTD56XL",null,null,-920,[6,"88ztgE2bhG078ZFkuyLSF8",1,[[1,"basic_collectible-005",["_name"],129],[2,["_lpos"],129,[1,0,1,-13]],[2,["_lrot"],129,[3,0,0,0,1]],[2,["_euler"],129,[1,0,0,0]],[17,["_lpos"],[0,["68kW3uhlJDxJxe3kV3iMqw"]],[1,0,0,0]]]],78]],[11,0,{},35,[10,"99XOIpw/tEtZYaNHTD56XL",null,null,-921,[6,"ceqU8WPWhHjY5QqglEvSwD",1,[[1,"basic_collectible-008",["_name"],130],[2,["_lpos"],130,[1,0,1,-20]],[2,["_lrot"],130,[3,0,0,0,1]],[2,["_euler"],130,[1,0,0,0]],[17,["_lpos"],[0,["68kW3uhlJDxJxe3kV3iMqw"]],[1,0,0,0]]]],79]],[11,0,{},35,[10,"66Ba72ak1JOYCB5CSozCYH",null,null,-922,[6,"85nLWMIt9PYbJMBplENufJ",1,[[1,"special_collectible",["_name"],131],[2,["_lpos"],131,[1,0,1,-15]],[2,["_lrot"],131,[3,0,0,0,1]],[2,["_euler"],131,[1,0,0,0]]]],80]],[19,0,{},[18,"Parent",93,[-924],[4,"12InrzwKdCEKrV07dQs4zX",null,null,null,1,0]],[10,"c1A9sG8V1OlqPhhySK/Coe",null,null,-923,[6,"76om5tMkJAELdAAefMkO6v",93,[[1,"obstacle_graphic",["_name"],133],[2,["_lpos"],133,[1,0,0,0]],[2,["_lrot"],133,[3,0,0,0,1]],[2,["_euler"],133,[1,0,0,0]]]],82]],[19,0,{},[18,"Parent",94,[-926],[4,"12InrzwKdCEKrV07dQs4zX",null,null,null,1,0]],[10,"c1A9sG8V1OlqPhhySK/Coe",null,null,-925,[6,"76om5tMkJAELdAAefMkO6v",94,[[1,"obstacle_graphic",["_name"],135],[2,["_lpos"],135,[1,0,0,0]],[2,["_lrot"],135,[3,0,0,0,1]],[2,["_euler"],135,[1,0,0,0]]]],84]],[27,43,[7,"8fFvIyGEBFCqgGREWfd/YJ"],[88,89,90,91,92,93,94,95,96,97],[98,99,100,101,102,103,104,105,106,107]],[11,0,{},2,[10,"99XOIpw/tEtZYaNHTD56XL",null,null,-927,[6,"c1E7XUqhJKcYqa0r+YbpZ3",1,[[1,"basic_collectible-003",["_name"],138],[2,["_lpos"],138,[1,0,1,-9]],[2,["_lrot"],138,[3,0,0,0,1]],[2,["_euler"],138,[1,0,0,0]],[17,["_lpos"],[0,["68kW3uhlJDxJxe3kV3iMqw"]],[1,0,0,0]]]],115]],[11,0,{},2,[10,"99XOIpw/tEtZYaNHTD56XL",null,null,-928,[6,"4f1DEl5y5I9L0mMPS6QitF",1,[[1,"basic_collectible-004",["_name"],139],[2,["_lpos"],139,[1,0,2.5,-11]],[2,["_lrot"],139,[3,0,0,0,1]],[2,["_euler"],139,[1,0,0,0]],[17,["_lpos"],[0,["68kW3uhlJDxJxe3kV3iMqw"]],[1,0,0,0]]]],116]],[11,0,{},2,[10,"99XOIpw/tEtZYaNHTD56XL",null,null,-929,[6,"6bna4adGNE3pX7vHBP0fVc",1,[[1,"basic_collectible-006",["_name"],140],[2,["_lpos"],140,[1,0,2.5,-15]],[2,["_lrot"],140,[3,0,0,0,1]],[2,["_euler"],140,[1,0,0,0]],[17,["_lpos"],[0,["68kW3uhlJDxJxe3kV3iMqw"]],[1,0,0,0]]]],117]],[11,0,{},2,[10,"99XOIpw/tEtZYaNHTD56XL",null,null,-930,[6,"efTsKU7hhESaLRxmSmHeGW",1,[[1,"basic_collectible-007",["_name"],141],[2,["_lpos"],141,[1,0,1,-17]],[2,["_lrot"],141,[3,0,0,0,1]],[2,["_euler"],141,[1,0,0,0]],[17,["_lpos"],[0,["68kW3uhlJDxJxe3kV3iMqw"]],[1,0,0,0]]]],118]],[11,0,{},2,[10,"99XOIpw/tEtZYaNHTD56XL",null,null,-931,[6,"ad5SbXuWlIJYJYYfrsJQEn",1,[[1,"basic_collectible-005",["_name"],142],[2,["_lpos"],142,[1,0,3.5,-13]],[2,["_lrot"],142,[3,0,0,0,1]],[2,["_euler"],142,[1,0,0,0]],[17,["_lpos"],[0,["68kW3uhlJDxJxe3kV3iMqw"]],[1,0,0,0]]]],119]],[19,0,{},[18,"Parent",95,[-933],[4,"12InrzwKdCEKrV07dQs4zX",null,null,null,1,0]],[10,"c1A9sG8V1OlqPhhySK/Coe",null,null,-932,[6,"76om5tMkJAELdAAefMkO6v",95,[[1,"obstacle_graphic",["_name"],144],[2,["_lpos"],144,[1,0,0,0]],[2,["_lrot"],144,[3,0,0,0,1]],[2,["_euler"],144,[1,0,0,0]]]],121]],[19,0,{},[18,"Parent",96,[-935],[4,"12InrzwKdCEKrV07dQs4zX",null,null,null,1,0]],[10,"c1A9sG8V1OlqPhhySK/Coe",null,null,-934,[6,"76om5tMkJAELdAAefMkO6v",96,[[1,"obstacle_graphic",["_name"],146],[2,["_lpos"],146,[1,0,0,0]],[2,["_lrot"],146,[3,0,0,0,1]],[2,["_euler"],146,[1,0,0,0]]]],123]],[19,0,{},[18,"Parent",97,[-937],[4,"12InrzwKdCEKrV07dQs4zX",null,null,null,1,0]],[10,"c1A9sG8V1OlqPhhySK/Coe",null,null,-936,[6,"76om5tMkJAELdAAefMkO6v",97,[[1,"obstacle_graphic",["_name"],148],[2,["_lpos"],148,[1,0,0,0]],[2,["_lrot"],148,[3,0,0,0,1]],[2,["_euler"],148,[1,0,0,0]]]],125]],[19,0,{},[18,"Parent",98,[-939],[4,"12InrzwKdCEKrV07dQs4zX",null,null,null,1,0]],[10,"c1A9sG8V1OlqPhhySK/Coe",null,null,-938,[6,"76om5tMkJAELdAAefMkO6v",98,[[1,"obstacle_graphic",["_name"],150],[2,["_lpos"],150,[1,0,0,0]],[2,["_lrot"],150,[3,0,0,0,1]],[2,["_euler"],150,[1,0,0,0]]]],127]],[19,0,{},[18,"Parent",99,[-941],[4,"12InrzwKdCEKrV07dQs4zX",null,null,null,1,0]],[10,"c1A9sG8V1OlqPhhySK/Coe",null,null,-940,[6,"76om5tMkJAELdAAefMkO6v",99,[[1,"obstacle_graphic",["_name"],152],[2,["_lpos"],152,[1,0,0,0]],[2,["_lrot"],152,[3,0,0,0,1]],[2,["_euler"],152,[1,0,0,0]]]],129]],[27,44,[7,"8fFvIyGEBFCqgGREWfd/YJ"],[133,134,135,136,137,138,139,140,141,142],[143,144,145,146,147,148,149,150,151,152]],[27,45,[7,"8fFvIyGEBFCqgGREWfd/YJ"],[163,164,165,166,167,168,169,170,171,172],[173,174,175,176,177,178,179,180,181,182]],[11,0,{},36,[10,"99XOIpw/tEtZYaNHTD56XL",null,null,-942,[6,"e43yjiozBKEpa/mdqEz9sy",1,[[1,"basic_collectible-002",["_name"],157],[2,["_lpos"],157,[1,0,1,-5]],[2,["_lrot"],157,[3,0,0,0,1]],[2,["_euler"],157,[1,0,0,0]],[17,["_lpos"],[0,["68kW3uhlJDxJxe3kV3iMqw"]],[1,0,0,0]]]],190]],[11,0,{},36,[10,"99XOIpw/tEtZYaNHTD56XL",null,null,-943,[6,"7bGDQmNYtPtLfoorgXyx2q",1,[[1,"basic_collectible-004",["_name"],158],[2,["_lpos"],158,[1,0,1,-9]],[2,["_lrot"],158,[3,0,0,0,1]],[2,["_euler"],158,[1,0,0,0]],[17,["_lpos"],[0,["68kW3uhlJDxJxe3kV3iMqw"]],[1,0,0,0]]]],191]],[11,0,{},36,[10,"99XOIpw/tEtZYaNHTD56XL",null,null,-944,[6,"82Z9f8DxlHPo+QVtzL12VU",1,[[1,"basic_collectible-008",["_name"],159],[2,["_lpos"],159,[1,2,1,-17]],[2,["_lrot"],159,[3,0,0,0,1]],[2,["_euler"],159,[1,0,0,0]],[17,["_lpos"],[0,["68kW3uhlJDxJxe3kV3iMqw"]],[1,0,0,0]]]],192]],[11,0,{},36,[10,"66Ba72ak1JOYCB5CSozCYH",null,null,-945,[6,"0c7PoxtLlL0oJxaaVQl0Sq",1,[[1,"special_collectible-003",["_name"],160],[2,["_lpos"],160,[1,0,1,-11]],[2,["_lrot"],160,[3,0,0,0,1]],[2,["_euler"],160,[1,0,0,0]]]],193]],[27,47,[7,"8fFvIyGEBFCqgGREWfd/YJ"],[197,198,199,200,201,202,203,204,205,206],[207,208,209,210,211,212,213,214,215,216]],[19,0,{},[18,"Parent",88,[-947],[4,"12InrzwKdCEKrV07dQs4zX",null,null,null,1,0]],[10,"c1A9sG8V1OlqPhhySK/Coe",null,null,-946,[6,"76om5tMkJAELdAAefMkO6v",88,[[1,"obstacle_graphic",["_name"],165],[2,["_lpos"],165,[1,0,0,0]],[2,["_lrot"],165,[3,0,0,0,1]],[2,["_euler"],165,[1,0,0,0]]]],226]],[27,49,[7,"8fFvIyGEBFCqgGREWfd/YJ"],[229,230,231,232,233,234,235,236,237,238],[239,240,241,242,243,244,245,246,247,248]],[11,0,{},32,[10,"99XOIpw/tEtZYaNHTD56XL",null,null,-948,[6,"8aNaP0glZI45IiaSmnlysY",1,[[1,"basic_collectible-002",["_name"],167],[2,["_lpos"],167,[1,2,1,-4]],[2,["_lrot"],167,[3,0,0,0,1]],[2,["_euler"],167,[1,0,0,0]],[17,["_lpos"],[0,["68kW3uhlJDxJxe3kV3iMqw"]],[1,0,0,0]]]],256]],[11,0,{},32,[10,"99XOIpw/tEtZYaNHTD56XL",null,null,-949,[6,"5dY3FXAoZOIbTf2xIP5Ky8",1,[[1,"basic_collectible-005",["_name"],168],[2,["_lpos"],168,[1,0,1,-9]],[2,["_lrot"],168,[3,0,0,0,1]],[2,["_euler"],168,[1,0,0,0]],[17,["_lpos"],[0,["68kW3uhlJDxJxe3kV3iMqw"]],[1,0,0,0]]]],257]],[11,0,{},32,[10,"99XOIpw/tEtZYaNHTD56XL",null,null,-950,[6,"92zfQRerZH84aTA59QABD9",1,[[1,"basic_collectible-008",["_name"],169],[2,["_lpos"],169,[1,-2,1,-16]],[2,["_lrot"],169,[3,0,0,0,1]],[2,["_euler"],169,[1,0,0,0]],[17,["_lpos"],[0,["68kW3uhlJDxJxe3kV3iMqw"]],[1,0,0,0]]]],258]],[11,0,{},32,[10,"99XOIpw/tEtZYaNHTD56XL",null,null,-951,[6,"9eiUWjh0ZC4KgZeIOLiriY",1,[[1,"basic_collectible-010",["_name"],170],[2,["_lpos"],170,[1,0,1,-12]],[2,["_lrot"],170,[3,0,0,0,1]],[2,["_euler"],170,[1,0,0,0]],[17,["_lpos"],[0,["68kW3uhlJDxJxe3kV3iMqw"]],[1,0,0,0]]]],259]],[19,0,{},[18,"Parent",100,[-953],[4,"12InrzwKdCEKrV07dQs4zX",null,null,null,1,0]],[10,"c1A9sG8V1OlqPhhySK/Coe",null,null,-952,[6,"76om5tMkJAELdAAefMkO6v",100,[[1,"obstacle_graphic",["_name"],172],[2,["_lpos"],172,[1,0,0,0]],[2,["_lrot"],172,[3,0,0,0,1]],[2,["_euler"],172,[1,0,0,0]]]],261]],[27,50,[7,"8fFvIyGEBFCqgGREWfd/YJ"],[265,266,267,268,269,270,271,272,273,274],[275,276,277,278,279,280,281,282,283,284]],[27,52,[7,"8fFvIyGEBFCqgGREWfd/YJ"],[295,296,297,298,299,300,301,302,303,304],[305,306,307,308,309,310,311,312,313,314]],[27,54,[7,"8fFvIyGEBFCqgGREWfd/YJ"],[325,326,327,328,329,330,331,332,333,334],[335,336,337,338,339,340,341,342,343,344]],[11,0,{},29,[10,"99XOIpw/tEtZYaNHTD56XL",null,null,-954,[6,"6eqD3RfK5H+bnUGJIFpO9r",1,[[1,"basic_collectible-002",["_name"],179],[2,["_lpos"],179,[1,-2,1,-4]],[2,["_lrot"],179,[3,0,0,0,1]],[2,["_euler"],179,[1,0,0,0]],[17,["_lpos"],[0,["68kW3uhlJDxJxe3kV3iMqw"]],[1,0,0,0]]]],352]],[11,0,{},29,[10,"99XOIpw/tEtZYaNHTD56XL",null,null,-955,[6,"56ch84avFOK5+FV3//DYIH",1,[[1,"basic_collectible-003",["_name"],180],[2,["_lpos"],180,[1,-2,1,-7]],[2,["_lrot"],180,[3,0,0,0,1]],[2,["_euler"],180,[1,0,0,0]],[17,["_lpos"],[0,["68kW3uhlJDxJxe3kV3iMqw"]],[1,0,0,0]]]],353]],[11,0,{},29,[10,"99XOIpw/tEtZYaNHTD56XL",null,null,-956,[6,"ff4eBqUQdGvpraS+ZtFeIJ",1,[[1,"basic_collectible-005",["_name"],181],[2,["_lpos"],181,[1,0,1,-10]],[2,["_lrot"],181,[3,0,0,0,1]],[2,["_euler"],181,[1,0,0,0]],[17,["_lpos"],[0,["68kW3uhlJDxJxe3kV3iMqw"]],[1,0,0,0]]]],354]],[11,0,{},29,[10,"99XOIpw/tEtZYaNHTD56XL",null,null,-957,[6,"cdNcVbk2ZDaJVtetlkDPm3",1,[[1,"basic_collectible-008",["_name"],182],[2,["_lpos"],182,[1,2,1,-17]],[2,["_lrot"],182,[3,0,0,0,1]],[2,["_euler"],182,[1,0,0,0]],[17,["_lpos"],[0,["68kW3uhlJDxJxe3kV3iMqw"]],[1,0,0,0]],[17,["_lpos"],[0,["7bQsG5pNJIOaV8UqJkPq/8"]],[1,0,-0.656,-0.024]]]],355]],[11,0,{},29,[10,"66Ba72ak1JOYCB5CSozCYH",null,null,-958,[6,"a4IO23x99L149aupGzqF8F",1,[[1,"special_collectible-004",["_name"],183],[2,["_lpos"],183,[1,0,1,-12]],[2,["_lrot"],183,[3,0,0,0,1]],[2,["_euler"],183,[1,0,0,0]]]],356]],[19,0,{},[18,"Parent",102,[-960],[4,"12InrzwKdCEKrV07dQs4zX",null,null,null,1,0]],[10,"c1A9sG8V1OlqPhhySK/Coe",null,null,-959,[6,"76om5tMkJAELdAAefMkO6v",102,[[1,"obstacle_graphic",["_name"],185],[2,["_lpos"],185,[1,0,0,0]],[2,["_lrot"],185,[3,0,0,0,1]],[2,["_euler"],185,[1,0,0,0]]]],358]],[27,56,[7,"8fFvIyGEBFCqgGREWfd/YJ"],[362,363,364,365,366,367,368,369,370,371],[372,373,374,375,376,377,378,379,380,381]],[27,58,[7,"8fFvIyGEBFCqgGREWfd/YJ"],[392,393,394,395,396,397,398,399,400,401],[402,403,404,405,406,407,408,409,410,411]],[27,60,[7,"8fFvIyGEBFCqgGREWfd/YJ"],[422,423,424,425,426,427,428,429,430,431],[432,433,434,435,436,437,438,439,440,441]],[11,0,{},28,[10,"99XOIpw/tEtZYaNHTD56XL",null,null,-961,[6,"a0dwRWiAZGdIx+JkaFd0jC",1,[[1,"basic_collectible-003",["_name"],192],[2,["_lpos"],192,[1,-2,1,-10]],[2,["_lrot"],192,[3,0,0,0,1]],[2,["_euler"],192,[1,0,0,0]],[17,["_lpos"],[0,["68kW3uhlJDxJxe3kV3iMqw"]],[1,0,0,0]]]],449]],[11,0,{},28,[10,"99XOIpw/tEtZYaNHTD56XL",null,null,-962,[6,"02vu/DQN9PrZ7qzFPCYIh7",1,[[1,"basic_collectible-004",["_name"],193],[2,["_lpos"],193,[1,-2,2.5,-12]],[2,["_lrot"],193,[3,0,0,0,1]],[2,["_euler"],193,[1,0,0,0]],[17,["_lpos"],[0,["68kW3uhlJDxJxe3kV3iMqw"]],[1,0,0,0]]]],450]],[11,0,{},28,[10,"99XOIpw/tEtZYaNHTD56XL",null,null,-963,[6,"7d3Atw4rVAtY6MoLxVuYsS",1,[[1,"basic_collectible-007",["_name"],194],[2,["_lpos"],194,[1,-2,1,-18]],[2,["_lrot"],194,[3,0,0,0,1]],[2,["_euler"],194,[1,0,0,0]],[17,["_lpos"],[0,["68kW3uhlJDxJxe3kV3iMqw"]],[1,0,0,0]]]],451]],[11,0,{},28,[10,"99XOIpw/tEtZYaNHTD56XL",null,null,-964,[6,"6dftlIXR1CiI/7BOXjwEj+",1,[[1,"basic_collectible-010",["_name"],195],[2,["_lpos"],195,[1,-2,2.5,-16]],[2,["_lrot"],195,[3,0,0,0,1]],[2,["_euler"],195,[1,0,0,0]],[17,["_lpos"],[0,["68kW3uhlJDxJxe3kV3iMqw"]],[1,0,0,0]]]],452]],[11,0,{},28,[10,"99XOIpw/tEtZYaNHTD56XL",null,null,-965,[6,"9cq/3NFahJ1plmXGoMKwzc",1,[[1,"basic_collectible-005",["_name"],196],[2,["_lpos"],196,[1,-2,1,-6]],[2,["_lrot"],196,[3,0,0,0,1]],[2,["_euler"],196,[1,0,0,0]],[17,["_lpos"],[0,["68kW3uhlJDxJxe3kV3iMqw"]],[1,0,0,0]]]],453]],[11,0,{},28,[10,"99XOIpw/tEtZYaNHTD56XL",null,null,-966,[6,"b6iq4Lrz5Gxq1KF7kkyTKJ",1,[[1,"basic_collectible-009",["_name"],197],[2,["_lpos"],197,[1,0,1,-2]],[2,["_lrot"],197,[3,0,0,0,1]],[2,["_euler"],197,[1,0,0,0]],[17,["_lpos"],[0,["68kW3uhlJDxJxe3kV3iMqw"]],[1,0,0,0]]]],454]],[11,0,{},28,[10,"99XOIpw/tEtZYaNHTD56XL",null,null,-967,[6,"27rW7mVG5DdZo9+9Xcw/m3",1,[[1,"basic_collectible-011",["_name"],198],[2,["_lpos"],198,[1,-2,3.5,-14]],[2,["_lrot"],198,[3,0,0,0,1]],[2,["_euler"],198,[1,0,0,0]],[17,["_lpos"],[0,["68kW3uhlJDxJxe3kV3iMqw"]],[1,0,0,0]]]],455]],[19,0,{},[18,"Parent",103,[-969],[4,"12InrzwKdCEKrV07dQs4zX",null,null,null,1,0]],[10,"c1A9sG8V1OlqPhhySK/Coe",null,null,-968,[6,"76om5tMkJAELdAAefMkO6v",103,[[1,"obstacle_graphic",["_name"],200],[2,["_lpos"],200,[1,0,0,0]],[2,["_lrot"],200,[3,0,0,0,1]],[2,["_euler"],200,[1,0,0,0]]]],457]],[27,62,[7,"8fFvIyGEBFCqgGREWfd/YJ"],[461,462,463,464,465,466,467,468,469,470],[471,472,473,474,475,476,477,478,479,480]],[27,64,[7,"8fFvIyGEBFCqgGREWfd/YJ"],[491,492,493,494,495,496,497,498,499,500],[501,502,503,504,505,506,507,508,509,510]],[11,0,{},65,[10,"99XOIpw/tEtZYaNHTD56XL",null,null,-970,[6,"73ekQteRVJJaOQjZNYnLf5",1,[[1,"basic_collectible-003",["_name"],205],[2,["_lpos"],205,[1,0,1,-16]],[2,["_lrot"],205,[3,0,0,0,1]],[2,["_euler"],205,[1,0,0,0]],[17,["_lpos"],[0,["68kW3uhlJDxJxe3kV3iMqw"]],[1,0,0,0]]]],518]],[11,0,{},65,[10,"99XOIpw/tEtZYaNHTD56XL",null,null,-971,[6,"caunOHPClCVqpx5cHm7v5I",1,[[1,"basic_collectible-007",["_name"],206],[2,["_lpos"],206,[1,0,1,-10]],[2,["_lrot"],206,[3,0,0,0,1]],[2,["_euler"],206,[1,0,0,0]],[17,["_lpos"],[0,["68kW3uhlJDxJxe3kV3iMqw"]],[1,0,0,0]]]],519]],[11,0,{},65,[10,"99XOIpw/tEtZYaNHTD56XL",null,null,-972,[6,"4fWhWAZi1GBbAJPxh/Rj3T",1,[[1,"basic_collectible-009",["_name"],207],[2,["_lpos"],207,[1,0,1,-5]],[2,["_lrot"],207,[3,0,0,0,1]],[2,["_euler"],207,[1,0,0,0]],[17,["_lpos"],[0,["68kW3uhlJDxJxe3kV3iMqw"]],[1,0,0,0]]]],520]],[11,0,{},65,[10,"66Ba72ak1JOYCB5CSozCYH",null,null,-973,[6,"a3IGqyLyFC3LMXP6hbyt9H",1,[[1,"special_collectible-005",["_name"],208],[2,["_lpos"],208,[1,0,1,-18]],[2,["_lrot"],208,[3,0,0,0,1]],[2,["_euler"],208,[1,0,0,0]]]],521]],[27,67,[7,"8fFvIyGEBFCqgGREWfd/YJ"],[525,526,527,528,529,530,531,532,533,534],[535,536,537,538,539,540,541,542,543,544]],[27,69,[7,"8fFvIyGEBFCqgGREWfd/YJ"],[555,556,557,558,559,560,561,562,563,564],[565,566,567,568,569,570,571,572,573,574]],[11,0,{},33,[10,"99XOIpw/tEtZYaNHTD56XL",null,null,-974,[6,"19Z3yLp7BAD7RLmbJ9Orcb",1,[[1,"basic_collectible-003",["_name"],213],[2,["_lpos"],213,[1,2,1,-6]],[2,["_lrot"],213,[3,0,0,0,1]],[2,["_euler"],213,[1,0,0,0]],[17,["_lpos"],[0,["68kW3uhlJDxJxe3kV3iMqw"]],[1,0,0,0]]]],582]],[11,0,{},33,[10,"99XOIpw/tEtZYaNHTD56XL",null,null,-975,[6,"970ZVreZFCLqnXszq42o9J",1,[[1,"basic_collectible-004",["_name"],214],[2,["_lpos"],214,[1,2,2.5,-8]],[2,["_lrot"],214,[3,0,0,0,1]],[2,["_euler"],214,[1,0,0,0]],[17,["_lpos"],[0,["68kW3uhlJDxJxe3kV3iMqw"]],[1,0,0,0]]]],583]],[11,0,{},33,[10,"99XOIpw/tEtZYaNHTD56XL",null,null,-976,[6,"31LOxF+59NJ5t3g3xfuywR",1,[[1,"basic_collectible-007",["_name"],215],[2,["_lpos"],215,[1,2,1,-14]],[2,["_lrot"],215,[3,0,0,0,1]],[2,["_euler"],215,[1,0,0,0]],[17,["_lpos"],[0,["68kW3uhlJDxJxe3kV3iMqw"]],[1,0,0,0]]]],584]],[11,0,{},33,[10,"99XOIpw/tEtZYaNHTD56XL",null,null,-977,[6,"0eEBTfSMVLtIetBAQZIu7j",1,[[1,"basic_collectible-010",["_name"],216],[2,["_lpos"],216,[1,2,2.5,-12]],[2,["_lrot"],216,[3,0,0,0,1]],[2,["_euler"],216,[1,0,0,0]],[17,["_lpos"],[0,["68kW3uhlJDxJxe3kV3iMqw"]],[1,0,0,0]]]],585]],[11,0,{},33,[10,"c3cWwkhP5He5dmsvAVgOFv",null,null,-978,[6,"15477hoxJBHY6XDGlgTxYv",1,[[1,"power_up-001",["_name"],217],[2,["_lpos"],217,[1,2,3.5,-10]],[2,["_lrot"],217,[3,0,0,0,1]],[2,["_euler"],217,[1,0,0,0]]]],586]],[19,0,{},[18,"Parent",104,[-980],[4,"12InrzwKdCEKrV07dQs4zX",null,null,null,1,0]],[10,"c1A9sG8V1OlqPhhySK/Coe",null,null,-979,[6,"76om5tMkJAELdAAefMkO6v",104,[[1,"obstacle_graphic",["_name"],219],[2,["_lpos"],219,[1,0,0,0]],[2,["_lrot"],219,[3,0,0,0,1]],[2,["_euler"],219,[1,0,0,0]]]],588]],[27,71,[7,"8fFvIyGEBFCqgGREWfd/YJ"],[592,593,594,595,596,597,598,599,600,601],[602,603,604,605,606,607,608,609,610,611]],[27,73,[7,"8fFvIyGEBFCqgGREWfd/YJ"],[622,623,624,625,626,627,628,629,630,631],[632,633,634,635,636,637,638,639,640,641]],[11,0,{},37,[10,"99XOIpw/tEtZYaNHTD56XL",null,null,-981,[6,"81qft4ZelFcanbce55UDLc",1,[[1,"basic_collectible-002",["_name"],224],[2,["_lpos"],224,[1,-2,1,-13]],[2,["_lrot"],224,[3,0,0,0,1]],[2,["_euler"],224,[1,0,0,0]],[17,["_lpos"],[0,["68kW3uhlJDxJxe3kV3iMqw"]],[1,0,0,0]]]],649]],[11,0,{},37,[10,"99XOIpw/tEtZYaNHTD56XL",null,null,-982,[6,"5emtO8J2JDQ6L3omLb96et",1,[[1,"basic_collectible-006",["_name"],225],[2,["_lpos"],225,[1,0,1,-9]],[2,["_lrot"],225,[3,0,0,0,1]],[2,["_euler"],225,[1,0,0,0]],[17,["_lpos"],[0,["68kW3uhlJDxJxe3kV3iMqw"]],[1,0,0,0]]]],650]],[11,0,{},37,[10,"99XOIpw/tEtZYaNHTD56XL",null,null,-983,[6,"9fWfM/yuNAKoNrqPcZ5HJQ",1,[[1,"basic_collectible-009",["_name"],226],[2,["_lpos"],226,[1,2,1,-3]],[2,["_lrot"],226,[3,0,0,0,1]],[2,["_euler"],226,[1,0,0,0]],[17,["_lpos"],[0,["68kW3uhlJDxJxe3kV3iMqw"]],[1,0,0,0]]]],651]],[19,0,{},[18,"Parent",105,[-985],[4,"12InrzwKdCEKrV07dQs4zX",null,null,null,1,0]],[10,"c1A9sG8V1OlqPhhySK/Coe",null,null,-984,[6,"76om5tMkJAELdAAefMkO6v",105,[[1,"obstacle_graphic",["_name"],228],[2,["_lpos"],228,[1,0,0,0]],[2,["_lrot"],228,[3,0,0,0,1]],[2,["_euler"],228,[1,0,0,0]]]],653]],[27,75,[7,"8fFvIyGEBFCqgGREWfd/YJ"],[657,658,659,660,661,662,663,664,665,666],[667,668,669,670,671,672,673,674,675,676]],[27,77,[7,"8fFvIyGEBFCqgGREWfd/YJ"],[687,688,689,690,691,692,693,694,695,696],[697,698,699,700,701,702,703,704,705,706]],[27,79,[7,"8fFvIyGEBFCqgGREWfd/YJ"],[717,718,719,720,721,722,723,724,725,726],[727,728,729,730,731,732,733,734,735,736]],[11,0,{},30,[10,"99XOIpw/tEtZYaNHTD56XL",null,null,-986,[6,"d6Z9M+5zFBbIWtin4Wa1cl",1,[[1,"basic_collectible-007",["_name"],235],[2,["_lpos"],235,[1,0,1,-10]],[2,["_lrot"],235,[3,0,0,0,1]],[2,["_euler"],235,[1,0,0,0]],[17,["_lpos"],[0,["68kW3uhlJDxJxe3kV3iMqw"]],[1,0,0,0]]]],744]],[11,0,{},30,[10,"99XOIpw/tEtZYaNHTD56XL",null,null,-987,[6,"3eK35LE3lEIJi76u0/fVjt",1,[[1,"basic_collectible-009",["_name"],236],[2,["_lpos"],236,[1,0,1,-6]],[2,["_lrot"],236,[3,0,0,0,1]],[2,["_euler"],236,[1,0,0,0]],[17,["_lpos"],[0,["68kW3uhlJDxJxe3kV3iMqw"]],[1,0,0,0]]]],745]],[11,0,{},30,[10,"99XOIpw/tEtZYaNHTD56XL",null,null,-988,[6,"d1X5K5/8tEyZy19BYunX7L",1,[[1,"basic_collectible-004",["_name"],237],[2,["_lpos"],237,[1,0,1,-14]],[2,["_lrot"],237,[3,0,0,0,1]],[2,["_euler"],237,[1,0,0,0]],[17,["_lpos"],[0,["68kW3uhlJDxJxe3kV3iMqw"]],[1,0,0,0]]]],746]],[11,0,{},30,[10,"99XOIpw/tEtZYaNHTD56XL",null,null,-989,[6,"f37ulZxl9C85YsIJGTXf8u",1,[[1,"basic_collectible-006",["_name"],238],[2,["_lpos"],238,[1,0,1,-18]],[2,["_lrot"],238,[3,0,0,0,1]],[2,["_euler"],238,[1,0,0,0]],[17,["_lpos"],[0,["68kW3uhlJDxJxe3kV3iMqw"]],[1,0,0,0]]]],747]],[11,0,{},30,[10,"66Ba72ak1JOYCB5CSozCYH",null,null,-990,[6,"74R8BIu9hId5GPSxau7kbp",1,[[1,"special_collectible-006",["_name"],239],[2,["_lpos"],239,[1,0,1,-4]],[2,["_lrot"],239,[3,0,0,0,1]],[2,["_euler"],239,[1,0,0,0]]]],748]],[19,0,{},[18,"Parent",106,[-992],[4,"12InrzwKdCEKrV07dQs4zX",null,null,null,1,0]],[10,"c1A9sG8V1OlqPhhySK/Coe",null,null,-991,[6,"76om5tMkJAELdAAefMkO6v",106,[[1,"obstacle_graphic",["_name"],241],[2,["_lpos"],241,[1,0,0,0]],[2,["_lrot"],241,[3,0,0,0,1]],[2,["_euler"],241,[1,0,0,0]]]],750]],[27,81,[7,"8fFvIyGEBFCqgGREWfd/YJ"],[754,755,756,757,758,759,760,761,762,763],[764,765,766,767,768,769,770,771,772,773]],[27,83,[7,"8fFvIyGEBFCqgGREWfd/YJ"],[784,785,786,787,788,789,790,791,792,793],[794,795,796,797,798,799,800,801,802,803]],[27,85,[7,"8fFvIyGEBFCqgGREWfd/YJ"],[814,815,816,817,818,819,820,821,822,823],[824,825,826,827,828,829,830,831,832,833]],[28,"Quad<ModelComponent>",[22,"Quad",39,[-993],[4,"e3hqu0HdxNq4e2nv3hKDvO",null,null,null,1,0],[1,0,1.45,0],[1,2.7,2.7,2.7]],[7,"3ew1Vo2adBpqZ739+OrPkj"],[10],[9]],[28,"Quad<ModelComponent>",[22,"Quad",41,[-994],[4,"e3hqu0HdxNq4e2nv3hKDvO",null,null,null,1,0],[1,0,1.45,0],[1,2.7,2.7,2.7]],[7,"3ew1Vo2adBpqZ739+OrPkj"],[49],[9]],[28,"Quad<ModelComponent>",[22,"Quad",43,[-995],[4,"e3hqu0HdxNq4e2nv3hKDvO",null,null,null,1,0],[1,0,1.45,0],[1,2.7,2.7,2.7]],[7,"3ew1Vo2adBpqZ739+OrPkj"],[87],[9]],[28,"Quad<ModelComponent>",[22,"Quad",44,[-996],[4,"e3hqu0HdxNq4e2nv3hKDvO",null,null,null,1,0],[1,0,1.45,0],[1,2.7,2.7,2.7]],[7,"3ew1Vo2adBpqZ739+OrPkj"],[132],[9]],[28,"Quad<ModelComponent>",[22,"Quad",45,[-997],[4,"e3hqu0HdxNq4e2nv3hKDvO",null,null,null,1,0],[1,0,1.45,0],[1,2.7,2.7,2.7]],[7,"3ew1Vo2adBpqZ739+OrPkj"],[162],[9]],[28,"Quad<ModelComponent>",[22,"Quad",47,[-998],[4,"e3hqu0HdxNq4e2nv3hKDvO",null,null,null,1,0],[1,0,1.45,0],[1,2.7,2.7,2.7]],[7,"3ew1Vo2adBpqZ739+OrPkj"],[196],[9]],[28,"Quad<ModelComponent>",[22,"Quad",49,[-999],[4,"e3hqu0HdxNq4e2nv3hKDvO",null,null,null,1,0],[1,0,1.45,0],[1,2.7,2.7,2.7]],[7,"3ew1Vo2adBpqZ739+OrPkj"],[228],[9]],[28,"Quad<ModelComponent>",[22,"Quad",50,[-1000],[4,"e3hqu0HdxNq4e2nv3hKDvO",null,null,null,1,0],[1,0,1.45,0],[1,2.7,2.7,2.7]],[7,"3ew1Vo2adBpqZ739+OrPkj"],[264],[9]],[28,"Quad<ModelComponent>",[22,"Quad",52,[-1001],[4,"e3hqu0HdxNq4e2nv3hKDvO",null,null,null,1,0],[1,0,1.45,0],[1,2.7,2.7,2.7]],[7,"3ew1Vo2adBpqZ739+OrPkj"],[294],[9]],[28,"Quad<ModelComponent>",[22,"Quad",54,[-1002],[4,"e3hqu0HdxNq4e2nv3hKDvO",null,null,null,1,0],[1,0,1.45,0],[1,2.7,2.7,2.7]],[7,"3ew1Vo2adBpqZ739+OrPkj"],[324],[9]],[28,"Quad<ModelComponent>",[22,"Quad",56,[-1003],[4,"e3hqu0HdxNq4e2nv3hKDvO",null,null,null,1,0],[1,0,1.45,0],[1,2.7,2.7,2.7]],[7,"3ew1Vo2adBpqZ739+OrPkj"],[361],[9]],[28,"Quad<ModelComponent>",[22,"Quad",58,[-1004],[4,"e3hqu0HdxNq4e2nv3hKDvO",null,null,null,1,0],[1,0,1.45,0],[1,2.7,2.7,2.7]],[7,"3ew1Vo2adBpqZ739+OrPkj"],[391],[9]],[28,"Quad<ModelComponent>",[22,"Quad",60,[-1005],[4,"e3hqu0HdxNq4e2nv3hKDvO",null,null,null,1,0],[1,0,1.45,0],[1,2.7,2.7,2.7]],[7,"3ew1Vo2adBpqZ739+OrPkj"],[421],[9]],[28,"Quad<ModelComponent>",[22,"Quad",62,[-1006],[4,"e3hqu0HdxNq4e2nv3hKDvO",null,null,null,1,0],[1,0,1.45,0],[1,2.7,2.7,2.7]],[7,"3ew1Vo2adBpqZ739+OrPkj"],[460],[9]],[28,"Quad<ModelComponent>",[22,"Quad",64,[-1007],[4,"e3hqu0HdxNq4e2nv3hKDvO",null,null,null,1,0],[1,0,1.45,0],[1,2.7,2.7,2.7]],[7,"3ew1Vo2adBpqZ739+OrPkj"],[490],[9]],[28,"Quad<ModelComponent>",[22,"Quad",67,[-1008],[4,"e3hqu0HdxNq4e2nv3hKDvO",null,null,null,1,0],[1,0,1.45,0],[1,2.7,2.7,2.7]],[7,"3ew1Vo2adBpqZ739+OrPkj"],[524],[9]],[28,"Quad<ModelComponent>",[22,"Quad",69,[-1009],[4,"e3hqu0HdxNq4e2nv3hKDvO",null,null,null,1,0],[1,0,1.45,0],[1,2.7,2.7,2.7]],[7,"3ew1Vo2adBpqZ739+OrPkj"],[554],[9]],[28,"Quad<ModelComponent>",[22,"Quad",71,[-1010],[4,"e3hqu0HdxNq4e2nv3hKDvO",null,null,null,1,0],[1,0,1.45,0],[1,2.7,2.7,2.7]],[7,"3ew1Vo2adBpqZ739+OrPkj"],[591],[9]],[28,"Quad<ModelComponent>",[22,"Quad",73,[-1011],[4,"e3hqu0HdxNq4e2nv3hKDvO",null,null,null,1,0],[1,0,1.45,0],[1,2.7,2.7,2.7]],[7,"3ew1Vo2adBpqZ739+OrPkj"],[621],[9]],[28,"Quad<ModelComponent>",[22,"Quad",75,[-1012],[4,"e3hqu0HdxNq4e2nv3hKDvO",null,null,null,1,0],[1,0,1.45,0],[1,2.7,2.7,2.7]],[7,"3ew1Vo2adBpqZ739+OrPkj"],[656],[9]],[28,"Quad<ModelComponent>",[22,"Quad",77,[-1013],[4,"e3hqu0HdxNq4e2nv3hKDvO",null,null,null,1,0],[1,0,1.45,0],[1,2.7,2.7,2.7]],[7,"3ew1Vo2adBpqZ739+OrPkj"],[686],[9]],[28,"Quad<ModelComponent>",[22,"Quad",79,[-1014],[4,"e3hqu0HdxNq4e2nv3hKDvO",null,null,null,1,0],[1,0,1.45,0],[1,2.7,2.7,2.7]],[7,"3ew1Vo2adBpqZ739+OrPkj"],[716],[9]],[28,"Quad<ModelComponent>",[22,"Quad",81,[-1015],[4,"e3hqu0HdxNq4e2nv3hKDvO",null,null,null,1,0],[1,0,1.45,0],[1,2.7,2.7,2.7]],[7,"3ew1Vo2adBpqZ739+OrPkj"],[753],[9]],[28,"Quad<ModelComponent>",[22,"Quad",83,[-1016],[4,"e3hqu0HdxNq4e2nv3hKDvO",null,null,null,1,0],[1,0,1.45,0],[1,2.7,2.7,2.7]],[7,"3ew1Vo2adBpqZ739+OrPkj"],[783],[9]],[28,"Quad<ModelComponent>",[22,"Quad",85,[-1017],[4,"e3hqu0HdxNq4e2nv3hKDvO",null,null,null,1,0],[1,0,1.45,0],[1,2.7,2.7,2.7]],[7,"3ew1Vo2adBpqZ739+OrPkj"],[813],[9]]],0,[0,-1,84,0,-2,82,0,-3,80,0,-4,106,0,-5,341,0,-6,340,0,-7,339,0,-8,338,0,-9,337,0,-10,78,0,-11,76,0,-12,74,0,-13,105,0,-14,332,0,-15,331,0,-16,330,0,-17,72,0,-18,70,0,-19,104,0,-20,326,0,-21,325,0,-22,324,0,-23,323,0,-24,322,0,-25,68,0,-26,66,0,-27,319,0,-28,318,0,-29,317,0,-30,316,0,-31,63,0,-32,61,0,-33,103,0,-34,312,0,-35,311,0,-36,310,0,-37,309,0,-38,308,0,-39,307,0,-40,306,0,-41,59,0,-42,57,0,-43,55,0,-44,102,0,-45,301,0,-46,300,0,-47,299,0,-48,298,0,-49,297,0,-50,53,0,-51,51,0,-52,101,0,-53,100,0,-54,292,0,-55,291,0,-56,290,0,-57,289,0,-58,88,0,-59,48,0,-60,46,0,-61,285,0,-62,284,0,-63,283,0,-64,282,0,-65,87,0,-66,86,0,-67,99,0,-68,98,0,-69,97,0,-70,96,0,-71,95,0,-72,274,0,-73,273,0,-74,272,0,-75,271,0,-76,270,0,-77,42,0,-78,94,0,-79,93,0,-80,266,0,-81,265,0,-82,264,0,-83,263,0,-84,40,0,-85,92,0,-86,91,0,-87,259,0,-88,258,0,-89,257,0,-90,256,0,-91,255,0,-92,38,0,-93,90,0,-94,89,0,-95,251,0,-96,250,0,-97,249,0,-98,248,0,3,38,0,5,38,0,3,38,0,5,38,0,3,40,0,5,40,0,3,40,0,5,40,0,3,42,0,5,42,0,3,42,0,5,42,0,3,86,0,5,86,0,3,87,0,5,86,0,3,46,0,5,46,0,3,46,0,5,46,0,3,48,0,5,48,0,3,48,0,5,48,0,3,51,0,5,51,0,3,51,0,5,51,0,3,53,0,5,53,0,3,53,0,5,53,0,3,55,0,5,55,0,3,55,0,5,55,0,3,57,0,5,57,0,3,57,0,5,57,0,3,59,0,5,59,0,3,59,0,5,59,0,3,61,0,5,61,0,3,61,0,5,61,0,3,63,0,5,63,0,3,63,0,5,63,0,3,66,0,5,66,0,3,66,0,5,66,0,3,68,0,5,68,0,3,68,0,5,68,0,3,70,0,5,70,0,3,70,0,5,70,0,3,72,0,5,72,0,3,72,0,5,72,0,3,74,0,5,74,0,3,74,0,5,74,0,3,76,0,5,76,0,3,76,0,5,76,0,3,78,0,5,78,0,3,78,0,5,78,0,3,80,0,5,80,0,3,80,0,5,80,0,3,82,0,5,82,0,3,82,0,5,82,0,3,84,0,5,84,0,3,84,0,5,84,0,4,1,0,2,1,0,-1,34,0,-2,31,0,-3,35,0,-4,2,0,-5,36,0,-6,32,0,-7,29,0,-8,28,0,-9,65,0,-10,33,0,-11,37,0,-12,30,0,2,2,0,2,2,0,-1,270,0,-2,271,0,-3,272,0,-4,273,0,-5,274,0,-6,95,0,-7,96,0,-8,97,0,-9,98,0,-10,99,0,-11,86,0,-12,87,0,2,28,0,2,28,0,-1,306,0,-2,307,0,-3,308,0,-4,309,0,-5,310,0,-6,311,0,-7,312,0,-8,103,0,-9,61,0,-10,63,0,2,29,0,2,29,0,-1,297,0,-2,298,0,-3,299,0,-4,300,0,-5,301,0,-6,102,0,-7,55,0,-8,57,0,-9,59,0,2,30,0,2,30,0,-1,337,0,-2,338,0,-3,339,0,-4,340,0,-5,341,0,-6,106,0,-7,80,0,-8,82,0,-9,84,0,2,31,0,2,31,0,-1,255,0,-2,256,0,-3,257,0,-4,258,0,-5,259,0,-6,91,0,-7,92,0,-8,40,0,2,32,0,2,32,0,-1,289,0,-2,290,0,-3,291,0,-4,292,0,-5,100,0,-6,101,0,-7,51,0,-8,53,0,2,33,0,2,33,0,-1,322,0,-2,323,0,-3,324,0,-4,325,0,-5,326,0,-6,104,0,-7,70,0,-8,72,0,2,34,0,2,34,0,-1,248,0,-2,249,0,-3,250,0,-4,251,0,-5,89,0,-6,90,0,-7,38,0,2,35,0,2,35,0,-1,263,0,-2,264,0,-3,265,0,-4,266,0,-5,93,0,-6,94,0,-7,42,0,2,36,0,2,36,0,-1,282,0,-2,283,0,-3,284,0,-4,285,0,-5,46,0,-6,48,0,-7,88,0,2,37,0,2,37,0,-1,330,0,-2,331,0,-3,332,0,-4,105,0,-5,74,0,-6,76,0,-7,78,0,3,39,0,5,39,0,3,39,0,3,39,0,5,254,0,3,39,0,5,254,0,1,115,0,1,115,0,1,115,0,1,115,0,4,38,0,1,116,0,1,116,0,1,116,0,1,116,0,-1,254,0,4,39,0,-1,39,0,3,41,0,5,41,0,3,41,0,3,41,0,5,262,0,3,41,0,5,262,0,1,126,0,1,126,0,1,126,0,1,126,0,4,40,0,1,127,0,1,127,0,1,127,0,1,127,0,-1,262,0,4,41,0,-1,41,0,3,43,0,5,43,0,3,43,0,3,43,0,5,269,0,3,43,0,5,269,0,1,136,0,1,136,0,1,136,0,1,136,0,4,42,0,1,137,0,1,137,0,1,137,0,1,137,0,-1,269,0,4,43,0,-1,43,0,1,154,0,1,154,0,1,154,0,1,154,0,-1,280,0,27,86,0,4,44,0,-1,44,0,12,86,0,1,156,0,1,156,0,1,156,0,1,156,0,-1,281,0,27,87,0,4,45,0,-1,45,0,12,87,0,3,47,0,5,47,0,3,47,0,3,47,0,5,286,0,3,47,0,5,286,0,1,161,0,1,161,0,1,161,0,1,161,0,4,46,0,1,162,0,1,162,0,1,162,0,1,162,0,-1,286,0,4,47,0,-1,47,0,3,49,0,5,49,0,3,49,0,3,49,0,5,288,0,3,49,0,5,288,0,1,163,0,1,163,0,1,163,0,1,163,0,0,88,0,4,48,0,1,166,0,1,166,0,1,166,0,1,166,0,-1,288,0,4,49,0,-1,49,0,1,174,0,1,174,0,1,174,0,1,174,0,-1,294,0,27,101,0,4,50,0,-1,50,0,12,101,0,3,52,0,5,52,0,3,52,0,3,52,0,5,295,0,3,52,0,5,295,0,1,175,0,1,175,0,1,175,0,1,175,0,4,51,0,1,176,0,1,176,0,1,176,0,1,176,0,-1,295,0,4,52,0,-1,52,0,3,54,0,5,54,0,3,54,0,3,54,0,5,296,0,3,54,0,5,296,0,1,177,0,1,177,0,1,177,0,1,177,0,4,53,0,1,178,0,1,178,0,1,178,0,1,178,0,-1,296,0,4,54,0,-1,54,0,3,56,0,5,56,0,3,56,0,3,56,0,5,303,0,3,56,0,5,303,0,1,186,0,1,186,0,1,186,0,1,186,0,4,55,0,1,187,0,1,187,0,1,187,0,1,187,0,-1,303,0,4,56,0,-1,56,0,3,58,0,5,58,0,3,58,0,3,58,0,5,304,0,3,58,0,5,304,0,1,188,0,1,188,0,1,188,0,1,188,0,4,57,0,1,189,0,1,189,0,1,189,0,1,189,0,-1,304,0,4,58,0,-1,58,0,3,60,0,5,60,0,3,60,0,3,60,0,5,305,0,3,60,0,5,305,0,1,190,0,1,190,0,1,190,0,1,190,0,4,59,0,1,191,0,1,191,0,1,191,0,1,191,0,-1,305,0,4,60,0,-1,60,0,3,62,0,5,62,0,3,62,0,3,62,0,5,314,0,3,62,0,5,314,0,1,201,0,1,201,0,1,201,0,1,201,0,4,61,0,1,202,0,1,202,0,1,202,0,1,202,0,-1,314,0,4,62,0,-1,62,0,3,64,0,5,64,0,3,64,0,3,64,0,5,315,0,3,64,0,5,315,0,1,203,0,1,203,0,1,203,0,1,203,0,4,63,0,1,204,0,1,204,0,1,204,0,1,204,0,-1,315,0,4,64,0,-1,64,0,2,65,0,2,65,0,-1,316,0,-2,317,0,-3,318,0,-4,319,0,-5,66,0,-6,68,0,3,67,0,5,67,0,3,67,0,3,67,0,5,320,0,3,67,0,5,320,0,1,209,0,1,209,0,1,209,0,1,209,0,4,66,0,1,210,0,1,210,0,1,210,0,1,210,0,-1,320,0,4,67,0,-1,67,0,3,69,0,5,69,0,3,69,0,3,69,0,5,321,0,3,69,0,5,321,0,1,211,0,1,211,0,1,211,0,1,211,0,4,68,0,1,212,0,1,212,0,1,212,0,1,212,0,-1,321,0,4,69,0,-1,69,0,3,71,0,5,71,0,3,71,0,3,71,0,5,328,0,3,71,0,5,328,0,1,220,0,1,220,0,1,220,0,1,220,0,4,70,0,1,221,0,1,221,0,1,221,0,1,221,0,-1,328,0,4,71,0,-1,71,0,3,73,0,5,73,0,3,73,0,3,73,0,5,329,0,3,73,0,5,329,0,1,222,0,1,222,0,1,222,0,1,222,0,4,72,0,1,223,0,1,223,0,1,223,0,1,223,0,-1,329,0,4,73,0,-1,73,0,3,75,0,5,75,0,3,75,0,3,75,0,5,334,0,3,75,0,5,334,0,1,229,0,1,229,0,1,229,0,1,229,0,4,74,0,1,230,0,1,230,0,1,230,0,1,230,0,-1,334,0,4,75,0,-1,75,0,3,77,0,5,77,0,3,77,0,3,77,0,5,335,0,3,77,0,5,335,0,1,231,0,1,231,0,1,231,0,1,231,0,4,76,0,1,232,0,1,232,0,1,232,0,1,232,0,-1,335,0,4,77,0,-1,77,0,3,79,0,5,79,0,3,79,0,3,79,0,5,336,0,3,79,0,5,336,0,1,233,0,1,233,0,1,233,0,1,233,0,4,78,0,1,234,0,1,234,0,1,234,0,1,234,0,-1,336,0,4,79,0,-1,79,0,3,81,0,5,81,0,3,81,0,3,81,0,5,343,0,3,81,0,5,343,0,1,242,0,1,242,0,1,242,0,1,242,0,4,80,0,1,243,0,1,243,0,1,243,0,1,243,0,-1,343,0,4,81,0,-1,81,0,3,83,0,5,83,0,3,83,0,3,83,0,5,344,0,3,83,0,5,344,0,1,244,0,1,244,0,1,244,0,1,244,0,4,82,0,1,245,0,1,245,0,1,245,0,1,245,0,-1,344,0,4,83,0,-1,83,0,3,85,0,5,85,0,3,85,0,3,85,0,5,345,0,3,85,0,5,345,0,1,246,0,1,246,0,1,246,0,1,246,0,4,84,0,1,247,0,1,247,0,1,247,0,1,247,0,-1,345,0,4,85,0,-1,85,0,5,280,0,5,280,0,1,153,0,1,153,0,1,153,0,1,153,0,4,86,0,5,281,0,5,281,0,1,155,0,1,155,0,1,155,0,1,155,0,4,87,0,3,287,0,1,164,0,1,164,0,1,164,0,1,164,0,4,88,0,3,252,0,1,111,0,1,111,0,1,111,0,1,111,0,4,89,0,3,253,0,1,113,0,1,113,0,1,113,0,1,113,0,4,90,0,3,260,0,1,122,0,1,122,0,1,122,0,1,122,0,4,91,0,3,261,0,1,124,0,1,124,0,1,124,0,1,124,0,4,92,0,3,267,0,1,132,0,1,132,0,1,132,0,1,132,0,4,93,0,3,268,0,1,134,0,1,134,0,1,134,0,1,134,0,4,94,0,3,275,0,1,143,0,1,143,0,1,143,0,1,143,0,4,95,0,3,276,0,1,145,0,1,145,0,1,145,0,1,145,0,4,96,0,3,277,0,1,147,0,1,147,0,1,147,0,1,147,0,4,97,0,3,278,0,1,149,0,1,149,0,1,149,0,1,149,0,4,98,0,3,279,0,1,151,0,1,151,0,1,151,0,1,151,0,4,99,0,3,293,0,1,171,0,1,171,0,1,171,0,1,171,0,4,100,0,5,294,0,5,294,0,1,173,0,1,173,0,1,173,0,1,173,0,4,101,0,3,302,0,1,184,0,1,184,0,1,184,0,1,184,0,4,102,0,3,313,0,1,199,0,1,199,0,1,199,0,1,199,0,4,103,0,3,327,0,1,218,0,1,218,0,1,218,0,1,218,0,4,104,0,3,333,0,1,227,0,1,227,0,1,227,0,1,227,0,4,105,0,3,342,0,1,240,0,1,240,0,1,240,0,1,240,0,4,106,0,4,248,0,4,249,0,4,250,0,4,251,0,4,252,0,-1,252,0,4,253,0,-1,253,0,4,255,0,4,256,0,4,257,0,4,258,0,4,259,0,4,260,0,-1,260,0,4,261,0,-1,261,0,4,263,0,4,264,0,4,265,0,4,266,0,4,267,0,-1,267,0,4,268,0,-1,268,0,4,270,0,4,271,0,4,272,0,4,273,0,4,274,0,4,275,0,-1,275,0,4,276,0,-1,276,0,4,277,0,-1,277,0,4,278,0,-1,278,0,4,279,0,-1,279,0,4,282,0,4,283,0,4,284,0,4,285,0,4,287,0,-1,287,0,4,289,0,4,290,0,4,291,0,4,292,0,4,293,0,-1,293,0,4,297,0,4,298,0,4,299,0,4,300,0,4,301,0,4,302,0,-1,302,0,4,306,0,4,307,0,4,308,0,4,309,0,4,310,0,4,311,0,4,312,0,4,313,0,-1,313,0,4,316,0,4,317,0,4,318,0,4,319,0,4,322,0,4,323,0,4,324,0,4,325,0,4,326,0,4,327,0,-1,327,0,4,330,0,4,331,0,4,332,0,4,333,0,-1,333,0,4,337,0,4,338,0,4,339,0,4,340,0,4,341,0,4,342,0,-1,342,0,-1,346,0,-1,347,0,-1,348,0,-1,349,0,-1,350,0,-1,351,0,-1,352,0,-1,353,0,-1,354,0,-1,355,0,-1,356,0,-1,357,0,-1,358,0,-1,359,0,-1,360,0,-1,361,0,-1,362,0,-1,363,0,-1,364,0,-1,365,0,-1,366,0,-1,367,0,-1,368,0,-1,369,0,-1,370,0,14,1,254,9,346,262,9,347,269,9,348,280,9,349,281,9,350,286,9,351,288,9,352,294,9,353,295,9,354,296,9,355,303,9,356,304,9,357,305,9,358,314,9,359,315,9,360,320,9,361,321,9,362,328,9,363,329,9,364,334,9,365,335,9,366,336,9,367,343,9,368,344,9,369,345,9,370,1017],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370],[6,6,6,6,6,6,6,6,6,6,-1,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,0,0,0,0,0,0,0,6,6,6,6,6,6,6,6,6,6,6,-1,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,0,0,0,0,0,0,0,6,6,6,6,6,6,6,6,6,6,-1,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,0,0,0,0,0,0,0,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,-1,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,0,0,0,0,0,0,0,6,6,-1,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,0,0,0,0,0,0,0,6,6,6,6,6,6,-1,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,0,0,0,0,0,0,0,6,6,6,6,-1,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,0,0,0,0,0,0,0,6,6,6,6,6,6,6,6,-1,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,0,0,0,0,0,0,0,6,6,-1,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,0,0,0,0,0,0,0,6,6,-1,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,0,0,0,0,0,0,0,6,6,6,6,6,6,6,6,6,-1,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,0,0,0,0,0,0,0,6,6,-1,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,0,0,0,0,0,0,0,6,6,-1,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,0,0,0,0,0,0,0,6,6,6,6,6,6,6,6,6,6,6,-1,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,0,0,0,0,0,0,0,6,6,-1,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,0,0,0,0,0,0,0,6,6,6,6,6,6,-1,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,0,0,0,0,0,0,0,6,6,-1,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,0,0,0,0,0,0,0,6,6,6,6,6,6,6,6,6,-1,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,0,0,0,0,0,0,0,6,6,-1,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,0,0,0,0,0,0,0,6,6,6,6,6,6,6,-1,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,0,0,0,0,0,0,0,6,6,-1,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,0,0,0,0,0,0,0,6,6,-1,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,0,0,0,0,0,0,0,6,6,6,6,6,6,6,6,6,-1,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,0,0,0,0,0,0,0,6,6,-1,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,0,0,0,0,0,0,0,6,6,-1,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,0,0,0,0,0,0,0,31,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],[9,9,9,9,21,20,21,20,16,6,7,8,11,12,13,14,1,2,3,4,5,8,0,0,0,0,0,0,0,0,0,15,0,1,2,3,4,5,9,9,9,9,9,21,20,21,20,16,6,7,8,11,12,13,14,1,2,3,4,5,8,0,0,0,0,0,0,0,0,0,15,0,1,2,3,4,5,9,9,9,39,21,20,21,20,16,6,7,8,11,12,13,14,1,2,3,4,5,8,0,0,0,0,0,0,0,0,0,15,0,1,2,3,4,5,9,9,9,9,9,21,20,21,20,21,20,21,20,21,20,16,6,7,8,11,12,13,14,1,2,3,4,5,8,0,0,0,0,0,0,0,0,0,15,0,1,2,3,4,5,16,6,7,8,11,12,13,14,1,2,3,4,5,8,0,0,0,0,0,0,0,0,0,15,0,1,2,3,4,5,9,9,9,39,16,6,7,8,11,12,13,14,1,2,3,4,5,8,0,0,0,0,0,0,0,0,0,15,0,1,2,3,4,5,16,21,20,6,7,8,11,12,13,14,1,2,3,4,5,8,0,0,0,0,0,0,0,0,0,15,0,1,2,3,4,5,9,9,9,9,21,20,16,6,7,8,11,12,13,14,1,2,3,4,5,8,0,0,0,0,0,0,0,0,0,15,0,1,2,3,4,5,16,6,7,8,11,12,13,14,1,2,3,4,5,8,0,0,0,0,0,0,0,0,0,15,0,1,2,3,4,5,16,6,7,8,11,12,13,14,1,2,3,4,5,8,0,0,0,0,0,0,0,0,0,15,0,1,2,3,4,5,9,9,9,9,39,21,20,16,6,7,8,11,12,13,14,1,2,3,4,5,8,0,0,0,0,0,0,0,0,0,15,0,1,2,3,4,5,16,6,7,8,11,12,13,14,1,2,3,4,5,8,0,0,0,0,0,0,0,0,0,15,0,1,2,3,4,5,16,6,7,8,11,12,13,14,1,2,3,4,5,8,0,0,0,0,0,0,0,0,0,15,0,1,2,3,4,5,9,9,9,9,9,9,9,21,20,16,6,7,8,11,12,13,14,1,2,3,4,5,8,0,0,0,0,0,0,0,0,0,15,0,1,2,3,4,5,16,6,7,8,11,12,13,14,1,2,3,4,5,8,0,0,0,0,0,0,0,0,0,15,0,1,2,3,4,5,9,9,9,39,16,6,7,8,11,12,13,14,1,2,3,4,5,8,0,0,0,0,0,0,0,0,0,15,0,1,2,3,4,5,16,6,7,8,11,12,13,14,1,2,3,4,5,8,0,0,0,0,0,0,0,0,0,15,0,1,2,3,4,5,9,9,9,9,85,21,20,16,6,7,8,11,12,13,14,1,2,3,4,5,8,0,0,0,0,0,0,0,0,0,15,0,1,2,3,4,5,16,6,7,8,11,12,13,14,1,2,3,4,5,8,0,0,0,0,0,0,0,0,0,15,0,1,2,3,4,5,9,9,9,21,20,16,6,7,8,11,12,13,14,1,2,3,4,5,8,0,0,0,0,0,0,0,0,0,15,0,1,2,3,4,5,16,6,7,8,11,12,13,14,1,2,3,4,5,8,0,0,0,0,0,0,0,0,0,15,0,1,2,3,4,5,16,6,7,8,11,12,13,14,1,2,3,4,5,8,0,0,0,0,0,0,0,0,0,15,0,1,2,3,4,5,9,9,9,9,39,21,20,16,6,7,8,11,12,13,14,1,2,3,4,5,8,0,0,0,0,0,0,0,0,0,15,0,1,2,3,4,5,16,6,7,8,11,12,13,14,1,2,3,4,5,8,0,0,0,0,0,0,0,0,0,15,0,1,2,3,4,5,16,6,7,8,11,12,13,14,1,2,3,4,5,8,0,0,0,0,0,0,0,0,0,15,0,1,2,3,4,5,74,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10]],[[{"name":"pose3","rect":{"x":177,"y":90,"width":523,"height":1220},"offset":{"x":13.5,"y":-27},"originalSize":{"width":850,"height":1346},"rotated":false,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[-261.5,-610,0,261.5,-610,0,-261.5,610,0,261.5,610,0],"indexes":[0,1,2,2,1,3],"uv":[177,1256,700,1256,177,36,700,36],"nuv":[0.20823529411764705,0.02674591381872214,0.8235294117647058,0.02674591381872214,0.20823529411764705,0.9331352154531947,0.8235294117647058,0.9331352154531947],"minPos":{"x":-261.5,"y":-610,"z":0},"maxPos":{"x":261.5,"y":610,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[10],[454]],[[[44,"pasted__Misc_Texture_2",[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{"USE_ALBEDO_MAP":true,"USE_EMISSIVE_MAP":true},{},{},{}],[[[{"roughness":1},"emissive",8,[4,4290559164],"mainTexture",6,0,"emissiveMap",6,1],{},{},{}],11,0,0,0]]],0,0,[0,0,0],[13,16,11],[455,456,38]],[[[44,"Banner",[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{"DCC_APP_NAME":5,"USE_ALBEDO_MAP":true},{},{}],[[[{"albedoScale":0.800000011920929},"mainColor",8,[4,4278190335],"mainTexture",6,0],{},{}],11,0,0]]],0,0,[0,0],[13,11],[110,47]],[[[31,".bin",3104285952,[{"primitives":[{"primitiveMode":7,"jointMapIndex":0,"vertexBundelIndices":[0],"indexView":{"offset":95368,"length":9240,"count":4620,"stride":2}},{"primitiveMode":7,"jointMapIndex":1,"vertexBundelIndices":[1],"indexView":{"offset":276208,"length":15792,"count":7896,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":95368,"count":917,"stride":104},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_joints","format":42,"isNormalized":false},{"name":"a_weights","format":44,"isNormalized":false},{"name":"a_color","format":44,"isNormalized":false},{"name":"a_texCoord1","format":21,"isNormalized":false},{"name":"a_texCoord2","format":21,"isNormalized":false}]},{"view":{"offset":104608,"length":171600,"count":1650,"stride":104},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_joints","format":42,"isNormalized":false},{"name":"a_weights","format":44,"isNormalized":false},{"name":"a_color","format":44,"isNormalized":false},{"name":"a_texCoord1","format":21,"isNormalized":false},{"name":"a_texCoord2","format":21,"isNormalized":false}]}],"jointMaps":[[0,1,2,3,4,5,6,8,9,10,11,33,34,35,36,58,59,60,61,62,68],[0,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59]]},"minPosition",8,[1,-0.008021329529583454,-0.0019356374396011233,0.011030754074454308],"maxPosition",8,[1,0.008021325804293156,0.0021883174777030945,0.019711440429091454]]],-1],0,0,[],[],[]],[[[120,"Skin-4",3353122877,["rig.001/root","rig.001/root/spine","rig.001/root/spine/spine.001","rig.001/root/spine/spine.001/spine.002","rig.001/root/spine/spine.001/spine.002/spine.003","rig.001/root/spine/spine.001/spine.002/spine.003/spine.004","rig.001/root/spine/spine.001/spine.002/spine.003/spine.004/spine.005","rig.001/root/spine/spine.001/spine.002/spine.003/spine.004/spine.005/spine.006","rig.001/root/spine/spine.001/spine.002/spine.003/shoulder.L","rig.001/root/spine/spine.001/spine.002/spine.003/shoulder.L/upper_arm.L","rig.001/root/spine/spine.001/spine.002/spine.003/shoulder.L/upper_arm.L/upper_arm.001.L","rig.001/root/spine/spine.001/spine.002/spine.003/shoulder.L/upper_arm.L/upper_arm.001.L/forearm.L","rig.001/root/spine/spine.001/spine.002/spine.003/shoulder.L/upper_arm.L/upper_arm.001.L/forearm.L/forearm.001.L","rig.001/root/spine/spine.001/spine.002/spine.003/shoulder.L/upper_arm.L/upper_arm.001.L/forearm.L/forearm.001.L/hand.L","rig.001/root/spine/spine.001/spine.002/spine.003/shoulder.L/upper_arm.L/upper_arm.001.L/forearm.L/forearm.001.L/hand.L/palm.01.L","rig.001/root/spine/spine.001/spine.002/spine.003/shoulder.L/upper_arm.L/upper_arm.001.L/forearm.L/forearm.001.L/hand.L/palm.01.L/f_index.01.L","rig.001/root/spine/spine.001/spine.002/spine.003/shoulder.L/upper_arm.L/upper_arm.001.L/forearm.L/forearm.001.L/hand.L/palm.01.L/f_index.01.L/f_index.02.L","rig.001/root/spine/spine.001/spine.002/spine.003/shoulder.L/upper_arm.L/upper_arm.001.L/forearm.L/forearm.001.L/hand.L/palm.01.L/f_index.01.L/f_index.02.L/f_index.03.L","rig.001/root/spine/spine.001/spine.002/spine.003/shoulder.L/upper_arm.L/upper_arm.001.L/forearm.L/forearm.001.L/hand.L/palm.01.L/thumb.01.L","rig.001/root/spine/spine.001/spine.002/spine.003/shoulder.L/upper_arm.L/upper_arm.001.L/forearm.L/forearm.001.L/hand.L/palm.01.L/thumb.01.L/thumb.02.L","rig.001/root/spine/spine.001/spine.002/spine.003/shoulder.L/upper_arm.L/upper_arm.001.L/forearm.L/forearm.001.L/hand.L/palm.01.L/thumb.01.L/thumb.02.L/thumb.03.L","rig.001/root/spine/spine.001/spine.002/spine.003/shoulder.L/upper_arm.L/upper_arm.001.L/forearm.L/forearm.001.L/hand.L/palm.02.L","rig.001/root/spine/spine.001/spine.002/spine.003/shoulder.L/upper_arm.L/upper_arm.001.L/forearm.L/forearm.001.L/hand.L/palm.02.L/f_middle.01.L","rig.001/root/spine/spine.001/spine.002/spine.003/shoulder.L/upper_arm.L/upper_arm.001.L/forearm.L/forearm.001.L/hand.L/palm.02.L/f_middle.01.L/f_middle.02.L","rig.001/root/spine/spine.001/spine.002/spine.003/shoulder.L/upper_arm.L/upper_arm.001.L/forearm.L/forearm.001.L/hand.L/palm.02.L/f_middle.01.L/f_middle.02.L/f_middle.03.L","rig.001/root/spine/spine.001/spine.002/spine.003/shoulder.L/upper_arm.L/upper_arm.001.L/forearm.L/forearm.001.L/hand.L/palm.03.L","rig.001/root/spine/spine.001/spine.002/spine.003/shoulder.L/upper_arm.L/upper_arm.001.L/forearm.L/forearm.001.L/hand.L/palm.03.L/f_ring.01.L","rig.001/root/spine/spine.001/spine.002/spine.003/shoulder.L/upper_arm.L/upper_arm.001.L/forearm.L/forearm.001.L/hand.L/palm.03.L/f_ring.01.L/f_ring.02.L","rig.001/root/spine/spine.001/spine.002/spine.003/shoulder.L/upper_arm.L/upper_arm.001.L/forearm.L/forearm.001.L/hand.L/palm.03.L/f_ring.01.L/f_ring.02.L/f_ring.03.L","rig.001/root/spine/spine.001/spine.002/spine.003/shoulder.L/upper_arm.L/upper_arm.001.L/forearm.L/forearm.001.L/hand.L/palm.04.L","rig.001/root/spine/spine.001/spine.002/spine.003/shoulder.L/upper_arm.L/upper_arm.001.L/forearm.L/forearm.001.L/hand.L/palm.04.L/f_pinky.01.L","rig.001/root/spine/spine.001/spine.002/spine.003/shoulder.L/upper_arm.L/upper_arm.001.L/forearm.L/forearm.001.L/hand.L/palm.04.L/f_pinky.01.L/f_pinky.02.L","rig.001/root/spine/spine.001/spine.002/spine.003/shoulder.L/upper_arm.L/upper_arm.001.L/forearm.L/forearm.001.L/hand.L/palm.04.L/f_pinky.01.L/f_pinky.02.L/f_pinky.03.L","rig.001/root/spine/spine.001/spine.002/spine.003/shoulder.R","rig.001/root/spine/spine.001/spine.002/spine.003/shoulder.R/upper_arm.R","rig.001/root/spine/spine.001/spine.002/spine.003/shoulder.R/upper_arm.R/upper_arm.001.R","rig.001/root/spine/spine.001/spine.002/spine.003/shoulder.R/upper_arm.R/upper_arm.001.R/forearm.R","rig.001/root/spine/spine.001/spine.002/spine.003/shoulder.R/upper_arm.R/upper_arm.001.R/forearm.R/forearm.001.R","rig.001/root/spine/spine.001/spine.002/spine.003/shoulder.R/upper_arm.R/upper_arm.001.R/forearm.R/forearm.001.R/hand.R","rig.001/root/spine/spine.001/spine.002/spine.003/shoulder.R/upper_arm.R/upper_arm.001.R/forearm.R/forearm.001.R/hand.R/palm.01.R","rig.001/root/spine/spine.001/spine.002/spine.003/shoulder.R/upper_arm.R/upper_arm.001.R/forearm.R/forearm.001.R/hand.R/palm.01.R/f_index.01.R","rig.001/root/spine/spine.001/spine.002/spine.003/shoulder.R/upper_arm.R/upper_arm.001.R/forearm.R/forearm.001.R/hand.R/palm.01.R/f_index.01.R/f_index.02.R","rig.001/root/spine/spine.001/spine.002/spine.003/shoulder.R/upper_arm.R/upper_arm.001.R/forearm.R/forearm.001.R/hand.R/palm.01.R/f_index.01.R/f_index.02.R/f_index.03.R","rig.001/root/spine/spine.001/spine.002/spine.003/shoulder.R/upper_arm.R/upper_arm.001.R/forearm.R/forearm.001.R/hand.R/palm.01.R/thumb.01.R","rig.001/root/spine/spine.001/spine.002/spine.003/shoulder.R/upper_arm.R/upper_arm.001.R/forearm.R/forearm.001.R/hand.R/palm.01.R/thumb.01.R/thumb.02.R","rig.001/root/spine/spine.001/spine.002/spine.003/shoulder.R/upper_arm.R/upper_arm.001.R/forearm.R/forearm.001.R/hand.R/palm.01.R/thumb.01.R/thumb.02.R/thumb.03.R","rig.001/root/spine/spine.001/spine.002/spine.003/shoulder.R/upper_arm.R/upper_arm.001.R/forearm.R/forearm.001.R/hand.R/palm.02.R","rig.001/root/spine/spine.001/spine.002/spine.003/shoulder.R/upper_arm.R/upper_arm.001.R/forearm.R/forearm.001.R/hand.R/palm.02.R/f_middle.01.R","rig.001/root/spine/spine.001/spine.002/spine.003/shoulder.R/upper_arm.R/upper_arm.001.R/forearm.R/forearm.001.R/hand.R/palm.02.R/f_middle.01.R/f_middle.02.R","rig.001/root/spine/spine.001/spine.002/spine.003/shoulder.R/upper_arm.R/upper_arm.001.R/forearm.R/forearm.001.R/hand.R/palm.02.R/f_middle.01.R/f_middle.02.R/f_middle.03.R","rig.001/root/spine/spine.001/spine.002/spine.003/shoulder.R/upper_arm.R/upper_arm.001.R/forearm.R/forearm.001.R/hand.R/palm.03.R","rig.001/root/spine/spine.001/spine.002/spine.003/shoulder.R/upper_arm.R/upper_arm.001.R/forearm.R/forearm.001.R/hand.R/palm.03.R/f_ring.01.R","rig.001/root/spine/spine.001/spine.002/spine.003/shoulder.R/upper_arm.R/upper_arm.001.R/forearm.R/forearm.001.R/hand.R/palm.03.R/f_ring.01.R/f_ring.02.R","rig.001/root/spine/spine.001/spine.002/spine.003/shoulder.R/upper_arm.R/upper_arm.001.R/forearm.R/forearm.001.R/hand.R/palm.03.R/f_ring.01.R/f_ring.02.R/f_ring.03.R","rig.001/root/spine/spine.001/spine.002/spine.003/shoulder.R/upper_arm.R/upper_arm.001.R/forearm.R/forearm.001.R/hand.R/palm.04.R","rig.001/root/spine/spine.001/spine.002/spine.003/shoulder.R/upper_arm.R/upper_arm.001.R/forearm.R/forearm.001.R/hand.R/palm.04.R/f_pinky.01.R","rig.001/root/spine/spine.001/spine.002/spine.003/shoulder.R/upper_arm.R/upper_arm.001.R/forearm.R/forearm.001.R/hand.R/palm.04.R/f_pinky.01.R/f_pinky.02.R","rig.001/root/spine/spine.001/spine.002/spine.003/shoulder.R/upper_arm.R/upper_arm.001.R/forearm.R/forearm.001.R/hand.R/palm.04.R/f_pinky.01.R/f_pinky.02.R/f_pinky.03.R","rig.001/root/spine/spine.001/spine.002/spine.003/breast.L","rig.001/root/spine/spine.001/spine.002/spine.003/breast.R","rig.001/root/spine/pelvis.L","rig.001/root/spine/pelvis.R","rig.001/root/spine/thigh.L","rig.001/root/spine/thigh.L/thigh.001.L","rig.001/root/spine/thigh.L/thigh.001.L/shin.L","rig.001/root/spine/thigh.L/thigh.001.L/shin.L/shin.001.L","rig.001/root/spine/thigh.L/thigh.001.L/shin.L/shin.001.L/foot.L","rig.001/root/spine/thigh.L/thigh.001.L/shin.L/shin.001.L/foot.L/toe.L","rig.001/root/spine/thigh.R","rig.001/root/spine/thigh.R/thigh.001.R","rig.001/root/spine/thigh.R/thigh.001.R/shin.R","rig.001/root/spine/thigh.R/thigh.001.R/shin.R/shin.001.R","rig.001/root/spine/thigh.R/thigh.001.R/shin.R/shin.001.R/foot.R","rig.001/root/spine/thigh.R/thigh.001.R/shin.R/shin.001.R/foot.R/toe.R"],[[[7,1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1],[7,1,1.4913523813849254e-15,2.384185791015625e-7,0,2.3086994360710378e-7,-0.24963954091072083,-0.9683389067649841,0,5.9518693973359404e-8,0.9683389067649841,-0.24963955581188202,0,-8.143033469742988e-10,-0.010776742361485958,0.0034154364839196205,1],[7,1,-2.1298945214196841e-16,2.384186643666908e-7,0,2.366096367723003e-7,-0.12295382469892502,-0.9924125075340271,0,2.931448328524766e-8,0.9924125075340271,-0.12295383214950562,0,-4.2469325278737813e-10,-0.01281394436955452,0.001781292143277824,1],[7,1,-1.1144142283514655e-14,2.384186927884002e-7,0,2.38297999999304e-7,0.03181256353855133,-0.9994940757751465,0,-7.584696426476967e-9,0.9994940757751465,0.03181256353855133,0,1.0854406956584128e-10,-0.014444232918322086,-0.0004552676691673696,1],[7,1,-1.1862372859710625e-14,2.3841863594498136e-7,0,2.3832140527701995e-7,0.028559789061546326,-0.9995923638343811,0,-6.809172781174766e-9,0.9995923638343811,0.028559789061546326,0,9.583722704320508e-11,-0.01637808419764042,-0.00040197145426645875,1],[7,1,-4.822620371081575e-14,-2.3841850804728892e-7,0,-2.3534460069640772e-7,-0.16006000339984894,-0.987107515335083,0,-3.816120752730967e-8,0.9871073961257935,-0.16006003320217133,0,7.372892296686473e-10,-0.018275195732712746,0.003092421218752861,1],[7,1,-9.257062483095449e-14,-2.3841846541472478e-7,0,-2.3822163086606452e-7,0.04062240943312645,-0.9991747140884399,0,9.685222401856208e-9,0.9991747140884399,0.04062240943312645,0,-1.8321776040775006e-10,-0.019224222749471664,-0.000768464058637619,1],[7,1,-4.631948850083306e-14,9.95702069514666e-14,0,9.94220981584415e-14,-0.003186163492500782,-0.9999951124191284,0,4.663649566354067e-14,0.9999950528144836,-0.0031861637253314257,0,-9.468081344849366e-16,-0.019919073209166527,0.00010420544276712462,1],[7,0.38747256994247437,0.9152210354804993,-0.110613614320755,0,-0.9218434691429138,0.38357123732566833,-0.05547773465514183,0,-0.008346189744770527,0.12346453219652176,0.9923138618469238,0,-0.0006343058776110411,-0.002109030494466424,-0.01782291755080223,1],[7,-0.8309911489486694,0.5547759532928467,0.04095610976219177,0,0.036208998411893845,0.12741106748580933,-0.9911888241767883,0,-0.555105984210968,-0.8221861124038696,-0.12596534192562103,0,0.012380141764879227,0.01319888886064291,0.002449983963742852,1],[7,-0.8309912085533142,0.5547756552696228,0.04095640033483505,0,0.036208588629961014,0.12741106748580933,-0.9911890029907227,0,-0.5551056861877441,-0.8221863508224487,-0.12596513330936432,0,0.012380138970911503,0.011443604715168476,0.002449979539960623,1],[7,-0.8309912085533142,0.506626546382904,-0.229746013879776,0,0.036208376288414,-0.3628639280796051,-0.9311383366584778,0,-0.555105984210968,-0.7820865511894226,0.28319257497787476,0,0.012380142696201801,0.009678276255726814,-0.002489324426278472,1],[7,-0.8309916257858276,0.5066261291503906,-0.22974537312984467,0,0.03620792180299759,-0.36286377906799316,-0.9311385154724121,0,-0.5551053881645203,-0.782086968421936,0.2831929326057434,0,0.012380137108266354,0.00822687242180109,-0.0024893321096897125,1],[7,-0.6410925984382629,0.7458238005638123,-0.18096087872982025,0,-0.04519026353955269,-0.2720666527748108,-0.9612165689468384,0,-0.766131579875946,-0.6080513596534729,0.20812392234802246,0,0.013879137113690376,0.0030595245771110058,-0.001838503871113062,1],[7,0.3562532365322113,0.6496073603630066,-0.6716348528862,0,0.8766136765480042,-0.48119407892227173,-0.0004327966598793864,0,-0.3234679400920868,-0.5886103510856628,-0.7408819198608398,0,0.002450143452733755,0.0029076277278363705,0.013806608505547047,1],[7,0.2653426229953766,0.5773390531539917,-0.772186815738678,0,0.9402543902397156,-0.3321666121482849,0.07474460452795029,0,-0.21334175765514374,-0.7458851337432861,-0.6309835910797119,0,0.0018186946399509907,0.004662031307816505,0.01325935684144497,1],[7,0.2635299265384674,0.4480796158313751,-0.8542695045471191,0,0.9415250420570374,-0.3122216761112213,0.1266811192035675,0,-0.2099582850933075,-0.8377004265785217,-0.5041580200195312,0,0.0017937207594513893,0.0061915116384625435,0.012433233670890331,1],[7,0.2666983902454376,0.2298436164855957,-0.9359719157218933,0,0.9386086463928223,-0.28244125843048096,0.19809149205684662,0,-0.21882709860801697,-0.9313423037528992,-0.2910599112510681,0,0.0018669510027393699,0.008504955098032951,0.010717875324189663,1],[7,0.49519646167755127,0.05384887009859085,0.8671103715896606,0,-0.5259297490119934,-0.7758365273475647,0.34853285551071167,0,0.691504180431366,-0.6286315321922302,-0.3558708429336548,0,-0.012352187186479568,0.007272761315107346,-0.000669782399199903,1],[7,0.48209574818611145,0.37401819229125977,0.7922711372375488,0,-0.503975510597229,-0.6213141679763794,0.5999805927276611,0,0.7166531682014465,-0.68853360414505,-0.11103694885969162,0,-0.012559755705296993,0.005563715007156134,-0.002983722137287259,1],[7,0.529266893863678,0.5751169919967651,0.6237918138504028,0,-0.5459916591644287,-0.3318893015384674,0.7692476511001587,0,0.6494376063346863,-0.7477226257324219,0.13835109770298004,0,-0.012119927443563938,0.004760862328112125,-0.004638932645320892,1],[7,0.2696860432624817,0.6918048858642578,-0.6698318719863892,0,0.9239062666893005,-0.3819562792778015,-0.02250516787171364,0,-0.2714158296585083,-0.6127926707267761,-0.7421709895133972,0,0.0021624374203383923,0.003036636160686612,0.013841894455254078,1],[7,0.3537948727607727,0.5819966197013855,-0.7321944236755371,0,0.9302300810813904,-0.30052870512008667,0.21060487627983093,0,-0.09747418016195297,-0.7556203603744507,-0.6477161645889282,0,-0.0005587507621385157,0.004804576281458139,0.013331950642168522,1],[7,0.3497494161128998,0.41688013076782227,-0.8389789462089539,0,0.932612419128418,-0.23994317650794983,0.26955729722976685,0,-0.08893425762653351,-0.8767198920249939,-0.4727075695991516,0,-0.0006257614586502314,0.006872344296425581,0.012149502523243427,1],[7,0.357612669467926,0.28742462396621704,-0.8885378837585449,0,0.9273972511291504,-0.22113032639026642,0.3017209768295288,0,-0.10976070165634155,-0.9319270253181458,-0.3456357717514038,0,-0.000455858331406489,0.008113847114145756,0.011125441640615463,1],[7,0.1206265240907669,0.7715458273887634,-0.6246326565742493,0,0.9725915789604187,-0.2178543210029602,-0.08127057552337646,0,-0.19878293573856354,-0.5977091789245605,-0.7766780853271484,0,0.0020391170401126146,0.002431898145005107,0.013923391699790955,1],[7,0.10022849589586258,0.5620957612991333,-0.8209765553474426,0,0.9474629759788513,-0.3058272898197174,-0.09371933341026306,0,-0.3037562668323517,-0.7684517502784729,-0.5632174611091614,0,0.0034523638896644115,0.005156481638550758,0.012732056900858879,1],[7,0.11566713452339172,0.4623032808303833,-0.8791455626487732,0,0.936481773853302,-0.34578225016593933,-0.05862070620059967,0,-0.3310934901237488,-0.8165233135223389,-0.4729343354701996,0,0.00364900310523808,0.005852320231497288,0.012136011384427547,1],[7,0.09283486008644104,0.3272530734539032,-0.9403654336929321,0,0.9544668197631836,-0.29816436767578125,-0.009536136873066425,0,-0.2835042476654053,-0.8966621160507202,-0.34003230929374695,0,0.0032924495171755552,0.00754108652472496,0.011119825765490532,1],[7,0.04330408200621605,0.6257373094558716,-0.7788306474685669,0,0.9944501519203186,-0.10181404650211334,-0.02650781348347664,0,-0.0958828404545784,-0.7733604311943054,-0.6266735792160034,0,0.0010848420206457376,0.00566673232242465,0.013020765967667103,1],[7,-0.30315059423446655,0.4169746935367584,-0.8568731546401978,0,0.9103978872299194,-0.1389494687318802,-0.38970306515693665,0,-0.28155842423439026,-0.8982343673706055,-0.3374903202056885,0,0.005753342993557453,0.007785627618432045,0.01001269556581974,1],[7,-0.29827964305877686,0.227646604180336,-0.9269335269927979,0,0.9054044485092163,-0.2399034947156906,-0.35026979446411133,0,-0.3021124601364136,-0.9437282085418701,-0.1345539391040802,0,0.00595654034987092,0.009297593496739864,0.008162204176187515,1],[7,-0.3059699535369873,0.15428780019283295,-0.9394557476043701,0,0.9146034121513367,-0.2263643741607666,-0.3350517749786377,0,-0.26435378193855286,-0.9617453813552856,-0.07185143977403641,0,0.005584815517067909,0.009774141944944859,0.007543083280324936,1],[7,0.3874726891517639,-0.9152210354804993,0.11061360687017441,0,0.9218435287475586,0.3835712671279907,-0.05547770857810974,0,0.008346161805093288,0.12346450239419937,0.9923139214515686,0,0.0006343063432723284,-0.0021090300288051367,-0.01782291755080223,1],[7,-0.830991268157959,-0.5547758936882019,-0.04095611348748207,0,-0.03620895370841026,0.12741102278232574,-0.9911891222000122,0,0.555105984210968,-0.822186291217804,-0.12596529722213745,0,-0.012380142696201801,0.013198891654610634,0.002449982799589634,1],[7,-0.8309914469718933,-0.5547754764556885,-0.04095638170838356,0,-0.03620857372879982,0.12741105258464813,-0.9911889433860779,0,0.5551055669784546,-0.8221865296363831,-0.12596513330936432,0,-0.012380138039588928,0.0114436075091362,0.002449979307129979,1],[7,-0.8309915065765381,-0.506626307964325,0.22974589467048645,0,-0.03620840609073639,-0.3628638982772827,-0.9311384558677673,0,0.5551056265830994,-0.7820869088172913,0.28319263458251953,0,-0.012380140833556652,0.009678284637629986,-0.002489326987415552,1],[7,-0.830991804599762,-0.5066260099411011,0.22974523901939392,0,-0.0362078957259655,-0.3628637194633484,-0.9311387538909912,0,0.5551050901412964,-0.7820871472358704,0.283192902803421,0,-0.01238013431429863,0.008226877078413963,-0.002489333739504218,1],[7,-0.641092836856842,-0.7458238005638123,0.18096067011356354,0,0.04519053176045418,-0.2720666229724884,-0.9612168073654175,0,0.766131579875946,-0.608051598072052,0.20812417566776276,0,-0.0138791399076581,0.0030595280695706606,-0.0018385087605565786,1],[7,0.35625314712524414,-0.6496076583862305,0.6716349124908447,0,-0.8766140937805176,-0.4811938405036926,-0.0004329133953433484,0,0.32346785068511963,-0.5886102914810181,-0.7408820986747742,0,-0.0024501443840563297,0.002907627960667014,0.01380661316215992,1],[7,0.2653423547744751,-0.577339231967926,0.7721869945526123,0,-0.9402546882629395,-0.3321663439273834,0.07474445551633835,0,0.2133416384458542,-0.7458852529525757,-0.6309836506843567,0,-0.0018186947563663125,0.004662031307816505,0.013259358704090118,1],[7,0.26352977752685547,-0.4480797052383423,0.8542693257331848,0,-0.9415251016616821,-0.31222137808799744,0.1266811043024063,0,0.20995797216892242,-0.8377004265785217,-0.5041578412055969,0,-0.0017937187803909183,0.006191510707139969,0.012433231808245182,1],[7,0.26669830083847046,-0.22984416782855988,0.9359717965126038,0,-0.9386088252067566,-0.282441109418869,0.19809140264987946,0,0.21882672607898712,-0.9313424825668335,-0.29106029868125916,0,-0.0018669490236788988,0.008504954166710377,0.010717878118157387,1],[7,0.4951966106891632,-0.053848423063755035,-0.8671103715896606,0,0.5259300470352173,-0.7758364081382751,0.34853267669677734,0,-0.6915040016174316,-0.6286316514015198,-0.35587114095687866,0,0.01235218532383442,0.007272763177752495,-0.0006697779172100127,1],[7,0.4820963740348816,-0.3740176260471344,-0.7922712564468384,0,0.5039758086204529,-0.621314287185669,0.5999805331230164,0,-0.716653048992157,-0.6885338425636292,-0.11103752255439758,0,0.012559761293232441,0.005563722457736731,-0.002983716083690524,1],[7,0.5292673110961914,-0.5751162767410278,-0.6237921118736267,0,0.5459918975830078,-0.3318893611431122,0.7692474126815796,0,-0.6494370698928833,-0.7477232813835144,0.1383506953716278,0,0.012119922786951065,0.0047608730383217335,-0.004638929385691881,1],[7,0.2696860134601593,-0.6918054819107056,0.6698319315910339,0,-0.9239067435264587,-0.38195618987083435,-0.022505197674036026,0,0.27141571044921875,-0.6127929091453552,-0.7421714663505554,0,-0.0021624378859996796,0.0030366380233317614,0.013841903768479824,1],[7,0.35379499197006226,-0.5819973945617676,0.7321940660476685,0,-0.9302303194999695,-0.30052873492240906,0.21060501039028168,0,0.09747378528118134,-0.7556202411651611,-0.647716760635376,0,0.0005587560008279979,0.004804568365216255,0.01333195436745882,1],[7,0.349749356508255,-0.41688084602355957,0.8389789462089539,0,-0.9326126575469971,-0.23994316160678864,0.26955732703208923,0,0.08893396705389023,-0.8767200112342834,-0.472708135843277,0,0.0006257638451643288,0.006872339639812708,0.012149510905146599,1],[7,0.3576127290725708,-0.2874252200126648,0.888538122177124,0,-0.927397608757019,-0.22113029658794403,0.3017209768295288,0,0.10976049304008484,-0.9319273233413696,-0.3456362783908844,0,0.0004558601649478078,0.008113845251500607,0.011125450022518635,1],[7,0.120626300573349,-0.7715458273887634,0.6246328353881836,0,-0.9725916981697083,-0.21785402297973633,-0.08127056062221527,0,0.1987827569246292,-0.5977093577384949,-0.776678204536438,0,-0.0020391165744513273,0.0024318997748196125,0.013923396356403828,1],[7,0.10022841393947601,-0.562095582485199,0.8209766745567322,0,-0.9474632143974304,-0.30582690238952637,-0.09371916949748993,0,0.3037559688091278,-0.7684518098831177,-0.5632174015045166,0,-0.0034523624926805496,0.005156485829502344,0.012732058763504028,1],[7,0.11566726118326187,-0.462303102016449,0.8791453838348389,0,-0.9364818930625916,-0.3457818925380707,-0.05862034484744072,0,0.33109304308891296,-0.8165232539176941,-0.4729342758655548,0,-0.0036489972844719887,0.005852322094142437,0.012136010453104973,1],[7,0.09283474832773209,-0.3272527754306793,0.9403656125068665,0,-0.9544671177864075,-0.29816409945487976,-0.009536013938486576,0,0.2835039794445038,-0.8966625332832336,-0.3400319218635559,0,-0.0032924481201916933,0.007541092112660408,0.011119822971522808,1],[7,0.04330385476350784,-0.6257372498512268,0.7788312435150146,0,-0.9944503903388977,-0.10181383043527603,-0.026507839560508728,0,0.09588270634412766,-0.773361325263977,-0.6266732215881348,0,-0.001084841787815094,0.005666743498295546,0.013020766898989677,1],[7,-0.30315083265304565,-0.41697409749031067,0.8568735718727112,0,-0.9103980660438538,-0.13894949853420258,-0.38970300555229187,0,0.2815581262111664,-0.8982351422309875,-0.33748960494995117,0,-0.005753341596573591,0.00778564065694809,0.010012691840529442,1],[7,-0.2982800006866455,-0.2276458889245987,0.9269340634346008,0,-0.9054046869277954,-0.23990365862846375,-0.35026994347572327,0,0.30211225152015686,-0.9437288641929626,-0.13455313444137573,0,-0.005956542678177357,0.009297607466578484,0.008162199519574642,1],[7,-0.305970162153244,-0.15428732335567474,0.9394561648368835,0,-0.9146036505699158,-0.22636441886425018,-0.33505186438560486,0,0.2643536329269409,-0.961746096611023,-0.0718509703874588,0,-0.005584817845374346,0.009774153120815754,0.007543083280324936,1],[7,-1,-1.1069809513486462e-9,-8.85620110580021e-8,0,1.1069932748242195e-9,-0.9999997615814209,-1.3783575525394554e-7,0,-8.85620110580021e-8,-1.3783574104309082e-7,1,0,0.0010911786230280995,0.0005421112291514874,-0.016216905787587166,1],[7,-1,-1.1069809513486462e-9,-8.85620110580021e-8,0,1.1069932748242195e-9,-0.9999997615814209,-1.3783575525394554e-7,0,-8.85620110580021e-8,-1.3783574104309082e-7,1,0,-0.0010911757126450539,0.0005421112291514874,-0.016216905787587166,1],[7,-0.3717861473560333,0.6168416142463684,-0.6937444806098938,0,-0.902387261390686,-0.4155394434928894,0.11412400752305984,0,-0.21788184344768524,0.6684557199478149,0.7111219763755798,0,0.003016257891431451,-0.007289252243936062,-0.008097676560282707,1],[7,-0.37178611755371094,-0.6168416142463684,0.6937444806098938,0,0.902387261390686,-0.4155394434928894,0.11412402242422104,0,0.21788179874420166,0.6684557795524597,0.7111217975616455,0,-0.003016258357092738,-0.0072892531752586365,-0.008097675628960133,1],[7,0.9788966178894043,0.03239113464951515,0.20177285373210907,0,-0.20095303654670715,-0.02686535380780697,0.9792331457138062,0,0.03713914379477501,-0.9991142749786377,-0.0197893138974905,0,-0.001955766463652253,0.011982849799096584,-0.00012113447155570611,1],[7,0.9788966178894043,0.03239107131958008,0.20177282392978668,0,-0.20095299184322357,-0.02686539851129055,0.9792330861091614,0,0.03713908791542053,-0.9991143941879272,-0.019789373502135277,0,-0.0019557662308216095,0.00950558204203844,-0.00012113346019759774,1],[7,0.9788969159126282,0.06283223628997803,0.19445616006851196,0,-0.20095203816890717,0.12303029000759125,0.9718450903892517,0,0.0371391698718071,-0.9904122948646545,0.1330602765083313,0,-0.0019557673949748278,0.006927328649908304,-0.0011933038476854563,1],[7,0.9788969159126282,0.06283215433359146,0.1944560557603836,0,-0.2009519338607788,0.12303029000759125,0.9718450903892517,0,0.03713911399245262,-0.990412175655365,0.1330602616071701,0,-0.001955766696482897,0.004053902346640825,-0.0011933034984394908,1],[7,0.996258556842804,0.07160516083240509,-0.048394594341516495,0,0.0864252895116806,-0.825458824634552,0.5578075647354126,0,-0.000005848095952387666,-0.5599030256271362,-0.8285584449768066,0,-0.002118313917890191,0.001148779527284205,0.0009140963084064424,1],[7,-0.9999861717224121,-3.159503307870182e-7,0.00527871772646904,0,-0.000488661287818104,-0.9957011938095093,-0.0926302969455719,0,0.005256050731986761,-0.09263164550065994,0.9956867694854736,0,0.0022082719951868057,-0.0009366122540086508,-0.00042094517266377807,1],[7,0.9788965582847595,-0.03239111974835396,-0.20177273452281952,0,0.2009529322385788,-0.02686537243425846,0.9792327880859375,0,-0.037139132618904114,-0.9991142153739929,-0.01978933811187744,0,0.0019557655323296785,0.01198284886777401,-0.00012113387492718175,1],[7,0.9788966774940491,-0.03239106386899948,-0.20177268981933594,0,0.20095287263393402,-0.02686545066535473,0.9792327880859375,0,-0.037139080464839935,-0.9991142749786377,-0.019789423793554306,0,0.001955765299499035,0.00950558204203844,-0.00012113272532587871,1],[7,0.978896975517273,-0.06283222883939743,-0.194456085562706,0,0.20095200836658478,0.12303024530410767,0.9718449711799622,0,-0.03713918477296829,-0.9904122948646545,0.13306020200252533,0,0.001955766696482897,0.006927327252924442,-0.0011933029163628817,1],[7,0.978896975517273,-0.06283214688301086,-0.19445598125457764,0,0.20095190405845642,0.12303026020526886,0.9718449711799622,0,-0.03713911771774292,-0.9904121160507202,0.13306021690368652,0,0.001955765997990966,0.004053902346640825,-0.0011933027999475598,1],[7,0.9962583780288696,-0.07160545140504837,0.04839411377906799,0,-0.0864252820611,-0.8254583477973938,0.557807981967926,0,0.00000523547487318865,-0.5599033236503601,-0.8285582065582275,0,0.0021183143835514784,0.0011487791780382395,0.0009140954934991896,1],[7,-0.9999861717224121,1.9440525989011803e-7,-0.005278825294226408,0,0.000488791789393872,-0.9957002401351929,-0.09263019263744354,0,-0.005256147123873234,-0.09263145923614502,0.9956867694854736,0,-0.0022082715295255184,-0.0009366121958009899,-0.00042094505624845624,1]],8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8]]],0,0,[],[],[]],[[[120,"Skin-0",3353122877,["rig.001/root","rig.001/root/spine","rig.001/root/spine/spine.001","rig.001/root/spine/spine.001/spine.002","rig.001/root/spine/spine.001/spine.002/spine.003","rig.001/root/spine/spine.001/spine.002/spine.003/spine.004","rig.001/root/spine/spine.001/spine.002/spine.003/spine.004/spine.005","rig.001/root/spine/spine.001/spine.002/spine.003/spine.004/spine.005/spine.006","rig.001/root/spine/spine.001/spine.002/spine.003/shoulder.L","rig.001/root/spine/spine.001/spine.002/spine.003/shoulder.L/upper_arm.L","rig.001/root/spine/spine.001/spine.002/spine.003/shoulder.L/upper_arm.L/upper_arm.001.L","rig.001/root/spine/spine.001/spine.002/spine.003/shoulder.L/upper_arm.L/upper_arm.001.L/forearm.L","rig.001/root/spine/spine.001/spine.002/spine.003/shoulder.L/upper_arm.L/upper_arm.001.L/forearm.L/forearm.001.L","rig.001/root/spine/spine.001/spine.002/spine.003/shoulder.L/upper_arm.L/upper_arm.001.L/forearm.L/forearm.001.L/hand.L","rig.001/root/spine/spine.001/spine.002/spine.003/shoulder.L/upper_arm.L/upper_arm.001.L/forearm.L/forearm.001.L/hand.L/palm.01.L","rig.001/root/spine/spine.001/spine.002/spine.003/shoulder.L/upper_arm.L/upper_arm.001.L/forearm.L/forearm.001.L/hand.L/palm.01.L/f_index.01.L","rig.001/root/spine/spine.001/spine.002/spine.003/shoulder.L/upper_arm.L/upper_arm.001.L/forearm.L/forearm.001.L/hand.L/palm.01.L/f_index.01.L/f_index.02.L","rig.001/root/spine/spine.001/spine.002/spine.003/shoulder.L/upper_arm.L/upper_arm.001.L/forearm.L/forearm.001.L/hand.L/palm.01.L/f_index.01.L/f_index.02.L/f_index.03.L","rig.001/root/spine/spine.001/spine.002/spine.003/shoulder.L/upper_arm.L/upper_arm.001.L/forearm.L/forearm.001.L/hand.L/palm.01.L/thumb.01.L","rig.001/root/spine/spine.001/spine.002/spine.003/shoulder.L/upper_arm.L/upper_arm.001.L/forearm.L/forearm.001.L/hand.L/palm.01.L/thumb.01.L/thumb.02.L","rig.001/root/spine/spine.001/spine.002/spine.003/shoulder.L/upper_arm.L/upper_arm.001.L/forearm.L/forearm.001.L/hand.L/palm.01.L/thumb.01.L/thumb.02.L/thumb.03.L","rig.001/root/spine/spine.001/spine.002/spine.003/shoulder.L/upper_arm.L/upper_arm.001.L/forearm.L/forearm.001.L/hand.L/palm.02.L","rig.001/root/spine/spine.001/spine.002/spine.003/shoulder.L/upper_arm.L/upper_arm.001.L/forearm.L/forearm.001.L/hand.L/palm.02.L/f_middle.01.L","rig.001/root/spine/spine.001/spine.002/spine.003/shoulder.L/upper_arm.L/upper_arm.001.L/forearm.L/forearm.001.L/hand.L/palm.02.L/f_middle.01.L/f_middle.02.L","rig.001/root/spine/spine.001/spine.002/spine.003/shoulder.L/upper_arm.L/upper_arm.001.L/forearm.L/forearm.001.L/hand.L/palm.02.L/f_middle.01.L/f_middle.02.L/f_middle.03.L","rig.001/root/spine/spine.001/spine.002/spine.003/shoulder.L/upper_arm.L/upper_arm.001.L/forearm.L/forearm.001.L/hand.L/palm.03.L","rig.001/root/spine/spine.001/spine.002/spine.003/shoulder.L/upper_arm.L/upper_arm.001.L/forearm.L/forearm.001.L/hand.L/palm.03.L/f_ring.01.L","rig.001/root/spine/spine.001/spine.002/spine.003/shoulder.L/upper_arm.L/upper_arm.001.L/forearm.L/forearm.001.L/hand.L/palm.03.L/f_ring.01.L/f_ring.02.L","rig.001/root/spine/spine.001/spine.002/spine.003/shoulder.L/upper_arm.L/upper_arm.001.L/forearm.L/forearm.001.L/hand.L/palm.03.L/f_ring.01.L/f_ring.02.L/f_ring.03.L","rig.001/root/spine/spine.001/spine.002/spine.003/shoulder.L/upper_arm.L/upper_arm.001.L/forearm.L/forearm.001.L/hand.L/palm.04.L","rig.001/root/spine/spine.001/spine.002/spine.003/shoulder.L/upper_arm.L/upper_arm.001.L/forearm.L/forearm.001.L/hand.L/palm.04.L/f_pinky.01.L","rig.001/root/spine/spine.001/spine.002/spine.003/shoulder.L/upper_arm.L/upper_arm.001.L/forearm.L/forearm.001.L/hand.L/palm.04.L/f_pinky.01.L/f_pinky.02.L","rig.001/root/spine/spine.001/spine.002/spine.003/shoulder.L/upper_arm.L/upper_arm.001.L/forearm.L/forearm.001.L/hand.L/palm.04.L/f_pinky.01.L/f_pinky.02.L/f_pinky.03.L","rig.001/root/spine/spine.001/spine.002/spine.003/shoulder.R","rig.001/root/spine/spine.001/spine.002/spine.003/shoulder.R/upper_arm.R","rig.001/root/spine/spine.001/spine.002/spine.003/shoulder.R/upper_arm.R/upper_arm.001.R","rig.001/root/spine/spine.001/spine.002/spine.003/shoulder.R/upper_arm.R/upper_arm.001.R/forearm.R","rig.001/root/spine/spine.001/spine.002/spine.003/shoulder.R/upper_arm.R/upper_arm.001.R/forearm.R/forearm.001.R","rig.001/root/spine/spine.001/spine.002/spine.003/shoulder.R/upper_arm.R/upper_arm.001.R/forearm.R/forearm.001.R/hand.R","rig.001/root/spine/spine.001/spine.002/spine.003/shoulder.R/upper_arm.R/upper_arm.001.R/forearm.R/forearm.001.R/hand.R/palm.01.R","rig.001/root/spine/spine.001/spine.002/spine.003/shoulder.R/upper_arm.R/upper_arm.001.R/forearm.R/forearm.001.R/hand.R/palm.01.R/f_index.01.R","rig.001/root/spine/spine.001/spine.002/spine.003/shoulder.R/upper_arm.R/upper_arm.001.R/forearm.R/forearm.001.R/hand.R/palm.01.R/f_index.01.R/f_index.02.R","rig.001/root/spine/spine.001/spine.002/spine.003/shoulder.R/upper_arm.R/upper_arm.001.R/forearm.R/forearm.001.R/hand.R/palm.01.R/f_index.01.R/f_index.02.R/f_index.03.R","rig.001/root/spine/spine.001/spine.002/spine.003/shoulder.R/upper_arm.R/upper_arm.001.R/forearm.R/forearm.001.R/hand.R/palm.01.R/thumb.01.R","rig.001/root/spine/spine.001/spine.002/spine.003/shoulder.R/upper_arm.R/upper_arm.001.R/forearm.R/forearm.001.R/hand.R/palm.01.R/thumb.01.R/thumb.02.R","rig.001/root/spine/spine.001/spine.002/spine.003/shoulder.R/upper_arm.R/upper_arm.001.R/forearm.R/forearm.001.R/hand.R/palm.01.R/thumb.01.R/thumb.02.R/thumb.03.R","rig.001/root/spine/spine.001/spine.002/spine.003/shoulder.R/upper_arm.R/upper_arm.001.R/forearm.R/forearm.001.R/hand.R/palm.02.R","rig.001/root/spine/spine.001/spine.002/spine.003/shoulder.R/upper_arm.R/upper_arm.001.R/forearm.R/forearm.001.R/hand.R/palm.02.R/f_middle.01.R","rig.001/root/spine/spine.001/spine.002/spine.003/shoulder.R/upper_arm.R/upper_arm.001.R/forearm.R/forearm.001.R/hand.R/palm.02.R/f_middle.01.R/f_middle.02.R","rig.001/root/spine/spine.001/spine.002/spine.003/shoulder.R/upper_arm.R/upper_arm.001.R/forearm.R/forearm.001.R/hand.R/palm.02.R/f_middle.01.R/f_middle.02.R/f_middle.03.R","rig.001/root/spine/spine.001/spine.002/spine.003/shoulder.R/upper_arm.R/upper_arm.001.R/forearm.R/forearm.001.R/hand.R/palm.03.R","rig.001/root/spine/spine.001/spine.002/spine.003/shoulder.R/upper_arm.R/upper_arm.001.R/forearm.R/forearm.001.R/hand.R/palm.03.R/f_ring.01.R","rig.001/root/spine/spine.001/spine.002/spine.003/shoulder.R/upper_arm.R/upper_arm.001.R/forearm.R/forearm.001.R/hand.R/palm.03.R/f_ring.01.R/f_ring.02.R","rig.001/root/spine/spine.001/spine.002/spine.003/shoulder.R/upper_arm.R/upper_arm.001.R/forearm.R/forearm.001.R/hand.R/palm.03.R/f_ring.01.R/f_ring.02.R/f_ring.03.R","rig.001/root/spine/spine.001/spine.002/spine.003/shoulder.R/upper_arm.R/upper_arm.001.R/forearm.R/forearm.001.R/hand.R/palm.04.R","rig.001/root/spine/spine.001/spine.002/spine.003/shoulder.R/upper_arm.R/upper_arm.001.R/forearm.R/forearm.001.R/hand.R/palm.04.R/f_pinky.01.R","rig.001/root/spine/spine.001/spine.002/spine.003/shoulder.R/upper_arm.R/upper_arm.001.R/forearm.R/forearm.001.R/hand.R/palm.04.R/f_pinky.01.R/f_pinky.02.R","rig.001/root/spine/spine.001/spine.002/spine.003/shoulder.R/upper_arm.R/upper_arm.001.R/forearm.R/forearm.001.R/hand.R/palm.04.R/f_pinky.01.R/f_pinky.02.R/f_pinky.03.R","rig.001/root/spine/spine.001/spine.002/spine.003/breast.L","rig.001/root/spine/spine.001/spine.002/spine.003/breast.R","rig.001/root/spine/pelvis.L","rig.001/root/spine/pelvis.R","rig.001/root/spine/thigh.L","rig.001/root/spine/thigh.L/thigh.001.L","rig.001/root/spine/thigh.L/thigh.001.L/shin.L","rig.001/root/spine/thigh.L/thigh.001.L/shin.L/shin.001.L","rig.001/root/spine/thigh.L/thigh.001.L/shin.L/shin.001.L/foot.L","rig.001/root/spine/thigh.L/thigh.001.L/shin.L/shin.001.L/foot.L/toe.L","rig.001/root/spine/thigh.R","rig.001/root/spine/thigh.R/thigh.001.R","rig.001/root/spine/thigh.R/thigh.001.R/shin.R","rig.001/root/spine/thigh.R/thigh.001.R/shin.R/shin.001.R","rig.001/root/spine/thigh.R/thigh.001.R/shin.R/shin.001.R/foot.R","rig.001/root/spine/thigh.R/thigh.001.R/shin.R/shin.001.R/foot.R/toe.R"],[[[7,1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1],[7,1,1.4913523813849254e-15,2.384185791015625e-7,0,2.3086994360710378e-7,-0.24963954091072083,-0.9683389067649841,0,5.9518693973359404e-8,0.9683389067649841,-0.24963955581188202,0,-8.143033469742988e-10,-0.010776742361485958,0.0034154364839196205,1],[7,1,-2.1298945214196841e-16,2.384186643666908e-7,0,2.366096367723003e-7,-0.12295382469892502,-0.9924125075340271,0,2.931448328524766e-8,0.9924125075340271,-0.12295383214950562,0,-4.2469325278737813e-10,-0.01281394436955452,0.001781292143277824,1],[7,1,-1.1144142283514655e-14,2.384186927884002e-7,0,2.38297999999304e-7,0.03181256353855133,-0.9994940757751465,0,-7.584696426476967e-9,0.9994940757751465,0.03181256353855133,0,1.0854406956584128e-10,-0.014444232918322086,-0.0004552676691673696,1],[7,1,-1.1862372859710625e-14,2.3841863594498136e-7,0,2.3832140527701995e-7,0.028559789061546326,-0.9995923638343811,0,-6.809172781174766e-9,0.9995923638343811,0.028559789061546326,0,9.583722704320508e-11,-0.01637808419764042,-0.00040197145426645875,1],[7,1,-4.822620371081575e-14,-2.3841850804728892e-7,0,-2.3534460069640772e-7,-0.16006000339984894,-0.987107515335083,0,-3.816120752730967e-8,0.9871073961257935,-0.16006003320217133,0,7.372892296686473e-10,-0.018275195732712746,0.003092421218752861,1],[7,1,-9.257062483095449e-14,-2.3841846541472478e-7,0,-2.3822163086606452e-7,0.04062240943312645,-0.9991747140884399,0,9.685222401856208e-9,0.9991747140884399,0.04062240943312645,0,-1.8321776040775006e-10,-0.019224222749471664,-0.000768464058637619,1],[7,1,-4.631948850083306e-14,9.95702069514666e-14,0,9.94220981584415e-14,-0.003186163492500782,-0.9999951124191284,0,4.663649566354067e-14,0.9999950528144836,-0.0031861637253314257,0,-9.468081344849366e-16,-0.019919073209166527,0.00010420544276712462,1],[7,0.38747256994247437,0.9152210354804993,-0.110613614320755,0,-0.9218434691429138,0.38357123732566833,-0.05547773465514183,0,-0.008346189744770527,0.12346453219652176,0.9923138618469238,0,-0.0006343058776110411,-0.002109030494466424,-0.01782291755080223,1],[7,-0.8309911489486694,0.5547759532928467,0.04095610976219177,0,0.036208998411893845,0.12741106748580933,-0.9911888241767883,0,-0.555105984210968,-0.8221861124038696,-0.12596534192562103,0,0.012380141764879227,0.01319888886064291,0.002449983963742852,1],[7,-0.8309912085533142,0.5547756552696228,0.04095640033483505,0,0.036208588629961014,0.12741106748580933,-0.9911890029907227,0,-0.5551056861877441,-0.8221863508224487,-0.12596513330936432,0,0.012380138970911503,0.011443604715168476,0.002449979539960623,1],[7,-0.8309912085533142,0.506626546382904,-0.229746013879776,0,0.036208376288414,-0.3628639280796051,-0.9311383366584778,0,-0.555105984210968,-0.7820865511894226,0.28319257497787476,0,0.012380142696201801,0.009678276255726814,-0.002489324426278472,1],[7,-0.8309916257858276,0.5066261291503906,-0.22974537312984467,0,0.03620792180299759,-0.36286377906799316,-0.9311385154724121,0,-0.5551053881645203,-0.782086968421936,0.2831929326057434,0,0.012380137108266354,0.00822687242180109,-0.0024893321096897125,1],[7,-0.6410925984382629,0.7458238005638123,-0.18096087872982025,0,-0.04519026353955269,-0.2720666527748108,-0.9612165689468384,0,-0.766131579875946,-0.6080513596534729,0.20812392234802246,0,0.013879137113690376,0.0030595245771110058,-0.001838503871113062,1],[7,0.3562532365322113,0.6496073603630066,-0.6716348528862,0,0.8766136765480042,-0.48119407892227173,-0.0004327966598793864,0,-0.3234679400920868,-0.5886103510856628,-0.7408819198608398,0,0.002450143452733755,0.0029076277278363705,0.013806608505547047,1],[7,0.2653426229953766,0.5773390531539917,-0.772186815738678,0,0.9402543902397156,-0.3321666121482849,0.07474460452795029,0,-0.21334175765514374,-0.7458851337432861,-0.6309835910797119,0,0.0018186946399509907,0.004662031307816505,0.01325935684144497,1],[7,0.2635299265384674,0.4480796158313751,-0.8542695045471191,0,0.9415250420570374,-0.3122216761112213,0.1266811192035675,0,-0.2099582850933075,-0.8377004265785217,-0.5041580200195312,0,0.0017937207594513893,0.0061915116384625435,0.012433233670890331,1],[7,0.2666983902454376,0.2298436164855957,-0.9359719157218933,0,0.9386086463928223,-0.28244125843048096,0.19809149205684662,0,-0.21882709860801697,-0.9313423037528992,-0.2910599112510681,0,0.0018669510027393699,0.008504955098032951,0.010717875324189663,1],[7,0.49519646167755127,0.05384887009859085,0.8671103715896606,0,-0.5259297490119934,-0.7758365273475647,0.34853285551071167,0,0.691504180431366,-0.6286315321922302,-0.3558708429336548,0,-0.012352187186479568,0.007272761315107346,-0.000669782399199903,1],[7,0.48209574818611145,0.37401819229125977,0.7922711372375488,0,-0.503975510597229,-0.6213141679763794,0.5999805927276611,0,0.7166531682014465,-0.68853360414505,-0.11103694885969162,0,-0.012559755705296993,0.005563715007156134,-0.002983722137287259,1],[7,0.529266893863678,0.5751169919967651,0.6237918138504028,0,-0.5459916591644287,-0.3318893015384674,0.7692476511001587,0,0.6494376063346863,-0.7477226257324219,0.13835109770298004,0,-0.012119927443563938,0.004760862328112125,-0.004638932645320892,1],[7,0.2696860432624817,0.6918048858642578,-0.6698318719863892,0,0.9239062666893005,-0.3819562792778015,-0.02250516787171364,0,-0.2714158296585083,-0.6127926707267761,-0.7421709895133972,0,0.0021624374203383923,0.003036636160686612,0.013841894455254078,1],[7,0.3537948727607727,0.5819966197013855,-0.7321944236755371,0,0.9302300810813904,-0.30052870512008667,0.21060487627983093,0,-0.09747418016195297,-0.7556203603744507,-0.6477161645889282,0,-0.0005587507621385157,0.004804576281458139,0.013331950642168522,1],[7,0.3497494161128998,0.41688013076782227,-0.8389789462089539,0,0.932612419128418,-0.23994317650794983,0.26955729722976685,0,-0.08893425762653351,-0.8767198920249939,-0.4727075695991516,0,-0.0006257614586502314,0.006872344296425581,0.012149502523243427,1],[7,0.357612669467926,0.28742462396621704,-0.8885378837585449,0,0.9273972511291504,-0.22113032639026642,0.3017209768295288,0,-0.10976070165634155,-0.9319270253181458,-0.3456357717514038,0,-0.000455858331406489,0.008113847114145756,0.011125441640615463,1],[7,0.1206265240907669,0.7715458273887634,-0.6246326565742493,0,0.9725915789604187,-0.2178543210029602,-0.08127057552337646,0,-0.19878293573856354,-0.5977091789245605,-0.7766780853271484,0,0.0020391170401126146,0.002431898145005107,0.013923391699790955,1],[7,0.10022849589586258,0.5620957612991333,-0.8209765553474426,0,0.9474629759788513,-0.3058272898197174,-0.09371933341026306,0,-0.3037562668323517,-0.7684517502784729,-0.5632174611091614,0,0.0034523638896644115,0.005156481638550758,0.012732056900858879,1],[7,0.11566713452339172,0.4623032808303833,-0.8791455626487732,0,0.936481773853302,-0.34578225016593933,-0.05862070620059967,0,-0.3310934901237488,-0.8165233135223389,-0.4729343354701996,0,0.00364900310523808,0.005852320231497288,0.012136011384427547,1],[7,0.09283486008644104,0.3272530734539032,-0.9403654336929321,0,0.9544668197631836,-0.29816436767578125,-0.009536136873066425,0,-0.2835042476654053,-0.8966621160507202,-0.34003230929374695,0,0.0032924495171755552,0.00754108652472496,0.011119825765490532,1],[7,0.04330408200621605,0.6257373094558716,-0.7788306474685669,0,0.9944501519203186,-0.10181404650211334,-0.02650781348347664,0,-0.0958828404545784,-0.7733604311943054,-0.6266735792160034,0,0.0010848420206457376,0.00566673232242465,0.013020765967667103,1],[7,-0.30315059423446655,0.4169746935367584,-0.8568731546401978,0,0.9103978872299194,-0.1389494687318802,-0.38970306515693665,0,-0.28155842423439026,-0.8982343673706055,-0.3374903202056885,0,0.005753342993557453,0.007785627618432045,0.01001269556581974,1],[7,-0.29827964305877686,0.227646604180336,-0.9269335269927979,0,0.9054044485092163,-0.2399034947156906,-0.35026979446411133,0,-0.3021124601364136,-0.9437282085418701,-0.1345539391040802,0,0.00595654034987092,0.009297593496739864,0.008162204176187515,1],[7,-0.3059699535369873,0.15428780019283295,-0.9394557476043701,0,0.9146034121513367,-0.2263643741607666,-0.3350517749786377,0,-0.26435378193855286,-0.9617453813552856,-0.07185143977403641,0,0.005584815517067909,0.009774141944944859,0.007543083280324936,1],[7,0.3874726891517639,-0.9152210354804993,0.11061360687017441,0,0.9218435287475586,0.3835712671279907,-0.05547770857810974,0,0.008346161805093288,0.12346450239419937,0.9923139214515686,0,0.0006343063432723284,-0.0021090300288051367,-0.01782291755080223,1],[7,-0.830991268157959,-0.5547758936882019,-0.04095611348748207,0,-0.03620895370841026,0.12741102278232574,-0.9911891222000122,0,0.555105984210968,-0.822186291217804,-0.12596529722213745,0,-0.012380142696201801,0.013198891654610634,0.002449982799589634,1],[7,-0.8309914469718933,-0.5547754764556885,-0.04095638170838356,0,-0.03620857372879982,0.12741105258464813,-0.9911889433860779,0,0.5551055669784546,-0.8221865296363831,-0.12596513330936432,0,-0.012380138039588928,0.0114436075091362,0.002449979307129979,1],[7,-0.8309915065765381,-0.506626307964325,0.22974589467048645,0,-0.03620840609073639,-0.3628638982772827,-0.9311384558677673,0,0.5551056265830994,-0.7820869088172913,0.28319263458251953,0,-0.012380140833556652,0.009678284637629986,-0.002489326987415552,1],[7,-0.830991804599762,-0.5066260099411011,0.22974523901939392,0,-0.0362078957259655,-0.3628637194633484,-0.9311387538909912,0,0.5551050901412964,-0.7820871472358704,0.283192902803421,0,-0.01238013431429863,0.008226877078413963,-0.002489333739504218,1],[7,-0.641092836856842,-0.7458238005638123,0.18096067011356354,0,0.04519053176045418,-0.2720666229724884,-0.9612168073654175,0,0.766131579875946,-0.608051598072052,0.20812417566776276,0,-0.0138791399076581,0.0030595280695706606,-0.0018385087605565786,1],[7,0.35625314712524414,-0.6496076583862305,0.6716349124908447,0,-0.8766140937805176,-0.4811938405036926,-0.0004329133953433484,0,0.32346785068511963,-0.5886102914810181,-0.7408820986747742,0,-0.0024501443840563297,0.002907627960667014,0.01380661316215992,1],[7,0.2653423547744751,-0.577339231967926,0.7721869945526123,0,-0.9402546882629395,-0.3321663439273834,0.07474445551633835,0,0.2133416384458542,-0.7458852529525757,-0.6309836506843567,0,-0.0018186947563663125,0.004662031307816505,0.013259358704090118,1],[7,0.26352977752685547,-0.4480797052383423,0.8542693257331848,0,-0.9415251016616821,-0.31222137808799744,0.1266811043024063,0,0.20995797216892242,-0.8377004265785217,-0.5041578412055969,0,-0.0017937187803909183,0.006191510707139969,0.012433231808245182,1],[7,0.26669830083847046,-0.22984416782855988,0.9359717965126038,0,-0.9386088252067566,-0.282441109418869,0.19809140264987946,0,0.21882672607898712,-0.9313424825668335,-0.29106029868125916,0,-0.0018669490236788988,0.008504954166710377,0.010717878118157387,1],[7,0.4951966106891632,-0.053848423063755035,-0.8671103715896606,0,0.5259300470352173,-0.7758364081382751,0.34853267669677734,0,-0.6915040016174316,-0.6286316514015198,-0.35587114095687866,0,0.01235218532383442,0.007272763177752495,-0.0006697779172100127,1],[7,0.4820963740348816,-0.3740176260471344,-0.7922712564468384,0,0.5039758086204529,-0.621314287185669,0.5999805331230164,0,-0.716653048992157,-0.6885338425636292,-0.11103752255439758,0,0.012559761293232441,0.005563722457736731,-0.002983716083690524,1],[7,0.5292673110961914,-0.5751162767410278,-0.6237921118736267,0,0.5459918975830078,-0.3318893611431122,0.7692474126815796,0,-0.6494370698928833,-0.7477232813835144,0.1383506953716278,0,0.012119922786951065,0.0047608730383217335,-0.004638929385691881,1],[7,0.2696860134601593,-0.6918054819107056,0.6698319315910339,0,-0.9239067435264587,-0.38195618987083435,-0.022505197674036026,0,0.27141571044921875,-0.6127929091453552,-0.7421714663505554,0,-0.0021624378859996796,0.0030366380233317614,0.013841903768479824,1],[7,0.35379499197006226,-0.5819973945617676,0.7321940660476685,0,-0.9302303194999695,-0.30052873492240906,0.21060501039028168,0,0.09747378528118134,-0.7556202411651611,-0.647716760635376,0,0.0005587560008279979,0.004804568365216255,0.01333195436745882,1],[7,0.349749356508255,-0.41688084602355957,0.8389789462089539,0,-0.9326126575469971,-0.23994316160678864,0.26955732703208923,0,0.08893396705389023,-0.8767200112342834,-0.472708135843277,0,0.0006257638451643288,0.006872339639812708,0.012149510905146599,1],[7,0.3576127290725708,-0.2874252200126648,0.888538122177124,0,-0.927397608757019,-0.22113029658794403,0.3017209768295288,0,0.10976049304008484,-0.9319273233413696,-0.3456362783908844,0,0.0004558601649478078,0.008113845251500607,0.011125450022518635,1],[7,0.120626300573349,-0.7715458273887634,0.6246328353881836,0,-0.9725916981697083,-0.21785402297973633,-0.08127056062221527,0,0.1987827569246292,-0.5977093577384949,-0.776678204536438,0,-0.0020391165744513273,0.0024318997748196125,0.013923396356403828,1],[7,0.10022841393947601,-0.562095582485199,0.8209766745567322,0,-0.9474632143974304,-0.30582690238952637,-0.09371916949748993,0,0.3037559688091278,-0.7684518098831177,-0.5632174015045166,0,-0.0034523624926805496,0.005156485829502344,0.012732058763504028,1],[7,0.11566726118326187,-0.462303102016449,0.8791453838348389,0,-0.9364818930625916,-0.3457818925380707,-0.05862034484744072,0,0.33109304308891296,-0.8165232539176941,-0.4729342758655548,0,-0.0036489972844719887,0.005852322094142437,0.012136010453104973,1],[7,0.09283474832773209,-0.3272527754306793,0.9403656125068665,0,-0.9544671177864075,-0.29816409945487976,-0.009536013938486576,0,0.2835039794445038,-0.8966625332832336,-0.3400319218635559,0,-0.0032924481201916933,0.007541092112660408,0.011119822971522808,1],[7,0.04330385476350784,-0.6257372498512268,0.7788312435150146,0,-0.9944503903388977,-0.10181383043527603,-0.026507839560508728,0,0.09588270634412766,-0.773361325263977,-0.6266732215881348,0,-0.001084841787815094,0.005666743498295546,0.013020766898989677,1],[7,-0.30315083265304565,-0.41697409749031067,0.8568735718727112,0,-0.9103980660438538,-0.13894949853420258,-0.38970300555229187,0,0.2815581262111664,-0.8982351422309875,-0.33748960494995117,0,-0.005753341596573591,0.00778564065694809,0.010012691840529442,1],[7,-0.2982800006866455,-0.2276458889245987,0.9269340634346008,0,-0.9054046869277954,-0.23990365862846375,-0.35026994347572327,0,0.30211225152015686,-0.9437288641929626,-0.13455313444137573,0,-0.005956542678177357,0.009297607466578484,0.008162199519574642,1],[7,-0.305970162153244,-0.15428732335567474,0.9394561648368835,0,-0.9146036505699158,-0.22636441886425018,-0.33505186438560486,0,0.2643536329269409,-0.961746096611023,-0.0718509703874588,0,-0.005584817845374346,0.009774153120815754,0.007543083280324936,1],[7,-1,-1.1069809513486462e-9,-8.85620110580021e-8,0,1.1069932748242195e-9,-0.9999997615814209,-1.3783575525394554e-7,0,-8.85620110580021e-8,-1.3783574104309082e-7,1,0,0.0010911786230280995,0.0005421112291514874,-0.016216905787587166,1],[7,-1,-1.1069809513486462e-9,-8.85620110580021e-8,0,1.1069932748242195e-9,-0.9999997615814209,-1.3783575525394554e-7,0,-8.85620110580021e-8,-1.3783574104309082e-7,1,0,-0.0010911757126450539,0.0005421112291514874,-0.016216905787587166,1],[7,-0.3717861473560333,0.6168416142463684,-0.6937444806098938,0,-0.902387261390686,-0.4155394434928894,0.11412400752305984,0,-0.21788184344768524,0.6684557199478149,0.7111219763755798,0,0.003016257891431451,-0.007289252243936062,-0.008097676560282707,1],[7,-0.37178611755371094,-0.6168416142463684,0.6937444806098938,0,0.902387261390686,-0.4155394434928894,0.11412402242422104,0,0.21788179874420166,0.6684557795524597,0.7111217975616455,0,-0.003016258357092738,-0.0072892531752586365,-0.008097675628960133,1],[7,0.9788966178894043,0.03239113464951515,0.20177285373210907,0,-0.20095303654670715,-0.02686535380780697,0.9792331457138062,0,0.03713914379477501,-0.9991142749786377,-0.0197893138974905,0,-0.001955766463652253,0.011982849799096584,-0.00012113447155570611,1],[7,0.9788966178894043,0.03239107131958008,0.20177282392978668,0,-0.20095299184322357,-0.02686539851129055,0.9792330861091614,0,0.03713908791542053,-0.9991143941879272,-0.019789373502135277,0,-0.0019557662308216095,0.00950558204203844,-0.00012113346019759774,1],[7,0.9788969159126282,0.06283223628997803,0.19445616006851196,0,-0.20095203816890717,0.12303029000759125,0.9718450903892517,0,0.0371391698718071,-0.9904122948646545,0.1330602765083313,0,-0.0019557673949748278,0.006927328649908304,-0.0011933038476854563,1],[7,0.9788969159126282,0.06283215433359146,0.1944560557603836,0,-0.2009519338607788,0.12303029000759125,0.9718450903892517,0,0.03713911399245262,-0.990412175655365,0.1330602616071701,0,-0.001955766696482897,0.004053902346640825,-0.0011933034984394908,1],[7,0.996258556842804,0.07160516083240509,-0.048394594341516495,0,0.0864252895116806,-0.825458824634552,0.5578075647354126,0,-0.000005848095952387666,-0.5599030256271362,-0.8285584449768066,0,-0.002118313917890191,0.001148779527284205,0.0009140963084064424,1],[7,-0.9999861717224121,-3.159503307870182e-7,0.00527871772646904,0,-0.000488661287818104,-0.9957011938095093,-0.0926302969455719,0,0.005256050731986761,-0.09263164550065994,0.9956867694854736,0,0.0022082719951868057,-0.0009366122540086508,-0.00042094517266377807,1],[7,0.9788965582847595,-0.03239111974835396,-0.20177273452281952,0,0.2009529322385788,-0.02686537243425846,0.9792327880859375,0,-0.037139132618904114,-0.9991142153739929,-0.01978933811187744,0,0.0019557655323296785,0.01198284886777401,-0.00012113387492718175,1],[7,0.9788966774940491,-0.03239106386899948,-0.20177268981933594,0,0.20095287263393402,-0.02686545066535473,0.9792327880859375,0,-0.037139080464839935,-0.9991142749786377,-0.019789423793554306,0,0.001955765299499035,0.00950558204203844,-0.00012113272532587871,1],[7,0.978896975517273,-0.06283222883939743,-0.194456085562706,0,0.20095200836658478,0.12303024530410767,0.9718449711799622,0,-0.03713918477296829,-0.9904122948646545,0.13306020200252533,0,0.001955766696482897,0.006927327252924442,-0.0011933029163628817,1],[7,0.978896975517273,-0.06283214688301086,-0.19445598125457764,0,0.20095190405845642,0.12303026020526886,0.9718449711799622,0,-0.03713911771774292,-0.9904121160507202,0.13306021690368652,0,0.001955765997990966,0.004053902346640825,-0.0011933027999475598,1],[7,0.9962583780288696,-0.07160545140504837,0.04839411377906799,0,-0.0864252820611,-0.8254583477973938,0.557807981967926,0,0.00000523547487318865,-0.5599033236503601,-0.8285582065582275,0,0.0021183143835514784,0.0011487791780382395,0.0009140954934991896,1],[7,-0.9999861717224121,1.9440525989011803e-7,-0.005278825294226408,0,0.000488791789393872,-0.9957002401351929,-0.09263019263744354,0,-0.005256147123873234,-0.09263145923614502,0.9956867694854736,0,-0.0022082715295255184,-0.0009366121958009899,-0.00042094505624845624,1]],8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8]]],0,0,[],[],[]],[[[31,".bin",2110214675,[{"primitives":[{"primitiveMode":7,"jointMapIndex":0,"vertexBundelIndices":[0],"indexView":{"offset":292864,"length":19716,"count":9858,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":292864,"count":2816,"stride":104},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_joints","format":42,"isNormalized":false},{"name":"a_weights","format":44,"isNormalized":false},{"name":"a_color","format":44,"isNormalized":false},{"name":"a_texCoord1","format":21,"isNormalized":false},{"name":"a_texCoord2","format":21,"isNormalized":false}]}],"jointMaps":[[0,64,65,66,67,70,71,72,73]]},"minPosition",8,[1,-0.0031712118070572615,-0.0026954282075166702,0.0000942548576858826],"maxPosition",8,[1,0.0031712118070572615,0.0014348233817145228,0.003481043968349695]]],-1],0,0,[],[],[]],[[[120,"Skin-5",3353122877,["rig.001/root","rig.001/root/spine","rig.001/root/spine/spine.001","rig.001/root/spine/spine.001/spine.002","rig.001/root/spine/spine.001/spine.002/spine.003","rig.001/root/spine/spine.001/spine.002/spine.003/spine.004","rig.001/root/spine/spine.001/spine.002/spine.003/spine.004/spine.005","rig.001/root/spine/spine.001/spine.002/spine.003/spine.004/spine.005/spine.006","rig.001/root/spine/spine.001/spine.002/spine.003/shoulder.L","rig.001/root/spine/spine.001/spine.002/spine.003/shoulder.L/upper_arm.L","rig.001/root/spine/spine.001/spine.002/spine.003/shoulder.L/upper_arm.L/upper_arm.001.L","rig.001/root/spine/spine.001/spine.002/spine.003/shoulder.L/upper_arm.L/upper_arm.001.L/forearm.L","rig.001/root/spine/spine.001/spine.002/spine.003/shoulder.L/upper_arm.L/upper_arm.001.L/forearm.L/forearm.001.L","rig.001/root/spine/spine.001/spine.002/spine.003/shoulder.L/upper_arm.L/upper_arm.001.L/forearm.L/forearm.001.L/hand.L","rig.001/root/spine/spine.001/spine.002/spine.003/shoulder.L/upper_arm.L/upper_arm.001.L/forearm.L/forearm.001.L/hand.L/palm.01.L","rig.001/root/spine/spine.001/spine.002/spine.003/shoulder.L/upper_arm.L/upper_arm.001.L/forearm.L/forearm.001.L/hand.L/palm.01.L/f_index.01.L","rig.001/root/spine/spine.001/spine.002/spine.003/shoulder.L/upper_arm.L/upper_arm.001.L/forearm.L/forearm.001.L/hand.L/palm.01.L/f_index.01.L/f_index.02.L","rig.001/root/spine/spine.001/spine.002/spine.003/shoulder.L/upper_arm.L/upper_arm.001.L/forearm.L/forearm.001.L/hand.L/palm.01.L/f_index.01.L/f_index.02.L/f_index.03.L","rig.001/root/spine/spine.001/spine.002/spine.003/shoulder.L/upper_arm.L/upper_arm.001.L/forearm.L/forearm.001.L/hand.L/palm.01.L/thumb.01.L","rig.001/root/spine/spine.001/spine.002/spine.003/shoulder.L/upper_arm.L/upper_arm.001.L/forearm.L/forearm.001.L/hand.L/palm.01.L/thumb.01.L/thumb.02.L","rig.001/root/spine/spine.001/spine.002/spine.003/shoulder.L/upper_arm.L/upper_arm.001.L/forearm.L/forearm.001.L/hand.L/palm.01.L/thumb.01.L/thumb.02.L/thumb.03.L","rig.001/root/spine/spine.001/spine.002/spine.003/shoulder.L/upper_arm.L/upper_arm.001.L/forearm.L/forearm.001.L/hand.L/palm.02.L","rig.001/root/spine/spine.001/spine.002/spine.003/shoulder.L/upper_arm.L/upper_arm.001.L/forearm.L/forearm.001.L/hand.L/palm.02.L/f_middle.01.L","rig.001/root/spine/spine.001/spine.002/spine.003/shoulder.L/upper_arm.L/upper_arm.001.L/forearm.L/forearm.001.L/hand.L/palm.02.L/f_middle.01.L/f_middle.02.L","rig.001/root/spine/spine.001/spine.002/spine.003/shoulder.L/upper_arm.L/upper_arm.001.L/forearm.L/forearm.001.L/hand.L/palm.02.L/f_middle.01.L/f_middle.02.L/f_middle.03.L","rig.001/root/spine/spine.001/spine.002/spine.003/shoulder.L/upper_arm.L/upper_arm.001.L/forearm.L/forearm.001.L/hand.L/palm.03.L","rig.001/root/spine/spine.001/spine.002/spine.003/shoulder.L/upper_arm.L/upper_arm.001.L/forearm.L/forearm.001.L/hand.L/palm.03.L/f_ring.01.L","rig.001/root/spine/spine.001/spine.002/spine.003/shoulder.L/upper_arm.L/upper_arm.001.L/forearm.L/forearm.001.L/hand.L/palm.03.L/f_ring.01.L/f_ring.02.L","rig.001/root/spine/spine.001/spine.002/spine.003/shoulder.L/upper_arm.L/upper_arm.001.L/forearm.L/forearm.001.L/hand.L/palm.03.L/f_ring.01.L/f_ring.02.L/f_ring.03.L","rig.001/root/spine/spine.001/spine.002/spine.003/shoulder.L/upper_arm.L/upper_arm.001.L/forearm.L/forearm.001.L/hand.L/palm.04.L","rig.001/root/spine/spine.001/spine.002/spine.003/shoulder.L/upper_arm.L/upper_arm.001.L/forearm.L/forearm.001.L/hand.L/palm.04.L/f_pinky.01.L","rig.001/root/spine/spine.001/spine.002/spine.003/shoulder.L/upper_arm.L/upper_arm.001.L/forearm.L/forearm.001.L/hand.L/palm.04.L/f_pinky.01.L/f_pinky.02.L","rig.001/root/spine/spine.001/spine.002/spine.003/shoulder.L/upper_arm.L/upper_arm.001.L/forearm.L/forearm.001.L/hand.L/palm.04.L/f_pinky.01.L/f_pinky.02.L/f_pinky.03.L","rig.001/root/spine/spine.001/spine.002/spine.003/shoulder.R","rig.001/root/spine/spine.001/spine.002/spine.003/shoulder.R/upper_arm.R","rig.001/root/spine/spine.001/spine.002/spine.003/shoulder.R/upper_arm.R/upper_arm.001.R","rig.001/root/spine/spine.001/spine.002/spine.003/shoulder.R/upper_arm.R/upper_arm.001.R/forearm.R","rig.001/root/spine/spine.001/spine.002/spine.003/shoulder.R/upper_arm.R/upper_arm.001.R/forearm.R/forearm.001.R","rig.001/root/spine/spine.001/spine.002/spine.003/shoulder.R/upper_arm.R/upper_arm.001.R/forearm.R/forearm.001.R/hand.R","rig.001/root/spine/spine.001/spine.002/spine.003/shoulder.R/upper_arm.R/upper_arm.001.R/forearm.R/forearm.001.R/hand.R/palm.01.R","rig.001/root/spine/spine.001/spine.002/spine.003/shoulder.R/upper_arm.R/upper_arm.001.R/forearm.R/forearm.001.R/hand.R/palm.01.R/f_index.01.R","rig.001/root/spine/spine.001/spine.002/spine.003/shoulder.R/upper_arm.R/upper_arm.001.R/forearm.R/forearm.001.R/hand.R/palm.01.R/f_index.01.R/f_index.02.R","rig.001/root/spine/spine.001/spine.002/spine.003/shoulder.R/upper_arm.R/upper_arm.001.R/forearm.R/forearm.001.R/hand.R/palm.01.R/f_index.01.R/f_index.02.R/f_index.03.R","rig.001/root/spine/spine.001/spine.002/spine.003/shoulder.R/upper_arm.R/upper_arm.001.R/forearm.R/forearm.001.R/hand.R/palm.01.R/thumb.01.R","rig.001/root/spine/spine.001/spine.002/spine.003/shoulder.R/upper_arm.R/upper_arm.001.R/forearm.R/forearm.001.R/hand.R/palm.01.R/thumb.01.R/thumb.02.R","rig.001/root/spine/spine.001/spine.002/spine.003/shoulder.R/upper_arm.R/upper_arm.001.R/forearm.R/forearm.001.R/hand.R/palm.01.R/thumb.01.R/thumb.02.R/thumb.03.R","rig.001/root/spine/spine.001/spine.002/spine.003/shoulder.R/upper_arm.R/upper_arm.001.R/forearm.R/forearm.001.R/hand.R/palm.02.R","rig.001/root/spine/spine.001/spine.002/spine.003/shoulder.R/upper_arm.R/upper_arm.001.R/forearm.R/forearm.001.R/hand.R/palm.02.R/f_middle.01.R","rig.001/root/spine/spine.001/spine.002/spine.003/shoulder.R/upper_arm.R/upper_arm.001.R/forearm.R/forearm.001.R/hand.R/palm.02.R/f_middle.01.R/f_middle.02.R","rig.001/root/spine/spine.001/spine.002/spine.003/shoulder.R/upper_arm.R/upper_arm.001.R/forearm.R/forearm.001.R/hand.R/palm.02.R/f_middle.01.R/f_middle.02.R/f_middle.03.R","rig.001/root/spine/spine.001/spine.002/spine.003/shoulder.R/upper_arm.R/upper_arm.001.R/forearm.R/forearm.001.R/hand.R/palm.03.R","rig.001/root/spine/spine.001/spine.002/spine.003/shoulder.R/upper_arm.R/upper_arm.001.R/forearm.R/forearm.001.R/hand.R/palm.03.R/f_ring.01.R","rig.001/root/spine/spine.001/spine.002/spine.003/shoulder.R/upper_arm.R/upper_arm.001.R/forearm.R/forearm.001.R/hand.R/palm.03.R/f_ring.01.R/f_ring.02.R","rig.001/root/spine/spine.001/spine.002/spine.003/shoulder.R/upper_arm.R/upper_arm.001.R/forearm.R/forearm.001.R/hand.R/palm.03.R/f_ring.01.R/f_ring.02.R/f_ring.03.R","rig.001/root/spine/spine.001/spine.002/spine.003/shoulder.R/upper_arm.R/upper_arm.001.R/forearm.R/forearm.001.R/hand.R/palm.04.R","rig.001/root/spine/spine.001/spine.002/spine.003/shoulder.R/upper_arm.R/upper_arm.001.R/forearm.R/forearm.001.R/hand.R/palm.04.R/f_pinky.01.R","rig.001/root/spine/spine.001/spine.002/spine.003/shoulder.R/upper_arm.R/upper_arm.001.R/forearm.R/forearm.001.R/hand.R/palm.04.R/f_pinky.01.R/f_pinky.02.R","rig.001/root/spine/spine.001/spine.002/spine.003/shoulder.R/upper_arm.R/upper_arm.001.R/forearm.R/forearm.001.R/hand.R/palm.04.R/f_pinky.01.R/f_pinky.02.R/f_pinky.03.R","rig.001/root/spine/spine.001/spine.002/spine.003/breast.L","rig.001/root/spine/spine.001/spine.002/spine.003/breast.R","rig.001/root/spine/pelvis.L","rig.001/root/spine/pelvis.R","rig.001/root/spine/thigh.L","rig.001/root/spine/thigh.L/thigh.001.L","rig.001/root/spine/thigh.L/thigh.001.L/shin.L","rig.001/root/spine/thigh.L/thigh.001.L/shin.L/shin.001.L","rig.001/root/spine/thigh.L/thigh.001.L/shin.L/shin.001.L/foot.L","rig.001/root/spine/thigh.L/thigh.001.L/shin.L/shin.001.L/foot.L/toe.L","rig.001/root/spine/thigh.R","rig.001/root/spine/thigh.R/thigh.001.R","rig.001/root/spine/thigh.R/thigh.001.R/shin.R","rig.001/root/spine/thigh.R/thigh.001.R/shin.R/shin.001.R","rig.001/root/spine/thigh.R/thigh.001.R/shin.R/shin.001.R/foot.R","rig.001/root/spine/thigh.R/thigh.001.R/shin.R/shin.001.R/foot.R/toe.R"],[[[7,1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1],[7,1,1.4913523813849254e-15,2.384185791015625e-7,0,2.3086994360710378e-7,-0.24963954091072083,-0.9683389067649841,0,5.9518693973359404e-8,0.9683389067649841,-0.24963955581188202,0,-8.143033469742988e-10,-0.010776742361485958,0.0034154364839196205,1],[7,1,-2.1298945214196841e-16,2.384186643666908e-7,0,2.366096367723003e-7,-0.12295382469892502,-0.9924125075340271,0,2.931448328524766e-8,0.9924125075340271,-0.12295383214950562,0,-4.2469325278737813e-10,-0.01281394436955452,0.001781292143277824,1],[7,1,-1.1144142283514655e-14,2.384186927884002e-7,0,2.38297999999304e-7,0.03181256353855133,-0.9994940757751465,0,-7.584696426476967e-9,0.9994940757751465,0.03181256353855133,0,1.0854406956584128e-10,-0.014444232918322086,-0.0004552676691673696,1],[7,1,-1.1862372859710625e-14,2.3841863594498136e-7,0,2.3832140527701995e-7,0.028559789061546326,-0.9995923638343811,0,-6.809172781174766e-9,0.9995923638343811,0.028559789061546326,0,9.583722704320508e-11,-0.01637808419764042,-0.00040197145426645875,1],[7,1,-4.822620371081575e-14,-2.3841850804728892e-7,0,-2.3534460069640772e-7,-0.16006000339984894,-0.987107515335083,0,-3.816120752730967e-8,0.9871073961257935,-0.16006003320217133,0,7.372892296686473e-10,-0.018275195732712746,0.003092421218752861,1],[7,1,-9.257062483095449e-14,-2.3841846541472478e-7,0,-2.3822163086606452e-7,0.04062240943312645,-0.9991747140884399,0,9.685222401856208e-9,0.9991747140884399,0.04062240943312645,0,-1.8321776040775006e-10,-0.019224222749471664,-0.000768464058637619,1],[7,1,-4.631948850083306e-14,9.95702069514666e-14,0,9.94220981584415e-14,-0.003186163492500782,-0.9999951124191284,0,4.663649566354067e-14,0.9999950528144836,-0.0031861637253314257,0,-9.468081344849366e-16,-0.019919073209166527,0.00010420544276712462,1],[7,0.38747256994247437,0.9152210354804993,-0.110613614320755,0,-0.9218434691429138,0.38357123732566833,-0.05547773465514183,0,-0.008346189744770527,0.12346453219652176,0.9923138618469238,0,-0.0006343058776110411,-0.002109030494466424,-0.01782291755080223,1],[7,-0.8309911489486694,0.5547759532928467,0.04095610976219177,0,0.036208998411893845,0.12741106748580933,-0.9911888241767883,0,-0.555105984210968,-0.8221861124038696,-0.12596534192562103,0,0.012380141764879227,0.01319888886064291,0.002449983963742852,1],[7,-0.8309912085533142,0.5547756552696228,0.04095640033483505,0,0.036208588629961014,0.12741106748580933,-0.9911890029907227,0,-0.5551056861877441,-0.8221863508224487,-0.12596513330936432,0,0.012380138970911503,0.011443604715168476,0.002449979539960623,1],[7,-0.8309912085533142,0.506626546382904,-0.229746013879776,0,0.036208376288414,-0.3628639280796051,-0.9311383366584778,0,-0.555105984210968,-0.7820865511894226,0.28319257497787476,0,0.012380142696201801,0.009678276255726814,-0.002489324426278472,1],[7,-0.8309916257858276,0.5066261291503906,-0.22974537312984467,0,0.03620792180299759,-0.36286377906799316,-0.9311385154724121,0,-0.5551053881645203,-0.782086968421936,0.2831929326057434,0,0.012380137108266354,0.00822687242180109,-0.0024893321096897125,1],[7,-0.6410925984382629,0.7458238005638123,-0.18096087872982025,0,-0.04519026353955269,-0.2720666527748108,-0.9612165689468384,0,-0.766131579875946,-0.6080513596534729,0.20812392234802246,0,0.013879137113690376,0.0030595245771110058,-0.001838503871113062,1],[7,0.3562532365322113,0.6496073603630066,-0.6716348528862,0,0.8766136765480042,-0.48119407892227173,-0.0004327966598793864,0,-0.3234679400920868,-0.5886103510856628,-0.7408819198608398,0,0.002450143452733755,0.0029076277278363705,0.013806608505547047,1],[7,0.2653426229953766,0.5773390531539917,-0.772186815738678,0,0.9402543902397156,-0.3321666121482849,0.07474460452795029,0,-0.21334175765514374,-0.7458851337432861,-0.6309835910797119,0,0.0018186946399509907,0.004662031307816505,0.01325935684144497,1],[7,0.2635299265384674,0.4480796158313751,-0.8542695045471191,0,0.9415250420570374,-0.3122216761112213,0.1266811192035675,0,-0.2099582850933075,-0.8377004265785217,-0.5041580200195312,0,0.0017937207594513893,0.0061915116384625435,0.012433233670890331,1],[7,0.2666983902454376,0.2298436164855957,-0.9359719157218933,0,0.9386086463928223,-0.28244125843048096,0.19809149205684662,0,-0.21882709860801697,-0.9313423037528992,-0.2910599112510681,0,0.0018669510027393699,0.008504955098032951,0.010717875324189663,1],[7,0.49519646167755127,0.05384887009859085,0.8671103715896606,0,-0.5259297490119934,-0.7758365273475647,0.34853285551071167,0,0.691504180431366,-0.6286315321922302,-0.3558708429336548,0,-0.012352187186479568,0.007272761315107346,-0.000669782399199903,1],[7,0.48209574818611145,0.37401819229125977,0.7922711372375488,0,-0.503975510597229,-0.6213141679763794,0.5999805927276611,0,0.7166531682014465,-0.68853360414505,-0.11103694885969162,0,-0.012559755705296993,0.005563715007156134,-0.002983722137287259,1],[7,0.529266893863678,0.5751169919967651,0.6237918138504028,0,-0.5459916591644287,-0.3318893015384674,0.7692476511001587,0,0.6494376063346863,-0.7477226257324219,0.13835109770298004,0,-0.012119927443563938,0.004760862328112125,-0.004638932645320892,1],[7,0.2696860432624817,0.6918048858642578,-0.6698318719863892,0,0.9239062666893005,-0.3819562792778015,-0.02250516787171364,0,-0.2714158296585083,-0.6127926707267761,-0.7421709895133972,0,0.0021624374203383923,0.003036636160686612,0.013841894455254078,1],[7,0.3537948727607727,0.5819966197013855,-0.7321944236755371,0,0.9302300810813904,-0.30052870512008667,0.21060487627983093,0,-0.09747418016195297,-0.7556203603744507,-0.6477161645889282,0,-0.0005587507621385157,0.004804576281458139,0.013331950642168522,1],[7,0.3497494161128998,0.41688013076782227,-0.8389789462089539,0,0.932612419128418,-0.23994317650794983,0.26955729722976685,0,-0.08893425762653351,-0.8767198920249939,-0.4727075695991516,0,-0.0006257614586502314,0.006872344296425581,0.012149502523243427,1],[7,0.357612669467926,0.28742462396621704,-0.8885378837585449,0,0.9273972511291504,-0.22113032639026642,0.3017209768295288,0,-0.10976070165634155,-0.9319270253181458,-0.3456357717514038,0,-0.000455858331406489,0.008113847114145756,0.011125441640615463,1],[7,0.1206265240907669,0.7715458273887634,-0.6246326565742493,0,0.9725915789604187,-0.2178543210029602,-0.08127057552337646,0,-0.19878293573856354,-0.5977091789245605,-0.7766780853271484,0,0.0020391170401126146,0.002431898145005107,0.013923391699790955,1],[7,0.10022849589586258,0.5620957612991333,-0.8209765553474426,0,0.9474629759788513,-0.3058272898197174,-0.09371933341026306,0,-0.3037562668323517,-0.7684517502784729,-0.5632174611091614,0,0.0034523638896644115,0.005156481638550758,0.012732056900858879,1],[7,0.11566713452339172,0.4623032808303833,-0.8791455626487732,0,0.936481773853302,-0.34578225016593933,-0.05862070620059967,0,-0.3310934901237488,-0.8165233135223389,-0.4729343354701996,0,0.00364900310523808,0.005852320231497288,0.012136011384427547,1],[7,0.09283486008644104,0.3272530734539032,-0.9403654336929321,0,0.9544668197631836,-0.29816436767578125,-0.009536136873066425,0,-0.2835042476654053,-0.8966621160507202,-0.34003230929374695,0,0.0032924495171755552,0.00754108652472496,0.011119825765490532,1],[7,0.04330408200621605,0.6257373094558716,-0.7788306474685669,0,0.9944501519203186,-0.10181404650211334,-0.02650781348347664,0,-0.0958828404545784,-0.7733604311943054,-0.6266735792160034,0,0.0010848420206457376,0.00566673232242465,0.013020765967667103,1],[7,-0.30315059423446655,0.4169746935367584,-0.8568731546401978,0,0.9103978872299194,-0.1389494687318802,-0.38970306515693665,0,-0.28155842423439026,-0.8982343673706055,-0.3374903202056885,0,0.005753342993557453,0.007785627618432045,0.01001269556581974,1],[7,-0.29827964305877686,0.227646604180336,-0.9269335269927979,0,0.9054044485092163,-0.2399034947156906,-0.35026979446411133,0,-0.3021124601364136,-0.9437282085418701,-0.1345539391040802,0,0.00595654034987092,0.009297593496739864,0.008162204176187515,1],[7,-0.3059699535369873,0.15428780019283295,-0.9394557476043701,0,0.9146034121513367,-0.2263643741607666,-0.3350517749786377,0,-0.26435378193855286,-0.9617453813552856,-0.07185143977403641,0,0.005584815517067909,0.009774141944944859,0.007543083280324936,1],[7,0.3874726891517639,-0.9152210354804993,0.11061360687017441,0,0.9218435287475586,0.3835712671279907,-0.05547770857810974,0,0.008346161805093288,0.12346450239419937,0.9923139214515686,0,0.0006343063432723284,-0.0021090300288051367,-0.01782291755080223,1],[7,-0.830991268157959,-0.5547758936882019,-0.04095611348748207,0,-0.03620895370841026,0.12741102278232574,-0.9911891222000122,0,0.555105984210968,-0.822186291217804,-0.12596529722213745,0,-0.012380142696201801,0.013198891654610634,0.002449982799589634,1],[7,-0.8309914469718933,-0.5547754764556885,-0.04095638170838356,0,-0.03620857372879982,0.12741105258464813,-0.9911889433860779,0,0.5551055669784546,-0.8221865296363831,-0.12596513330936432,0,-0.012380138039588928,0.0114436075091362,0.002449979307129979,1],[7,-0.8309915065765381,-0.506626307964325,0.22974589467048645,0,-0.03620840609073639,-0.3628638982772827,-0.9311384558677673,0,0.5551056265830994,-0.7820869088172913,0.28319263458251953,0,-0.012380140833556652,0.009678284637629986,-0.002489326987415552,1],[7,-0.830991804599762,-0.5066260099411011,0.22974523901939392,0,-0.0362078957259655,-0.3628637194633484,-0.9311387538909912,0,0.5551050901412964,-0.7820871472358704,0.283192902803421,0,-0.01238013431429863,0.008226877078413963,-0.002489333739504218,1],[7,-0.641092836856842,-0.7458238005638123,0.18096067011356354,0,0.04519053176045418,-0.2720666229724884,-0.9612168073654175,0,0.766131579875946,-0.608051598072052,0.20812417566776276,0,-0.0138791399076581,0.0030595280695706606,-0.0018385087605565786,1],[7,0.35625314712524414,-0.6496076583862305,0.6716349124908447,0,-0.8766140937805176,-0.4811938405036926,-0.0004329133953433484,0,0.32346785068511963,-0.5886102914810181,-0.7408820986747742,0,-0.0024501443840563297,0.002907627960667014,0.01380661316215992,1],[7,0.2653423547744751,-0.577339231967926,0.7721869945526123,0,-0.9402546882629395,-0.3321663439273834,0.07474445551633835,0,0.2133416384458542,-0.7458852529525757,-0.6309836506843567,0,-0.0018186947563663125,0.004662031307816505,0.013259358704090118,1],[7,0.26352977752685547,-0.4480797052383423,0.8542693257331848,0,-0.9415251016616821,-0.31222137808799744,0.1266811043024063,0,0.20995797216892242,-0.8377004265785217,-0.5041578412055969,0,-0.0017937187803909183,0.006191510707139969,0.012433231808245182,1],[7,0.26669830083847046,-0.22984416782855988,0.9359717965126038,0,-0.9386088252067566,-0.282441109418869,0.19809140264987946,0,0.21882672607898712,-0.9313424825668335,-0.29106029868125916,0,-0.0018669490236788988,0.008504954166710377,0.010717878118157387,1],[7,0.4951966106891632,-0.053848423063755035,-0.8671103715896606,0,0.5259300470352173,-0.7758364081382751,0.34853267669677734,0,-0.6915040016174316,-0.6286316514015198,-0.35587114095687866,0,0.01235218532383442,0.007272763177752495,-0.0006697779172100127,1],[7,0.4820963740348816,-0.3740176260471344,-0.7922712564468384,0,0.5039758086204529,-0.621314287185669,0.5999805331230164,0,-0.716653048992157,-0.6885338425636292,-0.11103752255439758,0,0.012559761293232441,0.005563722457736731,-0.002983716083690524,1],[7,0.5292673110961914,-0.5751162767410278,-0.6237921118736267,0,0.5459918975830078,-0.3318893611431122,0.7692474126815796,0,-0.6494370698928833,-0.7477232813835144,0.1383506953716278,0,0.012119922786951065,0.0047608730383217335,-0.004638929385691881,1],[7,0.2696860134601593,-0.6918054819107056,0.6698319315910339,0,-0.9239067435264587,-0.38195618987083435,-0.022505197674036026,0,0.27141571044921875,-0.6127929091453552,-0.7421714663505554,0,-0.0021624378859996796,0.0030366380233317614,0.013841903768479824,1],[7,0.35379499197006226,-0.5819973945617676,0.7321940660476685,0,-0.9302303194999695,-0.30052873492240906,0.21060501039028168,0,0.09747378528118134,-0.7556202411651611,-0.647716760635376,0,0.0005587560008279979,0.004804568365216255,0.01333195436745882,1],[7,0.349749356508255,-0.41688084602355957,0.8389789462089539,0,-0.9326126575469971,-0.23994316160678864,0.26955732703208923,0,0.08893396705389023,-0.8767200112342834,-0.472708135843277,0,0.0006257638451643288,0.006872339639812708,0.012149510905146599,1],[7,0.3576127290725708,-0.2874252200126648,0.888538122177124,0,-0.927397608757019,-0.22113029658794403,0.3017209768295288,0,0.10976049304008484,-0.9319273233413696,-0.3456362783908844,0,0.0004558601649478078,0.008113845251500607,0.011125450022518635,1],[7,0.120626300573349,-0.7715458273887634,0.6246328353881836,0,-0.9725916981697083,-0.21785402297973633,-0.08127056062221527,0,0.1987827569246292,-0.5977093577384949,-0.776678204536438,0,-0.0020391165744513273,0.0024318997748196125,0.013923396356403828,1],[7,0.10022841393947601,-0.562095582485199,0.8209766745567322,0,-0.9474632143974304,-0.30582690238952637,-0.09371916949748993,0,0.3037559688091278,-0.7684518098831177,-0.5632174015045166,0,-0.0034523624926805496,0.005156485829502344,0.012732058763504028,1],[7,0.11566726118326187,-0.462303102016449,0.8791453838348389,0,-0.9364818930625916,-0.3457818925380707,-0.05862034484744072,0,0.33109304308891296,-0.8165232539176941,-0.4729342758655548,0,-0.0036489972844719887,0.005852322094142437,0.012136010453104973,1],[7,0.09283474832773209,-0.3272527754306793,0.9403656125068665,0,-0.9544671177864075,-0.29816409945487976,-0.009536013938486576,0,0.2835039794445038,-0.8966625332832336,-0.3400319218635559,0,-0.0032924481201916933,0.007541092112660408,0.011119822971522808,1],[7,0.04330385476350784,-0.6257372498512268,0.7788312435150146,0,-0.9944503903388977,-0.10181383043527603,-0.026507839560508728,0,0.09588270634412766,-0.773361325263977,-0.6266732215881348,0,-0.001084841787815094,0.005666743498295546,0.013020766898989677,1],[7,-0.30315083265304565,-0.41697409749031067,0.8568735718727112,0,-0.9103980660438538,-0.13894949853420258,-0.38970300555229187,0,0.2815581262111664,-0.8982351422309875,-0.33748960494995117,0,-0.005753341596573591,0.00778564065694809,0.010012691840529442,1],[7,-0.2982800006866455,-0.2276458889245987,0.9269340634346008,0,-0.9054046869277954,-0.23990365862846375,-0.35026994347572327,0,0.30211225152015686,-0.9437288641929626,-0.13455313444137573,0,-0.005956542678177357,0.009297607466578484,0.008162199519574642,1],[7,-0.305970162153244,-0.15428732335567474,0.9394561648368835,0,-0.9146036505699158,-0.22636441886425018,-0.33505186438560486,0,0.2643536329269409,-0.961746096611023,-0.0718509703874588,0,-0.005584817845374346,0.009774153120815754,0.007543083280324936,1],[7,-1,-1.1069809513486462e-9,-8.85620110580021e-8,0,1.1069932748242195e-9,-0.9999997615814209,-1.3783575525394554e-7,0,-8.85620110580021e-8,-1.3783574104309082e-7,1,0,0.0010911786230280995,0.0005421112291514874,-0.016216905787587166,1],[7,-1,-1.1069809513486462e-9,-8.85620110580021e-8,0,1.1069932748242195e-9,-0.9999997615814209,-1.3783575525394554e-7,0,-8.85620110580021e-8,-1.3783574104309082e-7,1,0,-0.0010911757126450539,0.0005421112291514874,-0.016216905787587166,1],[7,-0.3717861473560333,0.6168416142463684,-0.6937444806098938,0,-0.902387261390686,-0.4155394434928894,0.11412400752305984,0,-0.21788184344768524,0.6684557199478149,0.7111219763755798,0,0.003016257891431451,-0.007289252243936062,-0.008097676560282707,1],[7,-0.37178611755371094,-0.6168416142463684,0.6937444806098938,0,0.902387261390686,-0.4155394434928894,0.11412402242422104,0,0.21788179874420166,0.6684557795524597,0.7111217975616455,0,-0.003016258357092738,-0.0072892531752586365,-0.008097675628960133,1],[7,0.9788966178894043,0.03239113464951515,0.20177285373210907,0,-0.20095303654670715,-0.02686535380780697,0.9792331457138062,0,0.03713914379477501,-0.9991142749786377,-0.0197893138974905,0,-0.001955766463652253,0.011982849799096584,-0.00012113447155570611,1],[7,0.9788966178894043,0.03239107131958008,0.20177282392978668,0,-0.20095299184322357,-0.02686539851129055,0.9792330861091614,0,0.03713908791542053,-0.9991143941879272,-0.019789373502135277,0,-0.0019557662308216095,0.00950558204203844,-0.00012113346019759774,1],[7,0.9788969159126282,0.06283223628997803,0.19445616006851196,0,-0.20095203816890717,0.12303029000759125,0.9718450903892517,0,0.0371391698718071,-0.9904122948646545,0.1330602765083313,0,-0.0019557673949748278,0.006927328649908304,-0.0011933038476854563,1],[7,0.9788969159126282,0.06283215433359146,0.1944560557603836,0,-0.2009519338607788,0.12303029000759125,0.9718450903892517,0,0.03713911399245262,-0.990412175655365,0.1330602616071701,0,-0.001955766696482897,0.004053902346640825,-0.0011933034984394908,1],[7,0.996258556842804,0.07160516083240509,-0.048394594341516495,0,0.0864252895116806,-0.825458824634552,0.5578075647354126,0,-0.000005848095952387666,-0.5599030256271362,-0.8285584449768066,0,-0.002118313917890191,0.001148779527284205,0.0009140963084064424,1],[7,-0.9999861717224121,-3.159503307870182e-7,0.00527871772646904,0,-0.000488661287818104,-0.9957011938095093,-0.0926302969455719,0,0.005256050731986761,-0.09263164550065994,0.9956867694854736,0,0.0022082719951868057,-0.0009366122540086508,-0.00042094517266377807,1],[7,0.9788965582847595,-0.03239111974835396,-0.20177273452281952,0,0.2009529322385788,-0.02686537243425846,0.9792327880859375,0,-0.037139132618904114,-0.9991142153739929,-0.01978933811187744,0,0.0019557655323296785,0.01198284886777401,-0.00012113387492718175,1],[7,0.9788966774940491,-0.03239106386899948,-0.20177268981933594,0,0.20095287263393402,-0.02686545066535473,0.9792327880859375,0,-0.037139080464839935,-0.9991142749786377,-0.019789423793554306,0,0.001955765299499035,0.00950558204203844,-0.00012113272532587871,1],[7,0.978896975517273,-0.06283222883939743,-0.194456085562706,0,0.20095200836658478,0.12303024530410767,0.9718449711799622,0,-0.03713918477296829,-0.9904122948646545,0.13306020200252533,0,0.001955766696482897,0.006927327252924442,-0.0011933029163628817,1],[7,0.978896975517273,-0.06283214688301086,-0.19445598125457764,0,0.20095190405845642,0.12303026020526886,0.9718449711799622,0,-0.03713911771774292,-0.9904121160507202,0.13306021690368652,0,0.001955765997990966,0.004053902346640825,-0.0011933027999475598,1],[7,0.9962583780288696,-0.07160545140504837,0.04839411377906799,0,-0.0864252820611,-0.8254583477973938,0.557807981967926,0,0.00000523547487318865,-0.5599033236503601,-0.8285582065582275,0,0.0021183143835514784,0.0011487791780382395,0.0009140954934991896,1],[7,-0.9999861717224121,1.9440525989011803e-7,-0.005278825294226408,0,0.000488791789393872,-0.9957002401351929,-0.09263019263744354,0,-0.005256147123873234,-0.09263145923614502,0.9956867694854736,0,-0.0022082715295255184,-0.0009366121958009899,-0.00042094505624845624,1]],8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8]]],0,0,[],[],[]],[[[31,".bin",2651633600,[{"primitives":[{"primitiveMode":7,"jointMapIndex":0,"vertexBundelIndices":[0],"indexView":{"offset":110656,"length":10812,"count":5406,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":110656,"count":1064,"stride":104},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_joints","format":42,"isNormalized":false},{"name":"a_weights","format":44,"isNormalized":false},{"name":"a_color","format":44,"isNormalized":false},{"name":"a_texCoord1","format":21,"isNormalized":false},{"name":"a_texCoord2","format":21,"isNormalized":false}]}],"jointMaps":[[0,7]]},"minPosition",8,[1,-0.000924279389437288,-0.0011699020396918058,0.020998261868953705],"maxPosition",8,[1,0.000924279389437288,-0.0005690111429430544,0.02158091589808464]]],-1],0,0,[],[],[]],[[[120,"Skin-2",3353122877,["rig.001/root","rig.001/root/spine","rig.001/root/spine/spine.001","rig.001/root/spine/spine.001/spine.002","rig.001/root/spine/spine.001/spine.002/spine.003","rig.001/root/spine/spine.001/spine.002/spine.003/spine.004","rig.001/root/spine/spine.001/spine.002/spine.003/spine.004/spine.005","rig.001/root/spine/spine.001/spine.002/spine.003/spine.004/spine.005/spine.006","rig.001/root/spine/spine.001/spine.002/spine.003/shoulder.L","rig.001/root/spine/spine.001/spine.002/spine.003/shoulder.L/upper_arm.L","rig.001/root/spine/spine.001/spine.002/spine.003/shoulder.L/upper_arm.L/upper_arm.001.L","rig.001/root/spine/spine.001/spine.002/spine.003/shoulder.L/upper_arm.L/upper_arm.001.L/forearm.L","rig.001/root/spine/spine.001/spine.002/spine.003/shoulder.L/upper_arm.L/upper_arm.001.L/forearm.L/forearm.001.L","rig.001/root/spine/spine.001/spine.002/spine.003/shoulder.L/upper_arm.L/upper_arm.001.L/forearm.L/forearm.001.L/hand.L","rig.001/root/spine/spine.001/spine.002/spine.003/shoulder.L/upper_arm.L/upper_arm.001.L/forearm.L/forearm.001.L/hand.L/palm.01.L","rig.001/root/spine/spine.001/spine.002/spine.003/shoulder.L/upper_arm.L/upper_arm.001.L/forearm.L/forearm.001.L/hand.L/palm.01.L/f_index.01.L","rig.001/root/spine/spine.001/spine.002/spine.003/shoulder.L/upper_arm.L/upper_arm.001.L/forearm.L/forearm.001.L/hand.L/palm.01.L/f_index.01.L/f_index.02.L","rig.001/root/spine/spine.001/spine.002/spine.003/shoulder.L/upper_arm.L/upper_arm.001.L/forearm.L/forearm.001.L/hand.L/palm.01.L/f_index.01.L/f_index.02.L/f_index.03.L","rig.001/root/spine/spine.001/spine.002/spine.003/shoulder.L/upper_arm.L/upper_arm.001.L/forearm.L/forearm.001.L/hand.L/palm.01.L/thumb.01.L","rig.001/root/spine/spine.001/spine.002/spine.003/shoulder.L/upper_arm.L/upper_arm.001.L/forearm.L/forearm.001.L/hand.L/palm.01.L/thumb.01.L/thumb.02.L","rig.001/root/spine/spine.001/spine.002/spine.003/shoulder.L/upper_arm.L/upper_arm.001.L/forearm.L/forearm.001.L/hand.L/palm.01.L/thumb.01.L/thumb.02.L/thumb.03.L","rig.001/root/spine/spine.001/spine.002/spine.003/shoulder.L/upper_arm.L/upper_arm.001.L/forearm.L/forearm.001.L/hand.L/palm.02.L","rig.001/root/spine/spine.001/spine.002/spine.003/shoulder.L/upper_arm.L/upper_arm.001.L/forearm.L/forearm.001.L/hand.L/palm.02.L/f_middle.01.L","rig.001/root/spine/spine.001/spine.002/spine.003/shoulder.L/upper_arm.L/upper_arm.001.L/forearm.L/forearm.001.L/hand.L/palm.02.L/f_middle.01.L/f_middle.02.L","rig.001/root/spine/spine.001/spine.002/spine.003/shoulder.L/upper_arm.L/upper_arm.001.L/forearm.L/forearm.001.L/hand.L/palm.02.L/f_middle.01.L/f_middle.02.L/f_middle.03.L","rig.001/root/spine/spine.001/spine.002/spine.003/shoulder.L/upper_arm.L/upper_arm.001.L/forearm.L/forearm.001.L/hand.L/palm.03.L","rig.001/root/spine/spine.001/spine.002/spine.003/shoulder.L/upper_arm.L/upper_arm.001.L/forearm.L/forearm.001.L/hand.L/palm.03.L/f_ring.01.L","rig.001/root/spine/spine.001/spine.002/spine.003/shoulder.L/upper_arm.L/upper_arm.001.L/forearm.L/forearm.001.L/hand.L/palm.03.L/f_ring.01.L/f_ring.02.L","rig.001/root/spine/spine.001/spine.002/spine.003/shoulder.L/upper_arm.L/upper_arm.001.L/forearm.L/forearm.001.L/hand.L/palm.03.L/f_ring.01.L/f_ring.02.L/f_ring.03.L","rig.001/root/spine/spine.001/spine.002/spine.003/shoulder.L/upper_arm.L/upper_arm.001.L/forearm.L/forearm.001.L/hand.L/palm.04.L","rig.001/root/spine/spine.001/spine.002/spine.003/shoulder.L/upper_arm.L/upper_arm.001.L/forearm.L/forearm.001.L/hand.L/palm.04.L/f_pinky.01.L","rig.001/root/spine/spine.001/spine.002/spine.003/shoulder.L/upper_arm.L/upper_arm.001.L/forearm.L/forearm.001.L/hand.L/palm.04.L/f_pinky.01.L/f_pinky.02.L","rig.001/root/spine/spine.001/spine.002/spine.003/shoulder.L/upper_arm.L/upper_arm.001.L/forearm.L/forearm.001.L/hand.L/palm.04.L/f_pinky.01.L/f_pinky.02.L/f_pinky.03.L","rig.001/root/spine/spine.001/spine.002/spine.003/shoulder.R","rig.001/root/spine/spine.001/spine.002/spine.003/shoulder.R/upper_arm.R","rig.001/root/spine/spine.001/spine.002/spine.003/shoulder.R/upper_arm.R/upper_arm.001.R","rig.001/root/spine/spine.001/spine.002/spine.003/shoulder.R/upper_arm.R/upper_arm.001.R/forearm.R","rig.001/root/spine/spine.001/spine.002/spine.003/shoulder.R/upper_arm.R/upper_arm.001.R/forearm.R/forearm.001.R","rig.001/root/spine/spine.001/spine.002/spine.003/shoulder.R/upper_arm.R/upper_arm.001.R/forearm.R/forearm.001.R/hand.R","rig.001/root/spine/spine.001/spine.002/spine.003/shoulder.R/upper_arm.R/upper_arm.001.R/forearm.R/forearm.001.R/hand.R/palm.01.R","rig.001/root/spine/spine.001/spine.002/spine.003/shoulder.R/upper_arm.R/upper_arm.001.R/forearm.R/forearm.001.R/hand.R/palm.01.R/f_index.01.R","rig.001/root/spine/spine.001/spine.002/spine.003/shoulder.R/upper_arm.R/upper_arm.001.R/forearm.R/forearm.001.R/hand.R/palm.01.R/f_index.01.R/f_index.02.R","rig.001/root/spine/spine.001/spine.002/spine.003/shoulder.R/upper_arm.R/upper_arm.001.R/forearm.R/forearm.001.R/hand.R/palm.01.R/f_index.01.R/f_index.02.R/f_index.03.R","rig.001/root/spine/spine.001/spine.002/spine.003/shoulder.R/upper_arm.R/upper_arm.001.R/forearm.R/forearm.001.R/hand.R/palm.01.R/thumb.01.R","rig.001/root/spine/spine.001/spine.002/spine.003/shoulder.R/upper_arm.R/upper_arm.001.R/forearm.R/forearm.001.R/hand.R/palm.01.R/thumb.01.R/thumb.02.R","rig.001/root/spine/spine.001/spine.002/spine.003/shoulder.R/upper_arm.R/upper_arm.001.R/forearm.R/forearm.001.R/hand.R/palm.01.R/thumb.01.R/thumb.02.R/thumb.03.R","rig.001/root/spine/spine.001/spine.002/spine.003/shoulder.R/upper_arm.R/upper_arm.001.R/forearm.R/forearm.001.R/hand.R/palm.02.R","rig.001/root/spine/spine.001/spine.002/spine.003/shoulder.R/upper_arm.R/upper_arm.001.R/forearm.R/forearm.001.R/hand.R/palm.02.R/f_middle.01.R","rig.001/root/spine/spine.001/spine.002/spine.003/shoulder.R/upper_arm.R/upper_arm.001.R/forearm.R/forearm.001.R/hand.R/palm.02.R/f_middle.01.R/f_middle.02.R","rig.001/root/spine/spine.001/spine.002/spine.003/shoulder.R/upper_arm.R/upper_arm.001.R/forearm.R/forearm.001.R/hand.R/palm.02.R/f_middle.01.R/f_middle.02.R/f_middle.03.R","rig.001/root/spine/spine.001/spine.002/spine.003/shoulder.R/upper_arm.R/upper_arm.001.R/forearm.R/forearm.001.R/hand.R/palm.03.R","rig.001/root/spine/spine.001/spine.002/spine.003/shoulder.R/upper_arm.R/upper_arm.001.R/forearm.R/forearm.001.R/hand.R/palm.03.R/f_ring.01.R","rig.001/root/spine/spine.001/spine.002/spine.003/shoulder.R/upper_arm.R/upper_arm.001.R/forearm.R/forearm.001.R/hand.R/palm.03.R/f_ring.01.R/f_ring.02.R","rig.001/root/spine/spine.001/spine.002/spine.003/shoulder.R/upper_arm.R/upper_arm.001.R/forearm.R/forearm.001.R/hand.R/palm.03.R/f_ring.01.R/f_ring.02.R/f_ring.03.R","rig.001/root/spine/spine.001/spine.002/spine.003/shoulder.R/upper_arm.R/upper_arm.001.R/forearm.R/forearm.001.R/hand.R/palm.04.R","rig.001/root/spine/spine.001/spine.002/spine.003/shoulder.R/upper_arm.R/upper_arm.001.R/forearm.R/forearm.001.R/hand.R/palm.04.R/f_pinky.01.R","rig.001/root/spine/spine.001/spine.002/spine.003/shoulder.R/upper_arm.R/upper_arm.001.R/forearm.R/forearm.001.R/hand.R/palm.04.R/f_pinky.01.R/f_pinky.02.R","rig.001/root/spine/spine.001/spine.002/spine.003/shoulder.R/upper_arm.R/upper_arm.001.R/forearm.R/forearm.001.R/hand.R/palm.04.R/f_pinky.01.R/f_pinky.02.R/f_pinky.03.R","rig.001/root/spine/spine.001/spine.002/spine.003/breast.L","rig.001/root/spine/spine.001/spine.002/spine.003/breast.R","rig.001/root/spine/pelvis.L","rig.001/root/spine/pelvis.R","rig.001/root/spine/thigh.L","rig.001/root/spine/thigh.L/thigh.001.L","rig.001/root/spine/thigh.L/thigh.001.L/shin.L","rig.001/root/spine/thigh.L/thigh.001.L/shin.L/shin.001.L","rig.001/root/spine/thigh.L/thigh.001.L/shin.L/shin.001.L/foot.L","rig.001/root/spine/thigh.L/thigh.001.L/shin.L/shin.001.L/foot.L/toe.L","rig.001/root/spine/thigh.R","rig.001/root/spine/thigh.R/thigh.001.R","rig.001/root/spine/thigh.R/thigh.001.R/shin.R","rig.001/root/spine/thigh.R/thigh.001.R/shin.R/shin.001.R","rig.001/root/spine/thigh.R/thigh.001.R/shin.R/shin.001.R/foot.R","rig.001/root/spine/thigh.R/thigh.001.R/shin.R/shin.001.R/foot.R/toe.R"],[[[7,1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1],[7,1,1.4913523813849254e-15,2.384185791015625e-7,0,2.3086994360710378e-7,-0.24963954091072083,-0.9683389067649841,0,5.9518693973359404e-8,0.9683389067649841,-0.24963955581188202,0,-8.143033469742988e-10,-0.010776742361485958,0.0034154364839196205,1],[7,1,-2.1298945214196841e-16,2.384186643666908e-7,0,2.366096367723003e-7,-0.12295382469892502,-0.9924125075340271,0,2.931448328524766e-8,0.9924125075340271,-0.12295383214950562,0,-4.2469325278737813e-10,-0.01281394436955452,0.001781292143277824,1],[7,1,-1.1144142283514655e-14,2.384186927884002e-7,0,2.38297999999304e-7,0.03181256353855133,-0.9994940757751465,0,-7.584696426476967e-9,0.9994940757751465,0.03181256353855133,0,1.0854406956584128e-10,-0.014444232918322086,-0.0004552676691673696,1],[7,1,-1.1862372859710625e-14,2.3841863594498136e-7,0,2.3832140527701995e-7,0.028559789061546326,-0.9995923638343811,0,-6.809172781174766e-9,0.9995923638343811,0.028559789061546326,0,9.583722704320508e-11,-0.01637808419764042,-0.00040197145426645875,1],[7,1,-4.822620371081575e-14,-2.3841850804728892e-7,0,-2.3534460069640772e-7,-0.16006000339984894,-0.987107515335083,0,-3.816120752730967e-8,0.9871073961257935,-0.16006003320217133,0,7.372892296686473e-10,-0.018275195732712746,0.003092421218752861,1],[7,1,-9.257062483095449e-14,-2.3841846541472478e-7,0,-2.3822163086606452e-7,0.04062240943312645,-0.9991747140884399,0,9.685222401856208e-9,0.9991747140884399,0.04062240943312645,0,-1.8321776040775006e-10,-0.019224222749471664,-0.000768464058637619,1],[7,1,-4.631948850083306e-14,9.95702069514666e-14,0,9.94220981584415e-14,-0.003186163492500782,-0.9999951124191284,0,4.663649566354067e-14,0.9999950528144836,-0.0031861637253314257,0,-9.468081344849366e-16,-0.019919073209166527,0.00010420544276712462,1],[7,0.38747256994247437,0.9152210354804993,-0.110613614320755,0,-0.9218434691429138,0.38357123732566833,-0.05547773465514183,0,-0.008346189744770527,0.12346453219652176,0.9923138618469238,0,-0.0006343058776110411,-0.002109030494466424,-0.01782291755080223,1],[7,-0.8309911489486694,0.5547759532928467,0.04095610976219177,0,0.036208998411893845,0.12741106748580933,-0.9911888241767883,0,-0.555105984210968,-0.8221861124038696,-0.12596534192562103,0,0.012380141764879227,0.01319888886064291,0.002449983963742852,1],[7,-0.8309912085533142,0.5547756552696228,0.04095640033483505,0,0.036208588629961014,0.12741106748580933,-0.9911890029907227,0,-0.5551056861877441,-0.8221863508224487,-0.12596513330936432,0,0.012380138970911503,0.011443604715168476,0.002449979539960623,1],[7,-0.8309912085533142,0.506626546382904,-0.229746013879776,0,0.036208376288414,-0.3628639280796051,-0.9311383366584778,0,-0.555105984210968,-0.7820865511894226,0.28319257497787476,0,0.012380142696201801,0.009678276255726814,-0.002489324426278472,1],[7,-0.8309916257858276,0.5066261291503906,-0.22974537312984467,0,0.03620792180299759,-0.36286377906799316,-0.9311385154724121,0,-0.5551053881645203,-0.782086968421936,0.2831929326057434,0,0.012380137108266354,0.00822687242180109,-0.0024893321096897125,1],[7,-0.6410925984382629,0.7458238005638123,-0.18096087872982025,0,-0.04519026353955269,-0.2720666527748108,-0.9612165689468384,0,-0.766131579875946,-0.6080513596534729,0.20812392234802246,0,0.013879137113690376,0.0030595245771110058,-0.001838503871113062,1],[7,0.3562532365322113,0.6496073603630066,-0.6716348528862,0,0.8766136765480042,-0.48119407892227173,-0.0004327966598793864,0,-0.3234679400920868,-0.5886103510856628,-0.7408819198608398,0,0.002450143452733755,0.0029076277278363705,0.013806608505547047,1],[7,0.2653426229953766,0.5773390531539917,-0.772186815738678,0,0.9402543902397156,-0.3321666121482849,0.07474460452795029,0,-0.21334175765514374,-0.7458851337432861,-0.6309835910797119,0,0.0018186946399509907,0.004662031307816505,0.01325935684144497,1],[7,0.2635299265384674,0.4480796158313751,-0.8542695045471191,0,0.9415250420570374,-0.3122216761112213,0.1266811192035675,0,-0.2099582850933075,-0.8377004265785217,-0.5041580200195312,0,0.0017937207594513893,0.0061915116384625435,0.012433233670890331,1],[7,0.2666983902454376,0.2298436164855957,-0.9359719157218933,0,0.9386086463928223,-0.28244125843048096,0.19809149205684662,0,-0.21882709860801697,-0.9313423037528992,-0.2910599112510681,0,0.0018669510027393699,0.008504955098032951,0.010717875324189663,1],[7,0.49519646167755127,0.05384887009859085,0.8671103715896606,0,-0.5259297490119934,-0.7758365273475647,0.34853285551071167,0,0.691504180431366,-0.6286315321922302,-0.3558708429336548,0,-0.012352187186479568,0.007272761315107346,-0.000669782399199903,1],[7,0.48209574818611145,0.37401819229125977,0.7922711372375488,0,-0.503975510597229,-0.6213141679763794,0.5999805927276611,0,0.7166531682014465,-0.68853360414505,-0.11103694885969162,0,-0.012559755705296993,0.005563715007156134,-0.002983722137287259,1],[7,0.529266893863678,0.5751169919967651,0.6237918138504028,0,-0.5459916591644287,-0.3318893015384674,0.7692476511001587,0,0.6494376063346863,-0.7477226257324219,0.13835109770298004,0,-0.012119927443563938,0.004760862328112125,-0.004638932645320892,1],[7,0.2696860432624817,0.6918048858642578,-0.6698318719863892,0,0.9239062666893005,-0.3819562792778015,-0.02250516787171364,0,-0.2714158296585083,-0.6127926707267761,-0.7421709895133972,0,0.0021624374203383923,0.003036636160686612,0.013841894455254078,1],[7,0.3537948727607727,0.5819966197013855,-0.7321944236755371,0,0.9302300810813904,-0.30052870512008667,0.21060487627983093,0,-0.09747418016195297,-0.7556203603744507,-0.6477161645889282,0,-0.0005587507621385157,0.004804576281458139,0.013331950642168522,1],[7,0.3497494161128998,0.41688013076782227,-0.8389789462089539,0,0.932612419128418,-0.23994317650794983,0.26955729722976685,0,-0.08893425762653351,-0.8767198920249939,-0.4727075695991516,0,-0.0006257614586502314,0.006872344296425581,0.012149502523243427,1],[7,0.357612669467926,0.28742462396621704,-0.8885378837585449,0,0.9273972511291504,-0.22113032639026642,0.3017209768295288,0,-0.10976070165634155,-0.9319270253181458,-0.3456357717514038,0,-0.000455858331406489,0.008113847114145756,0.011125441640615463,1],[7,0.1206265240907669,0.7715458273887634,-0.6246326565742493,0,0.9725915789604187,-0.2178543210029602,-0.08127057552337646,0,-0.19878293573856354,-0.5977091789245605,-0.7766780853271484,0,0.0020391170401126146,0.002431898145005107,0.013923391699790955,1],[7,0.10022849589586258,0.5620957612991333,-0.8209765553474426,0,0.9474629759788513,-0.3058272898197174,-0.09371933341026306,0,-0.3037562668323517,-0.7684517502784729,-0.5632174611091614,0,0.0034523638896644115,0.005156481638550758,0.012732056900858879,1],[7,0.11566713452339172,0.4623032808303833,-0.8791455626487732,0,0.936481773853302,-0.34578225016593933,-0.05862070620059967,0,-0.3310934901237488,-0.8165233135223389,-0.4729343354701996,0,0.00364900310523808,0.005852320231497288,0.012136011384427547,1],[7,0.09283486008644104,0.3272530734539032,-0.9403654336929321,0,0.9544668197631836,-0.29816436767578125,-0.009536136873066425,0,-0.2835042476654053,-0.8966621160507202,-0.34003230929374695,0,0.0032924495171755552,0.00754108652472496,0.011119825765490532,1],[7,0.04330408200621605,0.6257373094558716,-0.7788306474685669,0,0.9944501519203186,-0.10181404650211334,-0.02650781348347664,0,-0.0958828404545784,-0.7733604311943054,-0.6266735792160034,0,0.0010848420206457376,0.00566673232242465,0.013020765967667103,1],[7,-0.30315059423446655,0.4169746935367584,-0.8568731546401978,0,0.9103978872299194,-0.1389494687318802,-0.38970306515693665,0,-0.28155842423439026,-0.8982343673706055,-0.3374903202056885,0,0.005753342993557453,0.007785627618432045,0.01001269556581974,1],[7,-0.29827964305877686,0.227646604180336,-0.9269335269927979,0,0.9054044485092163,-0.2399034947156906,-0.35026979446411133,0,-0.3021124601364136,-0.9437282085418701,-0.1345539391040802,0,0.00595654034987092,0.009297593496739864,0.008162204176187515,1],[7,-0.3059699535369873,0.15428780019283295,-0.9394557476043701,0,0.9146034121513367,-0.2263643741607666,-0.3350517749786377,0,-0.26435378193855286,-0.9617453813552856,-0.07185143977403641,0,0.005584815517067909,0.009774141944944859,0.007543083280324936,1],[7,0.3874726891517639,-0.9152210354804993,0.11061360687017441,0,0.9218435287475586,0.3835712671279907,-0.05547770857810974,0,0.008346161805093288,0.12346450239419937,0.9923139214515686,0,0.0006343063432723284,-0.0021090300288051367,-0.01782291755080223,1],[7,-0.830991268157959,-0.5547758936882019,-0.04095611348748207,0,-0.03620895370841026,0.12741102278232574,-0.9911891222000122,0,0.555105984210968,-0.822186291217804,-0.12596529722213745,0,-0.012380142696201801,0.013198891654610634,0.002449982799589634,1],[7,-0.8309914469718933,-0.5547754764556885,-0.04095638170838356,0,-0.03620857372879982,0.12741105258464813,-0.9911889433860779,0,0.5551055669784546,-0.8221865296363831,-0.12596513330936432,0,-0.012380138039588928,0.0114436075091362,0.002449979307129979,1],[7,-0.8309915065765381,-0.506626307964325,0.22974589467048645,0,-0.03620840609073639,-0.3628638982772827,-0.9311384558677673,0,0.5551056265830994,-0.7820869088172913,0.28319263458251953,0,-0.012380140833556652,0.009678284637629986,-0.002489326987415552,1],[7,-0.830991804599762,-0.5066260099411011,0.22974523901939392,0,-0.0362078957259655,-0.3628637194633484,-0.9311387538909912,0,0.5551050901412964,-0.7820871472358704,0.283192902803421,0,-0.01238013431429863,0.008226877078413963,-0.002489333739504218,1],[7,-0.641092836856842,-0.7458238005638123,0.18096067011356354,0,0.04519053176045418,-0.2720666229724884,-0.9612168073654175,0,0.766131579875946,-0.608051598072052,0.20812417566776276,0,-0.0138791399076581,0.0030595280695706606,-0.0018385087605565786,1],[7,0.35625314712524414,-0.6496076583862305,0.6716349124908447,0,-0.8766140937805176,-0.4811938405036926,-0.0004329133953433484,0,0.32346785068511963,-0.5886102914810181,-0.7408820986747742,0,-0.0024501443840563297,0.002907627960667014,0.01380661316215992,1],[7,0.2653423547744751,-0.577339231967926,0.7721869945526123,0,-0.9402546882629395,-0.3321663439273834,0.07474445551633835,0,0.2133416384458542,-0.7458852529525757,-0.6309836506843567,0,-0.0018186947563663125,0.004662031307816505,0.013259358704090118,1],[7,0.26352977752685547,-0.4480797052383423,0.8542693257331848,0,-0.9415251016616821,-0.31222137808799744,0.1266811043024063,0,0.20995797216892242,-0.8377004265785217,-0.5041578412055969,0,-0.0017937187803909183,0.006191510707139969,0.012433231808245182,1],[7,0.26669830083847046,-0.22984416782855988,0.9359717965126038,0,-0.9386088252067566,-0.282441109418869,0.19809140264987946,0,0.21882672607898712,-0.9313424825668335,-0.29106029868125916,0,-0.0018669490236788988,0.008504954166710377,0.010717878118157387,1],[7,0.4951966106891632,-0.053848423063755035,-0.8671103715896606,0,0.5259300470352173,-0.7758364081382751,0.34853267669677734,0,-0.6915040016174316,-0.6286316514015198,-0.35587114095687866,0,0.01235218532383442,0.007272763177752495,-0.0006697779172100127,1],[7,0.4820963740348816,-0.3740176260471344,-0.7922712564468384,0,0.5039758086204529,-0.621314287185669,0.5999805331230164,0,-0.716653048992157,-0.6885338425636292,-0.11103752255439758,0,0.012559761293232441,0.005563722457736731,-0.002983716083690524,1],[7,0.5292673110961914,-0.5751162767410278,-0.6237921118736267,0,0.5459918975830078,-0.3318893611431122,0.7692474126815796,0,-0.6494370698928833,-0.7477232813835144,0.1383506953716278,0,0.012119922786951065,0.0047608730383217335,-0.004638929385691881,1],[7,0.2696860134601593,-0.6918054819107056,0.6698319315910339,0,-0.9239067435264587,-0.38195618987083435,-0.022505197674036026,0,0.27141571044921875,-0.6127929091453552,-0.7421714663505554,0,-0.0021624378859996796,0.0030366380233317614,0.013841903768479824,1],[7,0.35379499197006226,-0.5819973945617676,0.7321940660476685,0,-0.9302303194999695,-0.30052873492240906,0.21060501039028168,0,0.09747378528118134,-0.7556202411651611,-0.647716760635376,0,0.0005587560008279979,0.004804568365216255,0.01333195436745882,1],[7,0.349749356508255,-0.41688084602355957,0.8389789462089539,0,-0.9326126575469971,-0.23994316160678864,0.26955732703208923,0,0.08893396705389023,-0.8767200112342834,-0.472708135843277,0,0.0006257638451643288,0.006872339639812708,0.012149510905146599,1],[7,0.3576127290725708,-0.2874252200126648,0.888538122177124,0,-0.927397608757019,-0.22113029658794403,0.3017209768295288,0,0.10976049304008484,-0.9319273233413696,-0.3456362783908844,0,0.0004558601649478078,0.008113845251500607,0.011125450022518635,1],[7,0.120626300573349,-0.7715458273887634,0.6246328353881836,0,-0.9725916981697083,-0.21785402297973633,-0.08127056062221527,0,0.1987827569246292,-0.5977093577384949,-0.776678204536438,0,-0.0020391165744513273,0.0024318997748196125,0.013923396356403828,1],[7,0.10022841393947601,-0.562095582485199,0.8209766745567322,0,-0.9474632143974304,-0.30582690238952637,-0.09371916949748993,0,0.3037559688091278,-0.7684518098831177,-0.5632174015045166,0,-0.0034523624926805496,0.005156485829502344,0.012732058763504028,1],[7,0.11566726118326187,-0.462303102016449,0.8791453838348389,0,-0.9364818930625916,-0.3457818925380707,-0.05862034484744072,0,0.33109304308891296,-0.8165232539176941,-0.4729342758655548,0,-0.0036489972844719887,0.005852322094142437,0.012136010453104973,1],[7,0.09283474832773209,-0.3272527754306793,0.9403656125068665,0,-0.9544671177864075,-0.29816409945487976,-0.009536013938486576,0,0.2835039794445038,-0.8966625332832336,-0.3400319218635559,0,-0.0032924481201916933,0.007541092112660408,0.011119822971522808,1],[7,0.04330385476350784,-0.6257372498512268,0.7788312435150146,0,-0.9944503903388977,-0.10181383043527603,-0.026507839560508728,0,0.09588270634412766,-0.773361325263977,-0.6266732215881348,0,-0.001084841787815094,0.005666743498295546,0.013020766898989677,1],[7,-0.30315083265304565,-0.41697409749031067,0.8568735718727112,0,-0.9103980660438538,-0.13894949853420258,-0.38970300555229187,0,0.2815581262111664,-0.8982351422309875,-0.33748960494995117,0,-0.005753341596573591,0.00778564065694809,0.010012691840529442,1],[7,-0.2982800006866455,-0.2276458889245987,0.9269340634346008,0,-0.9054046869277954,-0.23990365862846375,-0.35026994347572327,0,0.30211225152015686,-0.9437288641929626,-0.13455313444137573,0,-0.005956542678177357,0.009297607466578484,0.008162199519574642,1],[7,-0.305970162153244,-0.15428732335567474,0.9394561648368835,0,-0.9146036505699158,-0.22636441886425018,-0.33505186438560486,0,0.2643536329269409,-0.961746096611023,-0.0718509703874588,0,-0.005584817845374346,0.009774153120815754,0.007543083280324936,1],[7,-1,-1.1069809513486462e-9,-8.85620110580021e-8,0,1.1069932748242195e-9,-0.9999997615814209,-1.3783575525394554e-7,0,-8.85620110580021e-8,-1.3783574104309082e-7,1,0,0.0010911786230280995,0.0005421112291514874,-0.016216905787587166,1],[7,-1,-1.1069809513486462e-9,-8.85620110580021e-8,0,1.1069932748242195e-9,-0.9999997615814209,-1.3783575525394554e-7,0,-8.85620110580021e-8,-1.3783574104309082e-7,1,0,-0.0010911757126450539,0.0005421112291514874,-0.016216905787587166,1],[7,-0.3717861473560333,0.6168416142463684,-0.6937444806098938,0,-0.902387261390686,-0.4155394434928894,0.11412400752305984,0,-0.21788184344768524,0.6684557199478149,0.7111219763755798,0,0.003016257891431451,-0.007289252243936062,-0.008097676560282707,1],[7,-0.37178611755371094,-0.6168416142463684,0.6937444806098938,0,0.902387261390686,-0.4155394434928894,0.11412402242422104,0,0.21788179874420166,0.6684557795524597,0.7111217975616455,0,-0.003016258357092738,-0.0072892531752586365,-0.008097675628960133,1],[7,0.9788966178894043,0.03239113464951515,0.20177285373210907,0,-0.20095303654670715,-0.02686535380780697,0.9792331457138062,0,0.03713914379477501,-0.9991142749786377,-0.0197893138974905,0,-0.001955766463652253,0.011982849799096584,-0.00012113447155570611,1],[7,0.9788966178894043,0.03239107131958008,0.20177282392978668,0,-0.20095299184322357,-0.02686539851129055,0.9792330861091614,0,0.03713908791542053,-0.9991143941879272,-0.019789373502135277,0,-0.0019557662308216095,0.00950558204203844,-0.00012113346019759774,1],[7,0.9788969159126282,0.06283223628997803,0.19445616006851196,0,-0.20095203816890717,0.12303029000759125,0.9718450903892517,0,0.0371391698718071,-0.9904122948646545,0.1330602765083313,0,-0.0019557673949748278,0.006927328649908304,-0.0011933038476854563,1],[7,0.9788969159126282,0.06283215433359146,0.1944560557603836,0,-0.2009519338607788,0.12303029000759125,0.9718450903892517,0,0.03713911399245262,-0.990412175655365,0.1330602616071701,0,-0.001955766696482897,0.004053902346640825,-0.0011933034984394908,1],[7,0.996258556842804,0.07160516083240509,-0.048394594341516495,0,0.0864252895116806,-0.825458824634552,0.5578075647354126,0,-0.000005848095952387666,-0.5599030256271362,-0.8285584449768066,0,-0.002118313917890191,0.001148779527284205,0.0009140963084064424,1],[7,-0.9999861717224121,-3.159503307870182e-7,0.00527871772646904,0,-0.000488661287818104,-0.9957011938095093,-0.0926302969455719,0,0.005256050731986761,-0.09263164550065994,0.9956867694854736,0,0.0022082719951868057,-0.0009366122540086508,-0.00042094517266377807,1],[7,0.9788965582847595,-0.03239111974835396,-0.20177273452281952,0,0.2009529322385788,-0.02686537243425846,0.9792327880859375,0,-0.037139132618904114,-0.9991142153739929,-0.01978933811187744,0,0.0019557655323296785,0.01198284886777401,-0.00012113387492718175,1],[7,0.9788966774940491,-0.03239106386899948,-0.20177268981933594,0,0.20095287263393402,-0.02686545066535473,0.9792327880859375,0,-0.037139080464839935,-0.9991142749786377,-0.019789423793554306,0,0.001955765299499035,0.00950558204203844,-0.00012113272532587871,1],[7,0.978896975517273,-0.06283222883939743,-0.194456085562706,0,0.20095200836658478,0.12303024530410767,0.9718449711799622,0,-0.03713918477296829,-0.9904122948646545,0.13306020200252533,0,0.001955766696482897,0.006927327252924442,-0.0011933029163628817,1],[7,0.978896975517273,-0.06283214688301086,-0.19445598125457764,0,0.20095190405845642,0.12303026020526886,0.9718449711799622,0,-0.03713911771774292,-0.9904121160507202,0.13306021690368652,0,0.001955765997990966,0.004053902346640825,-0.0011933027999475598,1],[7,0.9962583780288696,-0.07160545140504837,0.04839411377906799,0,-0.0864252820611,-0.8254583477973938,0.557807981967926,0,0.00000523547487318865,-0.5599033236503601,-0.8285582065582275,0,0.0021183143835514784,0.0011487791780382395,0.0009140954934991896,1],[7,-0.9999861717224121,1.9440525989011803e-7,-0.005278825294226408,0,0.000488791789393872,-0.9957002401351929,-0.09263019263744354,0,-0.005256147123873234,-0.09263145923614502,0.9956867694854736,0,-0.0022082715295255184,-0.0009366121958009899,-0.00042094505624845624,1]],8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8]]],0,0,[],[],[]],[[[31,".bin",2767036045,[{"primitives":[{"primitiveMode":7,"jointMapIndex":0,"vertexBundelIndices":[0],"indexView":{"offset":77328,"length":6942,"count":3471,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":77328,"count":1074,"stride":72},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_joints","format":42,"isNormalized":false},{"name":"a_weights","format":44,"isNormalized":false}]}],"jointMaps":[[0,1,2,58,60,61,62,63,64,65,68,69,70,71]]},"minPosition",8,[1,-0.0029105916619300842,-0.0017188384663313627,0.0015443394659087062],"maxPosition",8,[1,0.0029084160923957825,0.0017373587470501661,0.013071463443338871]]],-1],0,0,[],[],[]],[[[120,"Skin-3",3353122877,["rig.001/root","rig.001/root/spine","rig.001/root/spine/spine.001","rig.001/root/spine/spine.001/spine.002","rig.001/root/spine/spine.001/spine.002/spine.003","rig.001/root/spine/spine.001/spine.002/spine.003/spine.004","rig.001/root/spine/spine.001/spine.002/spine.003/spine.004/spine.005","rig.001/root/spine/spine.001/spine.002/spine.003/spine.004/spine.005/spine.006","rig.001/root/spine/spine.001/spine.002/spine.003/shoulder.L","rig.001/root/spine/spine.001/spine.002/spine.003/shoulder.L/upper_arm.L","rig.001/root/spine/spine.001/spine.002/spine.003/shoulder.L/upper_arm.L/upper_arm.001.L","rig.001/root/spine/spine.001/spine.002/spine.003/shoulder.L/upper_arm.L/upper_arm.001.L/forearm.L","rig.001/root/spine/spine.001/spine.002/spine.003/shoulder.L/upper_arm.L/upper_arm.001.L/forearm.L/forearm.001.L","rig.001/root/spine/spine.001/spine.002/spine.003/shoulder.L/upper_arm.L/upper_arm.001.L/forearm.L/forearm.001.L/hand.L","rig.001/root/spine/spine.001/spine.002/spine.003/shoulder.L/upper_arm.L/upper_arm.001.L/forearm.L/forearm.001.L/hand.L/palm.01.L","rig.001/root/spine/spine.001/spine.002/spine.003/shoulder.L/upper_arm.L/upper_arm.001.L/forearm.L/forearm.001.L/hand.L/palm.01.L/f_index.01.L","rig.001/root/spine/spine.001/spine.002/spine.003/shoulder.L/upper_arm.L/upper_arm.001.L/forearm.L/forearm.001.L/hand.L/palm.01.L/f_index.01.L/f_index.02.L","rig.001/root/spine/spine.001/spine.002/spine.003/shoulder.L/upper_arm.L/upper_arm.001.L/forearm.L/forearm.001.L/hand.L/palm.01.L/f_index.01.L/f_index.02.L/f_index.03.L","rig.001/root/spine/spine.001/spine.002/spine.003/shoulder.L/upper_arm.L/upper_arm.001.L/forearm.L/forearm.001.L/hand.L/palm.01.L/thumb.01.L","rig.001/root/spine/spine.001/spine.002/spine.003/shoulder.L/upper_arm.L/upper_arm.001.L/forearm.L/forearm.001.L/hand.L/palm.01.L/thumb.01.L/thumb.02.L","rig.001/root/spine/spine.001/spine.002/spine.003/shoulder.L/upper_arm.L/upper_arm.001.L/forearm.L/forearm.001.L/hand.L/palm.01.L/thumb.01.L/thumb.02.L/thumb.03.L","rig.001/root/spine/spine.001/spine.002/spine.003/shoulder.L/upper_arm.L/upper_arm.001.L/forearm.L/forearm.001.L/hand.L/palm.02.L","rig.001/root/spine/spine.001/spine.002/spine.003/shoulder.L/upper_arm.L/upper_arm.001.L/forearm.L/forearm.001.L/hand.L/palm.02.L/f_middle.01.L","rig.001/root/spine/spine.001/spine.002/spine.003/shoulder.L/upper_arm.L/upper_arm.001.L/forearm.L/forearm.001.L/hand.L/palm.02.L/f_middle.01.L/f_middle.02.L","rig.001/root/spine/spine.001/spine.002/spine.003/shoulder.L/upper_arm.L/upper_arm.001.L/forearm.L/forearm.001.L/hand.L/palm.02.L/f_middle.01.L/f_middle.02.L/f_middle.03.L","rig.001/root/spine/spine.001/spine.002/spine.003/shoulder.L/upper_arm.L/upper_arm.001.L/forearm.L/forearm.001.L/hand.L/palm.03.L","rig.001/root/spine/spine.001/spine.002/spine.003/shoulder.L/upper_arm.L/upper_arm.001.L/forearm.L/forearm.001.L/hand.L/palm.03.L/f_ring.01.L","rig.001/root/spine/spine.001/spine.002/spine.003/shoulder.L/upper_arm.L/upper_arm.001.L/forearm.L/forearm.001.L/hand.L/palm.03.L/f_ring.01.L/f_ring.02.L","rig.001/root/spine/spine.001/spine.002/spine.003/shoulder.L/upper_arm.L/upper_arm.001.L/forearm.L/forearm.001.L/hand.L/palm.03.L/f_ring.01.L/f_ring.02.L/f_ring.03.L","rig.001/root/spine/spine.001/spine.002/spine.003/shoulder.L/upper_arm.L/upper_arm.001.L/forearm.L/forearm.001.L/hand.L/palm.04.L","rig.001/root/spine/spine.001/spine.002/spine.003/shoulder.L/upper_arm.L/upper_arm.001.L/forearm.L/forearm.001.L/hand.L/palm.04.L/f_pinky.01.L","rig.001/root/spine/spine.001/spine.002/spine.003/shoulder.L/upper_arm.L/upper_arm.001.L/forearm.L/forearm.001.L/hand.L/palm.04.L/f_pinky.01.L/f_pinky.02.L","rig.001/root/spine/spine.001/spine.002/spine.003/shoulder.L/upper_arm.L/upper_arm.001.L/forearm.L/forearm.001.L/hand.L/palm.04.L/f_pinky.01.L/f_pinky.02.L/f_pinky.03.L","rig.001/root/spine/spine.001/spine.002/spine.003/shoulder.R","rig.001/root/spine/spine.001/spine.002/spine.003/shoulder.R/upper_arm.R","rig.001/root/spine/spine.001/spine.002/spine.003/shoulder.R/upper_arm.R/upper_arm.001.R","rig.001/root/spine/spine.001/spine.002/spine.003/shoulder.R/upper_arm.R/upper_arm.001.R/forearm.R","rig.001/root/spine/spine.001/spine.002/spine.003/shoulder.R/upper_arm.R/upper_arm.001.R/forearm.R/forearm.001.R","rig.001/root/spine/spine.001/spine.002/spine.003/shoulder.R/upper_arm.R/upper_arm.001.R/forearm.R/forearm.001.R/hand.R","rig.001/root/spine/spine.001/spine.002/spine.003/shoulder.R/upper_arm.R/upper_arm.001.R/forearm.R/forearm.001.R/hand.R/palm.01.R","rig.001/root/spine/spine.001/spine.002/spine.003/shoulder.R/upper_arm.R/upper_arm.001.R/forearm.R/forearm.001.R/hand.R/palm.01.R/f_index.01.R","rig.001/root/spine/spine.001/spine.002/spine.003/shoulder.R/upper_arm.R/upper_arm.001.R/forearm.R/forearm.001.R/hand.R/palm.01.R/f_index.01.R/f_index.02.R","rig.001/root/spine/spine.001/spine.002/spine.003/shoulder.R/upper_arm.R/upper_arm.001.R/forearm.R/forearm.001.R/hand.R/palm.01.R/f_index.01.R/f_index.02.R/f_index.03.R","rig.001/root/spine/spine.001/spine.002/spine.003/shoulder.R/upper_arm.R/upper_arm.001.R/forearm.R/forearm.001.R/hand.R/palm.01.R/thumb.01.R","rig.001/root/spine/spine.001/spine.002/spine.003/shoulder.R/upper_arm.R/upper_arm.001.R/forearm.R/forearm.001.R/hand.R/palm.01.R/thumb.01.R/thumb.02.R","rig.001/root/spine/spine.001/spine.002/spine.003/shoulder.R/upper_arm.R/upper_arm.001.R/forearm.R/forearm.001.R/hand.R/palm.01.R/thumb.01.R/thumb.02.R/thumb.03.R","rig.001/root/spine/spine.001/spine.002/spine.003/shoulder.R/upper_arm.R/upper_arm.001.R/forearm.R/forearm.001.R/hand.R/palm.02.R","rig.001/root/spine/spine.001/spine.002/spine.003/shoulder.R/upper_arm.R/upper_arm.001.R/forearm.R/forearm.001.R/hand.R/palm.02.R/f_middle.01.R","rig.001/root/spine/spine.001/spine.002/spine.003/shoulder.R/upper_arm.R/upper_arm.001.R/forearm.R/forearm.001.R/hand.R/palm.02.R/f_middle.01.R/f_middle.02.R","rig.001/root/spine/spine.001/spine.002/spine.003/shoulder.R/upper_arm.R/upper_arm.001.R/forearm.R/forearm.001.R/hand.R/palm.02.R/f_middle.01.R/f_middle.02.R/f_middle.03.R","rig.001/root/spine/spine.001/spine.002/spine.003/shoulder.R/upper_arm.R/upper_arm.001.R/forearm.R/forearm.001.R/hand.R/palm.03.R","rig.001/root/spine/spine.001/spine.002/spine.003/shoulder.R/upper_arm.R/upper_arm.001.R/forearm.R/forearm.001.R/hand.R/palm.03.R/f_ring.01.R","rig.001/root/spine/spine.001/spine.002/spine.003/shoulder.R/upper_arm.R/upper_arm.001.R/forearm.R/forearm.001.R/hand.R/palm.03.R/f_ring.01.R/f_ring.02.R","rig.001/root/spine/spine.001/spine.002/spine.003/shoulder.R/upper_arm.R/upper_arm.001.R/forearm.R/forearm.001.R/hand.R/palm.03.R/f_ring.01.R/f_ring.02.R/f_ring.03.R","rig.001/root/spine/spine.001/spine.002/spine.003/shoulder.R/upper_arm.R/upper_arm.001.R/forearm.R/forearm.001.R/hand.R/palm.04.R","rig.001/root/spine/spine.001/spine.002/spine.003/shoulder.R/upper_arm.R/upper_arm.001.R/forearm.R/forearm.001.R/hand.R/palm.04.R/f_pinky.01.R","rig.001/root/spine/spine.001/spine.002/spine.003/shoulder.R/upper_arm.R/upper_arm.001.R/forearm.R/forearm.001.R/hand.R/palm.04.R/f_pinky.01.R/f_pinky.02.R","rig.001/root/spine/spine.001/spine.002/spine.003/shoulder.R/upper_arm.R/upper_arm.001.R/forearm.R/forearm.001.R/hand.R/palm.04.R/f_pinky.01.R/f_pinky.02.R/f_pinky.03.R","rig.001/root/spine/spine.001/spine.002/spine.003/breast.L","rig.001/root/spine/spine.001/spine.002/spine.003/breast.R","rig.001/root/spine/pelvis.L","rig.001/root/spine/pelvis.R","rig.001/root/spine/thigh.L","rig.001/root/spine/thigh.L/thigh.001.L","rig.001/root/spine/thigh.L/thigh.001.L/shin.L","rig.001/root/spine/thigh.L/thigh.001.L/shin.L/shin.001.L","rig.001/root/spine/thigh.L/thigh.001.L/shin.L/shin.001.L/foot.L","rig.001/root/spine/thigh.L/thigh.001.L/shin.L/shin.001.L/foot.L/toe.L","rig.001/root/spine/thigh.R","rig.001/root/spine/thigh.R/thigh.001.R","rig.001/root/spine/thigh.R/thigh.001.R/shin.R","rig.001/root/spine/thigh.R/thigh.001.R/shin.R/shin.001.R","rig.001/root/spine/thigh.R/thigh.001.R/shin.R/shin.001.R/foot.R","rig.001/root/spine/thigh.R/thigh.001.R/shin.R/shin.001.R/foot.R/toe.R"],[[[7,1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1],[7,1,1.4913523813849254e-15,2.384185791015625e-7,0,2.3086994360710378e-7,-0.24963954091072083,-0.9683389067649841,0,5.9518693973359404e-8,0.9683389067649841,-0.24963955581188202,0,-8.143033469742988e-10,-0.010776742361485958,0.0034154364839196205,1],[7,1,-2.1298945214196841e-16,2.384186643666908e-7,0,2.366096367723003e-7,-0.12295382469892502,-0.9924125075340271,0,2.931448328524766e-8,0.9924125075340271,-0.12295383214950562,0,-4.2469325278737813e-10,-0.01281394436955452,0.001781292143277824,1],[7,1,-1.1144142283514655e-14,2.384186927884002e-7,0,2.38297999999304e-7,0.03181256353855133,-0.9994940757751465,0,-7.584696426476967e-9,0.9994940757751465,0.03181256353855133,0,1.0854406956584128e-10,-0.014444232918322086,-0.0004552676691673696,1],[7,1,-1.1862372859710625e-14,2.3841863594498136e-7,0,2.3832140527701995e-7,0.028559789061546326,-0.9995923638343811,0,-6.809172781174766e-9,0.9995923638343811,0.028559789061546326,0,9.583722704320508e-11,-0.01637808419764042,-0.00040197145426645875,1],[7,1,-4.822620371081575e-14,-2.3841850804728892e-7,0,-2.3534460069640772e-7,-0.16006000339984894,-0.987107515335083,0,-3.816120752730967e-8,0.9871073961257935,-0.16006003320217133,0,7.372892296686473e-10,-0.018275195732712746,0.003092421218752861,1],[7,1,-9.257062483095449e-14,-2.3841846541472478e-7,0,-2.3822163086606452e-7,0.04062240943312645,-0.9991747140884399,0,9.685222401856208e-9,0.9991747140884399,0.04062240943312645,0,-1.8321776040775006e-10,-0.019224222749471664,-0.000768464058637619,1],[7,1,-4.631948850083306e-14,9.95702069514666e-14,0,9.94220981584415e-14,-0.003186163492500782,-0.9999951124191284,0,4.663649566354067e-14,0.9999950528144836,-0.0031861637253314257,0,-9.468081344849366e-16,-0.019919073209166527,0.00010420544276712462,1],[7,0.38747256994247437,0.9152210354804993,-0.110613614320755,0,-0.9218434691429138,0.38357123732566833,-0.05547773465514183,0,-0.008346189744770527,0.12346453219652176,0.9923138618469238,0,-0.0006343058776110411,-0.002109030494466424,-0.01782291755080223,1],[7,-0.8309911489486694,0.5547759532928467,0.04095610976219177,0,0.036208998411893845,0.12741106748580933,-0.9911888241767883,0,-0.555105984210968,-0.8221861124038696,-0.12596534192562103,0,0.012380141764879227,0.01319888886064291,0.002449983963742852,1],[7,-0.8309912085533142,0.5547756552696228,0.04095640033483505,0,0.036208588629961014,0.12741106748580933,-0.9911890029907227,0,-0.5551056861877441,-0.8221863508224487,-0.12596513330936432,0,0.012380138970911503,0.011443604715168476,0.002449979539960623,1],[7,-0.8309912085533142,0.506626546382904,-0.229746013879776,0,0.036208376288414,-0.3628639280796051,-0.9311383366584778,0,-0.555105984210968,-0.7820865511894226,0.28319257497787476,0,0.012380142696201801,0.009678276255726814,-0.002489324426278472,1],[7,-0.8309916257858276,0.5066261291503906,-0.22974537312984467,0,0.03620792180299759,-0.36286377906799316,-0.9311385154724121,0,-0.5551053881645203,-0.782086968421936,0.2831929326057434,0,0.012380137108266354,0.00822687242180109,-0.0024893321096897125,1],[7,-0.6410925984382629,0.7458238005638123,-0.18096087872982025,0,-0.04519026353955269,-0.2720666527748108,-0.9612165689468384,0,-0.766131579875946,-0.6080513596534729,0.20812392234802246,0,0.013879137113690376,0.0030595245771110058,-0.001838503871113062,1],[7,0.3562532365322113,0.6496073603630066,-0.6716348528862,0,0.8766136765480042,-0.48119407892227173,-0.0004327966598793864,0,-0.3234679400920868,-0.5886103510856628,-0.7408819198608398,0,0.002450143452733755,0.0029076277278363705,0.013806608505547047,1],[7,0.2653426229953766,0.5773390531539917,-0.772186815738678,0,0.9402543902397156,-0.3321666121482849,0.07474460452795029,0,-0.21334175765514374,-0.7458851337432861,-0.6309835910797119,0,0.0018186946399509907,0.004662031307816505,0.01325935684144497,1],[7,0.2635299265384674,0.4480796158313751,-0.8542695045471191,0,0.9415250420570374,-0.3122216761112213,0.1266811192035675,0,-0.2099582850933075,-0.8377004265785217,-0.5041580200195312,0,0.0017937207594513893,0.0061915116384625435,0.012433233670890331,1],[7,0.2666983902454376,0.2298436164855957,-0.9359719157218933,0,0.9386086463928223,-0.28244125843048096,0.19809149205684662,0,-0.21882709860801697,-0.9313423037528992,-0.2910599112510681,0,0.0018669510027393699,0.008504955098032951,0.010717875324189663,1],[7,0.49519646167755127,0.05384887009859085,0.8671103715896606,0,-0.5259297490119934,-0.7758365273475647,0.34853285551071167,0,0.691504180431366,-0.6286315321922302,-0.3558708429336548,0,-0.012352187186479568,0.007272761315107346,-0.000669782399199903,1],[7,0.48209574818611145,0.37401819229125977,0.7922711372375488,0,-0.503975510597229,-0.6213141679763794,0.5999805927276611,0,0.7166531682014465,-0.68853360414505,-0.11103694885969162,0,-0.012559755705296993,0.005563715007156134,-0.002983722137287259,1],[7,0.529266893863678,0.5751169919967651,0.6237918138504028,0,-0.5459916591644287,-0.3318893015384674,0.7692476511001587,0,0.6494376063346863,-0.7477226257324219,0.13835109770298004,0,-0.012119927443563938,0.004760862328112125,-0.004638932645320892,1],[7,0.2696860432624817,0.6918048858642578,-0.6698318719863892,0,0.9239062666893005,-0.3819562792778015,-0.02250516787171364,0,-0.2714158296585083,-0.6127926707267761,-0.7421709895133972,0,0.0021624374203383923,0.003036636160686612,0.013841894455254078,1],[7,0.3537948727607727,0.5819966197013855,-0.7321944236755371,0,0.9302300810813904,-0.30052870512008667,0.21060487627983093,0,-0.09747418016195297,-0.7556203603744507,-0.6477161645889282,0,-0.0005587507621385157,0.004804576281458139,0.013331950642168522,1],[7,0.3497494161128998,0.41688013076782227,-0.8389789462089539,0,0.932612419128418,-0.23994317650794983,0.26955729722976685,0,-0.08893425762653351,-0.8767198920249939,-0.4727075695991516,0,-0.0006257614586502314,0.006872344296425581,0.012149502523243427,1],[7,0.357612669467926,0.28742462396621704,-0.8885378837585449,0,0.9273972511291504,-0.22113032639026642,0.3017209768295288,0,-0.10976070165634155,-0.9319270253181458,-0.3456357717514038,0,-0.000455858331406489,0.008113847114145756,0.011125441640615463,1],[7,0.1206265240907669,0.7715458273887634,-0.6246326565742493,0,0.9725915789604187,-0.2178543210029602,-0.08127057552337646,0,-0.19878293573856354,-0.5977091789245605,-0.7766780853271484,0,0.0020391170401126146,0.002431898145005107,0.013923391699790955,1],[7,0.10022849589586258,0.5620957612991333,-0.8209765553474426,0,0.9474629759788513,-0.3058272898197174,-0.09371933341026306,0,-0.3037562668323517,-0.7684517502784729,-0.5632174611091614,0,0.0034523638896644115,0.005156481638550758,0.012732056900858879,1],[7,0.11566713452339172,0.4623032808303833,-0.8791455626487732,0,0.936481773853302,-0.34578225016593933,-0.05862070620059967,0,-0.3310934901237488,-0.8165233135223389,-0.4729343354701996,0,0.00364900310523808,0.005852320231497288,0.012136011384427547,1],[7,0.09283486008644104,0.3272530734539032,-0.9403654336929321,0,0.9544668197631836,-0.29816436767578125,-0.009536136873066425,0,-0.2835042476654053,-0.8966621160507202,-0.34003230929374695,0,0.0032924495171755552,0.00754108652472496,0.011119825765490532,1],[7,0.04330408200621605,0.6257373094558716,-0.7788306474685669,0,0.9944501519203186,-0.10181404650211334,-0.02650781348347664,0,-0.0958828404545784,-0.7733604311943054,-0.6266735792160034,0,0.0010848420206457376,0.00566673232242465,0.013020765967667103,1],[7,-0.30315059423446655,0.4169746935367584,-0.8568731546401978,0,0.9103978872299194,-0.1389494687318802,-0.38970306515693665,0,-0.28155842423439026,-0.8982343673706055,-0.3374903202056885,0,0.005753342993557453,0.007785627618432045,0.01001269556581974,1],[7,-0.29827964305877686,0.227646604180336,-0.9269335269927979,0,0.9054044485092163,-0.2399034947156906,-0.35026979446411133,0,-0.3021124601364136,-0.9437282085418701,-0.1345539391040802,0,0.00595654034987092,0.009297593496739864,0.008162204176187515,1],[7,-0.3059699535369873,0.15428780019283295,-0.9394557476043701,0,0.9146034121513367,-0.2263643741607666,-0.3350517749786377,0,-0.26435378193855286,-0.9617453813552856,-0.07185143977403641,0,0.005584815517067909,0.009774141944944859,0.007543083280324936,1],[7,0.3874726891517639,-0.9152210354804993,0.11061360687017441,0,0.9218435287475586,0.3835712671279907,-0.05547770857810974,0,0.008346161805093288,0.12346450239419937,0.9923139214515686,0,0.0006343063432723284,-0.0021090300288051367,-0.01782291755080223,1],[7,-0.830991268157959,-0.5547758936882019,-0.04095611348748207,0,-0.03620895370841026,0.12741102278232574,-0.9911891222000122,0,0.555105984210968,-0.822186291217804,-0.12596529722213745,0,-0.012380142696201801,0.013198891654610634,0.002449982799589634,1],[7,-0.8309914469718933,-0.5547754764556885,-0.04095638170838356,0,-0.03620857372879982,0.12741105258464813,-0.9911889433860779,0,0.5551055669784546,-0.8221865296363831,-0.12596513330936432,0,-0.012380138039588928,0.0114436075091362,0.002449979307129979,1],[7,-0.8309915065765381,-0.506626307964325,0.22974589467048645,0,-0.03620840609073639,-0.3628638982772827,-0.9311384558677673,0,0.5551056265830994,-0.7820869088172913,0.28319263458251953,0,-0.012380140833556652,0.009678284637629986,-0.002489326987415552,1],[7,-0.830991804599762,-0.5066260099411011,0.22974523901939392,0,-0.0362078957259655,-0.3628637194633484,-0.9311387538909912,0,0.5551050901412964,-0.7820871472358704,0.283192902803421,0,-0.01238013431429863,0.008226877078413963,-0.002489333739504218,1],[7,-0.641092836856842,-0.7458238005638123,0.18096067011356354,0,0.04519053176045418,-0.2720666229724884,-0.9612168073654175,0,0.766131579875946,-0.608051598072052,0.20812417566776276,0,-0.0138791399076581,0.0030595280695706606,-0.0018385087605565786,1],[7,0.35625314712524414,-0.6496076583862305,0.6716349124908447,0,-0.8766140937805176,-0.4811938405036926,-0.0004329133953433484,0,0.32346785068511963,-0.5886102914810181,-0.7408820986747742,0,-0.0024501443840563297,0.002907627960667014,0.01380661316215992,1],[7,0.2653423547744751,-0.577339231967926,0.7721869945526123,0,-0.9402546882629395,-0.3321663439273834,0.07474445551633835,0,0.2133416384458542,-0.7458852529525757,-0.6309836506843567,0,-0.0018186947563663125,0.004662031307816505,0.013259358704090118,1],[7,0.26352977752685547,-0.4480797052383423,0.8542693257331848,0,-0.9415251016616821,-0.31222137808799744,0.1266811043024063,0,0.20995797216892242,-0.8377004265785217,-0.5041578412055969,0,-0.0017937187803909183,0.006191510707139969,0.012433231808245182,1],[7,0.26669830083847046,-0.22984416782855988,0.9359717965126038,0,-0.9386088252067566,-0.282441109418869,0.19809140264987946,0,0.21882672607898712,-0.9313424825668335,-0.29106029868125916,0,-0.0018669490236788988,0.008504954166710377,0.010717878118157387,1],[7,0.4951966106891632,-0.053848423063755035,-0.8671103715896606,0,0.5259300470352173,-0.7758364081382751,0.34853267669677734,0,-0.6915040016174316,-0.6286316514015198,-0.35587114095687866,0,0.01235218532383442,0.007272763177752495,-0.0006697779172100127,1],[7,0.4820963740348816,-0.3740176260471344,-0.7922712564468384,0,0.5039758086204529,-0.621314287185669,0.5999805331230164,0,-0.716653048992157,-0.6885338425636292,-0.11103752255439758,0,0.012559761293232441,0.005563722457736731,-0.002983716083690524,1],[7,0.5292673110961914,-0.5751162767410278,-0.6237921118736267,0,0.5459918975830078,-0.3318893611431122,0.7692474126815796,0,-0.6494370698928833,-0.7477232813835144,0.1383506953716278,0,0.012119922786951065,0.0047608730383217335,-0.004638929385691881,1],[7,0.2696860134601593,-0.6918054819107056,0.6698319315910339,0,-0.9239067435264587,-0.38195618987083435,-0.022505197674036026,0,0.27141571044921875,-0.6127929091453552,-0.7421714663505554,0,-0.0021624378859996796,0.0030366380233317614,0.013841903768479824,1],[7,0.35379499197006226,-0.5819973945617676,0.7321940660476685,0,-0.9302303194999695,-0.30052873492240906,0.21060501039028168,0,0.09747378528118134,-0.7556202411651611,-0.647716760635376,0,0.0005587560008279979,0.004804568365216255,0.01333195436745882,1],[7,0.349749356508255,-0.41688084602355957,0.8389789462089539,0,-0.9326126575469971,-0.23994316160678864,0.26955732703208923,0,0.08893396705389023,-0.8767200112342834,-0.472708135843277,0,0.0006257638451643288,0.006872339639812708,0.012149510905146599,1],[7,0.3576127290725708,-0.2874252200126648,0.888538122177124,0,-0.927397608757019,-0.22113029658794403,0.3017209768295288,0,0.10976049304008484,-0.9319273233413696,-0.3456362783908844,0,0.0004558601649478078,0.008113845251500607,0.011125450022518635,1],[7,0.120626300573349,-0.7715458273887634,0.6246328353881836,0,-0.9725916981697083,-0.21785402297973633,-0.08127056062221527,0,0.1987827569246292,-0.5977093577384949,-0.776678204536438,0,-0.0020391165744513273,0.0024318997748196125,0.013923396356403828,1],[7,0.10022841393947601,-0.562095582485199,0.8209766745567322,0,-0.9474632143974304,-0.30582690238952637,-0.09371916949748993,0,0.3037559688091278,-0.7684518098831177,-0.5632174015045166,0,-0.0034523624926805496,0.005156485829502344,0.012732058763504028,1],[7,0.11566726118326187,-0.462303102016449,0.8791453838348389,0,-0.9364818930625916,-0.3457818925380707,-0.05862034484744072,0,0.33109304308891296,-0.8165232539176941,-0.4729342758655548,0,-0.0036489972844719887,0.005852322094142437,0.012136010453104973,1],[7,0.09283474832773209,-0.3272527754306793,0.9403656125068665,0,-0.9544671177864075,-0.29816409945487976,-0.009536013938486576,0,0.2835039794445038,-0.8966625332832336,-0.3400319218635559,0,-0.0032924481201916933,0.007541092112660408,0.011119822971522808,1],[7,0.04330385476350784,-0.6257372498512268,0.7788312435150146,0,-0.9944503903388977,-0.10181383043527603,-0.026507839560508728,0,0.09588270634412766,-0.773361325263977,-0.6266732215881348,0,-0.001084841787815094,0.005666743498295546,0.013020766898989677,1],[7,-0.30315083265304565,-0.41697409749031067,0.8568735718727112,0,-0.9103980660438538,-0.13894949853420258,-0.38970300555229187,0,0.2815581262111664,-0.8982351422309875,-0.33748960494995117,0,-0.005753341596573591,0.00778564065694809,0.010012691840529442,1],[7,-0.2982800006866455,-0.2276458889245987,0.9269340634346008,0,-0.9054046869277954,-0.23990365862846375,-0.35026994347572327,0,0.30211225152015686,-0.9437288641929626,-0.13455313444137573,0,-0.005956542678177357,0.009297607466578484,0.008162199519574642,1],[7,-0.305970162153244,-0.15428732335567474,0.9394561648368835,0,-0.9146036505699158,-0.22636441886425018,-0.33505186438560486,0,0.2643536329269409,-0.961746096611023,-0.0718509703874588,0,-0.005584817845374346,0.009774153120815754,0.007543083280324936,1],[7,-1,-1.1069809513486462e-9,-8.85620110580021e-8,0,1.1069932748242195e-9,-0.9999997615814209,-1.3783575525394554e-7,0,-8.85620110580021e-8,-1.3783574104309082e-7,1,0,0.0010911786230280995,0.0005421112291514874,-0.016216905787587166,1],[7,-1,-1.1069809513486462e-9,-8.85620110580021e-8,0,1.1069932748242195e-9,-0.9999997615814209,-1.3783575525394554e-7,0,-8.85620110580021e-8,-1.3783574104309082e-7,1,0,-0.0010911757126450539,0.0005421112291514874,-0.016216905787587166,1],[7,-0.3717861473560333,0.6168416142463684,-0.6937444806098938,0,-0.902387261390686,-0.4155394434928894,0.11412400752305984,0,-0.21788184344768524,0.6684557199478149,0.7111219763755798,0,0.003016257891431451,-0.007289252243936062,-0.008097676560282707,1],[7,-0.37178611755371094,-0.6168416142463684,0.6937444806098938,0,0.902387261390686,-0.4155394434928894,0.11412402242422104,0,0.21788179874420166,0.6684557795524597,0.7111217975616455,0,-0.003016258357092738,-0.0072892531752586365,-0.008097675628960133,1],[7,0.9788966178894043,0.03239113464951515,0.20177285373210907,0,-0.20095303654670715,-0.02686535380780697,0.9792331457138062,0,0.03713914379477501,-0.9991142749786377,-0.0197893138974905,0,-0.001955766463652253,0.011982849799096584,-0.00012113447155570611,1],[7,0.9788966178894043,0.03239107131958008,0.20177282392978668,0,-0.20095299184322357,-0.02686539851129055,0.9792330861091614,0,0.03713908791542053,-0.9991143941879272,-0.019789373502135277,0,-0.0019557662308216095,0.00950558204203844,-0.00012113346019759774,1],[7,0.9788969159126282,0.06283223628997803,0.19445616006851196,0,-0.20095203816890717,0.12303029000759125,0.9718450903892517,0,0.0371391698718071,-0.9904122948646545,0.1330602765083313,0,-0.0019557673949748278,0.006927328649908304,-0.0011933038476854563,1],[7,0.9788969159126282,0.06283215433359146,0.1944560557603836,0,-0.2009519338607788,0.12303029000759125,0.9718450903892517,0,0.03713911399245262,-0.990412175655365,0.1330602616071701,0,-0.001955766696482897,0.004053902346640825,-0.0011933034984394908,1],[7,0.996258556842804,0.07160516083240509,-0.048394594341516495,0,0.0864252895116806,-0.825458824634552,0.5578075647354126,0,-0.000005848095952387666,-0.5599030256271362,-0.8285584449768066,0,-0.002118313917890191,0.001148779527284205,0.0009140963084064424,1],[7,-0.9999861717224121,-3.159503307870182e-7,0.00527871772646904,0,-0.000488661287818104,-0.9957011938095093,-0.0926302969455719,0,0.005256050731986761,-0.09263164550065994,0.9956867694854736,0,0.0022082719951868057,-0.0009366122540086508,-0.00042094517266377807,1],[7,0.9788965582847595,-0.03239111974835396,-0.20177273452281952,0,0.2009529322385788,-0.02686537243425846,0.9792327880859375,0,-0.037139132618904114,-0.9991142153739929,-0.01978933811187744,0,0.0019557655323296785,0.01198284886777401,-0.00012113387492718175,1],[7,0.9788966774940491,-0.03239106386899948,-0.20177268981933594,0,0.20095287263393402,-0.02686545066535473,0.9792327880859375,0,-0.037139080464839935,-0.9991142749786377,-0.019789423793554306,0,0.001955765299499035,0.00950558204203844,-0.00012113272532587871,1],[7,0.978896975517273,-0.06283222883939743,-0.194456085562706,0,0.20095200836658478,0.12303024530410767,0.9718449711799622,0,-0.03713918477296829,-0.9904122948646545,0.13306020200252533,0,0.001955766696482897,0.006927327252924442,-0.0011933029163628817,1],[7,0.978896975517273,-0.06283214688301086,-0.19445598125457764,0,0.20095190405845642,0.12303026020526886,0.9718449711799622,0,-0.03713911771774292,-0.9904121160507202,0.13306021690368652,0,0.001955765997990966,0.004053902346640825,-0.0011933027999475598,1],[7,0.9962583780288696,-0.07160545140504837,0.04839411377906799,0,-0.0864252820611,-0.8254583477973938,0.557807981967926,0,0.00000523547487318865,-0.5599033236503601,-0.8285582065582275,0,0.0021183143835514784,0.0011487791780382395,0.0009140954934991896,1],[7,-0.9999861717224121,1.9440525989011803e-7,-0.005278825294226408,0,0.000488791789393872,-0.9957002401351929,-0.09263019263744354,0,-0.005256147123873234,-0.09263145923614502,0.9956867694854736,0,-0.0022082715295255184,-0.0009366121958009899,-0.00042094505624845624,1]],8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8]]],0,0,[],[],[]],[[[31,".bin",3233449449,[{"primitives":[{"primitiveMode":7,"jointMapIndex":0,"vertexBundelIndices":[0],"indexView":{"offset":53424,"length":7956,"count":3978,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":53424,"count":742,"stride":72},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_joints","format":42,"isNormalized":false},{"name":"a_weights","format":44,"isNormalized":false}]}],"jointMaps":[[0,6,7,8,9,33,34]],"morph":{"subMeshMorphs":[{"attributes":["a_position"],"targets":[{"displacements":[{"offset":61380,"length":8904,"stride":4,"count":2226}]}]}],"targetNames":["Smile and open mouth"]}},"minPosition",8,[1,-0.0010593305341899395,-0.001491475966759026,0.019316749647259712],"maxPosition",8,[1,0.0010593305341899395,-0.00016666779993101954,0.021450193598866463]]],-1],0,0,[],[],[]],[[[31,".bin",3263444577,[{"primitives":[{"primitiveMode":7,"jointMapIndex":0,"vertexBundelIndices":[0],"indexView":{"offset":151424,"length":6336,"count":3168,"stride":2}},{"primitiveMode":7,"jointMapIndex":0,"vertexBundelIndices":[1],"indexView":{"offset":171488,"length":816,"count":408,"stride":2}},{"primitiveMode":7,"jointMapIndex":0,"vertexBundelIndices":[2],"indexView":{"offset":379888,"length":16020,"count":8010,"stride":2}},{"primitiveMode":7,"jointMapIndex":0,"vertexBundelIndices":[3],"indexView":{"offset":415356,"length":996,"count":498,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":151424,"count":1456,"stride":104},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_joints","format":42,"isNormalized":false},{"name":"a_weights","format":44,"isNormalized":false},{"name":"a_color","format":44,"isNormalized":false},{"name":"a_texCoord1","format":21,"isNormalized":false},{"name":"a_texCoord2","format":21,"isNormalized":false}]},{"view":{"offset":157760,"length":13728,"count":132,"stride":104},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_joints","format":42,"isNormalized":false},{"name":"a_weights","format":44,"isNormalized":false},{"name":"a_color","format":44,"isNormalized":false},{"name":"a_texCoord1","format":21,"isNormalized":false},{"name":"a_texCoord2","format":21,"isNormalized":false}]},{"view":{"offset":172304,"length":207584,"count":1996,"stride":104},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_joints","format":42,"isNormalized":false},{"name":"a_weights","format":44,"isNormalized":false},{"name":"a_color","format":44,"isNormalized":false},{"name":"a_texCoord1","format":21,"isNormalized":false},{"name":"a_texCoord2","format":21,"isNormalized":false}]},{"view":{"offset":395908,"length":19448,"count":187,"stride":104},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_joints","format":42,"isNormalized":false},{"name":"a_weights","format":44,"isNormalized":false},{"name":"a_color","format":44,"isNormalized":false},{"name":"a_texCoord1","format":21,"isNormalized":false},{"name":"a_texCoord2","format":21,"isNormalized":false}]}],"jointMaps":[[0,4,5,6,7,8,33]],"morph":{"subMeshMorphs":[{"attributes":["a_position"],"targets":[{"displacements":[{"offset":416352,"length":17472,"stride":4,"count":4368}]},{"displacements":[{"offset":433824,"length":17472,"stride":4,"count":4368}]},{"displacements":[{"offset":451296,"length":17472,"stride":4,"count":4368}]},{"displacements":[{"offset":468768,"length":17472,"stride":4,"count":4368}]},{"displacements":[{"offset":486240,"length":17472,"stride":4,"count":4368}]},{"displacements":[{"offset":503712,"length":17472,"stride":4,"count":4368}]},{"displacements":[{"offset":521184,"length":17472,"stride":4,"count":4368}]},{"displacements":[{"offset":538656,"length":17472,"stride":4,"count":4368}]},{"displacements":[{"offset":556128,"length":17472,"stride":4,"count":4368}]},{"displacements":[{"offset":573600,"length":17472,"stride":4,"count":4368}]},{"displacements":[{"offset":591072,"length":17472,"stride":4,"count":4368}]},{"displacements":[{"offset":608544,"length":17472,"stride":4,"count":4368}]},{"displacements":[{"offset":626016,"length":17472,"stride":4,"count":4368}]},{"displacements":[{"offset":643488,"length":17472,"stride":4,"count":4368}]},{"displacements":[{"offset":660960,"length":17472,"stride":4,"count":4368}]},{"displacements":[{"offset":678432,"length":17472,"stride":4,"count":4368}]},{"displacements":[{"offset":695904,"length":17472,"stride":4,"count":4368}]},{"displacements":[{"offset":713376,"length":17472,"stride":4,"count":4368}]}]},{"attributes":["a_position"],"targets":[{"displacements":[{"offset":730848,"length":1584,"stride":4,"count":396}]},{"displacements":[{"offset":732432,"length":1584,"stride":4,"count":396}]},{"displacements":[{"offset":734016,"length":1584,"stride":4,"count":396}]},{"displacements":[{"offset":735600,"length":1584,"stride":4,"count":396}]},{"displacements":[{"offset":737184,"length":1584,"stride":4,"count":396}]},{"displacements":[{"offset":738768,"length":1584,"stride":4,"count":396}]},{"displacements":[{"offset":740352,"length":1584,"stride":4,"count":396}]},{"displacements":[{"offset":741936,"length":1584,"stride":4,"count":396}]},{"displacements":[{"offset":743520,"length":1584,"stride":4,"count":396}]},{"displacements":[{"offset":745104,"length":1584,"stride":4,"count":396}]},{"displacements":[{"offset":746688,"length":1584,"stride":4,"count":396}]},{"displacements":[{"offset":748272,"length":1584,"stride":4,"count":396}]},{"displacements":[{"offset":749856,"length":1584,"stride":4,"count":396}]},{"displacements":[{"offset":751440,"length":1584,"stride":4,"count":396}]},{"displacements":[{"offset":753024,"length":1584,"stride":4,"count":396}]},{"displacements":[{"offset":754608,"length":1584,"stride":4,"count":396}]},{"displacements":[{"offset":756192,"length":1584,"stride":4,"count":396}]},{"displacements":[{"offset":757776,"length":1584,"stride":4,"count":396}]}]},{"attributes":["a_position"],"targets":[{"displacements":[{"offset":759360,"length":23952,"stride":4,"count":5988}]},{"displacements":[{"offset":783312,"length":23952,"stride":4,"count":5988}]},{"displacements":[{"offset":807264,"length":23952,"stride":4,"count":5988}]},{"displacements":[{"offset":831216,"length":23952,"stride":4,"count":5988}]},{"displacements":[{"offset":855168,"length":23952,"stride":4,"count":5988}]},{"displacements":[{"offset":879120,"length":23952,"stride":4,"count":5988}]},{"displacements":[{"offset":903072,"length":23952,"stride":4,"count":5988}]},{"displacements":[{"offset":927024,"length":23952,"stride":4,"count":5988}]},{"displacements":[{"offset":950976,"length":23952,"stride":4,"count":5988}]},{"displacements":[{"offset":974928,"length":23952,"stride":4,"count":5988}]},{"displacements":[{"offset":998880,"length":23952,"stride":4,"count":5988}]},{"displacements":[{"offset":1022832,"length":23952,"stride":4,"count":5988}]},{"displacements":[{"offset":1046784,"length":23952,"stride":4,"count":5988}]},{"displacements":[{"offset":1070736,"length":23952,"stride":4,"count":5988}]},{"displacements":[{"offset":1094688,"length":23952,"stride":4,"count":5988}]},{"displacements":[{"offset":1118640,"length":23952,"stride":4,"count":5988}]},{"displacements":[{"offset":1142592,"length":23952,"stride":4,"count":5988}]},{"displacements":[{"offset":1166544,"length":23952,"stride":4,"count":5988}]}]},{"attributes":["a_position"],"targets":[{"displacements":[{"offset":1190496,"length":2244,"stride":4,"count":561}]},{"displacements":[{"offset":1192740,"length":2244,"stride":4,"count":561}]},{"displacements":[{"offset":1194984,"length":2244,"stride":4,"count":561}]},{"displacements":[{"offset":1197228,"length":2244,"stride":4,"count":561}]},{"displacements":[{"offset":1199472,"length":2244,"stride":4,"count":561}]},{"displacements":[{"offset":1201716,"length":2244,"stride":4,"count":561}]},{"displacements":[{"offset":1203960,"length":2244,"stride":4,"count":561}]},{"displacements":[{"offset":1206204,"length":2244,"stride":4,"count":561}]},{"displacements":[{"offset":1208448,"length":2244,"stride":4,"count":561}]},{"displacements":[{"offset":1210692,"length":2244,"stride":4,"count":561}]},{"displacements":[{"offset":1212936,"length":2244,"stride":4,"count":561}]},{"displacements":[{"offset":1215180,"length":2244,"stride":4,"count":561}]},{"displacements":[{"offset":1217424,"length":2244,"stride":4,"count":561}]},{"displacements":[{"offset":1219668,"length":2244,"stride":4,"count":561}]},{"displacements":[{"offset":1221912,"length":2244,"stride":4,"count":561}]},{"displacements":[{"offset":1224156,"length":2244,"stride":4,"count":561}]},{"displacements":[{"offset":1226400,"length":2244,"stride":4,"count":561}]},{"displacements":[{"offset":1228644,"length":2244,"stride":4,"count":561}]}]}],"targetNames":["African","Open Mouth","Close eyes","Smile","Blink L","Blink R","O face","Brow Down L","Brow Down R","Sad face","Brow up L","Brow Up R","Tongue out","Tongue down","Smile Wink","OOOOO!","Tough","Tough 2"]}},"minPosition",8,[1,-0.001273431465961039,-0.001679909066297114,0.018572915345430374],"maxPosition",8,[1,0.0012731457827612758,0.0016560805961489677,0.023094262927770615]]],-1],0,0,[],[],[]],[[[120,"Skin-1",3353122877,["rig.001/root","rig.001/root/spine","rig.001/root/spine/spine.001","rig.001/root/spine/spine.001/spine.002","rig.001/root/spine/spine.001/spine.002/spine.003","rig.001/root/spine/spine.001/spine.002/spine.003/spine.004","rig.001/root/spine/spine.001/spine.002/spine.003/spine.004/spine.005","rig.001/root/spine/spine.001/spine.002/spine.003/spine.004/spine.005/spine.006","rig.001/root/spine/spine.001/spine.002/spine.003/shoulder.L","rig.001/root/spine/spine.001/spine.002/spine.003/shoulder.L/upper_arm.L","rig.001/root/spine/spine.001/spine.002/spine.003/shoulder.L/upper_arm.L/upper_arm.001.L","rig.001/root/spine/spine.001/spine.002/spine.003/shoulder.L/upper_arm.L/upper_arm.001.L/forearm.L","rig.001/root/spine/spine.001/spine.002/spine.003/shoulder.L/upper_arm.L/upper_arm.001.L/forearm.L/forearm.001.L","rig.001/root/spine/spine.001/spine.002/spine.003/shoulder.L/upper_arm.L/upper_arm.001.L/forearm.L/forearm.001.L/hand.L","rig.001/root/spine/spine.001/spine.002/spine.003/shoulder.L/upper_arm.L/upper_arm.001.L/forearm.L/forearm.001.L/hand.L/palm.01.L","rig.001/root/spine/spine.001/spine.002/spine.003/shoulder.L/upper_arm.L/upper_arm.001.L/forearm.L/forearm.001.L/hand.L/palm.01.L/f_index.01.L","rig.001/root/spine/spine.001/spine.002/spine.003/shoulder.L/upper_arm.L/upper_arm.001.L/forearm.L/forearm.001.L/hand.L/palm.01.L/f_index.01.L/f_index.02.L","rig.001/root/spine/spine.001/spine.002/spine.003/shoulder.L/upper_arm.L/upper_arm.001.L/forearm.L/forearm.001.L/hand.L/palm.01.L/f_index.01.L/f_index.02.L/f_index.03.L","rig.001/root/spine/spine.001/spine.002/spine.003/shoulder.L/upper_arm.L/upper_arm.001.L/forearm.L/forearm.001.L/hand.L/palm.01.L/thumb.01.L","rig.001/root/spine/spine.001/spine.002/spine.003/shoulder.L/upper_arm.L/upper_arm.001.L/forearm.L/forearm.001.L/hand.L/palm.01.L/thumb.01.L/thumb.02.L","rig.001/root/spine/spine.001/spine.002/spine.003/shoulder.L/upper_arm.L/upper_arm.001.L/forearm.L/forearm.001.L/hand.L/palm.01.L/thumb.01.L/thumb.02.L/thumb.03.L","rig.001/root/spine/spine.001/spine.002/spine.003/shoulder.L/upper_arm.L/upper_arm.001.L/forearm.L/forearm.001.L/hand.L/palm.02.L","rig.001/root/spine/spine.001/spine.002/spine.003/shoulder.L/upper_arm.L/upper_arm.001.L/forearm.L/forearm.001.L/hand.L/palm.02.L/f_middle.01.L","rig.001/root/spine/spine.001/spine.002/spine.003/shoulder.L/upper_arm.L/upper_arm.001.L/forearm.L/forearm.001.L/hand.L/palm.02.L/f_middle.01.L/f_middle.02.L","rig.001/root/spine/spine.001/spine.002/spine.003/shoulder.L/upper_arm.L/upper_arm.001.L/forearm.L/forearm.001.L/hand.L/palm.02.L/f_middle.01.L/f_middle.02.L/f_middle.03.L","rig.001/root/spine/spine.001/spine.002/spine.003/shoulder.L/upper_arm.L/upper_arm.001.L/forearm.L/forearm.001.L/hand.L/palm.03.L","rig.001/root/spine/spine.001/spine.002/spine.003/shoulder.L/upper_arm.L/upper_arm.001.L/forearm.L/forearm.001.L/hand.L/palm.03.L/f_ring.01.L","rig.001/root/spine/spine.001/spine.002/spine.003/shoulder.L/upper_arm.L/upper_arm.001.L/forearm.L/forearm.001.L/hand.L/palm.03.L/f_ring.01.L/f_ring.02.L","rig.001/root/spine/spine.001/spine.002/spine.003/shoulder.L/upper_arm.L/upper_arm.001.L/forearm.L/forearm.001.L/hand.L/palm.03.L/f_ring.01.L/f_ring.02.L/f_ring.03.L","rig.001/root/spine/spine.001/spine.002/spine.003/shoulder.L/upper_arm.L/upper_arm.001.L/forearm.L/forearm.001.L/hand.L/palm.04.L","rig.001/root/spine/spine.001/spine.002/spine.003/shoulder.L/upper_arm.L/upper_arm.001.L/forearm.L/forearm.001.L/hand.L/palm.04.L/f_pinky.01.L","rig.001/root/spine/spine.001/spine.002/spine.003/shoulder.L/upper_arm.L/upper_arm.001.L/forearm.L/forearm.001.L/hand.L/palm.04.L/f_pinky.01.L/f_pinky.02.L","rig.001/root/spine/spine.001/spine.002/spine.003/shoulder.L/upper_arm.L/upper_arm.001.L/forearm.L/forearm.001.L/hand.L/palm.04.L/f_pinky.01.L/f_pinky.02.L/f_pinky.03.L","rig.001/root/spine/spine.001/spine.002/spine.003/shoulder.R","rig.001/root/spine/spine.001/spine.002/spine.003/shoulder.R/upper_arm.R","rig.001/root/spine/spine.001/spine.002/spine.003/shoulder.R/upper_arm.R/upper_arm.001.R","rig.001/root/spine/spine.001/spine.002/spine.003/shoulder.R/upper_arm.R/upper_arm.001.R/forearm.R","rig.001/root/spine/spine.001/spine.002/spine.003/shoulder.R/upper_arm.R/upper_arm.001.R/forearm.R/forearm.001.R","rig.001/root/spine/spine.001/spine.002/spine.003/shoulder.R/upper_arm.R/upper_arm.001.R/forearm.R/forearm.001.R/hand.R","rig.001/root/spine/spine.001/spine.002/spine.003/shoulder.R/upper_arm.R/upper_arm.001.R/forearm.R/forearm.001.R/hand.R/palm.01.R","rig.001/root/spine/spine.001/spine.002/spine.003/shoulder.R/upper_arm.R/upper_arm.001.R/forearm.R/forearm.001.R/hand.R/palm.01.R/f_index.01.R","rig.001/root/spine/spine.001/spine.002/spine.003/shoulder.R/upper_arm.R/upper_arm.001.R/forearm.R/forearm.001.R/hand.R/palm.01.R/f_index.01.R/f_index.02.R","rig.001/root/spine/spine.001/spine.002/spine.003/shoulder.R/upper_arm.R/upper_arm.001.R/forearm.R/forearm.001.R/hand.R/palm.01.R/f_index.01.R/f_index.02.R/f_index.03.R","rig.001/root/spine/spine.001/spine.002/spine.003/shoulder.R/upper_arm.R/upper_arm.001.R/forearm.R/forearm.001.R/hand.R/palm.01.R/thumb.01.R","rig.001/root/spine/spine.001/spine.002/spine.003/shoulder.R/upper_arm.R/upper_arm.001.R/forearm.R/forearm.001.R/hand.R/palm.01.R/thumb.01.R/thumb.02.R","rig.001/root/spine/spine.001/spine.002/spine.003/shoulder.R/upper_arm.R/upper_arm.001.R/forearm.R/forearm.001.R/hand.R/palm.01.R/thumb.01.R/thumb.02.R/thumb.03.R","rig.001/root/spine/spine.001/spine.002/spine.003/shoulder.R/upper_arm.R/upper_arm.001.R/forearm.R/forearm.001.R/hand.R/palm.02.R","rig.001/root/spine/spine.001/spine.002/spine.003/shoulder.R/upper_arm.R/upper_arm.001.R/forearm.R/forearm.001.R/hand.R/palm.02.R/f_middle.01.R","rig.001/root/spine/spine.001/spine.002/spine.003/shoulder.R/upper_arm.R/upper_arm.001.R/forearm.R/forearm.001.R/hand.R/palm.02.R/f_middle.01.R/f_middle.02.R","rig.001/root/spine/spine.001/spine.002/spine.003/shoulder.R/upper_arm.R/upper_arm.001.R/forearm.R/forearm.001.R/hand.R/palm.02.R/f_middle.01.R/f_middle.02.R/f_middle.03.R","rig.001/root/spine/spine.001/spine.002/spine.003/shoulder.R/upper_arm.R/upper_arm.001.R/forearm.R/forearm.001.R/hand.R/palm.03.R","rig.001/root/spine/spine.001/spine.002/spine.003/shoulder.R/upper_arm.R/upper_arm.001.R/forearm.R/forearm.001.R/hand.R/palm.03.R/f_ring.01.R","rig.001/root/spine/spine.001/spine.002/spine.003/shoulder.R/upper_arm.R/upper_arm.001.R/forearm.R/forearm.001.R/hand.R/palm.03.R/f_ring.01.R/f_ring.02.R","rig.001/root/spine/spine.001/spine.002/spine.003/shoulder.R/upper_arm.R/upper_arm.001.R/forearm.R/forearm.001.R/hand.R/palm.03.R/f_ring.01.R/f_ring.02.R/f_ring.03.R","rig.001/root/spine/spine.001/spine.002/spine.003/shoulder.R/upper_arm.R/upper_arm.001.R/forearm.R/forearm.001.R/hand.R/palm.04.R","rig.001/root/spine/spine.001/spine.002/spine.003/shoulder.R/upper_arm.R/upper_arm.001.R/forearm.R/forearm.001.R/hand.R/palm.04.R/f_pinky.01.R","rig.001/root/spine/spine.001/spine.002/spine.003/shoulder.R/upper_arm.R/upper_arm.001.R/forearm.R/forearm.001.R/hand.R/palm.04.R/f_pinky.01.R/f_pinky.02.R","rig.001/root/spine/spine.001/spine.002/spine.003/shoulder.R/upper_arm.R/upper_arm.001.R/forearm.R/forearm.001.R/hand.R/palm.04.R/f_pinky.01.R/f_pinky.02.R/f_pinky.03.R","rig.001/root/spine/spine.001/spine.002/spine.003/breast.L","rig.001/root/spine/spine.001/spine.002/spine.003/breast.R","rig.001/root/spine/pelvis.L","rig.001/root/spine/pelvis.R","rig.001/root/spine/thigh.L","rig.001/root/spine/thigh.L/thigh.001.L","rig.001/root/spine/thigh.L/thigh.001.L/shin.L","rig.001/root/spine/thigh.L/thigh.001.L/shin.L/shin.001.L","rig.001/root/spine/thigh.L/thigh.001.L/shin.L/shin.001.L/foot.L","rig.001/root/spine/thigh.L/thigh.001.L/shin.L/shin.001.L/foot.L/toe.L","rig.001/root/spine/thigh.R","rig.001/root/spine/thigh.R/thigh.001.R","rig.001/root/spine/thigh.R/thigh.001.R/shin.R","rig.001/root/spine/thigh.R/thigh.001.R/shin.R/shin.001.R","rig.001/root/spine/thigh.R/thigh.001.R/shin.R/shin.001.R/foot.R","rig.001/root/spine/thigh.R/thigh.001.R/shin.R/shin.001.R/foot.R/toe.R"],[[[7,1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1],[7,1,1.4913523813849254e-15,2.384185791015625e-7,0,2.3086994360710378e-7,-0.24963954091072083,-0.9683389067649841,0,5.9518693973359404e-8,0.9683389067649841,-0.24963955581188202,0,-8.143033469742988e-10,-0.010776742361485958,0.0034154364839196205,1],[7,1,-2.1298945214196841e-16,2.384186643666908e-7,0,2.366096367723003e-7,-0.12295382469892502,-0.9924125075340271,0,2.931448328524766e-8,0.9924125075340271,-0.12295383214950562,0,-4.2469325278737813e-10,-0.01281394436955452,0.001781292143277824,1],[7,1,-1.1144142283514655e-14,2.384186927884002e-7,0,2.38297999999304e-7,0.03181256353855133,-0.9994940757751465,0,-7.584696426476967e-9,0.9994940757751465,0.03181256353855133,0,1.0854406956584128e-10,-0.014444232918322086,-0.0004552676691673696,1],[7,1,-1.1862372859710625e-14,2.3841863594498136e-7,0,2.3832140527701995e-7,0.028559789061546326,-0.9995923638343811,0,-6.809172781174766e-9,0.9995923638343811,0.028559789061546326,0,9.583722704320508e-11,-0.01637808419764042,-0.00040197145426645875,1],[7,1,-4.822620371081575e-14,-2.3841850804728892e-7,0,-2.3534460069640772e-7,-0.16006000339984894,-0.987107515335083,0,-3.816120752730967e-8,0.9871073961257935,-0.16006003320217133,0,7.372892296686473e-10,-0.018275195732712746,0.003092421218752861,1],[7,1,-9.257062483095449e-14,-2.3841846541472478e-7,0,-2.3822163086606452e-7,0.04062240943312645,-0.9991747140884399,0,9.685222401856208e-9,0.9991747140884399,0.04062240943312645,0,-1.8321776040775006e-10,-0.019224222749471664,-0.000768464058637619,1],[7,1,-4.631948850083306e-14,9.95702069514666e-14,0,9.94220981584415e-14,-0.003186163492500782,-0.9999951124191284,0,4.663649566354067e-14,0.9999950528144836,-0.0031861637253314257,0,-9.468081344849366e-16,-0.019919073209166527,0.00010420544276712462,1],[7,0.38747256994247437,0.9152210354804993,-0.110613614320755,0,-0.9218434691429138,0.38357123732566833,-0.05547773465514183,0,-0.008346189744770527,0.12346453219652176,0.9923138618469238,0,-0.0006343058776110411,-0.002109030494466424,-0.01782291755080223,1],[7,-0.8309911489486694,0.5547759532928467,0.04095610976219177,0,0.036208998411893845,0.12741106748580933,-0.9911888241767883,0,-0.555105984210968,-0.8221861124038696,-0.12596534192562103,0,0.012380141764879227,0.01319888886064291,0.002449983963742852,1],[7,-0.8309912085533142,0.5547756552696228,0.04095640033483505,0,0.036208588629961014,0.12741106748580933,-0.9911890029907227,0,-0.5551056861877441,-0.8221863508224487,-0.12596513330936432,0,0.012380138970911503,0.011443604715168476,0.002449979539960623,1],[7,-0.8309912085533142,0.506626546382904,-0.229746013879776,0,0.036208376288414,-0.3628639280796051,-0.9311383366584778,0,-0.555105984210968,-0.7820865511894226,0.28319257497787476,0,0.012380142696201801,0.009678276255726814,-0.002489324426278472,1],[7,-0.8309916257858276,0.5066261291503906,-0.22974537312984467,0,0.03620792180299759,-0.36286377906799316,-0.9311385154724121,0,-0.5551053881645203,-0.782086968421936,0.2831929326057434,0,0.012380137108266354,0.00822687242180109,-0.0024893321096897125,1],[7,-0.6410925984382629,0.7458238005638123,-0.18096087872982025,0,-0.04519026353955269,-0.2720666527748108,-0.9612165689468384,0,-0.766131579875946,-0.6080513596534729,0.20812392234802246,0,0.013879137113690376,0.0030595245771110058,-0.001838503871113062,1],[7,0.3562532365322113,0.6496073603630066,-0.6716348528862,0,0.8766136765480042,-0.48119407892227173,-0.0004327966598793864,0,-0.3234679400920868,-0.5886103510856628,-0.7408819198608398,0,0.002450143452733755,0.0029076277278363705,0.013806608505547047,1],[7,0.2653426229953766,0.5773390531539917,-0.772186815738678,0,0.9402543902397156,-0.3321666121482849,0.07474460452795029,0,-0.21334175765514374,-0.7458851337432861,-0.6309835910797119,0,0.0018186946399509907,0.004662031307816505,0.01325935684144497,1],[7,0.2635299265384674,0.4480796158313751,-0.8542695045471191,0,0.9415250420570374,-0.3122216761112213,0.1266811192035675,0,-0.2099582850933075,-0.8377004265785217,-0.5041580200195312,0,0.0017937207594513893,0.0061915116384625435,0.012433233670890331,1],[7,0.2666983902454376,0.2298436164855957,-0.9359719157218933,0,0.9386086463928223,-0.28244125843048096,0.19809149205684662,0,-0.21882709860801697,-0.9313423037528992,-0.2910599112510681,0,0.0018669510027393699,0.008504955098032951,0.010717875324189663,1],[7,0.49519646167755127,0.05384887009859085,0.8671103715896606,0,-0.5259297490119934,-0.7758365273475647,0.34853285551071167,0,0.691504180431366,-0.6286315321922302,-0.3558708429336548,0,-0.012352187186479568,0.007272761315107346,-0.000669782399199903,1],[7,0.48209574818611145,0.37401819229125977,0.7922711372375488,0,-0.503975510597229,-0.6213141679763794,0.5999805927276611,0,0.7166531682014465,-0.68853360414505,-0.11103694885969162,0,-0.012559755705296993,0.005563715007156134,-0.002983722137287259,1],[7,0.529266893863678,0.5751169919967651,0.6237918138504028,0,-0.5459916591644287,-0.3318893015384674,0.7692476511001587,0,0.6494376063346863,-0.7477226257324219,0.13835109770298004,0,-0.012119927443563938,0.004760862328112125,-0.004638932645320892,1],[7,0.2696860432624817,0.6918048858642578,-0.6698318719863892,0,0.9239062666893005,-0.3819562792778015,-0.02250516787171364,0,-0.2714158296585083,-0.6127926707267761,-0.7421709895133972,0,0.0021624374203383923,0.003036636160686612,0.013841894455254078,1],[7,0.3537948727607727,0.5819966197013855,-0.7321944236755371,0,0.9302300810813904,-0.30052870512008667,0.21060487627983093,0,-0.09747418016195297,-0.7556203603744507,-0.6477161645889282,0,-0.0005587507621385157,0.004804576281458139,0.013331950642168522,1],[7,0.3497494161128998,0.41688013076782227,-0.8389789462089539,0,0.932612419128418,-0.23994317650794983,0.26955729722976685,0,-0.08893425762653351,-0.8767198920249939,-0.4727075695991516,0,-0.0006257614586502314,0.006872344296425581,0.012149502523243427,1],[7,0.357612669467926,0.28742462396621704,-0.8885378837585449,0,0.9273972511291504,-0.22113032639026642,0.3017209768295288,0,-0.10976070165634155,-0.9319270253181458,-0.3456357717514038,0,-0.000455858331406489,0.008113847114145756,0.011125441640615463,1],[7,0.1206265240907669,0.7715458273887634,-0.6246326565742493,0,0.9725915789604187,-0.2178543210029602,-0.08127057552337646,0,-0.19878293573856354,-0.5977091789245605,-0.7766780853271484,0,0.0020391170401126146,0.002431898145005107,0.013923391699790955,1],[7,0.10022849589586258,0.5620957612991333,-0.8209765553474426,0,0.9474629759788513,-0.3058272898197174,-0.09371933341026306,0,-0.3037562668323517,-0.7684517502784729,-0.5632174611091614,0,0.0034523638896644115,0.005156481638550758,0.012732056900858879,1],[7,0.11566713452339172,0.4623032808303833,-0.8791455626487732,0,0.936481773853302,-0.34578225016593933,-0.05862070620059967,0,-0.3310934901237488,-0.8165233135223389,-0.4729343354701996,0,0.00364900310523808,0.005852320231497288,0.012136011384427547,1],[7,0.09283486008644104,0.3272530734539032,-0.9403654336929321,0,0.9544668197631836,-0.29816436767578125,-0.009536136873066425,0,-0.2835042476654053,-0.8966621160507202,-0.34003230929374695,0,0.0032924495171755552,0.00754108652472496,0.011119825765490532,1],[7,0.04330408200621605,0.6257373094558716,-0.7788306474685669,0,0.9944501519203186,-0.10181404650211334,-0.02650781348347664,0,-0.0958828404545784,-0.7733604311943054,-0.6266735792160034,0,0.0010848420206457376,0.00566673232242465,0.013020765967667103,1],[7,-0.30315059423446655,0.4169746935367584,-0.8568731546401978,0,0.9103978872299194,-0.1389494687318802,-0.38970306515693665,0,-0.28155842423439026,-0.8982343673706055,-0.3374903202056885,0,0.005753342993557453,0.007785627618432045,0.01001269556581974,1],[7,-0.29827964305877686,0.227646604180336,-0.9269335269927979,0,0.9054044485092163,-0.2399034947156906,-0.35026979446411133,0,-0.3021124601364136,-0.9437282085418701,-0.1345539391040802,0,0.00595654034987092,0.009297593496739864,0.008162204176187515,1],[7,-0.3059699535369873,0.15428780019283295,-0.9394557476043701,0,0.9146034121513367,-0.2263643741607666,-0.3350517749786377,0,-0.26435378193855286,-0.9617453813552856,-0.07185143977403641,0,0.005584815517067909,0.009774141944944859,0.007543083280324936,1],[7,0.3874726891517639,-0.9152210354804993,0.11061360687017441,0,0.9218435287475586,0.3835712671279907,-0.05547770857810974,0,0.008346161805093288,0.12346450239419937,0.9923139214515686,0,0.0006343063432723284,-0.0021090300288051367,-0.01782291755080223,1],[7,-0.830991268157959,-0.5547758936882019,-0.04095611348748207,0,-0.03620895370841026,0.12741102278232574,-0.9911891222000122,0,0.555105984210968,-0.822186291217804,-0.12596529722213745,0,-0.012380142696201801,0.013198891654610634,0.002449982799589634,1],[7,-0.8309914469718933,-0.5547754764556885,-0.04095638170838356,0,-0.03620857372879982,0.12741105258464813,-0.9911889433860779,0,0.5551055669784546,-0.8221865296363831,-0.12596513330936432,0,-0.012380138039588928,0.0114436075091362,0.002449979307129979,1],[7,-0.8309915065765381,-0.506626307964325,0.22974589467048645,0,-0.03620840609073639,-0.3628638982772827,-0.9311384558677673,0,0.5551056265830994,-0.7820869088172913,0.28319263458251953,0,-0.012380140833556652,0.009678284637629986,-0.002489326987415552,1],[7,-0.830991804599762,-0.5066260099411011,0.22974523901939392,0,-0.0362078957259655,-0.3628637194633484,-0.9311387538909912,0,0.5551050901412964,-0.7820871472358704,0.283192902803421,0,-0.01238013431429863,0.008226877078413963,-0.002489333739504218,1],[7,-0.641092836856842,-0.7458238005638123,0.18096067011356354,0,0.04519053176045418,-0.2720666229724884,-0.9612168073654175,0,0.766131579875946,-0.608051598072052,0.20812417566776276,0,-0.0138791399076581,0.0030595280695706606,-0.0018385087605565786,1],[7,0.35625314712524414,-0.6496076583862305,0.6716349124908447,0,-0.8766140937805176,-0.4811938405036926,-0.0004329133953433484,0,0.32346785068511963,-0.5886102914810181,-0.7408820986747742,0,-0.0024501443840563297,0.002907627960667014,0.01380661316215992,1],[7,0.2653423547744751,-0.577339231967926,0.7721869945526123,0,-0.9402546882629395,-0.3321663439273834,0.07474445551633835,0,0.2133416384458542,-0.7458852529525757,-0.6309836506843567,0,-0.0018186947563663125,0.004662031307816505,0.013259358704090118,1],[7,0.26352977752685547,-0.4480797052383423,0.8542693257331848,0,-0.9415251016616821,-0.31222137808799744,0.1266811043024063,0,0.20995797216892242,-0.8377004265785217,-0.5041578412055969,0,-0.0017937187803909183,0.006191510707139969,0.012433231808245182,1],[7,0.26669830083847046,-0.22984416782855988,0.9359717965126038,0,-0.9386088252067566,-0.282441109418869,0.19809140264987946,0,0.21882672607898712,-0.9313424825668335,-0.29106029868125916,0,-0.0018669490236788988,0.008504954166710377,0.010717878118157387,1],[7,0.4951966106891632,-0.053848423063755035,-0.8671103715896606,0,0.5259300470352173,-0.7758364081382751,0.34853267669677734,0,-0.6915040016174316,-0.6286316514015198,-0.35587114095687866,0,0.01235218532383442,0.007272763177752495,-0.0006697779172100127,1],[7,0.4820963740348816,-0.3740176260471344,-0.7922712564468384,0,0.5039758086204529,-0.621314287185669,0.5999805331230164,0,-0.716653048992157,-0.6885338425636292,-0.11103752255439758,0,0.012559761293232441,0.005563722457736731,-0.002983716083690524,1],[7,0.5292673110961914,-0.5751162767410278,-0.6237921118736267,0,0.5459918975830078,-0.3318893611431122,0.7692474126815796,0,-0.6494370698928833,-0.7477232813835144,0.1383506953716278,0,0.012119922786951065,0.0047608730383217335,-0.004638929385691881,1],[7,0.2696860134601593,-0.6918054819107056,0.6698319315910339,0,-0.9239067435264587,-0.38195618987083435,-0.022505197674036026,0,0.27141571044921875,-0.6127929091453552,-0.7421714663505554,0,-0.0021624378859996796,0.0030366380233317614,0.013841903768479824,1],[7,0.35379499197006226,-0.5819973945617676,0.7321940660476685,0,-0.9302303194999695,-0.30052873492240906,0.21060501039028168,0,0.09747378528118134,-0.7556202411651611,-0.647716760635376,0,0.0005587560008279979,0.004804568365216255,0.01333195436745882,1],[7,0.349749356508255,-0.41688084602355957,0.8389789462089539,0,-0.9326126575469971,-0.23994316160678864,0.26955732703208923,0,0.08893396705389023,-0.8767200112342834,-0.472708135843277,0,0.0006257638451643288,0.006872339639812708,0.012149510905146599,1],[7,0.3576127290725708,-0.2874252200126648,0.888538122177124,0,-0.927397608757019,-0.22113029658794403,0.3017209768295288,0,0.10976049304008484,-0.9319273233413696,-0.3456362783908844,0,0.0004558601649478078,0.008113845251500607,0.011125450022518635,1],[7,0.120626300573349,-0.7715458273887634,0.6246328353881836,0,-0.9725916981697083,-0.21785402297973633,-0.08127056062221527,0,0.1987827569246292,-0.5977093577384949,-0.776678204536438,0,-0.0020391165744513273,0.0024318997748196125,0.013923396356403828,1],[7,0.10022841393947601,-0.562095582485199,0.8209766745567322,0,-0.9474632143974304,-0.30582690238952637,-0.09371916949748993,0,0.3037559688091278,-0.7684518098831177,-0.5632174015045166,0,-0.0034523624926805496,0.005156485829502344,0.012732058763504028,1],[7,0.11566726118326187,-0.462303102016449,0.8791453838348389,0,-0.9364818930625916,-0.3457818925380707,-0.05862034484744072,0,0.33109304308891296,-0.8165232539176941,-0.4729342758655548,0,-0.0036489972844719887,0.005852322094142437,0.012136010453104973,1],[7,0.09283474832773209,-0.3272527754306793,0.9403656125068665,0,-0.9544671177864075,-0.29816409945487976,-0.009536013938486576,0,0.2835039794445038,-0.8966625332832336,-0.3400319218635559,0,-0.0032924481201916933,0.007541092112660408,0.011119822971522808,1],[7,0.04330385476350784,-0.6257372498512268,0.7788312435150146,0,-0.9944503903388977,-0.10181383043527603,-0.026507839560508728,0,0.09588270634412766,-0.773361325263977,-0.6266732215881348,0,-0.001084841787815094,0.005666743498295546,0.013020766898989677,1],[7,-0.30315083265304565,-0.41697409749031067,0.8568735718727112,0,-0.9103980660438538,-0.13894949853420258,-0.38970300555229187,0,0.2815581262111664,-0.8982351422309875,-0.33748960494995117,0,-0.005753341596573591,0.00778564065694809,0.010012691840529442,1],[7,-0.2982800006866455,-0.2276458889245987,0.9269340634346008,0,-0.9054046869277954,-0.23990365862846375,-0.35026994347572327,0,0.30211225152015686,-0.9437288641929626,-0.13455313444137573,0,-0.005956542678177357,0.009297607466578484,0.008162199519574642,1],[7,-0.305970162153244,-0.15428732335567474,0.9394561648368835,0,-0.9146036505699158,-0.22636441886425018,-0.33505186438560486,0,0.2643536329269409,-0.961746096611023,-0.0718509703874588,0,-0.005584817845374346,0.009774153120815754,0.007543083280324936,1],[7,-1,-1.1069809513486462e-9,-8.85620110580021e-8,0,1.1069932748242195e-9,-0.9999997615814209,-1.3783575525394554e-7,0,-8.85620110580021e-8,-1.3783574104309082e-7,1,0,0.0010911786230280995,0.0005421112291514874,-0.016216905787587166,1],[7,-1,-1.1069809513486462e-9,-8.85620110580021e-8,0,1.1069932748242195e-9,-0.9999997615814209,-1.3783575525394554e-7,0,-8.85620110580021e-8,-1.3783574104309082e-7,1,0,-0.0010911757126450539,0.0005421112291514874,-0.016216905787587166,1],[7,-0.3717861473560333,0.6168416142463684,-0.6937444806098938,0,-0.902387261390686,-0.4155394434928894,0.11412400752305984,0,-0.21788184344768524,0.6684557199478149,0.7111219763755798,0,0.003016257891431451,-0.007289252243936062,-0.008097676560282707,1],[7,-0.37178611755371094,-0.6168416142463684,0.6937444806098938,0,0.902387261390686,-0.4155394434928894,0.11412402242422104,0,0.21788179874420166,0.6684557795524597,0.7111217975616455,0,-0.003016258357092738,-0.0072892531752586365,-0.008097675628960133,1],[7,0.9788966178894043,0.03239113464951515,0.20177285373210907,0,-0.20095303654670715,-0.02686535380780697,0.9792331457138062,0,0.03713914379477501,-0.9991142749786377,-0.0197893138974905,0,-0.001955766463652253,0.011982849799096584,-0.00012113447155570611,1],[7,0.9788966178894043,0.03239107131958008,0.20177282392978668,0,-0.20095299184322357,-0.02686539851129055,0.9792330861091614,0,0.03713908791542053,-0.9991143941879272,-0.019789373502135277,0,-0.0019557662308216095,0.00950558204203844,-0.00012113346019759774,1],[7,0.9788969159126282,0.06283223628997803,0.19445616006851196,0,-0.20095203816890717,0.12303029000759125,0.9718450903892517,0,0.0371391698718071,-0.9904122948646545,0.1330602765083313,0,-0.0019557673949748278,0.006927328649908304,-0.0011933038476854563,1],[7,0.9788969159126282,0.06283215433359146,0.1944560557603836,0,-0.2009519338607788,0.12303029000759125,0.9718450903892517,0,0.03713911399245262,-0.990412175655365,0.1330602616071701,0,-0.001955766696482897,0.004053902346640825,-0.0011933034984394908,1],[7,0.996258556842804,0.07160516083240509,-0.048394594341516495,0,0.0864252895116806,-0.825458824634552,0.5578075647354126,0,-0.000005848095952387666,-0.5599030256271362,-0.8285584449768066,0,-0.002118313917890191,0.001148779527284205,0.0009140963084064424,1],[7,-0.9999861717224121,-3.159503307870182e-7,0.00527871772646904,0,-0.000488661287818104,-0.9957011938095093,-0.0926302969455719,0,0.005256050731986761,-0.09263164550065994,0.9956867694854736,0,0.0022082719951868057,-0.0009366122540086508,-0.00042094517266377807,1],[7,0.9788965582847595,-0.03239111974835396,-0.20177273452281952,0,0.2009529322385788,-0.02686537243425846,0.9792327880859375,0,-0.037139132618904114,-0.9991142153739929,-0.01978933811187744,0,0.0019557655323296785,0.01198284886777401,-0.00012113387492718175,1],[7,0.9788966774940491,-0.03239106386899948,-0.20177268981933594,0,0.20095287263393402,-0.02686545066535473,0.9792327880859375,0,-0.037139080464839935,-0.9991142749786377,-0.019789423793554306,0,0.001955765299499035,0.00950558204203844,-0.00012113272532587871,1],[7,0.978896975517273,-0.06283222883939743,-0.194456085562706,0,0.20095200836658478,0.12303024530410767,0.9718449711799622,0,-0.03713918477296829,-0.9904122948646545,0.13306020200252533,0,0.001955766696482897,0.006927327252924442,-0.0011933029163628817,1],[7,0.978896975517273,-0.06283214688301086,-0.19445598125457764,0,0.20095190405845642,0.12303026020526886,0.9718449711799622,0,-0.03713911771774292,-0.9904121160507202,0.13306021690368652,0,0.001955765997990966,0.004053902346640825,-0.0011933027999475598,1],[7,0.9962583780288696,-0.07160545140504837,0.04839411377906799,0,-0.0864252820611,-0.8254583477973938,0.557807981967926,0,0.00000523547487318865,-0.5599033236503601,-0.8285582065582275,0,0.0021183143835514784,0.0011487791780382395,0.0009140954934991896,1],[7,-0.9999861717224121,1.9440525989011803e-7,-0.005278825294226408,0,0.000488791789393872,-0.9957002401351929,-0.09263019263744354,0,-0.005256147123873234,-0.09263145923614502,0.9956867694854736,0,-0.0022082715295255184,-0.0009366121958009899,-0.00042094505624845624,1]],8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8]]],0,0,[],[],[]],[[[58,"obstacle_jumpable"],[182,"obstacle_jumpable",[-9],[[[259,true,-7,[7,"c4eLbX1vFAJL+J7zNe/ExY"],[1,0,0.5,0]],-8],4,1],[93,"969XNiWY5HsaEzSoCn2x/3",null,-6,0,[[21,["graphicNode"],-3,-2,[0,["854tChFohKeYSTZmJTQ80q"]]],[5,["mainRenderer"],-5,[0,["376PwH4jdK3K3SIOGw9DsB"]],-4,[0,["abiQgE6U1EApBrj5zXGd6B"]]]],[-1]]],[122,0,{},[10,"c1A9sG8V1OlqPhhySK/Coe",null,null,-20,[6,"76om5tMkJAELdAAefMkO6v",1,[[1,"obstacle_graphic",["_name"],-10],[2,["_lpos"],-11,[1,0,0,0]],[2,["_lrot"],-12,[3,0,0,0,1]],[2,["_euler"],-13,[1,0,0,0]],[3,["collidedTextures","0"],-14,1],[3,["collidedTextures","1"],-15,2],[3,["collidedTextures","2"],-16,3],[3,["collidedTextures","3"],-17,4],[3,["collidedTextures","4"],-18,5],[3,["collidedTextures","5"],-19,6]]],0]],[0,["376PwH4jdK3K3SIOGw9DsB"]],[0,["c1A9sG8V1OlqPhhySK/Coe"]],[18,"Parent",1,[2],[4,"12InrzwKdCEKrV07dQs4zX",null,null,null,1,0]],[264,1,[7,"78j3SJeChFWY5tDVNRr9co"],[2]],[36,"Quad",2,[[149,"Quad<ModelComponent>",-21,[7,"abiQgE6U1EApBrj5zXGd6B"],[7],[9],8]],[4,"854tChFohKeYSTZmJTQ80q",null,null,null,1,0],[1,0,1.327,0],[1,2.7,2.7,2.7]]],0,[0,-1,2,0,3,2,0,5,6,0,3,2,0,5,2,0,4,1,0,2,1,0,-2,6,0,-1,5,0,1,4,0,1,4,0,1,4,0,1,4,0,1,3,0,1,3,0,1,3,0,1,3,0,1,3,0,1,3,0,4,2,0,2,7,0,14,1,2,12,5,6,21,7,21],[0,0,0,0,0,0,0,0,0],[6,0,0,0,0,0,0,-1,7],[20,457,458,459,460,461,462,7,10]],[[[44,"Stage_Runner_Exterior_Textures_2",[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{"USE_ALBEDO_MAP":true,"USE_NORMAL_MAP":true,"USE_EMISSIVE_MAP":true},{},{},{}],[[[{"roughness":0.865,"metallic":0.686},"emissive",8,[4,4290559164],"mainTexture",6,0,"normalMap",6,1,"emissiveMap",6,2],{},{},{}],11,0,0,0]]],0,0,[0,0,0,0],[13,22,16,11],[463,464,465,38]],[[{"name":"img_wipeout_6","rect":{"x":0,"y":0,"width":720,"height":493},"offset":{"x":0,"y":0},"originalSize":{"width":720,"height":493},"rotated":false,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[-360,-246.5,0,360,-246.5,0,-360,246.5,0,360,246.5,0],"indexes":[0,1,2,2,1,3],"uv":[0,493,720,493,0,0,720,0],"nuv":[0,0,1,0,0,1,1,1],"minPos":{"x":-360,"y":-246.5,"z":0},"maxPos":{"x":360,"y":246.5,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[10],[466]],[[{"name":"img_post_customize","rect":{"x":0,"y":0,"width":361,"height":359},"offset":{"x":0,"y":0},"originalSize":{"width":361,"height":359},"rotated":false,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[-180.5,-179.5,0,180.5,-179.5,0,-180.5,179.5,0,180.5,179.5,0],"indexes":[0,1,2,2,1,3],"uv":[0,359,361,359,0,0,361,0],"nuv":[0,0,1,0,0,1,1,1],"minPos":{"x":-180.5,"y":-179.5,"z":0},"maxPos":{"x":180.5,"y":179.5,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[10],[467]],[[[54,"mat_crowd_general_reverse",1,[{"rasterizerState":{"cullMode":1},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{"USE_ALBEDO_MAP":true},{},{}],[[[{"roughness":1},"mainTexture",6,0],{},{}],11,0,0]]],0,0,[0,0],[13,11],[28,38]],[[{"name":"img_celebmoment_title","rect":{"x":0,"y":0,"width":512,"height":234},"offset":{"x":0,"y":0},"originalSize":{"width":512,"height":234},"rotated":false,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[-256,-117,0,256,-117,0,-256,117,0,256,117,0],"indexes":[0,1,2,2,1,3],"uv":[0,234,512,234,0,0,512,0],"nuv":[0,0,1,0,0,1,1,1],"minPos":{"x":-256,"y":-117,"z":0},"maxPos":{"x":256,"y":117,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[10],[468]],[[{"name":"img_game_collectible_shades_active","rect":{"x":0,"y":0,"width":131,"height":72},"offset":{"x":0,"y":0},"originalSize":{"width":131,"height":72},"rotated":false,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[-65.5,-36,0,65.5,-36,0,-65.5,36,0,65.5,36,0],"indexes":[0,1,2,2,1,3],"uv":[0,72,131,72,0,0,131,0],"nuv":[0,0,1,0,0,1,1,1],"minPos":{"x":-65.5,"y":-36,"z":0},"maxPos":{"x":65.5,"y":36,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[10],[469]],[[{"name":"img_bar_upper_container","rect":{"x":0,"y":0,"width":728,"height":416},"offset":{"x":0,"y":0},"originalSize":{"width":728,"height":416},"rotated":false,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[-364,-208,0,364,-208,0,-364,208,0,364,208,0],"indexes":[0,1,2,2,1,3],"uv":[0,416,728,416,0,0,728,0],"nuv":[0,0,1,0,0,1,1,1],"minPos":{"x":-364,"y":-208,"z":0},"maxPos":{"x":364,"y":208,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[10],[470]],[[[347,"DreadnoughtusUltra",72,{"commonHeight":72,"fontSize":72,"atlasName":"DreadnoughtusUltra.png","fontDefDictionary":{"32":{"xOffset":0,"yOffset":0,"xAdvance":35,"rect":{"x":0,"y":0,"width":0,"height":0}},"33":{"xOffset":-9,"yOffset":-5,"xAdvance":21,"rect":{"x":746,"y":206,"width":38,"height":70}},"34":{"xOffset":-6,"yOffset":-15,"xAdvance":38,"rect":{"x":679,"y":674,"width":52,"height":39}},"35":{"xOffset":-2,"yOffset":-5,"xAdvance":78,"rect":{"x":323,"y":344,"width":82,"height":70}},"36":{"xOffset":-7,"yOffset":-13,"xAdvance":70,"rect":{"x":228,"y":371,"width":84,"height":86}},"37":{"xOffset":-8,"yOffset":-5,"xAdvance":88,"rect":{"x":0,"y":320,"width":103,"height":70}},"38":{"xOffset":-8,"yOffset":-6,"xAdvance":64,"rect":{"x":416,"y":162,"width":80,"height":71}},"39":{"xOffset":-5,"yOffset":-15,"xAdvance":20,"rect":{"x":746,"y":608,"width":35,"height":39}},"40":{"xOffset":-8,"yOffset":-13,"xAdvance":38,"rect":{"x":679,"y":93,"width":54,"height":93}},"41":{"xOffset":-8,"yOffset":-13,"xAdvance":38,"rect":{"x":679,"y":196,"width":54,"height":93}},"42":{"xOffset":-9,"yOffset":-13,"xAdvance":36,"rect":{"x":679,"y":505,"width":53,"height":52}},"43":{"xOffset":-6,"yOffset":-4,"xAdvance":54,"rect":{"x":594,"y":516,"width":65,"height":65}},"44":{"xOffset":-6,"yOffset":32,"xAdvance":25,"rect":{"x":746,"y":516,"width":36,"height":39}},"45":{"xOffset":-7,"yOffset":15,"xAdvance":58,"rect":{"x":594,"y":307,"width":72,"height":36}},"46":{"xOffset":-6,"yOffset":32,"xAdvance":25,"rect":{"x":746,"y":565,"width":36,"height":33}},"47":{"xOffset":-8,"yOffset":-7,"xAdvance":41,"rect":{"x":679,"y":0,"width":57,"height":83}},"48":{"xOffset":-8,"yOffset":-6,"xAdvance":62,"rect":{"x":506,"y":0,"width":78,"height":71}},"49":{"xOffset":-8,"yOffset":-6,"xAdvance":51,"rect":{"x":594,"y":435,"width":67,"height":71}},"50":{"xOffset":-8,"yOffset":-6,"xAdvance":61,"rect":{"x":506,"y":471,"width":76,"height":71}},"51":{"xOffset":-8,"yOffset":-6,"xAdvance":61,"rect":{"x":506,"y":316,"width":77,"height":71}},"52":{"xOffset":-8,"yOffset":-6,"xAdvance":64,"rect":{"x":416,"y":0,"width":80,"height":71}},"53":{"xOffset":-8,"yOffset":-6,"xAdvance":60,"rect":{"x":506,"y":552,"width":76,"height":71}},"54":{"xOffset":-8,"yOffset":-6,"xAdvance":63,"rect":{"x":416,"y":493,"width":79,"height":71}},"55":{"xOffset":-8,"yOffset":-6,"xAdvance":60,"rect":{"x":506,"y":633,"width":76,"height":71}},"56":{"xOffset":-8,"yOffset":-6,"xAdvance":65,"rect":{"x":323,"y":570,"width":81,"height":71}},"57":{"xOffset":-8,"yOffset":-6,"xAdvance":63,"rect":{"x":416,"y":574,"width":79,"height":71}},"58":{"xOffset":-6,"yOffset":3,"xAdvance":25,"rect":{"x":746,"y":444,"width":36,"height":62}},"59":{"xOffset":-6,"yOffset":4,"xAdvance":25,"rect":{"x":746,"y":367,"width":36,"height":67}},"61":{"xOffset":-5,"yOffset":3,"xAdvance":75,"rect":{"x":228,"y":153,"width":85,"height":62}},"63":{"xOffset":-8,"yOffset":-7,"xAdvance":51,"rect":{"x":594,"y":353,"width":67,"height":72}},"64":{"xOffset":-8,"yOffset":-8,"xAdvance":93,"rect":{"x":0,"y":226,"width":109,"height":84}},"65":{"xOffset":-8,"yOffset":-6,"xAdvance":76,"rect":{"x":0,"y":481,"width":92,"height":71}},"66":{"xOffset":-8,"yOffset":-6,"xAdvance":64,"rect":{"x":416,"y":655,"width":79,"height":71}},"67":{"xOffset":-8,"yOffset":-6,"xAdvance":70,"rect":{"x":129,"y":335,"width":86,"height":72}},"68":{"xOffset":-8,"yOffset":-6,"xAdvance":68,"rect":{"x":228,"y":640,"width":84,"height":71}},"69":{"xOffset":-7,"yOffset":-6,"xAdvance":61,"rect":{"x":506,"y":714,"width":75,"height":71}},"70":{"xOffset":-8,"yOffset":-6,"xAdvance":59,"rect":{"x":594,"y":72,"width":74,"height":71}},"71":{"xOffset":-8,"yOffset":-6,"xAdvance":70,"rect":{"x":129,"y":417,"width":86,"height":72}},"72":{"xOffset":-8,"yOffset":-6,"xAdvance":66,"rect":{"x":323,"y":263,"width":82,"height":71}},"73":{"xOffset":-7,"yOffset":-6,"xAdvance":22,"rect":{"x":746,"y":286,"width":37,"height":71}},"74":{"xOffset":-6,"yOffset":-6,"xAdvance":48,"rect":{"x":594,"y":679,"width":62,"height":71}},"75":{"xOffset":-8,"yOffset":-6,"xAdvance":71,"rect":{"x":129,"y":581,"width":86,"height":71}},"76":{"xOffset":-8,"yOffset":-6,"xAdvance":58,"rect":{"x":594,"y":153,"width":74,"height":71}},"77":{"xOffset":-8,"yOffset":-6,"xAdvance":77,"rect":{"x":0,"y":400,"width":93,"height":71}},"78":{"xOffset":-8,"yOffset":-6,"xAdvance":69,"rect":{"x":228,"y":0,"width":85,"height":71}},"79":{"xOffset":-8,"yOffset":-6,"xAdvance":73,"rect":{"x":129,"y":91,"width":89,"height":72}},"80":{"xOffset":-8,"yOffset":-6,"xAdvance":62,"rect":{"x":506,"y":81,"width":78,"height":71}},"81":{"xOffset":-8,"yOffset":-6,"xAdvance":73,"rect":{"x":129,"y":0,"width":89,"height":81}},"82":{"xOffset":-8,"yOffset":-6,"xAdvance":64,"rect":{"x":416,"y":81,"width":80,"height":71}},"83":{"xOffset":-7,"yOffset":-6,"xAdvance":70,"rect":{"x":228,"y":558,"width":84,"height":72}},"84":{"xOffset":-8,"yOffset":-6,"xAdvance":71,"rect":{"x":129,"y":173,"width":87,"height":71}},"85":{"xOffset":-8,"yOffset":-6,"xAdvance":70,"rect":{"x":129,"y":499,"width":86,"height":72}},"86":{"xOffset":-8,"yOffset":-6,"xAdvance":76,"rect":{"x":0,"y":562,"width":92,"height":71}},"87":{"xOffset":-8,"yOffset":-6,"xAdvance":103,"rect":{"x":0,"y":0,"width":119,"height":71}},"88":{"xOffset":-8,"yOffset":-6,"xAdvance":76,"rect":{"x":0,"y":643,"width":92,"height":71}},"89":{"xOffset":-8,"yOffset":-6,"xAdvance":70,"rect":{"x":129,"y":662,"width":86,"height":71}},"90":{"xOffset":-9,"yOffset":-6,"xAdvance":61,"rect":{"x":506,"y":162,"width":78,"height":71}},"91":{"xOffset":-9,"yOffset":-13,"xAdvance":34,"rect":{"x":746,"y":0,"width":51,"height":93}},"93":{"xOffset":-9,"yOffset":-13,"xAdvance":34,"rect":{"x":746,"y":103,"width":51,"height":93}},"94":{"xOffset":-6,"yOffset":-10,"xAdvance":43,"rect":{"x":594,"y":760,"width":55,"height":41}},"95":{"xOffset":-8,"yOffset":29,"xAdvance":69,"rect":{"x":228,"y":225,"width":85,"height":36}},"97":{"xOffset":-9,"yOffset":2,"xAdvance":64,"rect":{"x":323,"y":651,"width":81,"height":64}},"98":{"xOffset":-8,"yOffset":-13,"xAdvance":68,"rect":{"x":228,"y":721,"width":83,"height":79}},"99":{"xOffset":-8,"yOffset":2,"xAdvance":65,"rect":{"x":323,"y":725,"width":81,"height":64}},"100":{"xOffset":-8,"yOffset":-13,"xAdvance":68,"rect":{"x":323,"y":0,"width":83,"height":79}},"101":{"xOffset":-8,"yOffset":2,"xAdvance":65,"rect":{"x":416,"y":243,"width":80,"height":64}},"102":{"xOffset":-8,"yOffset":-13,"xAdvance":48,"rect":{"x":594,"y":591,"width":64,"height":78}},"103":{"xOffset":-8,"yOffset":-6,"xAdvance":68,"rect":{"x":228,"y":271,"width":84,"height":90}},"104":{"xOffset":-8,"yOffset":-13,"xAdvance":63,"rect":{"x":416,"y":317,"width":79,"height":78}},"105":{"xOffset":-8,"yOffset":-13,"xAdvance":22,"rect":{"x":46,"y":724,"width":38,"height":78}},"106":{"xOffset":-8,"yOffset":-13,"xAdvance":36,"rect":{"x":679,"y":567,"width":52,"height":97}},"107":{"xOffset":-8,"yOffset":-13,"xAdvance":63,"rect":{"x":416,"y":405,"width":79,"height":78}},"108":{"xOffset":-8,"yOffset":-13,"xAdvance":22,"rect":{"x":679,"y":723,"width":37,"height":78}},"109":{"xOffset":-8,"yOffset":2,"xAdvance":96,"rect":{"x":0,"y":153,"width":112,"height":63}},"110":{"xOffset":-8,"yOffset":2,"xAdvance":62,"rect":{"x":129,"y":743,"width":78,"height":63}},"111":{"xOffset":-8,"yOffset":2,"xAdvance":66,"rect":{"x":323,"y":424,"width":82,"height":64}},"112":{"xOffset":-8,"yOffset":2,"xAdvance":67,"rect":{"x":323,"y":89,"width":83,"height":77}},"113":{"xOffset":-8,"yOffset":2,"xAdvance":67,"rect":{"x":323,"y":176,"width":83,"height":77}},"114":{"xOffset":-8,"yOffset":2,"xAdvance":58,"rect":{"x":594,"y":234,"width":73,"height":63}},"115":{"xOffset":-9,"yOffset":2,"xAdvance":59,"rect":{"x":506,"y":397,"width":77,"height":64}},"116":{"xOffset":-8,"yOffset":-5,"xAdvance":55,"rect":{"x":416,"y":736,"width":66,"height":70}},"117":{"xOffset":-8,"yOffset":3,"xAdvance":62,"rect":{"x":506,"y":243,"width":78,"height":63}},"118":{"xOffset":-7,"yOffset":3,"xAdvance":71,"rect":{"x":228,"y":81,"width":85,"height":62}},"119":{"xOffset":-8,"yOffset":3,"xAdvance":98,"rect":{"x":0,"y":81,"width":113,"height":62}},"120":{"xOffset":-8,"yOffset":3,"xAdvance":67,"rect":{"x":323,"y":498,"width":82,"height":62}},"121":{"xOffset":-8,"yOffset":3,"xAdvance":69,"rect":{"x":228,"y":467,"width":84,"height":81}},"122":{"xOffset":-8,"yOffset":3,"xAdvance":59,"rect":{"x":594,"y":0,"width":75,"height":62}},"123":{"xOffset":-9,"yOffset":-13,"xAdvance":36,"rect":{"x":679,"y":299,"width":53,"height":93}},"124":{"xOffset":-7,"yOffset":-6,"xAdvance":22,"rect":{"x":0,"y":724,"width":36,"height":82}},"125":{"xOffset":-9,"yOffset":-13,"xAdvance":36,"rect":{"x":679,"y":402,"width":53,"height":93}},"8470":{"xOffset":-10,"yOffset":-2,"xAdvance":69,"rect":{"x":129,"y":254,"width":87,"height":71}}},"kerningDict":{"2556019":-10,"3080239":-15,"3145783":-3,"3145843":-1,"3211312":-4,"3211318":-4,"3211319":-9,"3211321":-2,"3276855":-2,"3407927":-3,"3538999":-3,"3604528":-4,"3604532":-10,"3604536":-6,"3670053":-4,"3670064":-1,"3670071":-6,"3735607":-2,"4325441":-4,"4325448":-2,"4325449":-2,"4325454":-2,"4325455":-2,"4325457":-2,"4325458":-2,"4325459":-2,"4325460":-6,"4325461":-2,"4325462":-10,"4325463":-7,"4325465":-10,"4325470":-10,"4325481":-1,"4325482":-13,"4325493":-2,"4325494":-6,"4325497":-4,"4390977":-7,"4390984":-1,"4390991":-2,"4390993":-2,"4390996":-2,"4390997":-2,"4390998":-7,"4390999":-7,"4391000":-9,"4391001":-8,"4391006":-7,"4391018":-14,"4391033":-5,"4456494":-2,"4456513":-9,"4456516":-1,"4456517":-2,"4456519":-1,"4456521":-2,"4456527":-1,"4456529":-1,"4456533":-1,"4456534":-8,"4456535":-7,"4456537":-11,"4456542":-8,"4456545":-2,"4456549":-2,"4456554":-15,"4522051":-2,"4522052":-1,"4522055":-2,"4522058":-2,"4522060":1,"4522062":-1,"4522063":-1,"4522065":-1,"4522066":1,"4522067":-2,"4522070":-1,"4522071":-2,"4522072":-2,"4522078":-1,"4522090":-14,"4522099":-3,"4522101":-2,"4522102":-3,"4587564":-7,"4587566":-7,"4587585":-13,"4587587":-3,"4587591":-3,"4587594":-8,"4587599":-4,"4587601":-4,"4587609":-2,"4587617":-2,"4587621":-4,"4587626":-13,"4587631":-5,"4587634":-2,"4587641":-2,"4653121":-2,"4653124":1,"4653135":-1,"4653137":-1,"4653141":-1,"4653143":-8,"4653145":-8,"4653157":-1,"4653162":-12,"4718657":-2,"4718661":2,"4718664":1,"4718665":1,"4718666":-1,"4718669":1,"4718670":1,"4718671":-1,"4718673":-1,"4718674":2,"4718681":-1,"4718703":-1,"4718713":-2,"4784193":-2,"4784195":-1,"4784197":1,"4784198":2,"4784199":-1,"4784200":2,"4784201":1,"4784202":-1,"4784203":1,"4784204":1,"4784207":-1,"4784209":-1,"4784210":1,"4784211":-1,"4784227":-2,"4784228":-2,"4784234":-14,"4784239":-2,"4784241":-2,"4784243":-2,"4784244":-1,"4784246":-2,"4784247":-2,"4849729":-7,"4849733":1,"4849736":1,"4849743":-1,"4849745":-1,"4915265":-2,"4915269":-3,"4915272":-2,"4915276":-2,"4915279":-11,"4915281":-11,"4915285":-2,"4915289":-4,"4915301":-11,"4915306":-13,"4915311":-10,"4915314":-2,"4915316":-6,"4915317":-9,"4915318":-9,"4915319":-8,"4915321":-8,"4980770":-6,"4980775":-10,"4980801":-2,"4980803":-2,"4980807":-3,"4980815":-2,"4980817":-2,"4980820":-21,"4980821":-2,"4980822":-14,"4980823":-13,"4980825":-18,"4980830":-14,"4980835":-2,"4980837":-2,"4980842":-13,"4980847":-1,"4980852":-6,"4980853":-3,"4980855":-10,"4980857":-13,"5046337":-2,"5046343":-1,"5046344":2,"5046351":-1,"5046353":-1,"5046354":2,"5046357":1,"5046377":1,"5046378":-12,"5111873":-2,"5111875":-1,"5111876":2,"5111877":1,"5111881":2,"5111883":1,"5111884":1,"5111887":-1,"5111889":-1,"5111895":-2,"5111897":-2,"5111919":-1,"5177390":-4,"5177409":-7,"5177410":-1,"5177411":-2,"5177413":-1,"5177416":-1,"5177417":-2,"5177418":-1,"5177420":-1,"5177421":-1,"5177422":-1,"5177423":-1,"5177424":-1,"5177425":-1,"5177426":-1,"5177427":-2,"5177428":-2,"5177430":-8,"5177431":-9,"5177432":-10,"5177433":-11,"5177438":-8,"5177442":-1,"5177443":-2,"5177448":-1,"5177450":-15,"5177452":-1,"5177458":-1,"5177462":-6,"5177464":-6,"5242926":-4,"5242945":-10,"5242949":-1,"5242956":-1,"5242959":-2,"5242960":-1,"5242961":-2,"5242965":-1,"5242966":-6,"5242967":-6,"5242969":-7,"5242974":-6,"5242977":-2,"5242981":-2,"5242986":-13,"5242991":-2,"5308462":-4,"5308481":-7,"5308482":-1,"5308483":-2,"5308485":-1,"5308487":-3,"5308488":-1,"5308489":-2,"5308490":-1,"5308492":-1,"5308493":-1,"5308494":-1,"5308495":-1,"5308496":-1,"5308497":-1,"5308498":-1,"5308499":-2,"5308500":-2,"5308502":-8,"5308503":-9,"5308504":-10,"5308505":-11,"5308510":-8,"5308514":-1,"5308515":-2,"5308520":-1,"5308522":-15,"5308524":-1,"5308530":-1,"5308534":-6,"5308536":-6,"5374017":-6,"5374019":-2,"5374020":-1,"5374021":-2,"5374022":-2,"5374023":-2,"5374025":-2,"5374031":-2,"5374032":-1,"5374033":-2,"5374035":-3,"5374036":-2,"5374037":-2,"5374038":-7,"5374039":-6,"5374041":-9,"5374046":-7,"5374052":-4,"5374053":-3,"5374063":-3,"5374068":-2,"5374069":-2,"5374071":-4,"5374073":-5,"5439553":-5,"5439557":-1,"5439560":-2,"5439561":-1,"5439564":-2,"5439565":-1,"5439567":-2,"5439569":-2,"5439571":-1,"5439572":-2,"5439573":-2,"5439574":-7,"5439575":-8,"5439582":-7,"5439593":-1,"5439600":-2,"5439604":-2,"5439605":-2,"5439607":-4,"5505068":-6,"5505070":-10,"5505089":-15,"5505091":-3,"5505098":-19,"5505103":-2,"5505105":-2,"5505121":-2,"5505123":-4,"5505124":-4,"5505125":-4,"5505127":-3,"5505130":-10,"5505135":-5,"5505143":-2,"5570625":-7,"5570631":-2,"5570637":1,"5570639":-1,"5570641":-1,"5570643":-1,"5570663":-1,"5570675":-2,"5636140":-11,"5636142":-11,"5636161":-19,"5636162":-2,"5636163":-9,"5636164":-2,"5636165":-3,"5636167":-10,"5636174":-2,"5636175":-8,"5636176":-2,"5636177":-8,"5636179":-5,"5636181":-2,"5636193":-8,"5636196":-11,"5636197":-11,"5636201":-2,"5636207":-11,"5636210":-5,"5636211":-10,"5701676":-11,"5701678":-7,"5701690":-2,"5701697":-17,"5701699":-8,"5701701":-2,"5701703":-7,"5701704":-2,"5701710":-2,"5701711":-7,"5701713":-7,"5701719":-2,"5701729":-7,"5701732":-10,"5701733":-10,"5701743":-10,"5701745":-10,"5701746":-5,"5701747":-7,"5701748":-3,"5701749":-5,"5701750":-6,"5701753":-5,"5767235":-10,"5767247":-10,"5767249":-10,"5767252":-2,"5767265":-5,"5767267":-9,"5767269":-10,"5767279":-9,"5767283":-9,"5767285":-6,"5767286":-9,"5767287":-7,"5767289":-6,"5832748":-10,"5832750":-8,"5832769":-18,"5832770":-2,"5832771":-10,"5832772":-2,"5832775":-10,"5832782":-2,"5832783":-10,"5832784":-2,"5832785":-10,"5832786":-2,"5832787":-6,"5832801":-10,"5832803":-15,"5832804":-15,"5832805":-14,"5832806":-11,"5832807":-13,"5832809":-2,"5832813":-5,"5832814":-4,"5832815":-13,"5832816":-8,"5832818":-6,"5832819":-12,"5832820":-6,"5832821":-4,"5832822":-7,"5832823":-5,"5898351":-2,"5898357":-1,"5898361":-1,"6160428":-11,"6160430":-11,"6160449":-19,"6160450":-2,"6160451":-9,"6160452":-2,"6160453":-3,"6160455":-10,"6160462":-2,"6160463":-8,"6160464":-2,"6160465":-8,"6160467":-5,"6160469":-2,"6160481":-8,"6160484":-11,"6160485":-11,"6160489":-2,"6160495":-11,"6160498":-5,"6160499":-10,"6422614":-11,"6422622":-11,"6422625":-1,"6422627":-2,"6422628":-2,"6422629":-1,"6422634":-14,"6422636":-1,"6422639":-1,"6422642":-1,"6422643":1,"6422645":-2,"6422646":-9,"6422647":-8,"6422648":-8,"6422649":-7,"6488152":-8,"6488161":-1,"6488163":-2,"6488164":-1,"6488165":-2,"6488168":-2,"6488170":-14,"6488171":-1,"6488172":-2,"6488173":-2,"6488174":-2,"6488175":-2,"6488178":-2,"6488179":1,"6488180":-2,"6488181":-1,"6488182":-8,"6488184":-7,"6488185":-7,"6488186":-2,"6553673":2,"6553701":-1,"6553702":-2,"6553703":-1,"6553704":1,"6553706":-12,"6553711":-2,"6553715":1,"6553716":-2,"6553718":-3,"6553719":-2,"6553721":-2,"6619222":-11,"6619223":-10,"6619230":-11,"6619233":-2,"6619235":-1,"6619236":-1,"6619237":-1,"6619238":-2,"6619239":-2,"6619241":-1,"6619242":-13,"6619246":-1,"6619247":-2,"6619248":-1,"6619249":-1,"6619250":-1,"6619252":-3,"6619253":-2,"6619254":-9,"6619255":-8,"6619256":-5,"6619257":-8,"6684718":-5,"6684769":-2,"6684773":-1,"6684774":-6,"6684775":-2,"6684778":-11,"6684783":-2,"6684788":-1,"6684792":-2,"6684793":-1,"6750308":-1,"6750309":-1,"6750319":-2,"6750323":-2,"6750326":-2,"6750327":-2,"6750328":-2,"6750329":-2,"6815845":-1,"6815849":1,"6815850":-12,"6815855":-1,"6815859":1,"6815860":-3,"6815861":-2,"6815863":-3,"6815865":-6,"6881358":1,"6881377":1,"6881378":1,"6881379":-1,"6881381":-1,"6881384":1,"6881386":-11,"6881390":1,"6881391":-1,"6881395":1,"6881398":-3,"6881399":-1,"6881400":-2,"6946922":-3,"7012449":-6,"7012451":-10,"7012452":-10,"7012453":-10,"7012454":-6,"7012455":-3,"7012456":-2,"7012457":-2,"7012458":-11,"7012459":-2,"7012460":-2,"7012461":-2,"7012462":-2,"7012463":-11,"7012464":-2,"7012465":-11,"7012466":-2,"7012467":-5,"7012469":-2,"7012470":-3,"7012471":-6,"7012473":-4,"7077989":-1,"7077994":-11,"7077999":-1,"7078002":1,"7078003":1,"7078004":-1,"7078006":-3,"7078007":-2,"7078009":-2,"7143523":-1,"7143524":-1,"7143525":-1,"7143527":-2,"7143530":-14,"7143535":-2,"7143540":-3,"7143541":-1,"7143542":-7,"7143545":-7,"7209059":-1,"7209060":-1,"7209061":-1,"7209063":-1,"7209066":-14,"7209071":-2,"7209076":-3,"7209077":-2,"7209078":-8,"7209079":-6,"7209080":-2,"7209081":-7,"7274542":-3,"7274561":-4,"7274583":-10,"7274585":-14,"7274593":-1,"7274594":-1,"7274595":-1,"7274596":-1,"7274597":-1,"7274598":-2,"7274599":-1,"7274600":-2,"7274602":-13,"7274603":-1,"7274604":-1,"7274605":-2,"7274606":-1,"7274607":-1,"7274608":-1,"7274610":-1,"7274612":-4,"7274613":-1,"7274614":-9,"7274615":-8,"7274616":-10,"7274617":-8,"7274618":-2,"7340120":-8,"7340129":-1,"7340131":-2,"7340133":-1,"7340136":-1,"7340137":-1,"7340138":-13,"7340141":-1,"7340143":-1,"7340144":-2,"7340146":-1,"7340147":1,"7340152":-4,"7340153":-9,"7340154":-2,"7405657":-5,"7405683":1,"7405687":-2,"7471150":-12,"7471201":-3,"7471202":-1,"7471203":-1,"7471204":-1,"7471205":-2,"7471206":-3,"7471207":-1,"7471209":-1,"7471210":-13,"7471211":-2,"7471212":-1,"7471213":-1,"7471214":-1,"7471220":-2,"7471221":-1,"7471222":-4,"7471223":-4,"7471224":-4,"7471225":-5,"7536728":-6,"7536729":-12,"7536738":1,"7536739":1,"7536740":1,"7536744":1,"7536745":1,"7536746":-11,"7536747":1,"7536748":1,"7536749":1,"7536750":1,"7536752":1,"7536753":1,"7536754":1,"7536755":1,"7536756":-2,"7536757":1,"7536758":-6,"7536759":-5,"7536760":-6,"7536761":-5,"7536762":1,"7602273":-2,"7602275":-5,"7602276":-6,"7602277":-6,"7602280":-1,"7602281":-2,"7602282":-11,"7602286":-2,"7602287":-6,"7602290":-2,"7602291":-5,"7602292":-5,"7602293":-5,"7602294":-7,"7602295":-6,"7602296":-4,"7602297":-6,"7602298":-2,"7667798":-5,"7667806":-5,"7667815":-1,"7667818":-10,"7667824":1,"7667827":1,"7667830":-2,"7667831":-2,"7667832":-2,"7667833":-2,"7733292":-15,"7733294":-13,"7733295":-8,"7733313":-17,"7733321":-2,"7733345":-4,"7733346":-2,"7733347":-7,"7733348":-8,"7733349":-9,"7733350":-5,"7733351":-8,"7733353":-2,"7733354":-11,"7733358":-3,"7733359":-10,"7733361":-8,"7733362":-2,"7733363":-6,"7733365":-2,"7733366":-6,"7733367":-2,"7733368":-2,"7733369":-3,"7798828":-13,"7798830":-9,"7798881":-5,"7798883":-7,"7798884":-6,"7798885":-8,"7798887":-7,"7798888":-2,"7798889":-2,"7798890":-11,"7798891":-2,"7798892":-2,"7798894":-2,"7798895":-7,"7798897":-6,"7798898":-2,"7798899":-4,"7798900":-2,"7798901":-2,"7798902":-3,"7798904":-2,"7798905":-2,"7864417":-4,"7864418":-2,"7864419":-8,"7864420":-8,"7864421":-7,"7864426":-11,"7864427":-2,"7864430":-2,"7864431":-7,"7864435":-5,"7864436":-2,"7864437":-3,"7864439":-2,"7864441":-3,"7929900":-16,"7929902":-17,"7929921":-17,"7929953":-5,"7929954":-3,"7929955":-6,"7929956":-8,"7929957":-7,"7929958":-6,"7929959":-10,"7929962":-11,"7929963":-2,"7929964":-2,"7929965":-2,"7929966":-2,"7929967":-9,"7929968":-1,"7929970":-2,"7929971":-5,"7929973":-2,"7929974":-3,"7929975":-2,"7929976":-2,"7929977":-2,"7995493":-2,"7995498":-13,"7995503":-2,"7995505":-2,"7995507":-2,"7995513":-2}}]],0,0,[0],[23],[471]],[[{"name":"img_post_try_again","rect":{"x":0,"y":0,"width":722,"height":359},"offset":{"x":0,"y":0},"originalSize":{"width":722,"height":359},"rotated":false,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[-361,-179.5,0,361,-179.5,0,-361,179.5,0,361,179.5,0],"indexes":[0,1,2,2,1,3],"uv":[0,359,722,359,0,0,722,0],"nuv":[0,0,1,0,0,1,1,1],"minPos":{"x":-361,"y":-179.5,"z":0},"maxPos":{"x":361,"y":179.5,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[10],[472]],[[{"name":"img_rarity_common","rect":{"x":68,"y":56,"width":117,"height":130},"offset":{"x":-1.5,"y":7},"originalSize":{"width":256,"height":256},"rotated":false,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[-58.5,-65,0,58.5,-65,0,-58.5,65,0,58.5,65,0],"indexes":[0,1,2,2,1,3],"uv":[68,200,185,200,68,70,185,70],"nuv":[0.265625,0.2734375,0.72265625,0.2734375,0.265625,0.78125,0.72265625,0.78125],"minPos":{"x":-58.5,"y":-65,"z":0},"maxPos":{"x":58.5,"y":65,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[10],[114]],[[[150,"cameraBeep",".mp3",1.584],-1],0,0,[],[],[]],[[{"name":"bg_4_stage","rect":{"x":0,"y":0,"width":1200,"height":1800},"offset":{"x":0,"y":0},"originalSize":{"width":1200,"height":1800},"rotated":false,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[-600,-900,0,600,-900,0,-600,900,0,600,900,0],"indexes":[0,1,2,2,1,3],"uv":[0,1800,1200,1800,0,0,1200,0],"nuv":[0,0,1,0,0,1,1,1],"minPos":{"x":-600,"y":-900,"z":0},"maxPos":{"x":600,"y":900,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[10],[473]],[[{"name":"img_bar_star_active","rect":{"x":0,"y":0,"width":62,"height":60},"offset":{"x":0,"y":0},"originalSize":{"width":62,"height":60},"rotated":false,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[-31,-30,0,31,-30,0,-31,30,0,31,30,0],"indexes":[0,1,2,2,1,3],"uv":[0,60,62,60,0,0,62,0],"nuv":[0,0,1,0,0,1,1,1],"minPos":{"x":-31,"y":-30,"z":0},"maxPos":{"x":31,"y":30,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[10],[474]],[[[44,"mat_particle_powerUp",[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{}],[[[{},"mainTexture",6,0]],11]]],0,0,[0,0],[13,11],[148,52]],[[[54,"Glass",1,[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{"USE_INSTANCING":true,"USE_ALBEDO_MAP":true,"USE_ALPHA_TEST":true},{},{}],[[[{"alphaThreshold":0,"roughness":0.255,"metallic":0.6981818079948425,"specularIntensity":1},"mainColor",8,[4,1526726655],"mainTexture",6,0],{},{}],11,0,0]]],0,0,[0,0],[13,11],[475,38]],[[[44,"mat_particle_specialCollectible",[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{}],[[[{},"mainTexture",6,0]],11]]],0,0,[0,0],[13,11],[88,52]],[[{"name":"img_celebmoment_camera","rect":{"x":0,"y":0,"width":953,"height":1641},"offset":{"x":0,"y":0},"originalSize":{"width":953,"height":1641},"rotated":false,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[-476.5,-820.5,0,476.5,-820.5,0,-476.5,820.5,0,476.5,820.5,0],"indexes":[0,1,2,2,1,3],"uv":[0,1641,953,1641,0,0,953,0],"nuv":[0,0,1,0,0,1,1,1],"minPos":{"x":-476.5,"y":-820.5,"z":0},"maxPos":{"x":476.5,"y":820.5,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[10],[476]],[[[58,"level_prefab"],[224,"level_prefab",2,[-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21],[242,"dcUGJ+ZTFInJojW5FrFp9x",null,null,-10,0,[-1,-2,-3,-4,-5,-6,-7,-8,-9]]],[0,["8dt/KCiu1GOJ6DGYai+gUP"]],[0,["8dt/KCiu1GOJ6DGYai+gUP"]],[0,["8dt/KCiu1GOJ6DGYai+gUP"]],[0,["8dt/KCiu1GOJ6DGYai+gUP"]],[0,["8dt/KCiu1GOJ6DGYai+gUP"]],[0,["8dt/KCiu1GOJ6DGYai+gUP"]],[0,["8dt/KCiu1GOJ6DGYai+gUP"]],[0,["8dt/KCiu1GOJ6DGYai+gUP"]],[0,["8dt/KCiu1GOJ6DGYai+gUP"]],[0,["8dt/KCiu1GOJ6DGYai+gUP"]],[0,["8dt/KCiu1GOJ6DGYai+gUP"]],[0,["8dt/KCiu1GOJ6DGYai+gUP"]],[0,["8dt/KCiu1GOJ6DGYai+gUP"]],[0,["8dt/KCiu1GOJ6DGYai+gUP"]],[0,["8dt/KCiu1GOJ6DGYai+gUP"]],[0,["8dt/KCiu1GOJ6DGYai+gUP"]],[0,["8dt/KCiu1GOJ6DGYai+gUP"]],[0,["8dt/KCiu1GOJ6DGYai+gUP"]],[0,["8dt/KCiu1GOJ6DGYai+gUP"]],[0,["8dt/KCiu1GOJ6DGYai+gUP"]],[0,["8dt/KCiu1GOJ6DGYai+gUP"]],[0,["8dt/KCiu1GOJ6DGYai+gUP"]],[0,["8dt/KCiu1GOJ6DGYai+gUP"]],[0,["8dt/KCiu1GOJ6DGYai+gUP"]],[0,["8dt/KCiu1GOJ6DGYai+gUP"]],[0,["8dt/KCiu1GOJ6DGYai+gUP"]],[0,["8dt/KCiu1GOJ6DGYai+gUP"]],[0,["8dt/KCiu1GOJ6DGYai+gUP"]],[0,["8dt/KCiu1GOJ6DGYai+gUP"]],[0,["8dt/KCiu1GOJ6DGYai+gUP"]],[0,["8dt/KCiu1GOJ6DGYai+gUP"]],[0,["8dt/KCiu1GOJ6DGYai+gUP"]],[0,["8dt/KCiu1GOJ6DGYai+gUP"]],[0,["8dt/KCiu1GOJ6DGYai+gUP"]],[0,["8dt/KCiu1GOJ6DGYai+gUP"]],[0,["8dt/KCiu1GOJ6DGYai+gUP"]],[0,["8dt/KCiu1GOJ6DGYai+gUP"]],[0,["8dt/KCiu1GOJ6DGYai+gUP"]],[0,["8dt/KCiu1GOJ6DGYai+gUP"]],[0,["8dt/KCiu1GOJ6DGYai+gUP"]],[0,["8dt/KCiu1GOJ6DGYai+gUP"]],[0,["8dt/KCiu1GOJ6DGYai+gUP"]],[0,["8dt/KCiu1GOJ6DGYai+gUP"]],[0,["8dt/KCiu1GOJ6DGYai+gUP"]],[0,["8dt/KCiu1GOJ6DGYai+gUP"]],[0,["8dt/KCiu1GOJ6DGYai+gUP"]],[0,["8dt/KCiu1GOJ6DGYai+gUP"]],[0,["8dt/KCiu1GOJ6DGYai+gUP"]],[0,["8dt/KCiu1GOJ6DGYai+gUP"]],[0,["8dt/KCiu1GOJ6DGYai+gUP"]],[0,["8dt/KCiu1GOJ6DGYai+gUP"]],[0,["8dt/KCiu1GOJ6DGYai+gUP"]],[0,["8dt/KCiu1GOJ6DGYai+gUP"]],[0,["8dt/KCiu1GOJ6DGYai+gUP"]],[0,["8dt/KCiu1GOJ6DGYai+gUP"]],[0,["8dt/KCiu1GOJ6DGYai+gUP"]],[225,"Stagerunner Environment Export 2",1,[-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42],[4,"34QXNs1whCPpgTqv1s8/5q",null,null,null,1,0],[1,0,-0.244,-82.5],[1,11,11,11]],[11,0,{},1,[12,"9dqzIfPdlPQrKp/rbyFqQq",null,-49,[6,"d4zp5USodE97BvF8SWgx8m",1,[[1,"SideProp",["_name"],-45],[2,["_lpos"],-46,[1,-6.083,0,-5.863]],[2,["_lrot"],-47,[3,0,0,0,1]],[2,["_euler"],-48,[1,0,0,0]]]],[[5,["mainRenderer"],-44,[0,["8dt/KCiu1GOJ6DGYai+gUP"]],-43,[0,["3ew1Vo2adBpqZ739+OrPkj"]]]],55]],[11,0,{},1,[12,"9dqzIfPdlPQrKp/rbyFqQq",null,-56,[6,"3eudZOKLdNe48E2gQMRUdg",1,[[1,"SideProp-001",["_name"],-52],[2,["_lpos"],-53,[1,-6.083,0,-18.617]],[2,["_lrot"],-54,[3,0,0,0,1]],[2,["_euler"],-55,[1,0,0,0]]]],[[5,["mainRenderer"],-51,[0,["8dt/KCiu1GOJ6DGYai+gUP"]],-50,[0,["3ew1Vo2adBpqZ739+OrPkj"]]]],196]],[11,0,{},1,[12,"9dqzIfPdlPQrKp/rbyFqQq",null,-63,[6,"44Zvl3ndVM2qJhftX3CHKN",1,[[1,"SideProp_reverse",["_name"],-59],[2,["_lpos"],-60,[1,6.12,0,-5.863]],[2,["_lrot"],-61,[3,0,1,0,6.123233995736766e-17]],[2,["_euler"],-62,[1,0,180,0]]]],[[5,["mainRenderer"],-58,[0,["8dt/KCiu1GOJ6DGYai+gUP"]],-57,[0,["3ew1Vo2adBpqZ739+OrPkj"]]]],337]],[11,0,{},1,[12,"9dqzIfPdlPQrKp/rbyFqQq",null,-70,[6,"bd4cj8V2ZAa6QleSfiIvtB",1,[[1,"SideProp_reverse-001",["_name"],-66],[2,["_lpos"],-67,[1,6.12,0,-18.617]],[2,["_lrot"],-68,[3,0,1,0,6.123233995736766e-17]],[2,["_euler"],-69,[1,0,180,0]]]],[[5,["mainRenderer"],-65,[0,["8dt/KCiu1GOJ6DGYai+gUP"]],-64,[0,["3ew1Vo2adBpqZ739+OrPkj"]]]],480]],[0,["49ZoazuiFBlbZzgmT6kxzi"]],[0,["49ZoazuiFBlbZzgmT6kxzi"]],[0,["49ZoazuiFBlbZzgmT6kxzi"]],[0,["49ZoazuiFBlbZzgmT6kxzi"]],[101,"Parent",59,[-71,-72,-73,-74,-75,-76,-77],[4,"aeIQ1y+rZKOoF/V5cr94ZO",null,null,null,1,0],[1,11,11,11]],[42,"PeopleVariation4",false,67,[-78,-79,-80,-81,-82,-83],[4,"abRHfE37RBoqbU9CB/HBK0",null,null,null,1,0]],[101,"Parent",60,[-84,-85,-86,-87,-88,-89,-90],[4,"aeIQ1y+rZKOoF/V5cr94ZO",null,null,null,1,0],[1,11,11,11]],[42,"PeopleVariation4",false,69,[-91,-92,-93,-94,-95,-96],[4,"abRHfE37RBoqbU9CB/HBK0",null,null,null,1,0]],[101,"Parent",61,[-97,-98,-99,-100,-101,-102,-103],[4,"aeIQ1y+rZKOoF/V5cr94ZO",null,null,null,1,0],[1,11,11,11]],[42,"PeopleVariation4",false,71,[-104,-105,-106,-107,-108,-109],[4,"abRHfE37RBoqbU9CB/HBK0",null,null,null,1,0]],[101,"Parent",62,[-110,-111,-112,-113,-114,-115,-116],[4,"aeIQ1y+rZKOoF/V5cr94ZO",null,null,null,1,0],[1,11,11,11]],[42,"PeopleVariation4",false,73,[-117,-118,-119,-120,-121,-122],[4,"abRHfE37RBoqbU9CB/HBK0",null,null,null,1,0]],[42,"PeopleVariation1",false,67,[-123,-124,-125,-126,-127],[4,"da6prD9hlLlrYWOqh4cYsb",null,null,null,1,0]],[42,"SpeakerVariation",false,67,[-128,-129,-130,-131,-132],[4,"0a77OF2GpG4KIC+Yw11xi+",null,null,null,1,0]],[72,"PeopleVariation2",false,67,[-133,-134,-135,-136,-137],[4,"a9M8Z8hedMYpDNj2qHU3FF",null,null,null,1,0],[1,-0.181,0,-0.206]],[72,"PeopleVariation3",false,67,[-138,-139,-140,-141,-142],[4,"67mea4kdBIKardKeCOtMrt",null,null,null,1,0],[1,-0.181,0,-0.206]],[42,"PeopleVariation5",false,67,[-143,-144,-145,-146,-147],[4,"52lk1V4rVC9bgtEV+xGfi2",null,null,null,1,0]],[42,"PeopleVariation1",false,69,[-148,-149,-150,-151,-152],[4,"da6prD9hlLlrYWOqh4cYsb",null,null,null,1,0]],[42,"SpeakerVariation",false,69,[-153,-154,-155,-156,-157],[4,"0a77OF2GpG4KIC+Yw11xi+",null,null,null,1,0]],[72,"PeopleVariation2",false,69,[-158,-159,-160,-161,-162],[4,"a9M8Z8hedMYpDNj2qHU3FF",null,null,null,1,0],[1,-0.181,0,-0.206]],[72,"PeopleVariation3",false,69,[-163,-164,-165,-166,-167],[4,"67mea4kdBIKardKeCOtMrt",null,null,null,1,0],[1,-0.181,0,-0.206]],[42,"PeopleVariation5",false,69,[-168,-169,-170,-171,-172],[4,"52lk1V4rVC9bgtEV+xGfi2",null,null,null,1,0]],[42,"PeopleVariation1",false,71,[-173,-174,-175,-176,-177],[4,"da6prD9hlLlrYWOqh4cYsb",null,null,null,1,0]],[42,"SpeakerVariation",false,71,[-178,-179,-180,-181,-182],[4,"0a77OF2GpG4KIC+Yw11xi+",null,null,null,1,0]],[72,"PeopleVariation2",false,71,[-183,-184,-185,-186,-187],[4,"a9M8Z8hedMYpDNj2qHU3FF",null,null,null,1,0],[1,-0.181,0,-0.206]],[72,"PeopleVariation3",false,71,[-188,-189,-190,-191,-192],[4,"67mea4kdBIKardKeCOtMrt",null,null,null,1,0],[1,-0.181,0,-0.206]],[42,"PeopleVariation5",false,71,[-193,-194,-195,-196,-197],[4,"52lk1V4rVC9bgtEV+xGfi2",null,null,null,1,0]],[42,"PeopleVariation1",false,73,[-198,-199,-200,-201,-202],[4,"da6prD9hlLlrYWOqh4cYsb",null,null,null,1,0]],[42,"SpeakerVariation",false,73,[-203,-204,-205,-206,-207],[4,"0a77OF2GpG4KIC+Yw11xi+",null,null,null,1,0]],[72,"PeopleVariation2",false,73,[-208,-209,-210,-211,-212],[4,"a9M8Z8hedMYpDNj2qHU3FF",null,null,null,1,0],[1,-0.181,0,-0.206]],[72,"PeopleVariation3",false,73,[-213,-214,-215,-216,-217],[4,"67mea4kdBIKardKeCOtMrt",null,null,null,1,0],[1,-0.181,0,-0.206]],[42,"PeopleVariation5",false,73,[-218,-219,-220,-221,-222],[4,"52lk1V4rVC9bgtEV+xGfi2",null,null,null,1,0]],[42,"TableVariation",false,67,[-223,-224,-225,-226],[4,"60EZConk5FTpTqUh5EbqMR",null,null,null,1,0]],[0,["e892RDjrxNZISjs1LC/QQv"]],[0,["e892RDjrxNZISjs1LC/QQv"]],[0,["e892RDjrxNZISjs1LC/QQv"]],[0,["e892RDjrxNZISjs1LC/QQv"]],[0,["e892RDjrxNZISjs1LC/QQv"]],[0,["e892RDjrxNZISjs1LC/QQv"]],[0,["e892RDjrxNZISjs1LC/QQv"]],[0,["e892RDjrxNZISjs1LC/QQv"]],[0,["e892RDjrxNZISjs1LC/QQv"]],[0,["e892RDjrxNZISjs1LC/QQv"]],[0,["e892RDjrxNZISjs1LC/QQv"]],[0,["e892RDjrxNZISjs1LC/QQv"]],[0,["e892RDjrxNZISjs1LC/QQv"]],[0,["e892RDjrxNZISjs1LC/QQv"]],[42,"TableVariation",false,69,[-227,-228,-229,-230],[4,"60EZConk5FTpTqUh5EbqMR",null,null,null,1,0]],[0,["e892RDjrxNZISjs1LC/QQv"]],[0,["e892RDjrxNZISjs1LC/QQv"]],[0,["e892RDjrxNZISjs1LC/QQv"]],[0,["e892RDjrxNZISjs1LC/QQv"]],[0,["e892RDjrxNZISjs1LC/QQv"]],[0,["e892RDjrxNZISjs1LC/QQv"]],[0,["e892RDjrxNZISjs1LC/QQv"]],[0,["e892RDjrxNZISjs1LC/QQv"]],[0,["e892RDjrxNZISjs1LC/QQv"]],[0,["e892RDjrxNZISjs1LC/QQv"]],[0,["e892RDjrxNZISjs1LC/QQv"]],[0,["e892RDjrxNZISjs1LC/QQv"]],[0,["e892RDjrxNZISjs1LC/QQv"]],[0,["e892RDjrxNZISjs1LC/QQv"]],[42,"TableVariation",false,71,[-231,-232,-233,-234],[4,"60EZConk5FTpTqUh5EbqMR",null,null,null,1,0]],[0,["e892RDjrxNZISjs1LC/QQv"]],[0,["e892RDjrxNZISjs1LC/QQv"]],[0,["e892RDjrxNZISjs1LC/QQv"]],[0,["e892RDjrxNZISjs1LC/QQv"]],[0,["e892RDjrxNZISjs1LC/QQv"]],[0,["e892RDjrxNZISjs1LC/QQv"]],[0,["e892RDjrxNZISjs1LC/QQv"]],[0,["e892RDjrxNZISjs1LC/QQv"]],[0,["e892RDjrxNZISjs1LC/QQv"]],[0,["e892RDjrxNZISjs1LC/QQv"]],[0,["e892RDjrxNZISjs1LC/QQv"]],[0,["e892RDjrxNZISjs1LC/QQv"]],[0,["e892RDjrxNZISjs1LC/QQv"]],[0,["e892RDjrxNZISjs1LC/QQv"]],[42,"TableVariation",false,73,[-235,-236,-237,-238],[4,"60EZConk5FTpTqUh5EbqMR",null,null,null,1,0]],[0,["e892RDjrxNZISjs1LC/QQv"]],[0,["e892RDjrxNZISjs1LC/QQv"]],[0,["e892RDjrxNZISjs1LC/QQv"]],[0,["e892RDjrxNZISjs1LC/QQv"]],[0,["e892RDjrxNZISjs1LC/QQv"]],[0,["e892RDjrxNZISjs1LC/QQv"]],[0,["e892RDjrxNZISjs1LC/QQv"]],[0,["e892RDjrxNZISjs1LC/QQv"]],[0,["e892RDjrxNZISjs1LC/QQv"]],[0,["e892RDjrxNZISjs1LC/QQv"]],[0,["e892RDjrxNZISjs1LC/QQv"]],[0,["e892RDjrxNZISjs1LC/QQv"]],[0,["e892RDjrxNZISjs1LC/QQv"]],[0,["e892RDjrxNZISjs1LC/QQv"]],[0,["d6BfGiK+FQ5418iedYUqF0"]],[0,["9dqzIfPdlPQrKp/rbyFqQq"]],[11,0,{},95,[12,"e892RDjrxNZISjs1LC/QQv",null,-241,[6,"0avNr34HRDtI3/KDaBcU/C",59,[[1,"Crowd",["_name"],109],[2,["_lpos"],109,[1,0.093,-0.039,0.147]],[2,["_lrot"],109,[3,0,0.9857357985614854,0,-0.1683001349801914]],[2,["_euler"],109,[1,0,199.378,0]],[2,["_lscale"],109,[1,0.090909,0.090909,0.090909]],[1,3,["startingPoseIndex"],15],[1,true,["shouldGetRandomPose"],15],[1,17,["poses","length"],15],[3,["poses","0"],15,190],[3,["poses","1"],15,191],[3,["poses","2"],15,192],[3,["poses","3"],15,193],[3,["poses","4"],15,194],[1,null,["poses","5"],15],[1,null,["poses","6"],15],[1,null,["poses","7"],15],[1,null,["poses","8"],15],[1,null,["poses","9"],15],[1,null,["poses","10"],15],[1,null,["poses","11"],15],[1,null,["poses","12"],15],[1,null,["poses","13"],15],[1,null,["poses","14"],15],[1,null,["poses","15"],15],[1,null,["poses","16"],15],[1,null,["poses","17"],15],[1,null,["poses","18"],15],[1,null,["poses","19"],15],[25,["_materials","0"],[0,["3ew1Vo2adBpqZ739+OrPkj"]],195],[2,["_lrot"],-239,[3,0,0,0,1]],[2,["_euler"],-240,[1,0,0,0]]]],[[15,["mainRenderer"],[0,["0b8pE5sPNepqN6zgbDPnqa"]]]],189]],[0,["9dqzIfPdlPQrKp/rbyFqQq"]],[11,0,{},110,[12,"e892RDjrxNZISjs1LC/QQv",null,-244,[6,"0avNr34HRDtI3/KDaBcU/C",60,[[1,"Crowd",["_name"],124],[2,["_lpos"],124,[1,0.093,-0.039,0.147]],[2,["_lrot"],124,[3,0,0.9857357985614854,0,-0.1683001349801914]],[2,["_euler"],124,[1,0,199.378,0]],[2,["_lscale"],124,[1,0.090909,0.090909,0.090909]],[1,3,["startingPoseIndex"],29],[1,true,["shouldGetRandomPose"],29],[1,17,["poses","length"],29],[3,["poses","0"],29,331],[3,["poses","1"],29,332],[3,["poses","2"],29,333],[3,["poses","3"],29,334],[3,["poses","4"],29,335],[1,null,["poses","5"],29],[1,null,["poses","6"],29],[1,null,["poses","7"],29],[1,null,["poses","8"],29],[1,null,["poses","9"],29],[1,null,["poses","10"],29],[1,null,["poses","11"],29],[1,null,["poses","12"],29],[1,null,["poses","13"],29],[1,null,["poses","14"],29],[1,null,["poses","15"],29],[1,null,["poses","16"],29],[1,null,["poses","17"],29],[1,null,["poses","18"],29],[1,null,["poses","19"],29],[25,["_materials","0"],[0,["3ew1Vo2adBpqZ739+OrPkj"]],336],[2,["_lrot"],-242,[3,0,0,0,1]],[2,["_euler"],-243,[1,0,0,0]]]],[[15,["mainRenderer"],[0,["0b8pE5sPNepqN6zgbDPnqa"]]]],330]],[0,["9dqzIfPdlPQrKp/rbyFqQq"]],[11,0,{},125,[12,"e892RDjrxNZISjs1LC/QQv",null,-251,[6,"0avNr34HRDtI3/KDaBcU/C",61,[[1,"Crowd",["_name"],139],[2,["_lpos"],139,[1,0.093,-0.039,0.147]],[2,["_lrot"],139,[3,0,0.9542638121820376,0,0.29896584547370103]],[2,["_euler"],139,[1,0,145.209,0]],[2,["_lscale"],139,[1,0.090909,0.090909,0.090909]],[1,3,["startingPoseIndex"],43],[1,true,["shouldGetRandomPose"],43],[1,17,["poses","length"],43],[3,["poses","0"],43,472],[3,["poses","1"],43,473],[3,["poses","2"],43,474],[3,["poses","3"],43,475],[3,["poses","4"],43,476],[1,null,["poses","5"],43],[1,null,["poses","6"],43],[1,null,["poses","7"],43],[1,null,["poses","8"],43],[1,null,["poses","9"],43],[1,null,["poses","10"],43],[1,null,["poses","11"],43],[1,null,["poses","12"],43],[1,null,["poses","13"],43],[1,null,["poses","14"],43],[1,null,["poses","15"],43],[1,null,["poses","16"],43],[1,null,["poses","17"],43],[1,null,["poses","18"],43],[1,null,["poses","19"],43],[3,["_materials","0"],-245,477],[2,["_lrot"],-246,[3,0,0,0,1]],[2,["_euler"],-247,[1,0,0,0]],[1,1,["_materials","length"],-248],[3,["_materials","1"],-249,478],[3,["_materials","2"],-250,479]]],[[15,["mainRenderer"],[0,["0b8pE5sPNepqN6zgbDPnqa"]]]],471]],[0,["3ew1Vo2adBpqZ739+OrPkj"]],[0,["9dqzIfPdlPQrKp/rbyFqQq"]],[11,0,{},140,[12,"e892RDjrxNZISjs1LC/QQv",null,-258,[6,"0avNr34HRDtI3/KDaBcU/C",62,[[1,"Crowd",["_name"],154],[2,["_lpos"],154,[1,0.093,-0.039,0.147]],[2,["_lrot"],154,[3,0,0.9542638121820376,0,0.29896584547370103]],[2,["_euler"],154,[1,0,145.209,0]],[2,["_lscale"],154,[1,0.090909,0.090909,0.090909]],[1,3,["startingPoseIndex"],57],[1,true,["shouldGetRandomPose"],57],[1,17,["poses","length"],57],[3,["poses","0"],57,615],[3,["poses","1"],57,616],[3,["poses","2"],57,617],[3,["poses","3"],57,618],[3,["poses","4"],57,619],[1,null,["poses","5"],57],[1,null,["poses","6"],57],[1,null,["poses","7"],57],[1,null,["poses","8"],57],[1,null,["poses","9"],57],[1,null,["poses","10"],57],[1,null,["poses","11"],57],[1,null,["poses","12"],57],[1,null,["poses","13"],57],[1,null,["poses","14"],57],[1,null,["poses","15"],57],[1,null,["poses","16"],57],[1,null,["poses","17"],57],[1,null,["poses","18"],57],[1,null,["poses","19"],57],[3,["_materials","0"],-252,620],[2,["_lrot"],-253,[3,0,0,0,1]],[2,["_euler"],-254,[1,0,0,0]],[1,1,["_materials","length"],-255],[3,["_materials","1"],-256,621],[3,["_materials","2"],-257,622]]],[[15,["mainRenderer"],[0,["0b8pE5sPNepqN6zgbDPnqa"]]]],614]],[0,["3ew1Vo2adBpqZ739+OrPkj"]],[11,0,{},1,[10,"49ZoazuiFBlbZzgmT6kxzi",null,null,-259,[6,"2ah/FWu1ZB8Kg85J0Cvdv/",1,[[1,"LightRay-002",["_name"],63],[2,["_lpos"],63,[1,9.36,0,-18.492]],[2,["_lrot"],63,[3,0,0,0,1]],[2,["_euler"],63,[1,0,0,0]],[25,["_materials","0"],[0,["84hii9rK1CFYkehKUt7qCw"]],1],[1,2,["_mobility"],63],[39,2,["_mobility"],[0,["80uBm8yWFB6pLHnN7QiT5t"]]],[1,true,["_active"],63],[2,["_lscale"],63,[1,11,11,11]]]],0]],[11,0,{},1,[10,"49ZoazuiFBlbZzgmT6kxzi",null,null,-260,[6,"f6AOExPh9OVrasUACJR9fe",1,[[1,"LightRay-003",["_name"],64],[2,["_lpos"],64,[1,-9.048,0,-18.492]],[2,["_lrot"],64,[3,0,0,0,1]],[2,["_euler"],64,[1,0,0,0]],[1,2,["_mobility"],64],[39,2,["_mobility"],[0,["80uBm8yWFB6pLHnN7QiT5t"]]],[1,true,["_active"],64],[2,["_lscale"],64,[1,11,11,11]],[25,["_materials","0"],[0,["84hii9rK1CFYkehKUt7qCw"]],3]]],2]],[11,0,{},1,[10,"49ZoazuiFBlbZzgmT6kxzi",null,null,-261,[6,"8fP6MWawxL+J2AsLxI0c2+",1,[[1,"LightRay",["_name"],65],[2,["_lpos"],65,[1,-9.064,0,-5.642]],[2,["_lrot"],65,[3,0,0,0,1]],[2,["_euler"],65,[1,0,0,0]],[25,["_materials","0"],[0,["84hii9rK1CFYkehKUt7qCw"]],5],[1,2,["_mobility"],65],[39,2,["_mobility"],[0,["80uBm8yWFB6pLHnN7QiT5t"]]],[1,true,["_active"],65],[2,["_lscale"],65,[1,11,11,11]]]],4]],[11,0,{},1,[10,"49ZoazuiFBlbZzgmT6kxzi",null,null,-262,[6,"e5HiGTI8VDcp/QHAKTlzGY",1,[[1,"LightRay-001",["_name"],66],[2,["_lpos"],66,[1,9.36,0,-5.642]],[2,["_lrot"],66,[3,0,0,0,1]],[2,["_euler"],66,[1,0,0,0]],[1,2,["_mobility"],66],[39,2,["_mobility"],[0,["80uBm8yWFB6pLHnN7QiT5t"]]],[1,true,["_active"],66],[2,["_lscale"],66,[1,11,11,11]],[25,["_materials","0"],[0,["84hii9rK1CFYkehKUt7qCw"]],7]]],6]],[32,"Speaker_Small13",58,[[16,-263,[7,"5eCKqaOVhFg7TwJGINoyge"],[16],[9],17],[51,-264,[7,"9daybLnuZCEqn0Zvzfb9s3"]]],[4,"d7W/maZWlE76R1zOONAEu8",null,null,null,1,0],[1,0.746,0.632,6.498],[3,0,-0.3826834404274596,0,0.9238795291717438],[1,15.993424415588379,23.337350845336914,15.993424415588379],[1,0,-45.000001,0]],[32,"Speaker_Small12",58,[[16,-265,[7,"c89jMgQ3JFSZzVlIe8bAcp"],[18],[9],19],[51,-266,[7,"59GJ53l4xBool/qG4kkGhm"]]],[4,"82GvUkPSRJtb92iO2QPJuj",null,null,null,1,0],[1,-0.7325052618980408,0.6318072080612183,6.49771785736084],[3,0,0.3826834370613369,0,0.9238795305660377],[1,15.993424415588379,23.337350845336914,15.993424415588379],[1,0,45.00000058248967,0]],[11,0,null,1,[10,"d6BfGiK+FQ5418iedYUqF0",null,null,-269,[6,"883NizfkBI9LFW9DJ86Sq6",1,[[1,"stage test 2 (scrolling colors)",["_name"],155],[2,["_lpos"],155,[1,-1.994,-1.094,-1.005]],[2,["_lrot"],155,[3,0,0,0,1]],[2,["_euler"],155,[1,0,0,0]],[3,["_materials","0"],-267,53],[3,["_materials","1"],-268,54]]],52]],[32,"Speaker_BIG",76,[[16,-270,[7,"cf2qPa+eBPopZsEMFu/HZd"],[76],[9],77],[51,-271,[7,"c5AmTn5DtE1aOUeA6u021K"]]],[4,"cf3VWkvCFAH498hpMwt+U1",null,null,null,1,0],[1,-0.013,0.057,0.187],[3,0,0.18480905336921546,0,0.9827744470593314],[1,15.793560374866832,12.239682977849787,12.239682977849787],[1,0,21.3,0]],[32,"Speaker_Small",76,[[16,-272,[7,"c5JLFV6kRNkJ5qopi0hTsh"],[78],[9],79],[51,-273,[7,"54rgPUNppERYjljt8wQoPc"]]],[4,"62OuAH48BLUrX/95e/CbjS",null,null,null,1,0],[1,-0.003,0.182,0.216],[3,0,0.18223552549214747,0,0.9832549075639546],[1,8.723686044866389,12.729464097456498,8.723686044866389],[1,0,21,0]],[32,"Speaker_BIG-001",76,[[16,-274,[7,"cbZAkoksBLiLAgQ2byw1ZE"],[80],[9],81],[51,-275,[7,"2aSyOB7vtISblkNC4Rj/1R"]]],[4,"90GN55XgxOuL6brRbUrgYo",null,null,null,1,0],[1,0.061,0.057,-0.129],[3,0,-0.9921147013144778,0,-0.12533323356430437],[1,15.793560374866832,12.239682977849787,12.239682977849787],[1,0,-194.4,0]],[32,"Speaker_BIG-002",76,[[16,-276,[7,"9cjyx/ZORBDq/1dBSjfaXp"],[82],[9],83],[51,-277,[7,"acj/2zOnVA7L7yoSu57U4b"]]],[4,"83wsMc88pLVaex+TBrze2+",null,null,null,1,0],[1,0.063,0.057,0.04],[3,0,-0.5948227867513413,0,-0.8038568606172173],[1,15.793560374866832,12.239682977849787,12.239682977849787],[1,0,-287,0]],[32,"Speaker_Small-001",76,[[16,-278,[7,"42lMhpVthJx5ERocdmRNJY"],[84],[9],85],[51,-279,[7,"83nSztrRRNG7q/xg+iLPCX"]]],[4,"a73x4xtDxFE4Lmoh9xpXRj",null,null,null,1,0],[1,0.074,0.178,-0.124],[3,0,-0.9862856015372314,0,0.1650476058606776],[1,8.723686044866389,12.729464097456498,8.723686044866389],[1,0,-161,0]],[32,"Speaker_BIG",81,[[16,-280,[7,"cf2qPa+eBPopZsEMFu/HZd"],[217],[9],218],[51,-281,[7,"c5AmTn5DtE1aOUeA6u021K"]]],[4,"cf3VWkvCFAH498hpMwt+U1",null,null,null,1,0],[1,-0.013,0.057,0.187],[3,0,0.18480905336921546,0,0.9827744470593314],[1,15.793560374866832,12.239682977849787,12.239682977849787],[1,0,21.3,0]],[32,"Speaker_Small",81,[[16,-282,[7,"c5JLFV6kRNkJ5qopi0hTsh"],[219],[9],220],[51,-283,[7,"54rgPUNppERYjljt8wQoPc"]]],[4,"62OuAH48BLUrX/95e/CbjS",null,null,null,1,0],[1,-0.003,0.182,0.216],[3,0,0.18223552549214747,0,0.9832549075639546],[1,8.723686044866389,12.729464097456498,8.723686044866389],[1,0,21,0]],[32,"Speaker_BIG-001",81,[[16,-284,[7,"cbZAkoksBLiLAgQ2byw1ZE"],[221],[9],222],[51,-285,[7,"2aSyOB7vtISblkNC4Rj/1R"]]],[4,"90GN55XgxOuL6brRbUrgYo",null,null,null,1,0],[1,0.061,0.057,-0.129],[3,0,-0.9921147013144778,0,-0.12533323356430437],[1,15.793560374866832,12.239682977849787,12.239682977849787],[1,0,-194.4,0]],[32,"Speaker_BIG-002",81,[[16,-286,[7,"9cjyx/ZORBDq/1dBSjfaXp"],[223],[9],224],[51,-287,[7,"acj/2zOnVA7L7yoSu57U4b"]]],[4,"83wsMc88pLVaex+TBrze2+",null,null,null,1,0],[1,0.063,0.057,0.04],[3,0,-0.5948227867513413,0,-0.8038568606172173],[1,15.793560374866832,12.239682977849787,12.239682977849787],[1,0,-287,0]],[32,"Speaker_Small-001",81,[[16,-288,[7,"42lMhpVthJx5ERocdmRNJY"],[225],[9],226],[51,-289,[7,"83nSztrRRNG7q/xg+iLPCX"]]],[4,"a73x4xtDxFE4Lmoh9xpXRj",null,null,null,1,0],[1,0.074,0.178,-0.124],[3,0,-0.9862856015372314,0,0.1650476058606776],[1,8.723686044866389,12.729464097456498,8.723686044866389],[1,0,-161,0]],[32,"Speaker_BIG",86,[[16,-290,[7,"cf2qPa+eBPopZsEMFu/HZd"],[358],[9],359],[51,-291,[7,"c5AmTn5DtE1aOUeA6u021K"]]],[4,"cf3VWkvCFAH498hpMwt+U1",null,null,null,1,0],[1,-0.013,0.057,0.187],[3,0,0.18480905336921546,0,0.9827744470593314],[1,15.793560374866832,12.239682977849787,12.239682977849787],[1,0,21.3,0]],[32,"Speaker_Small",86,[[16,-292,[7,"c5JLFV6kRNkJ5qopi0hTsh"],[360],[9],361],[51,-293,[7,"54rgPUNppERYjljt8wQoPc"]]],[4,"62OuAH48BLUrX/95e/CbjS",null,null,null,1,0],[1,-0.003,0.182,0.216],[3,0,0.18223552549214747,0,0.9832549075639546],[1,8.723686044866389,12.729464097456498,8.723686044866389],[1,0,21,0]],[32,"Speaker_BIG-001",86,[[16,-294,[7,"cbZAkoksBLiLAgQ2byw1ZE"],[362],[9],363],[51,-295,[7,"2aSyOB7vtISblkNC4Rj/1R"]]],[4,"90GN55XgxOuL6brRbUrgYo",null,null,null,1,0],[1,0.061,0.057,-0.129],[3,0,-0.9921147013144778,0,-0.12533323356430437],[1,15.793560374866832,12.239682977849787,12.239682977849787],[1,0,-194.4,0]],[32,"Speaker_BIG-002",86,[[16,-296,[7,"9cjyx/ZORBDq/1dBSjfaXp"],[364],[9],365],[51,-297,[7,"acj/2zOnVA7L7yoSu57U4b"]]],[4,"83wsMc88pLVaex+TBrze2+",null,null,null,1,0],[1,0.063,0.057,0.04],[3,0,-0.5948227867513413,0,-0.8038568606172173],[1,15.793560374866832,12.239682977849787,12.239682977849787],[1,0,-287,0]],[32,"Speaker_Small-001",86,[[16,-298,[7,"42lMhpVthJx5ERocdmRNJY"],[366],[9],367],[51,-299,[7,"83nSztrRRNG7q/xg+iLPCX"]]],[4,"a73x4xtDxFE4Lmoh9xpXRj",null,null,null,1,0],[1,0.074,0.178,-0.124],[3,0,-0.9862856015372314,0,0.1650476058606776],[1,8.723686044866389,12.729464097456498,8.723686044866389],[1,0,-161,0]],[32,"Speaker_BIG",91,[[16,-300,[7,"cf2qPa+eBPopZsEMFu/HZd"],[501],[9],502],[51,-301,[7,"c5AmTn5DtE1aOUeA6u021K"]]],[4,"cf3VWkvCFAH498hpMwt+U1",null,null,null,1,0],[1,-0.013,0.057,0.187],[3,0,0.18480905336921546,0,0.9827744470593314],[1,15.793560374866832,12.239682977849787,12.239682977849787],[1,0,21.3,0]],[32,"Speaker_Small",91,[[16,-302,[7,"c5JLFV6kRNkJ5qopi0hTsh"],[503],[9],504],[51,-303,[7,"54rgPUNppERYjljt8wQoPc"]]],[4,"62OuAH48BLUrX/95e/CbjS",null,null,null,1,0],[1,-0.003,0.182,0.216],[3,0,0.18223552549214747,0,0.9832549075639546],[1,8.723686044866389,12.729464097456498,8.723686044866389],[1,0,21,0]],[32,"Speaker_BIG-001",91,[[16,-304,[7,"cbZAkoksBLiLAgQ2byw1ZE"],[505],[9],506],[51,-305,[7,"2aSyOB7vtISblkNC4Rj/1R"]]],[4,"90GN55XgxOuL6brRbUrgYo",null,null,null,1,0],[1,0.061,0.057,-0.129],[3,0,-0.9921147013144778,0,-0.12533323356430437],[1,15.793560374866832,12.239682977849787,12.239682977849787],[1,0,-194.4,0]],[32,"Speaker_BIG-002",91,[[16,-306,[7,"9cjyx/ZORBDq/1dBSjfaXp"],[507],[9],508],[51,-307,[7,"acj/2zOnVA7L7yoSu57U4b"]]],[4,"83wsMc88pLVaex+TBrze2+",null,null,null,1,0],[1,0.063,0.057,0.04],[3,0,-0.5948227867513413,0,-0.8038568606172173],[1,15.793560374866832,12.239682977849787,12.239682977849787],[1,0,-287,0]],[32,"Speaker_Small-001",91,[[16,-308,[7,"42lMhpVthJx5ERocdmRNJY"],[509],[9],510],[51,-309,[7,"83nSztrRRNG7q/xg+iLPCX"]]],[4,"a73x4xtDxFE4Lmoh9xpXRj",null,null,null,1,0],[1,0.074,0.178,-0.124],[3,0,-0.9862856015372314,0,0.1650476058606776],[1,8.723686044866389,12.729464097456498,8.723686044866389],[1,0,-161,0]],[36,"Plane",1,[[149,"Plane<ModelComponent>",-310,[7,"71SSPbkd1AI6Gj35zfX3yG"],[8],[9],9]],[4,"cetHmtuJxDw7xqB/BklmuL",null,null,null,1,0],[1,-0.452,-1.1,-12],[1,1,1,2.4]],[36,"pCube487",58,[[16,-311,[7,"baI69vcJNCBq6LfO8QWwry"],[10],[9],11]],[4,"7bm7K/9ERC+Zq6o0Y3/K6Q",null,null,null,1,0],[1,0.0755172073841095,-0.0008892230689525604,6.388121604919434],[1,43.6334114074707,1,221.53329467773438]],[36,"pCube492",58,[[16,-312,[7,"fbf1guQYJFGbWHit1Qic+z"],[12],[9],13]],[4,"47hyQfTMNKN7GSCY3N165b",null,null,null,1,0],[1,-0.8357840776443481,0.36857569217681885,6.39021110534668],[1,9.364941596984863,76.02218627929688,9.364941596984863]],[36,"pCube494",58,[[16,-313,[7,"41tnOT6DxDKYPKWl0V3+qX"],[14],[9],15]],[4,"b5NWgB3V9LabJ9qaOVOxUa",null,null,null,1,0],[1,0.846,0.369,6.39],[1,9.364941596984863,76.02218627929688,9.364941596984863]],[37,"pCube499",58,[[16,-314,[7,"72FW0tQOJO3KmpKv6SYYfI"],[20],[9],21]],[4,"816AMgbW1NpLeAdA9VxOwS",null,null,null,1,0],[1,-0.0039000685792416334,-3.552713599391162e-17,2.473414182662964]],[37,"pCube508",58,[[16,-315,[7,"5eRHt9S99Ae7G9lIYblctU"],[22],[9],23]],[4,"378whRvDpEqIDHbAzNfDdf",null,null,null,1,0],[1,-0.004,0,2.11]],[37,"pCube509",58,[[16,-316,[7,"e4SvtalfVKhJINgs+77DVY"],[24],[9],25]],[4,"a0R8yrCfpBgpF8aCHwCP50",null,null,null,1,0],[1,-0.004,0,1.746]],[37,"pCube510",58,[[16,-317,[7,"c4FG3GM1lKKIMPLMimeI5F"],[26],[9],27]],[4,"3e0v3+PONDFav5fVBRzbXV",null,null,null,1,0],[1,-0.004,0,1.382]],[37,"pCube511",58,[[16,-318,[7,"8dw9XUOIRCRIBiFkEmbBtG"],[28],[9],29]],[4,"cds5vRqaFGp7MKmPCRkLuz",null,null,null,1,0],[1,-0.004,0,1.018]],[37,"pCube512",58,[[16,-319,[7,"0a82E48DRFBbGGPEcQ5ym8"],[30],[9],31]],[4,"44rOyJT2JEwZp3v7LXrZuc",null,null,null,1,0],[1,-0.004,0,0.654]],[37,"pCube513",58,[[16,-320,[7,"84LWgT3NdK+qAKFhp3PWSz"],[32],[9],33]],[4,"205Ef8n5pEwJZYn2jYXazw",null,null,null,1,0],[1,0.635,0,0.654]],[37,"pCube514",58,[[16,-321,[7,"736gf5dBhAQY8sSNdT9Hvc"],[34],[9],35]],[4,"68QdGCXVJIq6xjGykXJlEl",null,null,null,1,0],[1,0.635,0,1.018]],[37,"pCube515",58,[[16,-322,[7,"fbCIMbtMlLPISevdx2CKOE"],[36],[9],37]],[4,"f4nv1HBk1Nj4OHI6aVelJd",null,null,null,1,0],[1,0.635,0,1.382]],[37,"pCube516",58,[[16,-323,[7,"6cbLSrXB1O+LXLxz0b6Q9A"],[38],[9],39]],[4,"25xRoeMzVARYAtFgGwW350",null,null,null,1,0],[1,0.635,0,1.746]],[37,"pCube517",58,[[16,-324,[7,"e714lysrpHYqd7V69bvG0J"],[40],[9],41]],[4,"67C9CijLhIXrlPA88DUMsp",null,null,null,1,0],[1,0.635,0,2.11]],[37,"pCube518",58,[[16,-325,[7,"2cp1iZkSdJNLQz9U+ryMjk"],[42],[9],43]],[4,"5ai67GhSJN9aECpqNkoYZ+",null,null,null,1,0],[1,0.635,0,2.473]],[32,"Stage_Light13",58,[[16,-326,[7,"d3flMJGW5FlofcWXNFNSuM"],[44],[9],45]],[4,"74sog8GjNGiqg0UZRUvOvS",null,null,null,1,0],[1,1.0951447486877441,-0.0023470756132155587,4.708515644073486],[3,0,-0.7071067811865476,0,0.7071067811865475],[1,0.28918656706810003,0.2891865670681,0.28918656706810003],[1,0,-90.00000000000003,0]],[32,"Stage_Light17",58,[[16,-327,[7,"01LtiYGGpGRJA3M+Q77gy4"],[46],[9],47]],[4,"a3il1/sWFBYpOLSXfDDKA0",null,null,null,1,0],[1,1.095,-0.002,5.873],[3,0,-0.7071067811865476,0,0.7071067811865476],[1,0.2891865670681,0.2891865670681,0.2891865670681],[1,0,-90.00000000000003,0]],[32,"Stage_Light18",58,[[16,-328,[7,"d4G/P6l31HwKO6qT+6yvhm"],[48],[9],49]],[4,"b40JBFVcpPPY38bwIKad1I",null,null,null,1,0],[1,-0.572,-0.002,5.85],[3,0,-0.7071067811865476,0,0.7071067811865476],[1,0.2891865670681,0.2891865670681,0.2891865670681],[1,0,-90.00000000000003,0]],[32,"Stage_Light19",58,[[16,-329,[7,"7cZl/W/WxMpYsuZEQdQovO"],[50],[9],51]],[4,"33GV/rDQNJxoxoqtNNbVwU",null,null,null,1,0],[1,-0.572,-0.002,4.736],[3,0,-0.7071067811865476,0,0.7071067811865476],[1,0.2891865670681,0.2891865670681,0.2891865670681],[1,0,-90.00000000000003,0]],[0,["c9pXQOuMhVYo8BLmL/bfnO"]],[36,"Beer_Bottle5",75,[[16,-330,[7,"c6JQL9MHlPfb60JC52BY90"],[56],[9],57]],[4,"7fhKCiwz9AOZ7ONBGxrmA0",null,null,null,1,0],[1,-0.017,0.008,-0.001],[1,1.1101818181818182,2.8880000000000003,1.1101818181818184]],[36,"Beer_Bottle6",75,[[16,-331,[7,"62Em35CyJIipi46b9puAUI"],[58],[9],59]],[4,"185S6iG9RAJoEkBDIQkItD",null,null,null,1,0],[1,0.126,0.008,0.186],[1,1.1101818181818182,2.8880000000000003,1.1101818181818184]],[32,"Amplifier-001",75,[[16,-332,[7,"0fG4NulrhCf6LLNQoYAkyg"],[60],[9],61]],[4,"505zWUpTxN3bLQMiOMWoZM",null,null,null,1,0],[1,-0.188,0.08,-0.344],[3,0,0.48709770525415746,0,0.8733474826986873],[1,15.609465165571734,18.4912109375,9.172158674760299],[1,0,58.3,0]],[11,0,{},75,[12,"e892RDjrxNZISjs1LC/QQv",null,-335,[6,"31JB2f5edOHKWDaTxYTuzp",59,[[1,"Crowd",["_name"],96],[2,["_lpos"],96,[1,0.184,-0.039,-0.135]],[2,["_lrot"],96,[3,0,1,0,6.123233995736766e-17]],[2,["_euler"],96,[1,0,180,0]],[2,["_lscale"],96,[1,0.090909,0.090909,0.090909]],[1,3,["startingPoseIndex"],2],[1,true,["shouldGetRandomPose"],2],[1,17,["poses","length"],2],[3,["poses","0"],2,63],[3,["poses","1"],2,64],[3,["poses","2"],2,65],[3,["poses","3"],2,66],[3,["poses","4"],2,67],[1,null,["poses","5"],2],[1,null,["poses","6"],2],[1,null,["poses","7"],2],[1,null,["poses","8"],2],[1,null,["poses","9"],2],[1,null,["poses","10"],2],[1,null,["poses","11"],2],[1,null,["poses","12"],2],[1,null,["poses","13"],2],[1,null,["poses","14"],2],[1,null,["poses","15"],2],[1,null,["poses","16"],2],[1,null,["poses","17"],2],[1,null,["poses","18"],2],[1,null,["poses","19"],2],[25,["_materials","0"],[0,["3ew1Vo2adBpqZ739+OrPkj"]],68],[2,["_lrot"],-333,[3,0,0,0,1]],[2,["_euler"],-334,[1,0,0,0]]]],[[15,["mainRenderer"],[0,["0b8pE5sPNepqN6zgbDPnqa"]]]],62]],[0,["e3hqu0HdxNq4e2nv3hKDvO"]],[11,0,{},75,[12,"e892RDjrxNZISjs1LC/QQv",null,-338,[6,"6amtltDv9MurJyjYwudMrT",59,[[1,"Crowd-003",["_name"],97],[2,["_lpos"],97,[1,-0.014,-0.039,-0.07]],[2,["_lrot"],97,[3,0,1,0,6.123233995736766e-17]],[2,["_euler"],97,[1,0,180,0]],[2,["_lscale"],97,[1,0.090909,0.090909,0.090909]],[1,3,["startingPoseIndex"],3],[1,true,["shouldGetRandomPose"],3],[1,17,["poses","length"],3],[3,["poses","0"],3,70],[3,["poses","1"],3,71],[3,["poses","2"],3,72],[3,["poses","3"],3,73],[3,["poses","4"],3,74],[1,null,["poses","5"],3],[1,null,["poses","6"],3],[1,null,["poses","7"],3],[1,null,["poses","8"],3],[1,null,["poses","9"],3],[1,null,["poses","10"],3],[1,null,["poses","11"],3],[1,null,["poses","12"],3],[1,null,["poses","13"],3],[1,null,["poses","14"],3],[1,null,["poses","15"],3],[1,null,["poses","16"],3],[1,null,["poses","17"],3],[1,null,["poses","18"],3],[1,null,["poses","19"],3],[25,["_materials","0"],[0,["3ew1Vo2adBpqZ739+OrPkj"]],75],[2,["_lrot"],-336,[3,0,0,0,1]],[2,["_euler"],-337,[1,0,0,0]]]],[[15,["mainRenderer"],[0,["0b8pE5sPNepqN6zgbDPnqa"]]]],69]],[0,["e3hqu0HdxNq4e2nv3hKDvO"]],[36,"Beer_Bottle2",77,[[16,-339,[7,"04bDtH8hhNAZlP0i3vn9r0"],[86],[9],87]],[4,"d8pL9OUC9IxK5ajeP4dHWc",null,null,null,1,0],[1,0.122,0.008,0.382],[1,1.1101818181818182,2.8880000000000003,1.1101818181818182]],[37,"table",77,[[16,-340,[7,"76r1HscolOn40AITIFbVUI"],[88],[9],89]],[4,"06Jf36UaBFBbBq3F2xl2sW",null,null,null,1,0],[1,0.644,-0.01,-4.483]],[37,"table-001",77,[[16,-341,[7,"49GzrBLzBJqZfSASKI6Ex/"],[90],[9],91]],[4,"8dJAPhFVxILItJwUX+1+DJ",null,null,null,1,0],[1,0.644,-0.01,-4.483]],[11,0,{},77,[12,"e892RDjrxNZISjs1LC/QQv",null,-344,[6,"636R57dB5AbK6hwkkdk6XA",59,[[1,"Crowd-003",["_name"],98],[2,["_lpos"],98,[1,0.17,-0.039,0.392]],[2,["_lrot"],98,[3,0,0.9262262801003964,0,-0.3769680066681813]],[2,["_euler"],98,[1,0,224.292,0]],[2,["_lscale"],98,[1,0.090909,0.090909,0.090909]],[1,3,["startingPoseIndex"],4],[1,true,["shouldGetRandomPose"],4],[1,17,["poses","length"],4],[3,["poses","0"],4,93],[3,["poses","1"],4,94],[3,["poses","2"],4,95],[3,["poses","3"],4,96],[3,["poses","4"],4,97],[1,null,["poses","5"],4],[1,null,["poses","6"],4],[1,null,["poses","7"],4],[1,null,["poses","8"],4],[1,null,["poses","9"],4],[1,null,["poses","10"],4],[1,null,["poses","11"],4],[1,null,["poses","12"],4],[1,null,["poses","13"],4],[1,null,["poses","14"],4],[1,null,["poses","15"],4],[1,null,["poses","16"],4],[1,null,["poses","17"],4],[1,null,["poses","18"],4],[1,null,["poses","19"],4],[25,["_materials","0"],[0,["3ew1Vo2adBpqZ739+OrPkj"]],98],[2,["_lrot"],-342,[3,0,0,0,1]],[2,["_euler"],-343,[1,0,0,0]]]],[[15,["mainRenderer"],[0,["0b8pE5sPNepqN6zgbDPnqa"]]]],92]],[0,["e3hqu0HdxNq4e2nv3hKDvO"]],[11,0,{},77,[12,"e892RDjrxNZISjs1LC/QQv",null,-347,[6,"c9bDkcD/xJG7ht7cVmgXU7",59,[[1,"Crowd-004",["_name"],99],[2,["_lpos"],99,[1,0.399,-0.03,-0.087]],[2,["_lrot"],99,[3,0,0.9499529702977845,0,-0.31239294841980136]],[2,["_euler"],99,[1,0,216.407,0]],[2,["_lscale"],99,[1,0.090909,0.090909,0.090909]],[1,3,["startingPoseIndex"],5],[1,true,["shouldGetRandomPose"],5],[1,17,["poses","length"],5],[3,["poses","0"],5,100],[3,["poses","1"],5,101],[3,["poses","2"],5,102],[3,["poses","3"],5,103],[3,["poses","4"],5,104],[1,null,["poses","5"],5],[1,null,["poses","6"],5],[1,null,["poses","7"],5],[1,null,["poses","8"],5],[1,null,["poses","9"],5],[1,null,["poses","10"],5],[1,null,["poses","11"],5],[1,null,["poses","12"],5],[1,null,["poses","13"],5],[1,null,["poses","14"],5],[1,null,["poses","15"],5],[1,null,["poses","16"],5],[1,null,["poses","17"],5],[1,null,["poses","18"],5],[1,null,["poses","19"],5],[25,["_materials","0"],[0,["3ew1Vo2adBpqZ739+OrPkj"]],105],[2,["_lrot"],-345,[3,0,0,0,1]],[2,["_euler"],-346,[1,0,0,0]]]],[[15,["mainRenderer"],[0,["0b8pE5sPNepqN6zgbDPnqa"]]]],99]],[0,["e3hqu0HdxNq4e2nv3hKDvO"]],[36,"Beer_Bottle2",78,[[16,-348,[7,"41F6rsSIZFwZblbdmUTcuP"],[106],[9],107]],[4,"f1ERcICB9NWY9pi02XS2fz",null,null,null,1,0],[1,0.138,0.008,-0.507],[1,1.1101818181818182,2.8880000000000003,1.1101818181818182]],[32,"Light_Stand-001",78,[[16,-349,[7,"a9fj/QbYFE87RhfvQE+Kb5"],[108],[9],109]],[4,"a257sNrkBHTZxuzB+KVpJc",null,null,null,1,0],[1,-0.009,0.011,0.317],[3,0,0.4293450097784799,0,0.90314055527272],[1,0.36363636363636365,0.36363636363636365,0.36363636363636365],[1,0,50.852,0]],[36,"Beer_Bottle3",78,[[16,-350,[7,"3c7MZzdVxOo60Qq0dahRhf"],[110],[9],111]],[4,"81Xelbl+pMj7yHXrvPveRI",null,null,null,1,0],[1,-0.019,0.008,0.053],[1,1.1101818181818182,2.8880000000000003,1.1101818181818182]],[11,0,{},78,[12,"e892RDjrxNZISjs1LC/QQv",null,-353,[6,"74CimlK/VOU4GlH7cp2Cp4",59,[[1,"Crowd-004",["_name"],100],[2,["_lpos"],100,[1,0.294,-0.03,0.159]],[2,["_lrot"],100,[3,0,0.9950996745551749,0,0.09887688152538514]],[2,["_euler"],100,[1,0,168.651,0]],[2,["_lscale"],100,[1,0.090909,0.090909,0.090909]],[1,3,["startingPoseIndex"],6],[1,true,["shouldGetRandomPose"],6],[1,17,["poses","length"],6],[3,["poses","0"],6,113],[3,["poses","1"],6,114],[3,["poses","2"],6,115],[3,["poses","3"],6,116],[3,["poses","4"],6,117],[1,null,["poses","5"],6],[1,null,["poses","6"],6],[1,null,["poses","7"],6],[1,null,["poses","8"],6],[1,null,["poses","9"],6],[1,null,["poses","10"],6],[1,null,["poses","11"],6],[1,null,["poses","12"],6],[1,null,["poses","13"],6],[1,null,["poses","14"],6],[1,null,["poses","15"],6],[1,null,["poses","16"],6],[1,null,["poses","17"],6],[1,null,["poses","18"],6],[1,null,["poses","19"],6],[25,["_materials","0"],[0,["3ew1Vo2adBpqZ739+OrPkj"]],118],[2,["_lrot"],-351,[3,0,0,0,1]],[2,["_euler"],-352,[1,0,0,0]]]],[[15,["mainRenderer"],[0,["0b8pE5sPNepqN6zgbDPnqa"]]]],112]],[0,["e3hqu0HdxNq4e2nv3hKDvO"]],[11,0,{},78,[12,"e892RDjrxNZISjs1LC/QQv",null,-356,[6,"61ZcfXEnJBEIeEbaEXHfrs",59,[[1,"Crowd-005",["_name"],101],[2,["_lpos"],101,[1,0.103,-0.03,-0.541]],[2,["_lrot"],101,[3,0,0.9833486052257143,0,-0.18172925081186614]],[2,["_euler"],101,[1,0,200.941,0]],[2,["_lscale"],101,[1,0.090909,0.090909,0.090909]],[1,3,["startingPoseIndex"],7],[1,true,["shouldGetRandomPose"],7],[1,17,["poses","length"],7],[3,["poses","0"],7,120],[3,["poses","1"],7,121],[3,["poses","2"],7,122],[3,["poses","3"],7,123],[3,["poses","4"],7,124],[1,null,["poses","5"],7],[1,null,["poses","6"],7],[1,null,["poses","7"],7],[1,null,["poses","8"],7],[1,null,["poses","9"],7],[1,null,["poses","10"],7],[1,null,["poses","11"],7],[1,null,["poses","12"],7],[1,null,["poses","13"],7],[1,null,["poses","14"],7],[1,null,["poses","15"],7],[1,null,["poses","16"],7],[1,null,["poses","17"],7],[1,null,["poses","18"],7],[1,null,["poses","19"],7],[25,["_materials","0"],[0,["3ew1Vo2adBpqZ739+OrPkj"]],125],[2,["_lrot"],-354,[3,0,0,0,1]],[2,["_euler"],-355,[1,0,0,0]]]],[[15,["mainRenderer"],[0,["0b8pE5sPNepqN6zgbDPnqa"]]]],119]],[0,["e3hqu0HdxNq4e2nv3hKDvO"]],[32,"Beer_Bottle3",68,[[16,-357,[7,"e0Xbraey1P2K6X/yz8UZ6c"],[126],[9],127]],[4,"4ccPMgJCJAD6FCCKJDH5jR",null,null,null,1,0],[1,0.059,-0.011,0.029],[3,-0.5913096483635824,0,0,0.8064446042674825],[1,1.1101818181818182,2.8880000000000003,1.1101818181818182],[1,-72.5,0,0]],[32,"Beer_Bottle4",68,[[16,-358,[7,"53nASOc1hOeL9nIGYttJlg"],[128],[9],129]],[4,"e7hzTdKxVBFpt3KxArDBVK",null,null,null,1,0],[1,-0.188,0.008,-0.302],[3,-0.4415058527917452,0,0,0.8972583696743285],[1,1.1101818181818182,2.8880000000000003,1.1101818181818182],[1,-52.4,0,0]],[32,"Studio_Camera-001",68,[[16,-359,[7,"64a4c8rfhEw6dMvSKE2Irn"],[130],[9],131]],[4,"05MVqkQ69NBLYxY9H2Uljd",null,null,null,1,0],[1,-0.375,0.011,0.585],[3,0,0.6333065863819719,0,0.7739010063601248],[1,0.36363636363636365,0.36363636363636365,0.36363636363636365],[1,0,78.589,0]],[11,0,{},68,[12,"e892RDjrxNZISjs1LC/QQv",null,-362,[6,"84SSHZWWlOG7lu+lMJ2maL",59,[[1,"Crowd-004",["_name"],102],[2,["_lpos"],102,[1,0.146,-0.03,0.224]],[2,["_lrot"],102,[3,0,0.9907466560919261,0,-0.13572421833507323]],[2,["_euler"],102,[1,0,195.601,0]],[2,["_lscale"],102,[1,0.090909,0.090909,0.090909]],[1,3,["startingPoseIndex"],8],[1,true,["shouldGetRandomPose"],8],[1,17,["poses","length"],8],[3,["poses","0"],8,133],[3,["poses","1"],8,134],[3,["poses","2"],8,135],[3,["poses","3"],8,136],[3,["poses","4"],8,137],[1,null,["poses","5"],8],[1,null,["poses","6"],8],[1,null,["poses","7"],8],[1,null,["poses","8"],8],[1,null,["poses","9"],8],[1,null,["poses","10"],8],[1,null,["poses","11"],8],[1,null,["poses","12"],8],[1,null,["poses","13"],8],[1,null,["poses","14"],8],[1,null,["poses","15"],8],[1,null,["poses","16"],8],[1,null,["poses","17"],8],[1,null,["poses","18"],8],[1,null,["poses","19"],8],[25,["_materials","0"],[0,["3ew1Vo2adBpqZ739+OrPkj"]],138],[2,["_lrot"],-360,[3,0,0,0,1]],[2,["_euler"],-361,[1,0,0,0]]]],[[15,["mainRenderer"],[0,["0b8pE5sPNepqN6zgbDPnqa"]]]],132]],[0,["e3hqu0HdxNq4e2nv3hKDvO"]],[11,0,{},68,[12,"e892RDjrxNZISjs1LC/QQv",null,-365,[6,"2foEaagzVFtYdrV1t+MgZI",59,[[1,"Crowd-005",["_name"],103],[2,["_lpos"],103,[1,-0.122,-0.03,-0.407]],[2,["_lrot"],103,[3,0,0.9749051595675984,0,-0.22262059619108826]],[2,["_euler"],103,[1,0,205.726,0]],[2,["_lscale"],103,[1,0.090909,0.090909,0.090909]],[1,3,["startingPoseIndex"],9],[1,true,["shouldGetRandomPose"],9],[1,17,["poses","length"],9],[3,["poses","0"],9,140],[3,["poses","1"],9,141],[3,["poses","2"],9,142],[3,["poses","3"],9,143],[3,["poses","4"],9,144],[1,null,["poses","5"],9],[1,null,["poses","6"],9],[1,null,["poses","7"],9],[1,null,["poses","8"],9],[1,null,["poses","9"],9],[1,null,["poses","10"],9],[1,null,["poses","11"],9],[1,null,["poses","12"],9],[1,null,["poses","13"],9],[1,null,["poses","14"],9],[1,null,["poses","15"],9],[1,null,["poses","16"],9],[1,null,["poses","17"],9],[1,null,["poses","18"],9],[1,null,["poses","19"],9],[25,["_materials","0"],[0,["3ew1Vo2adBpqZ739+OrPkj"]],145],[2,["_lrot"],-363,[3,0,0,0,1]],[2,["_euler"],-364,[1,0,0,0]]]],[[15,["mainRenderer"],[0,["0b8pE5sPNepqN6zgbDPnqa"]]]],139]],[0,["e3hqu0HdxNq4e2nv3hKDvO"]],[11,0,{},68,[12,"e892RDjrxNZISjs1LC/QQv",null,-368,[6,"ccfOVvaa1Gr5y4hwsRSdHF",59,[[1,"Crowd-006",["_name"],104],[2,["_lpos"],104,[1,-0.207,-0.03,-0.333]],[2,["_lrot"],104,[3,0,0.9964459693107395,0,-0.0842343768563694]],[2,["_euler"],104,[1,0,189.664,0]],[2,["_lscale"],104,[1,0.090909,0.090909,0.090909]],[1,3,["startingPoseIndex"],10],[1,true,["shouldGetRandomPose"],10],[1,17,["poses","length"],10],[3,["poses","0"],10,147],[3,["poses","1"],10,148],[3,["poses","2"],10,149],[3,["poses","3"],10,150],[3,["poses","4"],10,151],[1,null,["poses","5"],10],[1,null,["poses","6"],10],[1,null,["poses","7"],10],[1,null,["poses","8"],10],[1,null,["poses","9"],10],[1,null,["poses","10"],10],[1,null,["poses","11"],10],[1,null,["poses","12"],10],[1,null,["poses","13"],10],[1,null,["poses","14"],10],[1,null,["poses","15"],10],[1,null,["poses","16"],10],[1,null,["poses","17"],10],[1,null,["poses","18"],10],[1,null,["poses","19"],10],[25,["_materials","0"],[0,["3ew1Vo2adBpqZ739+OrPkj"]],152],[2,["_lrot"],-366,[3,0,0,0,1]],[2,["_euler"],-367,[1,0,0,0]]]],[[15,["mainRenderer"],[0,["0b8pE5sPNepqN6zgbDPnqa"]]]],146]],[0,["e3hqu0HdxNq4e2nv3hKDvO"]],[32,"Beer_Bottle3",79,[[16,-369,[7,"25/ZhE8CRC778SrDUcq3aI"],[153],[9],154]],[4,"dfNibg1hZN7JrKRGGGTM69",null,null,null,1,0],[1,0.059,-0.011,0.029],[3,-0.5913096483635824,0,0,0.8064446042674825],[1,1.1101818181818182,2.8880000000000003,1.1101818181818182],[1,-72.5,0,0]],[32,"Beer_Bottle4",79,[[16,-370,[7,"49ahH5y25Cl6S2eZ7YGokJ"],[155],[9],156]],[4,"2as7NmKWpJbp35egn235nQ",null,null,null,1,0],[1,-0.342,0.008,0.387],[3,-0.4415058527917452,0,0,0.8972583696743285],[1,1.1101818181818182,2.8880000000000003,1.1101818181818182],[1,-52.4,0,0]],[11,0,{},79,[12,"e892RDjrxNZISjs1LC/QQv",null,-373,[6,"2edZd0UTRPn4MfvYAUbujf",59,[[1,"Crowd-004",["_name"],105],[2,["_lpos"],105,[1,0.188,-0.03,0.143]],[2,["_lrot"],105,[3,0,0.979070344711145,0,-0.20352213665151958]],[2,["_euler"],105,[1,0,203.486,0]],[2,["_lscale"],105,[1,0.090909,0.090909,0.090909]],[1,3,["startingPoseIndex"],11],[1,true,["shouldGetRandomPose"],11],[1,17,["poses","length"],11],[3,["poses","0"],11,158],[3,["poses","1"],11,159],[3,["poses","2"],11,160],[3,["poses","3"],11,161],[3,["poses","4"],11,162],[1,null,["poses","5"],11],[1,null,["poses","6"],11],[1,null,["poses","7"],11],[1,null,["poses","8"],11],[1,null,["poses","9"],11],[1,null,["poses","10"],11],[1,null,["poses","11"],11],[1,null,["poses","12"],11],[1,null,["poses","13"],11],[1,null,["poses","14"],11],[1,null,["poses","15"],11],[1,null,["poses","16"],11],[1,null,["poses","17"],11],[1,null,["poses","18"],11],[1,null,["poses","19"],11],[25,["_materials","0"],[0,["3ew1Vo2adBpqZ739+OrPkj"]],163],[2,["_lrot"],-371,[3,0,0,0,1]],[2,["_euler"],-372,[1,0,0,0]]]],[[15,["mainRenderer"],[0,["0b8pE5sPNepqN6zgbDPnqa"]]]],157]],[0,["e3hqu0HdxNq4e2nv3hKDvO"]],[11,0,{},79,[12,"e892RDjrxNZISjs1LC/QQv",null,-376,[6,"1eSFpV84tMWJV0EQCNBh5t",59,[[1,"Crowd-005",["_name"],106],[2,["_lpos"],106,[1,-0.328,-0.03,0.372]],[2,["_lrot"],106,[3,0,0.9576241594495412,0,-0.2880207791784469]],[2,["_euler"],106,[1,0,213.479,0]],[2,["_lscale"],106,[1,0.090909,0.090909,0.090909]],[1,3,["startingPoseIndex"],12],[1,true,["shouldGetRandomPose"],12],[1,17,["poses","length"],12],[3,["poses","0"],12,165],[3,["poses","1"],12,166],[3,["poses","2"],12,167],[3,["poses","3"],12,168],[3,["poses","4"],12,169],[1,null,["poses","5"],12],[1,null,["poses","6"],12],[1,null,["poses","7"],12],[1,null,["poses","8"],12],[1,null,["poses","9"],12],[1,null,["poses","10"],12],[1,null,["poses","11"],12],[1,null,["poses","12"],12],[1,null,["poses","13"],12],[1,null,["poses","14"],12],[1,null,["poses","15"],12],[1,null,["poses","16"],12],[1,null,["poses","17"],12],[1,null,["poses","18"],12],[1,null,["poses","19"],12],[25,["_materials","0"],[0,["3ew1Vo2adBpqZ739+OrPkj"]],170],[2,["_lrot"],-374,[3,0,0,0,1]],[2,["_euler"],-375,[1,0,0,0]]]],[[15,["mainRenderer"],[0,["0b8pE5sPNepqN6zgbDPnqa"]]]],164]],[0,["e3hqu0HdxNq4e2nv3hKDvO"]],[11,0,{},79,[12,"e892RDjrxNZISjs1LC/QQv",null,-379,[6,"c6cOXmP4dDA7K98okfV+Wc",59,[[1,"Crowd-006",["_name"],107],[2,["_lpos"],107,[1,-0.053,-0.03,-0.474]],[2,["_lrot"],107,[3,0,0.9953601625724079,0,0.09621926399546865]],[2,["_euler"],107,[1,0,168.957,0]],[2,["_lscale"],107,[1,0.090909,0.090909,0.090909]],[1,3,["startingPoseIndex"],13],[1,true,["shouldGetRandomPose"],13],[1,17,["poses","length"],13],[3,["poses","0"],13,172],[3,["poses","1"],13,173],[3,["poses","2"],13,174],[3,["poses","3"],13,175],[3,["poses","4"],13,176],[1,null,["poses","5"],13],[1,null,["poses","6"],13],[1,null,["poses","7"],13],[1,null,["poses","8"],13],[1,null,["poses","9"],13],[1,null,["poses","10"],13],[1,null,["poses","11"],13],[1,null,["poses","12"],13],[1,null,["poses","13"],13],[1,null,["poses","14"],13],[1,null,["poses","15"],13],[1,null,["poses","16"],13],[1,null,["poses","17"],13],[1,null,["poses","18"],13],[1,null,["poses","19"],13],[25,["_materials","0"],[0,["3ew1Vo2adBpqZ739+OrPkj"]],177],[2,["_lrot"],-377,[3,0,0,0,1]],[2,["_euler"],-378,[1,0,0,0]]]],[[15,["mainRenderer"],[0,["0b8pE5sPNepqN6zgbDPnqa"]]]],171]],[0,["e3hqu0HdxNq4e2nv3hKDvO"]],[37,"table",95,[[16,-380,[7,"deTNnoNB9NTLMva2adQnDU"],[178],[9],179]],[4,"10ESfIMLBIwaVSir/zn4LP",null,null,null,1,0],[1,0.4636607225537302,-0.010000000000000035,-4.688638441085814]],[37,"table",95,[[16,-381,[7,"b2Z19kY7FAf55bh/jPUWEl"],[180],[9],181]],[4,"c5gDeVNphK07gBWy+m5mVg",null,null,null,1,0],[1,0.4636607225537302,-0.010000000000000035,-4.688638441085814]],[11,0,{},95,[12,"e892RDjrxNZISjs1LC/QQv",null,-384,[6,"dfNginxFNAkJ5GXAZGl/IM",59,[[1,"Crowd-001",["_name"],108],[2,["_lpos"],108,[1,-0.047,-0.039,-0.149]],[2,["_lrot"],108,[3,0,0.9770808827804184,0,-0.21286838305638117]],[2,["_euler"],108,[1,0,204.581,0]],[2,["_lscale"],108,[1,0.090909,0.090909,0.090909]],[1,3,["startingPoseIndex"],14],[1,true,["shouldGetRandomPose"],14],[1,17,["poses","length"],14],[3,["poses","0"],14,183],[3,["poses","1"],14,184],[3,["poses","2"],14,185],[3,["poses","3"],14,186],[3,["poses","4"],14,187],[1,null,["poses","5"],14],[1,null,["poses","6"],14],[1,null,["poses","7"],14],[1,null,["poses","8"],14],[1,null,["poses","9"],14],[1,null,["poses","10"],14],[1,null,["poses","11"],14],[1,null,["poses","12"],14],[1,null,["poses","13"],14],[1,null,["poses","14"],14],[1,null,["poses","15"],14],[1,null,["poses","16"],14],[1,null,["poses","17"],14],[1,null,["poses","18"],14],[1,null,["poses","19"],14],[25,["_materials","0"],[0,["3ew1Vo2adBpqZ739+OrPkj"]],188],[2,["_lrot"],-382,[3,0,0,0,1]],[2,["_euler"],-383,[1,0,0,0]]]],[[15,["mainRenderer"],[0,["0b8pE5sPNepqN6zgbDPnqa"]]]],182]],[0,["e3hqu0HdxNq4e2nv3hKDvO"]],[0,["e3hqu0HdxNq4e2nv3hKDvO"]],[36,"Beer_Bottle5",80,[[16,-385,[7,"c6JQL9MHlPfb60JC52BY90"],[197],[9],198]],[4,"7fhKCiwz9AOZ7ONBGxrmA0",null,null,null,1,0],[1,-0.017,0.008,-0.001],[1,1.1101818181818182,2.8880000000000003,1.1101818181818184]],[36,"Beer_Bottle6",80,[[16,-386,[7,"62Em35CyJIipi46b9puAUI"],[199],[9],200]],[4,"185S6iG9RAJoEkBDIQkItD",null,null,null,1,0],[1,0.126,0.008,0.186],[1,1.1101818181818182,2.8880000000000003,1.1101818181818184]],[32,"Amplifier-001",80,[[16,-387,[7,"0fG4NulrhCf6LLNQoYAkyg"],[201],[9],202]],[4,"505zWUpTxN3bLQMiOMWoZM",null,null,null,1,0],[1,-0.188,0.08,-0.344],[3,0,0.48709770525415746,0,0.8733474826986873],[1,15.609465165571734,18.4912109375,9.172158674760299],[1,0,58.3,0]],[11,0,{},80,[12,"e892RDjrxNZISjs1LC/QQv",null,-390,[6,"31JB2f5edOHKWDaTxYTuzp",60,[[1,"Crowd",["_name"],111],[2,["_lpos"],111,[1,0.184,-0.039,-0.135]],[2,["_lrot"],111,[3,0,1,0,6.123233995736766e-17]],[2,["_euler"],111,[1,0,180,0]],[2,["_lscale"],111,[1,0.090909,0.090909,0.090909]],[1,3,["startingPoseIndex"],16],[1,true,["shouldGetRandomPose"],16],[1,17,["poses","length"],16],[3,["poses","0"],16,204],[3,["poses","1"],16,205],[3,["poses","2"],16,206],[3,["poses","3"],16,207],[3,["poses","4"],16,208],[1,null,["poses","5"],16],[1,null,["poses","6"],16],[1,null,["poses","7"],16],[1,null,["poses","8"],16],[1,null,["poses","9"],16],[1,null,["poses","10"],16],[1,null,["poses","11"],16],[1,null,["poses","12"],16],[1,null,["poses","13"],16],[1,null,["poses","14"],16],[1,null,["poses","15"],16],[1,null,["poses","16"],16],[1,null,["poses","17"],16],[1,null,["poses","18"],16],[1,null,["poses","19"],16],[25,["_materials","0"],[0,["3ew1Vo2adBpqZ739+OrPkj"]],209],[2,["_lrot"],-388,[3,0,0,0,1]],[2,["_euler"],-389,[1,0,0,0]]]],[[15,["mainRenderer"],[0,["0b8pE5sPNepqN6zgbDPnqa"]]]],203]],[0,["e3hqu0HdxNq4e2nv3hKDvO"]],[11,0,{},80,[12,"e892RDjrxNZISjs1LC/QQv",null,-393,[6,"6amtltDv9MurJyjYwudMrT",60,[[1,"Crowd-003",["_name"],112],[2,["_lpos"],112,[1,-0.014,-0.039,-0.07]],[2,["_lrot"],112,[3,0,1,0,6.123233995736766e-17]],[2,["_euler"],112,[1,0,180,0]],[2,["_lscale"],112,[1,0.090909,0.090909,0.090909]],[1,3,["startingPoseIndex"],17],[1,true,["shouldGetRandomPose"],17],[1,17,["poses","length"],17],[3,["poses","0"],17,211],[3,["poses","1"],17,212],[3,["poses","2"],17,213],[3,["poses","3"],17,214],[3,["poses","4"],17,215],[1,null,["poses","5"],17],[1,null,["poses","6"],17],[1,null,["poses","7"],17],[1,null,["poses","8"],17],[1,null,["poses","9"],17],[1,null,["poses","10"],17],[1,null,["poses","11"],17],[1,null,["poses","12"],17],[1,null,["poses","13"],17],[1,null,["poses","14"],17],[1,null,["poses","15"],17],[1,null,["poses","16"],17],[1,null,["poses","17"],17],[1,null,["poses","18"],17],[1,null,["poses","19"],17],[25,["_materials","0"],[0,["3ew1Vo2adBpqZ739+OrPkj"]],216],[2,["_lrot"],-391,[3,0,0,0,1]],[2,["_euler"],-392,[1,0,0,0]]]],[[15,["mainRenderer"],[0,["0b8pE5sPNepqN6zgbDPnqa"]]]],210]],[0,["e3hqu0HdxNq4e2nv3hKDvO"]],[36,"Beer_Bottle2",82,[[16,-394,[7,"04bDtH8hhNAZlP0i3vn9r0"],[227],[9],228]],[4,"d8pL9OUC9IxK5ajeP4dHWc",null,null,null,1,0],[1,0.122,0.008,0.382],[1,1.1101818181818182,2.8880000000000003,1.1101818181818182]],[37,"table",82,[[16,-395,[7,"76r1HscolOn40AITIFbVUI"],[229],[9],230]],[4,"06Jf36UaBFBbBq3F2xl2sW",null,null,null,1,0],[1,0.644,-0.01,-4.483]],[37,"table-001",82,[[16,-396,[7,"49GzrBLzBJqZfSASKI6Ex/"],[231],[9],232]],[4,"8dJAPhFVxILItJwUX+1+DJ",null,null,null,1,0],[1,0.644,-0.01,-4.483]],[11,0,{},82,[12,"e892RDjrxNZISjs1LC/QQv",null,-399,[6,"636R57dB5AbK6hwkkdk6XA",60,[[1,"Crowd-003",["_name"],113],[2,["_lpos"],113,[1,0.17,-0.039,0.392]],[2,["_lrot"],113,[3,0,0.9262262801003964,0,-0.3769680066681813]],[2,["_euler"],113,[1,0,224.292,0]],[2,["_lscale"],113,[1,0.090909,0.090909,0.090909]],[1,3,["startingPoseIndex"],18],[1,true,["shouldGetRandomPose"],18],[1,17,["poses","length"],18],[3,["poses","0"],18,234],[3,["poses","1"],18,235],[3,["poses","2"],18,236],[3,["poses","3"],18,237],[3,["poses","4"],18,238],[1,null,["poses","5"],18],[1,null,["poses","6"],18],[1,null,["poses","7"],18],[1,null,["poses","8"],18],[1,null,["poses","9"],18],[1,null,["poses","10"],18],[1,null,["poses","11"],18],[1,null,["poses","12"],18],[1,null,["poses","13"],18],[1,null,["poses","14"],18],[1,null,["poses","15"],18],[1,null,["poses","16"],18],[1,null,["poses","17"],18],[1,null,["poses","18"],18],[1,null,["poses","19"],18],[25,["_materials","0"],[0,["3ew1Vo2adBpqZ739+OrPkj"]],239],[2,["_lrot"],-397,[3,0,0,0,1]],[2,["_euler"],-398,[1,0,0,0]]]],[[15,["mainRenderer"],[0,["0b8pE5sPNepqN6zgbDPnqa"]]]],233]],[0,["e3hqu0HdxNq4e2nv3hKDvO"]],[11,0,{},82,[12,"e892RDjrxNZISjs1LC/QQv",null,-402,[6,"c9bDkcD/xJG7ht7cVmgXU7",60,[[1,"Crowd-004",["_name"],114],[2,["_lpos"],114,[1,0.399,-0.03,-0.087]],[2,["_lrot"],114,[3,0,0.9499529702977845,0,-0.31239294841980136]],[2,["_euler"],114,[1,0,216.407,0]],[2,["_lscale"],114,[1,0.090909,0.090909,0.090909]],[1,3,["startingPoseIndex"],19],[1,true,["shouldGetRandomPose"],19],[1,17,["poses","length"],19],[3,["poses","0"],19,241],[3,["poses","1"],19,242],[3,["poses","2"],19,243],[3,["poses","3"],19,244],[3,["poses","4"],19,245],[1,null,["poses","5"],19],[1,null,["poses","6"],19],[1,null,["poses","7"],19],[1,null,["poses","8"],19],[1,null,["poses","9"],19],[1,null,["poses","10"],19],[1,null,["poses","11"],19],[1,null,["poses","12"],19],[1,null,["poses","13"],19],[1,null,["poses","14"],19],[1,null,["poses","15"],19],[1,null,["poses","16"],19],[1,null,["poses","17"],19],[1,null,["poses","18"],19],[1,null,["poses","19"],19],[25,["_materials","0"],[0,["3ew1Vo2adBpqZ739+OrPkj"]],246],[2,["_lrot"],-400,[3,0,0,0,1]],[2,["_euler"],-401,[1,0,0,0]]]],[[15,["mainRenderer"],[0,["0b8pE5sPNepqN6zgbDPnqa"]]]],240]],[0,["e3hqu0HdxNq4e2nv3hKDvO"]],[36,"Beer_Bottle2",83,[[16,-403,[7,"41F6rsSIZFwZblbdmUTcuP"],[247],[9],248]],[4,"f1ERcICB9NWY9pi02XS2fz",null,null,null,1,0],[1,0.138,0.008,-0.507],[1,1.1101818181818182,2.8880000000000003,1.1101818181818182]],[32,"Light_Stand-001",83,[[16,-404,[7,"a9fj/QbYFE87RhfvQE+Kb5"],[249],[9],250]],[4,"a257sNrkBHTZxuzB+KVpJc",null,null,null,1,0],[1,-0.009,0.011,0.317],[3,0,0.4293450097784799,0,0.90314055527272],[1,0.36363636363636365,0.36363636363636365,0.36363636363636365],[1,0,50.852,0]],[36,"Beer_Bottle3",83,[[16,-405,[7,"3c7MZzdVxOo60Qq0dahRhf"],[251],[9],252]],[4,"81Xelbl+pMj7yHXrvPveRI",null,null,null,1,0],[1,-0.019,0.008,0.053],[1,1.1101818181818182,2.8880000000000003,1.1101818181818182]],[11,0,{},83,[12,"e892RDjrxNZISjs1LC/QQv",null,-408,[6,"74CimlK/VOU4GlH7cp2Cp4",60,[[1,"Crowd-004",["_name"],115],[2,["_lpos"],115,[1,0.294,-0.03,0.159]],[2,["_lrot"],115,[3,0,0.9950996745551749,0,0.09887688152538514]],[2,["_euler"],115,[1,0,168.651,0]],[2,["_lscale"],115,[1,0.090909,0.090909,0.090909]],[1,3,["startingPoseIndex"],20],[1,true,["shouldGetRandomPose"],20],[1,17,["poses","length"],20],[3,["poses","0"],20,254],[3,["poses","1"],20,255],[3,["poses","2"],20,256],[3,["poses","3"],20,257],[3,["poses","4"],20,258],[1,null,["poses","5"],20],[1,null,["poses","6"],20],[1,null,["poses","7"],20],[1,null,["poses","8"],20],[1,null,["poses","9"],20],[1,null,["poses","10"],20],[1,null,["poses","11"],20],[1,null,["poses","12"],20],[1,null,["poses","13"],20],[1,null,["poses","14"],20],[1,null,["poses","15"],20],[1,null,["poses","16"],20],[1,null,["poses","17"],20],[1,null,["poses","18"],20],[1,null,["poses","19"],20],[25,["_materials","0"],[0,["3ew1Vo2adBpqZ739+OrPkj"]],259],[2,["_lrot"],-406,[3,0,0,0,1]],[2,["_euler"],-407,[1,0,0,0]]]],[[15,["mainRenderer"],[0,["0b8pE5sPNepqN6zgbDPnqa"]]]],253]],[0,["e3hqu0HdxNq4e2nv3hKDvO"]],[11,0,{},83,[12,"e892RDjrxNZISjs1LC/QQv",null,-411,[6,"61ZcfXEnJBEIeEbaEXHfrs",60,[[1,"Crowd-005",["_name"],116],[2,["_lpos"],116,[1,0.103,-0.03,-0.541]],[2,["_lrot"],116,[3,0,0.9833486052257143,0,-0.18172925081186614]],[2,["_euler"],116,[1,0,200.941,0]],[2,["_lscale"],116,[1,0.090909,0.090909,0.090909]],[1,3,["startingPoseIndex"],21],[1,true,["shouldGetRandomPose"],21],[1,17,["poses","length"],21],[3,["poses","0"],21,261],[3,["poses","1"],21,262],[3,["poses","2"],21,263],[3,["poses","3"],21,264],[3,["poses","4"],21,265],[1,null,["poses","5"],21],[1,null,["poses","6"],21],[1,null,["poses","7"],21],[1,null,["poses","8"],21],[1,null,["poses","9"],21],[1,null,["poses","10"],21],[1,null,["poses","11"],21],[1,null,["poses","12"],21],[1,null,["poses","13"],21],[1,null,["poses","14"],21],[1,null,["poses","15"],21],[1,null,["poses","16"],21],[1,null,["poses","17"],21],[1,null,["poses","18"],21],[1,null,["poses","19"],21],[25,["_materials","0"],[0,["3ew1Vo2adBpqZ739+OrPkj"]],266],[2,["_lrot"],-409,[3,0,0,0,1]],[2,["_euler"],-410,[1,0,0,0]]]],[[15,["mainRenderer"],[0,["0b8pE5sPNepqN6zgbDPnqa"]]]],260]],[0,["e3hqu0HdxNq4e2nv3hKDvO"]],[32,"Beer_Bottle3",70,[[16,-412,[7,"e0Xbraey1P2K6X/yz8UZ6c"],[267],[9],268]],[4,"4ccPMgJCJAD6FCCKJDH5jR",null,null,null,1,0],[1,0.059,-0.011,0.029],[3,-0.5913096483635824,0,0,0.8064446042674825],[1,1.1101818181818182,2.8880000000000003,1.1101818181818182],[1,-72.5,0,0]],[32,"Beer_Bottle4",70,[[16,-413,[7,"53nASOc1hOeL9nIGYttJlg"],[269],[9],270]],[4,"e7hzTdKxVBFpt3KxArDBVK",null,null,null,1,0],[1,-0.188,0.008,-0.302],[3,-0.4415058527917452,0,0,0.8972583696743285],[1,1.1101818181818182,2.8880000000000003,1.1101818181818182],[1,-52.4,0,0]],[32,"Studio_Camera-001",70,[[16,-414,[7,"64a4c8rfhEw6dMvSKE2Irn"],[271],[9],272]],[4,"05MVqkQ69NBLYxY9H2Uljd",null,null,null,1,0],[1,-0.375,0.011,0.585],[3,0,0.6333065863819719,0,0.7739010063601248],[1,0.36363636363636365,0.36363636363636365,0.36363636363636365],[1,0,78.589,0]],[11,0,{},70,[12,"e892RDjrxNZISjs1LC/QQv",null,-417,[6,"84SSHZWWlOG7lu+lMJ2maL",60,[[1,"Crowd-004",["_name"],117],[2,["_lpos"],117,[1,0.146,-0.03,0.224]],[2,["_lrot"],117,[3,0,0.9907466560919261,0,-0.13572421833507323]],[2,["_euler"],117,[1,0,195.601,0]],[2,["_lscale"],117,[1,0.090909,0.090909,0.090909]],[1,3,["startingPoseIndex"],22],[1,true,["shouldGetRandomPose"],22],[1,17,["poses","length"],22],[3,["poses","0"],22,274],[3,["poses","1"],22,275],[3,["poses","2"],22,276],[3,["poses","3"],22,277],[3,["poses","4"],22,278],[1,null,["poses","5"],22],[1,null,["poses","6"],22],[1,null,["poses","7"],22],[1,null,["poses","8"],22],[1,null,["poses","9"],22],[1,null,["poses","10"],22],[1,null,["poses","11"],22],[1,null,["poses","12"],22],[1,null,["poses","13"],22],[1,null,["poses","14"],22],[1,null,["poses","15"],22],[1,null,["poses","16"],22],[1,null,["poses","17"],22],[1,null,["poses","18"],22],[1,null,["poses","19"],22],[25,["_materials","0"],[0,["3ew1Vo2adBpqZ739+OrPkj"]],279],[2,["_lrot"],-415,[3,0,0,0,1]],[2,["_euler"],-416,[1,0,0,0]]]],[[15,["mainRenderer"],[0,["0b8pE5sPNepqN6zgbDPnqa"]]]],273]],[0,["e3hqu0HdxNq4e2nv3hKDvO"]],[11,0,{},70,[12,"e892RDjrxNZISjs1LC/QQv",null,-420,[6,"2foEaagzVFtYdrV1t+MgZI",60,[[1,"Crowd-005",["_name"],118],[2,["_lpos"],118,[1,-0.122,-0.03,-0.407]],[2,["_lrot"],118,[3,0,0.9749051595675984,0,-0.22262059619108826]],[2,["_euler"],118,[1,0,205.726,0]],[2,["_lscale"],118,[1,0.090909,0.090909,0.090909]],[1,3,["startingPoseIndex"],23],[1,true,["shouldGetRandomPose"],23],[1,17,["poses","length"],23],[3,["poses","0"],23,281],[3,["poses","1"],23,282],[3,["poses","2"],23,283],[3,["poses","3"],23,284],[3,["poses","4"],23,285],[1,null,["poses","5"],23],[1,null,["poses","6"],23],[1,null,["poses","7"],23],[1,null,["poses","8"],23],[1,null,["poses","9"],23],[1,null,["poses","10"],23],[1,null,["poses","11"],23],[1,null,["poses","12"],23],[1,null,["poses","13"],23],[1,null,["poses","14"],23],[1,null,["poses","15"],23],[1,null,["poses","16"],23],[1,null,["poses","17"],23],[1,null,["poses","18"],23],[1,null,["poses","19"],23],[25,["_materials","0"],[0,["3ew1Vo2adBpqZ739+OrPkj"]],286],[2,["_lrot"],-418,[3,0,0,0,1]],[2,["_euler"],-419,[1,0,0,0]]]],[[15,["mainRenderer"],[0,["0b8pE5sPNepqN6zgbDPnqa"]]]],280]],[0,["e3hqu0HdxNq4e2nv3hKDvO"]],[11,0,{},70,[12,"e892RDjrxNZISjs1LC/QQv",null,-423,[6,"ccfOVvaa1Gr5y4hwsRSdHF",60,[[1,"Crowd-006",["_name"],119],[2,["_lpos"],119,[1,-0.207,-0.03,-0.333]],[2,["_lrot"],119,[3,0,0.9964459693107395,0,-0.0842343768563694]],[2,["_euler"],119,[1,0,189.664,0]],[2,["_lscale"],119,[1,0.090909,0.090909,0.090909]],[1,3,["startingPoseIndex"],24],[1,true,["shouldGetRandomPose"],24],[1,17,["poses","length"],24],[3,["poses","0"],24,288],[3,["poses","1"],24,289],[3,["poses","2"],24,290],[3,["poses","3"],24,291],[3,["poses","4"],24,292],[1,null,["poses","5"],24],[1,null,["poses","6"],24],[1,null,["poses","7"],24],[1,null,["poses","8"],24],[1,null,["poses","9"],24],[1,null,["poses","10"],24],[1,null,["poses","11"],24],[1,null,["poses","12"],24],[1,null,["poses","13"],24],[1,null,["poses","14"],24],[1,null,["poses","15"],24],[1,null,["poses","16"],24],[1,null,["poses","17"],24],[1,null,["poses","18"],24],[1,null,["poses","19"],24],[25,["_materials","0"],[0,["3ew1Vo2adBpqZ739+OrPkj"]],293],[2,["_lrot"],-421,[3,0,0,0,1]],[2,["_euler"],-422,[1,0,0,0]]]],[[15,["mainRenderer"],[0,["0b8pE5sPNepqN6zgbDPnqa"]]]],287]],[0,["e3hqu0HdxNq4e2nv3hKDvO"]],[32,"Beer_Bottle3",84,[[16,-424,[7,"25/ZhE8CRC778SrDUcq3aI"],[294],[9],295]],[4,"dfNibg1hZN7JrKRGGGTM69",null,null,null,1,0],[1,0.059,-0.011,0.029],[3,-0.5913096483635824,0,0,0.8064446042674825],[1,1.1101818181818182,2.8880000000000003,1.1101818181818182],[1,-72.5,0,0]],[32,"Beer_Bottle4",84,[[16,-425,[7,"49ahH5y25Cl6S2eZ7YGokJ"],[296],[9],297]],[4,"2as7NmKWpJbp35egn235nQ",null,null,null,1,0],[1,-0.342,0.008,0.387],[3,-0.4415058527917452,0,0,0.8972583696743285],[1,1.1101818181818182,2.8880000000000003,1.1101818181818182],[1,-52.4,0,0]],[11,0,{},84,[12,"e892RDjrxNZISjs1LC/QQv",null,-428,[6,"2edZd0UTRPn4MfvYAUbujf",60,[[1,"Crowd-004",["_name"],120],[2,["_lpos"],120,[1,0.188,-0.03,0.143]],[2,["_lrot"],120,[3,0,0.979070344711145,0,-0.20352213665151958]],[2,["_euler"],120,[1,0,203.486,0]],[2,["_lscale"],120,[1,0.090909,0.090909,0.090909]],[1,3,["startingPoseIndex"],25],[1,true,["shouldGetRandomPose"],25],[1,17,["poses","length"],25],[3,["poses","0"],25,299],[3,["poses","1"],25,300],[3,["poses","2"],25,301],[3,["poses","3"],25,302],[3,["poses","4"],25,303],[1,null,["poses","5"],25],[1,null,["poses","6"],25],[1,null,["poses","7"],25],[1,null,["poses","8"],25],[1,null,["poses","9"],25],[1,null,["poses","10"],25],[1,null,["poses","11"],25],[1,null,["poses","12"],25],[1,null,["poses","13"],25],[1,null,["poses","14"],25],[1,null,["poses","15"],25],[1,null,["poses","16"],25],[1,null,["poses","17"],25],[1,null,["poses","18"],25],[1,null,["poses","19"],25],[25,["_materials","0"],[0,["3ew1Vo2adBpqZ739+OrPkj"]],304],[2,["_lrot"],-426,[3,0,0,0,1]],[2,["_euler"],-427,[1,0,0,0]]]],[[15,["mainRenderer"],[0,["0b8pE5sPNepqN6zgbDPnqa"]]]],298]],[0,["e3hqu0HdxNq4e2nv3hKDvO"]],[11,0,{},84,[12,"e892RDjrxNZISjs1LC/QQv",null,-431,[6,"1eSFpV84tMWJV0EQCNBh5t",60,[[1,"Crowd-005",["_name"],121],[2,["_lpos"],121,[1,-0.328,-0.03,0.372]],[2,["_lrot"],121,[3,0,0.9576241594495412,0,-0.2880207791784469]],[2,["_euler"],121,[1,0,213.479,0]],[2,["_lscale"],121,[1,0.090909,0.090909,0.090909]],[1,3,["startingPoseIndex"],26],[1,true,["shouldGetRandomPose"],26],[1,17,["poses","length"],26],[3,["poses","0"],26,306],[3,["poses","1"],26,307],[3,["poses","2"],26,308],[3,["poses","3"],26,309],[3,["poses","4"],26,310],[1,null,["poses","5"],26],[1,null,["poses","6"],26],[1,null,["poses","7"],26],[1,null,["poses","8"],26],[1,null,["poses","9"],26],[1,null,["poses","10"],26],[1,null,["poses","11"],26],[1,null,["poses","12"],26],[1,null,["poses","13"],26],[1,null,["poses","14"],26],[1,null,["poses","15"],26],[1,null,["poses","16"],26],[1,null,["poses","17"],26],[1,null,["poses","18"],26],[1,null,["poses","19"],26],[25,["_materials","0"],[0,["3ew1Vo2adBpqZ739+OrPkj"]],311],[2,["_lrot"],-429,[3,0,0,0,1]],[2,["_euler"],-430,[1,0,0,0]]]],[[15,["mainRenderer"],[0,["0b8pE5sPNepqN6zgbDPnqa"]]]],305]],[0,["e3hqu0HdxNq4e2nv3hKDvO"]],[11,0,{},84,[12,"e892RDjrxNZISjs1LC/QQv",null,-434,[6,"c6cOXmP4dDA7K98okfV+Wc",60,[[1,"Crowd-006",["_name"],122],[2,["_lpos"],122,[1,-0.053,-0.03,-0.474]],[2,["_lrot"],122,[3,0,0.9953601625724079,0,0.09621926399546865]],[2,["_euler"],122,[1,0,168.957,0]],[2,["_lscale"],122,[1,0.090909,0.090909,0.090909]],[1,3,["startingPoseIndex"],27],[1,true,["shouldGetRandomPose"],27],[1,17,["poses","length"],27],[3,["poses","0"],27,313],[3,["poses","1"],27,314],[3,["poses","2"],27,315],[3,["poses","3"],27,316],[3,["poses","4"],27,317],[1,null,["poses","5"],27],[1,null,["poses","6"],27],[1,null,["poses","7"],27],[1,null,["poses","8"],27],[1,null,["poses","9"],27],[1,null,["poses","10"],27],[1,null,["poses","11"],27],[1,null,["poses","12"],27],[1,null,["poses","13"],27],[1,null,["poses","14"],27],[1,null,["poses","15"],27],[1,null,["poses","16"],27],[1,null,["poses","17"],27],[1,null,["poses","18"],27],[1,null,["poses","19"],27],[25,["_materials","0"],[0,["3ew1Vo2adBpqZ739+OrPkj"]],318],[2,["_lrot"],-432,[3,0,0,0,1]],[2,["_euler"],-433,[1,0,0,0]]]],[[15,["mainRenderer"],[0,["0b8pE5sPNepqN6zgbDPnqa"]]]],312]],[0,["e3hqu0HdxNq4e2nv3hKDvO"]],[37,"table",110,[[16,-435,[7,"deTNnoNB9NTLMva2adQnDU"],[319],[9],320]],[4,"10ESfIMLBIwaVSir/zn4LP",null,null,null,1,0],[1,0.4636607225537302,-0.010000000000000035,-4.688638441085814]],[37,"table",110,[[16,-436,[7,"b2Z19kY7FAf55bh/jPUWEl"],[321],[9],322]],[4,"c5gDeVNphK07gBWy+m5mVg",null,null,null,1,0],[1,0.4636607225537302,-0.010000000000000035,-4.688638441085814]],[11,0,{},110,[12,"e892RDjrxNZISjs1LC/QQv",null,-439,[6,"dfNginxFNAkJ5GXAZGl/IM",60,[[1,"Crowd-001",["_name"],123],[2,["_lpos"],123,[1,-0.047,-0.039,-0.149]],[2,["_lrot"],123,[3,0,0.9770808827804184,0,-0.21286838305638117]],[2,["_euler"],123,[1,0,204.581,0]],[2,["_lscale"],123,[1,0.090909,0.090909,0.090909]],[1,3,["startingPoseIndex"],28],[1,true,["shouldGetRandomPose"],28],[1,17,["poses","length"],28],[3,["poses","0"],28,324],[3,["poses","1"],28,325],[3,["poses","2"],28,326],[3,["poses","3"],28,327],[3,["poses","4"],28,328],[1,null,["poses","5"],28],[1,null,["poses","6"],28],[1,null,["poses","7"],28],[1,null,["poses","8"],28],[1,null,["poses","9"],28],[1,null,["poses","10"],28],[1,null,["poses","11"],28],[1,null,["poses","12"],28],[1,null,["poses","13"],28],[1,null,["poses","14"],28],[1,null,["poses","15"],28],[1,null,["poses","16"],28],[1,null,["poses","17"],28],[1,null,["poses","18"],28],[1,null,["poses","19"],28],[25,["_materials","0"],[0,["3ew1Vo2adBpqZ739+OrPkj"]],329],[2,["_lrot"],-437,[3,0,0,0,1]],[2,["_euler"],-438,[1,0,0,0]]]],[[15,["mainRenderer"],[0,["0b8pE5sPNepqN6zgbDPnqa"]]]],323]],[0,["e3hqu0HdxNq4e2nv3hKDvO"]],[0,["e3hqu0HdxNq4e2nv3hKDvO"]],[36,"Beer_Bottle5",85,[[16,-440,[7,"c6JQL9MHlPfb60JC52BY90"],[338],[9],339]],[4,"7fhKCiwz9AOZ7ONBGxrmA0",null,null,null,1,0],[1,-0.017,0.008,-0.001],[1,1.1101818181818182,2.8880000000000003,1.1101818181818184]],[36,"Beer_Bottle6",85,[[16,-441,[7,"62Em35CyJIipi46b9puAUI"],[340],[9],341]],[4,"185S6iG9RAJoEkBDIQkItD",null,null,null,1,0],[1,0.126,0.008,0.186],[1,1.1101818181818182,2.8880000000000003,1.1101818181818184]],[32,"Amplifier-001",85,[[16,-442,[7,"0fG4NulrhCf6LLNQoYAkyg"],[342],[9],343]],[4,"505zWUpTxN3bLQMiOMWoZM",null,null,null,1,0],[1,-0.188,0.08,-0.344],[3,0,0.48709770525415746,0,0.8733474826986873],[1,15.609465165571734,18.4912109375,9.172158674760299],[1,0,58.3,0]],[11,0,{},85,[12,"e892RDjrxNZISjs1LC/QQv",null,-445,[6,"31JB2f5edOHKWDaTxYTuzp",61,[[1,"Crowd",["_name"],126],[2,["_lpos"],126,[1,0.184,-0.039,-0.135]],[2,["_lrot"],126,[3,0,0.8640684144377991,0,0.5033743886720378]],[2,["_euler"],126,[1,0,119.553,0]],[2,["_lscale"],126,[1,0.090909,0.090909,0.090909]],[1,3,["startingPoseIndex"],30],[1,true,["shouldGetRandomPose"],30],[1,17,["poses","length"],30],[3,["poses","0"],30,345],[3,["poses","1"],30,346],[3,["poses","2"],30,347],[3,["poses","3"],30,348],[3,["poses","4"],30,349],[1,null,["poses","5"],30],[1,null,["poses","6"],30],[1,null,["poses","7"],30],[1,null,["poses","8"],30],[1,null,["poses","9"],30],[1,null,["poses","10"],30],[1,null,["poses","11"],30],[1,null,["poses","12"],30],[1,null,["poses","13"],30],[1,null,["poses","14"],30],[1,null,["poses","15"],30],[1,null,["poses","16"],30],[1,null,["poses","17"],30],[1,null,["poses","18"],30],[1,null,["poses","19"],30],[25,["_materials","0"],[0,["3ew1Vo2adBpqZ739+OrPkj"]],350],[2,["_lrot"],-443,[3,0,0,0,1]],[2,["_euler"],-444,[1,0,0,0]]]],[[15,["mainRenderer"],[0,["0b8pE5sPNepqN6zgbDPnqa"]]]],344]],[0,["e3hqu0HdxNq4e2nv3hKDvO"]],[11,0,{},85,[12,"e892RDjrxNZISjs1LC/QQv",null,-448,[6,"6amtltDv9MurJyjYwudMrT",61,[[1,"Crowd-003",["_name"],127],[2,["_lpos"],127,[1,-0.014,-0.039,-0.07]],[2,["_lrot"],127,[3,0,0.8106654630686608,0,0.5855096130617103]],[2,["_euler"],127,[1,0,108.322,0]],[2,["_lscale"],127,[1,0.090909,0.090909,0.090909]],[1,3,["startingPoseIndex"],31],[1,true,["shouldGetRandomPose"],31],[1,17,["poses","length"],31],[3,["poses","0"],31,352],[3,["poses","1"],31,353],[3,["poses","2"],31,354],[3,["poses","3"],31,355],[3,["poses","4"],31,356],[1,null,["poses","5"],31],[1,null,["poses","6"],31],[1,null,["poses","7"],31],[1,null,["poses","8"],31],[1,null,["poses","9"],31],[1,null,["poses","10"],31],[1,null,["poses","11"],31],[1,null,["poses","12"],31],[1,null,["poses","13"],31],[1,null,["poses","14"],31],[1,null,["poses","15"],31],[1,null,["poses","16"],31],[1,null,["poses","17"],31],[1,null,["poses","18"],31],[1,null,["poses","19"],31],[25,["_materials","0"],[0,["3ew1Vo2adBpqZ739+OrPkj"]],357],[2,["_lrot"],-446,[3,0,0,0,1]],[2,["_euler"],-447,[1,0,0,0]]]],[[15,["mainRenderer"],[0,["0b8pE5sPNepqN6zgbDPnqa"]]]],351]],[0,["e3hqu0HdxNq4e2nv3hKDvO"]],[36,"Beer_Bottle2",87,[[16,-449,[7,"04bDtH8hhNAZlP0i3vn9r0"],[368],[9],369]],[4,"d8pL9OUC9IxK5ajeP4dHWc",null,null,null,1,0],[1,0.122,0.008,0.382],[1,1.1101818181818182,2.8880000000000003,1.1101818181818182]],[37,"table",87,[[16,-450,[7,"76r1HscolOn40AITIFbVUI"],[370],[9],371]],[4,"06Jf36UaBFBbBq3F2xl2sW",null,null,null,1,0],[1,0.644,-0.01,-4.483]],[37,"table-001",87,[[16,-451,[7,"49GzrBLzBJqZfSASKI6Ex/"],[372],[9],373]],[4,"8dJAPhFVxILItJwUX+1+DJ",null,null,null,1,0],[1,0.644,-0.01,-4.483]],[11,0,{},87,[12,"e892RDjrxNZISjs1LC/QQv",null,-454,[6,"636R57dB5AbK6hwkkdk6XA",61,[[1,"Crowd-003",["_name"],128],[2,["_lpos"],128,[1,0.17,-0.039,0.392]],[2,["_lrot"],128,[3,0,0.9648790802633002,0,0.26269442413238997]],[2,["_euler"],128,[1,0,149.54,0]],[2,["_lscale"],128,[1,0.090909,0.090909,0.090909]],[1,3,["startingPoseIndex"],32],[1,true,["shouldGetRandomPose"],32],[1,17,["poses","length"],32],[3,["poses","0"],32,375],[3,["poses","1"],32,376],[3,["poses","2"],32,377],[3,["poses","3"],32,378],[3,["poses","4"],32,379],[1,null,["poses","5"],32],[1,null,["poses","6"],32],[1,null,["poses","7"],32],[1,null,["poses","8"],32],[1,null,["poses","9"],32],[1,null,["poses","10"],32],[1,null,["poses","11"],32],[1,null,["poses","12"],32],[1,null,["poses","13"],32],[1,null,["poses","14"],32],[1,null,["poses","15"],32],[1,null,["poses","16"],32],[1,null,["poses","17"],32],[1,null,["poses","18"],32],[1,null,["poses","19"],32],[25,["_materials","0"],[0,["3ew1Vo2adBpqZ739+OrPkj"]],380],[2,["_lrot"],-452,[3,0,0,0,1]],[2,["_euler"],-453,[1,0,0,0]]]],[[15,["mainRenderer"],[0,["0b8pE5sPNepqN6zgbDPnqa"]]]],374]],[0,["e3hqu0HdxNq4e2nv3hKDvO"]],[11,0,{},87,[12,"e892RDjrxNZISjs1LC/QQv",null,-457,[6,"c9bDkcD/xJG7ht7cVmgXU7",61,[[1,"Crowd-004",["_name"],129],[2,["_lpos"],129,[1,0.399,-0.03,-0.087]],[2,["_lrot"],129,[3,0,0.9454361528965374,0,0.32580742900706716]],[2,["_euler"],129,[1,0,141.971,0]],[2,["_lscale"],129,[1,0.090909,0.090909,0.090909]],[1,3,["startingPoseIndex"],33],[1,true,["shouldGetRandomPose"],33],[1,17,["poses","length"],33],[3,["poses","0"],33,382],[3,["poses","1"],33,383],[3,["poses","2"],33,384],[3,["poses","3"],33,385],[3,["poses","4"],33,386],[1,null,["poses","5"],33],[1,null,["poses","6"],33],[1,null,["poses","7"],33],[1,null,["poses","8"],33],[1,null,["poses","9"],33],[1,null,["poses","10"],33],[1,null,["poses","11"],33],[1,null,["poses","12"],33],[1,null,["poses","13"],33],[1,null,["poses","14"],33],[1,null,["poses","15"],33],[1,null,["poses","16"],33],[1,null,["poses","17"],33],[1,null,["poses","18"],33],[1,null,["poses","19"],33],[25,["_materials","0"],[0,["3ew1Vo2adBpqZ739+OrPkj"]],387],[2,["_lrot"],-455,[3,0,0,0,1]],[2,["_euler"],-456,[1,0,0,0]]]],[[15,["mainRenderer"],[0,["0b8pE5sPNepqN6zgbDPnqa"]]]],381]],[0,["e3hqu0HdxNq4e2nv3hKDvO"]],[36,"Beer_Bottle2",88,[[16,-458,[7,"41F6rsSIZFwZblbdmUTcuP"],[388],[9],389]],[4,"f1ERcICB9NWY9pi02XS2fz",null,null,null,1,0],[1,0.138,0.008,-0.507],[1,1.1101818181818182,2.8880000000000003,1.1101818181818182]],[32,"Light_Stand-001",88,[[16,-459,[7,"a9fj/QbYFE87RhfvQE+Kb5"],[390],[9],391]],[4,"a257sNrkBHTZxuzB+KVpJc",null,null,null,1,0],[1,-0.009,0.011,0.317],[3,0,0.4293450097784799,0,0.90314055527272],[1,0.36363636363636365,0.36363636363636365,0.36363636363636365],[1,0,50.852,0]],[36,"Beer_Bottle3",88,[[16,-460,[7,"3c7MZzdVxOo60Qq0dahRhf"],[392],[9],393]],[4,"81Xelbl+pMj7yHXrvPveRI",null,null,null,1,0],[1,-0.019,0.008,0.053],[1,1.1101818181818182,2.8880000000000003,1.1101818181818182]],[11,0,{},88,[12,"e892RDjrxNZISjs1LC/QQv",null,-463,[6,"74CimlK/VOU4GlH7cp2Cp4",61,[[1,"Crowd-004",["_name"],130],[2,["_lpos"],130,[1,0.294,-0.03,0.159]],[2,["_lrot"],130,[3,0,0.9805564769921865,0,0.19623708983948895]],[2,["_euler"],130,[1,0,157.366,0]],[2,["_lscale"],130,[1,0.090909,0.090909,0.090909]],[1,3,["startingPoseIndex"],34],[1,true,["shouldGetRandomPose"],34],[1,17,["poses","length"],34],[3,["poses","0"],34,395],[3,["poses","1"],34,396],[3,["poses","2"],34,397],[3,["poses","3"],34,398],[3,["poses","4"],34,399],[1,null,["poses","5"],34],[1,null,["poses","6"],34],[1,null,["poses","7"],34],[1,null,["poses","8"],34],[1,null,["poses","9"],34],[1,null,["poses","10"],34],[1,null,["poses","11"],34],[1,null,["poses","12"],34],[1,null,["poses","13"],34],[1,null,["poses","14"],34],[1,null,["poses","15"],34],[1,null,["poses","16"],34],[1,null,["poses","17"],34],[1,null,["poses","18"],34],[1,null,["poses","19"],34],[25,["_materials","0"],[0,["3ew1Vo2adBpqZ739+OrPkj"]],400],[2,["_lrot"],-461,[3,0,0,0,1]],[2,["_euler"],-462,[1,0,0,0]]]],[[15,["mainRenderer"],[0,["0b8pE5sPNepqN6zgbDPnqa"]]]],394]],[0,["e3hqu0HdxNq4e2nv3hKDvO"]],[11,0,{},88,[12,"e892RDjrxNZISjs1LC/QQv",null,-466,[6,"61ZcfXEnJBEIeEbaEXHfrs",61,[[1,"Crowd-005",["_name"],131],[2,["_lpos"],131,[1,0.103,-0.03,-0.541]],[2,["_lrot"],131,[3,0,0.9511508558020284,0,0.3087264962828246]],[2,["_euler"],131,[1,0,144.035,0]],[2,["_lscale"],131,[1,0.090909,0.090909,0.090909]],[1,3,["startingPoseIndex"],35],[1,true,["shouldGetRandomPose"],35],[1,17,["poses","length"],35],[3,["poses","0"],35,402],[3,["poses","1"],35,403],[3,["poses","2"],35,404],[3,["poses","3"],35,405],[3,["poses","4"],35,406],[1,null,["poses","5"],35],[1,null,["poses","6"],35],[1,null,["poses","7"],35],[1,null,["poses","8"],35],[1,null,["poses","9"],35],[1,null,["poses","10"],35],[1,null,["poses","11"],35],[1,null,["poses","12"],35],[1,null,["poses","13"],35],[1,null,["poses","14"],35],[1,null,["poses","15"],35],[1,null,["poses","16"],35],[1,null,["poses","17"],35],[1,null,["poses","18"],35],[1,null,["poses","19"],35],[25,["_materials","0"],[0,["3ew1Vo2adBpqZ739+OrPkj"]],407],[2,["_lrot"],-464,[3,0,0,0,1]],[2,["_euler"],-465,[1,0,0,0]]]],[[15,["mainRenderer"],[0,["0b8pE5sPNepqN6zgbDPnqa"]]]],401]],[0,["e3hqu0HdxNq4e2nv3hKDvO"]],[32,"Beer_Bottle3",72,[[16,-467,[7,"e0Xbraey1P2K6X/yz8UZ6c"],[408],[9],409]],[4,"4ccPMgJCJAD6FCCKJDH5jR",null,null,null,1,0],[1,0.059,-0.011,0.029],[3,-0.5913096483635824,0,0,0.8064446042674825],[1,1.1101818181818182,2.8880000000000003,1.1101818181818182],[1,-72.5,0,0]],[32,"Beer_Bottle4",72,[[16,-468,[7,"53nASOc1hOeL9nIGYttJlg"],[410],[9],411]],[4,"e7hzTdKxVBFpt3KxArDBVK",null,null,null,1,0],[1,-0.188,0.008,-0.302],[3,-0.4415058527917452,0,0,0.8972583696743285],[1,1.1101818181818182,2.8880000000000003,1.1101818181818182],[1,-52.4,0,0]],[32,"Studio_Camera-001",72,[[16,-469,[7,"64a4c8rfhEw6dMvSKE2Irn"],[412],[9],413]],[4,"05MVqkQ69NBLYxY9H2Uljd",null,null,null,1,0],[1,-0.375,0.011,0.585],[3,0,0.6333065863819719,0,0.7739010063601248],[1,0.36363636363636365,0.36363636363636365,0.36363636363636365],[1,0,78.589,0]],[11,0,{},72,[12,"e892RDjrxNZISjs1LC/QQv",null,-472,[6,"84SSHZWWlOG7lu+lMJ2maL",61,[[1,"Crowd-004",["_name"],132],[2,["_lpos"],132,[1,0.146,-0.03,0.224]],[2,["_lrot"],132,[3,0,0.9864907981486069,0,0.16381668159294582]],[2,["_euler"],132,[1,0,161.143,0]],[2,["_lscale"],132,[1,0.090909,0.090909,0.090909]],[1,3,["startingPoseIndex"],36],[1,true,["shouldGetRandomPose"],36],[1,17,["poses","length"],36],[3,["poses","0"],36,415],[3,["poses","1"],36,416],[3,["poses","2"],36,417],[3,["poses","3"],36,418],[3,["poses","4"],36,419],[1,null,["poses","5"],36],[1,null,["poses","6"],36],[1,null,["poses","7"],36],[1,null,["poses","8"],36],[1,null,["poses","9"],36],[1,null,["poses","10"],36],[1,null,["poses","11"],36],[1,null,["poses","12"],36],[1,null,["poses","13"],36],[1,null,["poses","14"],36],[1,null,["poses","15"],36],[1,null,["poses","16"],36],[1,null,["poses","17"],36],[1,null,["poses","18"],36],[1,null,["poses","19"],36],[25,["_materials","0"],[0,["3ew1Vo2adBpqZ739+OrPkj"]],420],[2,["_lrot"],-470,[3,0,0,0,1]],[2,["_euler"],-471,[1,0,0,0]]]],[[15,["mainRenderer"],[0,["0b8pE5sPNepqN6zgbDPnqa"]]]],414]],[0,["e3hqu0HdxNq4e2nv3hKDvO"]],[11,0,{},72,[12,"e892RDjrxNZISjs1LC/QQv",null,-475,[6,"2foEaagzVFtYdrV1t+MgZI",61,[[1,"Crowd-005",["_name"],133],[2,["_lpos"],133,[1,-0.122,-0.03,-0.407]],[2,["_lrot"],133,[3,0,0.9795050004860918,0,0.20141984515618447]],[2,["_euler"],133,[1,0,156.76,0]],[2,["_lscale"],133,[1,0.090909,0.090909,0.090909]],[1,3,["startingPoseIndex"],37],[1,true,["shouldGetRandomPose"],37],[1,17,["poses","length"],37],[3,["poses","0"],37,422],[3,["poses","1"],37,423],[3,["poses","2"],37,424],[3,["poses","3"],37,425],[3,["poses","4"],37,426],[1,null,["poses","5"],37],[1,null,["poses","6"],37],[1,null,["poses","7"],37],[1,null,["poses","8"],37],[1,null,["poses","9"],37],[1,null,["poses","10"],37],[1,null,["poses","11"],37],[1,null,["poses","12"],37],[1,null,["poses","13"],37],[1,null,["poses","14"],37],[1,null,["poses","15"],37],[1,null,["poses","16"],37],[1,null,["poses","17"],37],[1,null,["poses","18"],37],[1,null,["poses","19"],37],[25,["_materials","0"],[0,["3ew1Vo2adBpqZ739+OrPkj"]],427],[2,["_lrot"],-473,[3,0,0,0,1]],[2,["_euler"],-474,[1,0,0,0]]]],[[15,["mainRenderer"],[0,["0b8pE5sPNepqN6zgbDPnqa"]]]],421]],[0,["e3hqu0HdxNq4e2nv3hKDvO"]],[11,0,{},72,[12,"e892RDjrxNZISjs1LC/QQv",null,-478,[6,"ccfOVvaa1Gr5y4hwsRSdHF",61,[[1,"Crowd-006",["_name"],134],[2,["_lpos"],134,[1,-0.207,-0.03,-0.333]],[2,["_lrot"],134,[3,0,0.980667631196442,0,0.1956808552811424]],[2,["_euler"],134,[1,0,157.431,0]],[2,["_lscale"],134,[1,0.090909,0.090909,0.090909]],[1,3,["startingPoseIndex"],38],[1,true,["shouldGetRandomPose"],38],[1,17,["poses","length"],38],[3,["poses","0"],38,429],[3,["poses","1"],38,430],[3,["poses","2"],38,431],[3,["poses","3"],38,432],[3,["poses","4"],38,433],[1,null,["poses","5"],38],[1,null,["poses","6"],38],[1,null,["poses","7"],38],[1,null,["poses","8"],38],[1,null,["poses","9"],38],[1,null,["poses","10"],38],[1,null,["poses","11"],38],[1,null,["poses","12"],38],[1,null,["poses","13"],38],[1,null,["poses","14"],38],[1,null,["poses","15"],38],[1,null,["poses","16"],38],[1,null,["poses","17"],38],[1,null,["poses","18"],38],[1,null,["poses","19"],38],[25,["_materials","0"],[0,["3ew1Vo2adBpqZ739+OrPkj"]],434],[2,["_lrot"],-476,[3,0,0,0,1]],[2,["_euler"],-477,[1,0,0,0]]]],[[15,["mainRenderer"],[0,["0b8pE5sPNepqN6zgbDPnqa"]]]],428]],[0,["e3hqu0HdxNq4e2nv3hKDvO"]],[32,"Beer_Bottle3",89,[[16,-479,[7,"25/ZhE8CRC778SrDUcq3aI"],[435],[9],436]],[4,"dfNibg1hZN7JrKRGGGTM69",null,null,null,1,0],[1,0.059,-0.011,0.029],[3,-0.5913096483635824,0,0,0.8064446042674825],[1,1.1101818181818182,2.8880000000000003,1.1101818181818182],[1,-72.5,0,0]],[32,"Beer_Bottle4",89,[[16,-480,[7,"49ahH5y25Cl6S2eZ7YGokJ"],[437],[9],438]],[4,"2as7NmKWpJbp35egn235nQ",null,null,null,1,0],[1,-0.342,0.008,0.387],[3,-0.4415058527917452,0,0,0.8972583696743285],[1,1.1101818181818182,2.8880000000000003,1.1101818181818182],[1,-52.4,0,0]],[11,0,{},89,[12,"e892RDjrxNZISjs1LC/QQv",null,-483,[6,"2edZd0UTRPn4MfvYAUbujf",61,[[1,"Crowd-004",["_name"],135],[2,["_lpos"],135,[1,0.188,-0.03,0.143]],[2,["_lrot"],135,[3,0,0.9694410683259211,0,0.245324305854713]],[2,["_euler"],135,[1,0,151.598,0]],[2,["_lscale"],135,[1,0.090909,0.090909,0.090909]],[1,3,["startingPoseIndex"],39],[1,true,["shouldGetRandomPose"],39],[1,17,["poses","length"],39],[3,["poses","0"],39,440],[3,["poses","1"],39,441],[3,["poses","2"],39,442],[3,["poses","3"],39,443],[3,["poses","4"],39,444],[1,null,["poses","5"],39],[1,null,["poses","6"],39],[1,null,["poses","7"],39],[1,null,["poses","8"],39],[1,null,["poses","9"],39],[1,null,["poses","10"],39],[1,null,["poses","11"],39],[1,null,["poses","12"],39],[1,null,["poses","13"],39],[1,null,["poses","14"],39],[1,null,["poses","15"],39],[1,null,["poses","16"],39],[1,null,["poses","17"],39],[1,null,["poses","18"],39],[1,null,["poses","19"],39],[25,["_materials","0"],[0,["3ew1Vo2adBpqZ739+OrPkj"]],445],[2,["_lrot"],-481,[3,0,0,0,1]],[2,["_euler"],-482,[1,0,0,0]]]],[[15,["mainRenderer"],[0,["0b8pE5sPNepqN6zgbDPnqa"]]]],439]],[0,["e3hqu0HdxNq4e2nv3hKDvO"]],[11,0,{},89,[12,"e892RDjrxNZISjs1LC/QQv",null,-486,[6,"1eSFpV84tMWJV0EQCNBh5t",61,[[1,"Crowd-005",["_name"],136],[2,["_lpos"],136,[1,-0.328,-0.03,0.372]],[2,["_lrot"],136,[3,0,0.9783467309331803,0,0.20697264087883527]],[2,["_euler"],136,[1,0,156.11,0]],[2,["_lscale"],136,[1,0.090909,0.090909,0.090909]],[1,3,["startingPoseIndex"],40],[1,true,["shouldGetRandomPose"],40],[1,17,["poses","length"],40],[3,["poses","0"],40,447],[3,["poses","1"],40,448],[3,["poses","2"],40,449],[3,["poses","3"],40,450],[3,["poses","4"],40,451],[1,null,["poses","5"],40],[1,null,["poses","6"],40],[1,null,["poses","7"],40],[1,null,["poses","8"],40],[1,null,["poses","9"],40],[1,null,["poses","10"],40],[1,null,["poses","11"],40],[1,null,["poses","12"],40],[1,null,["poses","13"],40],[1,null,["poses","14"],40],[1,null,["poses","15"],40],[1,null,["poses","16"],40],[1,null,["poses","17"],40],[1,null,["poses","18"],40],[1,null,["poses","19"],40],[25,["_materials","0"],[0,["3ew1Vo2adBpqZ739+OrPkj"]],452],[2,["_lrot"],-484,[3,0,0,0,1]],[2,["_euler"],-485,[1,0,0,0]]]],[[15,["mainRenderer"],[0,["0b8pE5sPNepqN6zgbDPnqa"]]]],446]],[0,["e3hqu0HdxNq4e2nv3hKDvO"]],[11,0,{},89,[12,"e892RDjrxNZISjs1LC/QQv",null,-489,[6,"c6cOXmP4dDA7K98okfV+Wc",61,[[1,"Crowd-006",["_name"],137],[2,["_lpos"],137,[1,-0.053,-0.03,-0.474]],[2,["_lrot"],137,[3,0,0.966573258156584,0,0.25639059385352964]],[2,["_euler"],137,[1,0,150.288,0]],[2,["_lscale"],137,[1,0.090909,0.090909,0.090909]],[1,3,["startingPoseIndex"],41],[1,true,["shouldGetRandomPose"],41],[1,17,["poses","length"],41],[3,["poses","0"],41,454],[3,["poses","1"],41,455],[3,["poses","2"],41,456],[3,["poses","3"],41,457],[3,["poses","4"],41,458],[1,null,["poses","5"],41],[1,null,["poses","6"],41],[1,null,["poses","7"],41],[1,null,["poses","8"],41],[1,null,["poses","9"],41],[1,null,["poses","10"],41],[1,null,["poses","11"],41],[1,null,["poses","12"],41],[1,null,["poses","13"],41],[1,null,["poses","14"],41],[1,null,["poses","15"],41],[1,null,["poses","16"],41],[1,null,["poses","17"],41],[1,null,["poses","18"],41],[1,null,["poses","19"],41],[25,["_materials","0"],[0,["3ew1Vo2adBpqZ739+OrPkj"]],459],[2,["_lrot"],-487,[3,0,0,0,1]],[2,["_euler"],-488,[1,0,0,0]]]],[[15,["mainRenderer"],[0,["0b8pE5sPNepqN6zgbDPnqa"]]]],453]],[0,["e3hqu0HdxNq4e2nv3hKDvO"]],[37,"table",125,[[16,-490,[7,"deTNnoNB9NTLMva2adQnDU"],[460],[9],461]],[4,"10ESfIMLBIwaVSir/zn4LP",null,null,null,1,0],[1,0.4636607225537302,-0.010000000000000035,-4.688638441085814]],[37,"table",125,[[16,-491,[7,"b2Z19kY7FAf55bh/jPUWEl"],[462],[9],463]],[4,"c5gDeVNphK07gBWy+m5mVg",null,null,null,1,0],[1,0.4636607225537302,-0.010000000000000035,-4.688638441085814]],[11,0,{},125,[12,"e892RDjrxNZISjs1LC/QQv",null,-494,[6,"dfNginxFNAkJ5GXAZGl/IM",61,[[1,"Crowd-001",["_name"],138],[2,["_lpos"],138,[1,-0.047,-0.039,-0.149]],[2,["_lrot"],138,[3,0,0.887328954191947,0,0.4611369938018696]],[2,["_euler"],138,[1,0,125.079,0]],[2,["_lscale"],138,[1,0.090909,0.090909,0.090909]],[1,3,["startingPoseIndex"],42],[1,true,["shouldGetRandomPose"],42],[1,17,["poses","length"],42],[3,["poses","0"],42,465],[3,["poses","1"],42,466],[3,["poses","2"],42,467],[3,["poses","3"],42,468],[3,["poses","4"],42,469],[1,null,["poses","5"],42],[1,null,["poses","6"],42],[1,null,["poses","7"],42],[1,null,["poses","8"],42],[1,null,["poses","9"],42],[1,null,["poses","10"],42],[1,null,["poses","11"],42],[1,null,["poses","12"],42],[1,null,["poses","13"],42],[1,null,["poses","14"],42],[1,null,["poses","15"],42],[1,null,["poses","16"],42],[1,null,["poses","17"],42],[1,null,["poses","18"],42],[1,null,["poses","19"],42],[25,["_materials","0"],[0,["3ew1Vo2adBpqZ739+OrPkj"]],470],[2,["_lrot"],-492,[3,0,0,0,1]],[2,["_euler"],-493,[1,0,0,0]]]],[[15,["mainRenderer"],[0,["0b8pE5sPNepqN6zgbDPnqa"]]]],464]],[0,["e3hqu0HdxNq4e2nv3hKDvO"]],[0,["e3hqu0HdxNq4e2nv3hKDvO"]],[36,"Beer_Bottle5",90,[[16,-495,[7,"c6JQL9MHlPfb60JC52BY90"],[481],[9],482]],[4,"7fhKCiwz9AOZ7ONBGxrmA0",null,null,null,1,0],[1,-0.017,0.008,-0.001],[1,1.1101818181818182,2.8880000000000003,1.1101818181818184]],[36,"Beer_Bottle6",90,[[16,-496,[7,"62Em35CyJIipi46b9puAUI"],[483],[9],484]],[4,"185S6iG9RAJoEkBDIQkItD",null,null,null,1,0],[1,0.126,0.008,0.186],[1,1.1101818181818182,2.8880000000000003,1.1101818181818184]],[32,"Amplifier-001",90,[[16,-497,[7,"0fG4NulrhCf6LLNQoYAkyg"],[485],[9],486]],[4,"505zWUpTxN3bLQMiOMWoZM",null,null,null,1,0],[1,-0.188,0.08,-0.344],[3,0,0.48709770525415746,0,0.8733474826986873],[1,15.609465165571734,18.4912109375,9.172158674760299],[1,0,58.3,0]],[11,0,{},90,[12,"e892RDjrxNZISjs1LC/QQv",null,-500,[6,"31JB2f5edOHKWDaTxYTuzp",62,[[1,"Crowd",["_name"],141],[2,["_lpos"],141,[1,0.184,-0.039,-0.135]],[2,["_lrot"],141,[3,0,0.8640684144377991,0,0.5033743886720378]],[2,["_euler"],141,[1,0,119.553,0]],[2,["_lscale"],141,[1,0.090909,0.090909,0.090909]],[1,3,["startingPoseIndex"],44],[1,true,["shouldGetRandomPose"],44],[1,17,["poses","length"],44],[3,["poses","0"],44,488],[3,["poses","1"],44,489],[3,["poses","2"],44,490],[3,["poses","3"],44,491],[3,["poses","4"],44,492],[1,null,["poses","5"],44],[1,null,["poses","6"],44],[1,null,["poses","7"],44],[1,null,["poses","8"],44],[1,null,["poses","9"],44],[1,null,["poses","10"],44],[1,null,["poses","11"],44],[1,null,["poses","12"],44],[1,null,["poses","13"],44],[1,null,["poses","14"],44],[1,null,["poses","15"],44],[1,null,["poses","16"],44],[1,null,["poses","17"],44],[1,null,["poses","18"],44],[1,null,["poses","19"],44],[25,["_materials","0"],[0,["3ew1Vo2adBpqZ739+OrPkj"]],493],[2,["_lrot"],-498,[3,0,0,0,1]],[2,["_euler"],-499,[1,0,0,0]]]],[[15,["mainRenderer"],[0,["0b8pE5sPNepqN6zgbDPnqa"]]]],487]],[0,["e3hqu0HdxNq4e2nv3hKDvO"]],[11,0,{},90,[12,"e892RDjrxNZISjs1LC/QQv",null,-503,[6,"6amtltDv9MurJyjYwudMrT",62,[[1,"Crowd-003",["_name"],142],[2,["_lpos"],142,[1,-0.014,-0.039,-0.07]],[2,["_lrot"],142,[3,0,0.8106654630686608,0,0.5855096130617103]],[2,["_euler"],142,[1,0,108.322,0]],[2,["_lscale"],142,[1,0.090909,0.090909,0.090909]],[1,3,["startingPoseIndex"],45],[1,true,["shouldGetRandomPose"],45],[1,17,["poses","length"],45],[3,["poses","0"],45,495],[3,["poses","1"],45,496],[3,["poses","2"],45,497],[3,["poses","3"],45,498],[3,["poses","4"],45,499],[1,null,["poses","5"],45],[1,null,["poses","6"],45],[1,null,["poses","7"],45],[1,null,["poses","8"],45],[1,null,["poses","9"],45],[1,null,["poses","10"],45],[1,null,["poses","11"],45],[1,null,["poses","12"],45],[1,null,["poses","13"],45],[1,null,["poses","14"],45],[1,null,["poses","15"],45],[1,null,["poses","16"],45],[1,null,["poses","17"],45],[1,null,["poses","18"],45],[1,null,["poses","19"],45],[25,["_materials","0"],[0,["3ew1Vo2adBpqZ739+OrPkj"]],500],[2,["_lrot"],-501,[3,0,0,0,1]],[2,["_euler"],-502,[1,0,0,0]]]],[[15,["mainRenderer"],[0,["0b8pE5sPNepqN6zgbDPnqa"]]]],494]],[0,["e3hqu0HdxNq4e2nv3hKDvO"]],[36,"Beer_Bottle2",92,[[16,-504,[7,"04bDtH8hhNAZlP0i3vn9r0"],[511],[9],512]],[4,"d8pL9OUC9IxK5ajeP4dHWc",null,null,null,1,0],[1,0.122,0.008,0.382],[1,1.1101818181818182,2.8880000000000003,1.1101818181818182]],[37,"table",92,[[16,-505,[7,"76r1HscolOn40AITIFbVUI"],[513],[9],514]],[4,"06Jf36UaBFBbBq3F2xl2sW",null,null,null,1,0],[1,0.644,-0.01,-4.483]],[37,"table-001",92,[[16,-506,[7,"49GzrBLzBJqZfSASKI6Ex/"],[515],[9],516]],[4,"8dJAPhFVxILItJwUX+1+DJ",null,null,null,1,0],[1,0.644,-0.01,-4.483]],[11,0,{},92,[12,"e892RDjrxNZISjs1LC/QQv",null,-509,[6,"636R57dB5AbK6hwkkdk6XA",62,[[1,"Crowd-003",["_name"],143],[2,["_lpos"],143,[1,0.17,-0.039,0.392]],[2,["_lrot"],143,[3,0,0.9648790802633002,0,0.26269442413238997]],[2,["_euler"],143,[1,0,149.54,0]],[2,["_lscale"],143,[1,0.090909,0.090909,0.090909]],[1,3,["startingPoseIndex"],46],[1,true,["shouldGetRandomPose"],46],[1,17,["poses","length"],46],[3,["poses","0"],46,518],[3,["poses","1"],46,519],[3,["poses","2"],46,520],[3,["poses","3"],46,521],[3,["poses","4"],46,522],[1,null,["poses","5"],46],[1,null,["poses","6"],46],[1,null,["poses","7"],46],[1,null,["poses","8"],46],[1,null,["poses","9"],46],[1,null,["poses","10"],46],[1,null,["poses","11"],46],[1,null,["poses","12"],46],[1,null,["poses","13"],46],[1,null,["poses","14"],46],[1,null,["poses","15"],46],[1,null,["poses","16"],46],[1,null,["poses","17"],46],[1,null,["poses","18"],46],[1,null,["poses","19"],46],[25,["_materials","0"],[0,["3ew1Vo2adBpqZ739+OrPkj"]],523],[2,["_lrot"],-507,[3,0,0,0,1]],[2,["_euler"],-508,[1,0,0,0]]]],[[15,["mainRenderer"],[0,["0b8pE5sPNepqN6zgbDPnqa"]]]],517]],[0,["e3hqu0HdxNq4e2nv3hKDvO"]],[11,0,{},92,[12,"e892RDjrxNZISjs1LC/QQv",null,-512,[6,"c9bDkcD/xJG7ht7cVmgXU7",62,[[1,"Crowd-004",["_name"],144],[2,["_lpos"],144,[1,0.399,-0.03,-0.087]],[2,["_lrot"],144,[3,0,0.9454361528965374,0,0.32580742900706716]],[2,["_euler"],144,[1,0,141.971,0]],[2,["_lscale"],144,[1,0.090909,0.090909,0.090909]],[1,3,["startingPoseIndex"],47],[1,true,["shouldGetRandomPose"],47],[1,17,["poses","length"],47],[3,["poses","0"],47,525],[3,["poses","1"],47,526],[3,["poses","2"],47,527],[3,["poses","3"],47,528],[3,["poses","4"],47,529],[1,null,["poses","5"],47],[1,null,["poses","6"],47],[1,null,["poses","7"],47],[1,null,["poses","8"],47],[1,null,["poses","9"],47],[1,null,["poses","10"],47],[1,null,["poses","11"],47],[1,null,["poses","12"],47],[1,null,["poses","13"],47],[1,null,["poses","14"],47],[1,null,["poses","15"],47],[1,null,["poses","16"],47],[1,null,["poses","17"],47],[1,null,["poses","18"],47],[1,null,["poses","19"],47],[25,["_materials","0"],[0,["3ew1Vo2adBpqZ739+OrPkj"]],530],[2,["_lrot"],-510,[3,0,0,0,1]],[2,["_euler"],-511,[1,0,0,0]]]],[[15,["mainRenderer"],[0,["0b8pE5sPNepqN6zgbDPnqa"]]]],524]],[0,["e3hqu0HdxNq4e2nv3hKDvO"]],[36,"Beer_Bottle2",93,[[16,-513,[7,"41F6rsSIZFwZblbdmUTcuP"],[531],[9],532]],[4,"f1ERcICB9NWY9pi02XS2fz",null,null,null,1,0],[1,0.138,0.008,-0.507],[1,1.1101818181818182,2.8880000000000003,1.1101818181818182]],[32,"Light_Stand-001",93,[[16,-514,[7,"a9fj/QbYFE87RhfvQE+Kb5"],[533],[9],534]],[4,"a257sNrkBHTZxuzB+KVpJc",null,null,null,1,0],[1,-0.009,0.011,0.317],[3,0,0.4293450097784799,0,0.90314055527272],[1,0.36363636363636365,0.36363636363636365,0.36363636363636365],[1,0,50.852,0]],[36,"Beer_Bottle3",93,[[16,-515,[7,"3c7MZzdVxOo60Qq0dahRhf"],[535],[9],536]],[4,"81Xelbl+pMj7yHXrvPveRI",null,null,null,1,0],[1,-0.019,0.008,0.053],[1,1.1101818181818182,2.8880000000000003,1.1101818181818182]],[11,0,{},93,[12,"e892RDjrxNZISjs1LC/QQv",null,-518,[6,"74CimlK/VOU4GlH7cp2Cp4",62,[[1,"Crowd-004",["_name"],145],[2,["_lpos"],145,[1,0.294,-0.03,0.159]],[2,["_lrot"],145,[3,0,0.9805564769921865,0,0.19623708983948895]],[2,["_euler"],145,[1,0,157.366,0]],[2,["_lscale"],145,[1,0.090909,0.090909,0.090909]],[1,3,["startingPoseIndex"],48],[1,true,["shouldGetRandomPose"],48],[1,17,["poses","length"],48],[3,["poses","0"],48,538],[3,["poses","1"],48,539],[3,["poses","2"],48,540],[3,["poses","3"],48,541],[3,["poses","4"],48,542],[1,null,["poses","5"],48],[1,null,["poses","6"],48],[1,null,["poses","7"],48],[1,null,["poses","8"],48],[1,null,["poses","9"],48],[1,null,["poses","10"],48],[1,null,["poses","11"],48],[1,null,["poses","12"],48],[1,null,["poses","13"],48],[1,null,["poses","14"],48],[1,null,["poses","15"],48],[1,null,["poses","16"],48],[1,null,["poses","17"],48],[1,null,["poses","18"],48],[1,null,["poses","19"],48],[25,["_materials","0"],[0,["3ew1Vo2adBpqZ739+OrPkj"]],543],[2,["_lrot"],-516,[3,0,0,0,1]],[2,["_euler"],-517,[1,0,0,0]]]],[[15,["mainRenderer"],[0,["0b8pE5sPNepqN6zgbDPnqa"]]]],537]],[0,["e3hqu0HdxNq4e2nv3hKDvO"]],[11,0,{},93,[12,"e892RDjrxNZISjs1LC/QQv",null,-521,[6,"61ZcfXEnJBEIeEbaEXHfrs",62,[[1,"Crowd-005",["_name"],146],[2,["_lpos"],146,[1,0.103,-0.03,-0.541]],[2,["_lrot"],146,[3,0,0.9511508558020284,0,0.3087264962828246]],[2,["_euler"],146,[1,0,144.035,0]],[2,["_lscale"],146,[1,0.090909,0.090909,0.090909]],[1,3,["startingPoseIndex"],49],[1,true,["shouldGetRandomPose"],49],[1,17,["poses","length"],49],[3,["poses","0"],49,545],[3,["poses","1"],49,546],[3,["poses","2"],49,547],[3,["poses","3"],49,548],[3,["poses","4"],49,549],[1,null,["poses","5"],49],[1,null,["poses","6"],49],[1,null,["poses","7"],49],[1,null,["poses","8"],49],[1,null,["poses","9"],49],[1,null,["poses","10"],49],[1,null,["poses","11"],49],[1,null,["poses","12"],49],[1,null,["poses","13"],49],[1,null,["poses","14"],49],[1,null,["poses","15"],49],[1,null,["poses","16"],49],[1,null,["poses","17"],49],[1,null,["poses","18"],49],[1,null,["poses","19"],49],[25,["_materials","0"],[0,["3ew1Vo2adBpqZ739+OrPkj"]],550],[2,["_lrot"],-519,[3,0,0,0,1]],[2,["_euler"],-520,[1,0,0,0]]]],[[15,["mainRenderer"],[0,["0b8pE5sPNepqN6zgbDPnqa"]]]],544]],[0,["e3hqu0HdxNq4e2nv3hKDvO"]],[32,"Beer_Bottle3",74,[[16,-522,[7,"e0Xbraey1P2K6X/yz8UZ6c"],[551],[9],552]],[4,"4ccPMgJCJAD6FCCKJDH5jR",null,null,null,1,0],[1,0.059,-0.011,0.029],[3,-0.5913096483635824,0,0,0.8064446042674825],[1,1.1101818181818182,2.8880000000000003,1.1101818181818182],[1,-72.5,0,0]],[32,"Beer_Bottle4",74,[[16,-523,[7,"53nASOc1hOeL9nIGYttJlg"],[553],[9],554]],[4,"e7hzTdKxVBFpt3KxArDBVK",null,null,null,1,0],[1,-0.188,0.008,-0.302],[3,-0.4415058527917452,0,0,0.8972583696743285],[1,1.1101818181818182,2.8880000000000003,1.1101818181818182],[1,-52.4,0,0]],[32,"Studio_Camera-001",74,[[16,-524,[7,"64a4c8rfhEw6dMvSKE2Irn"],[555],[9],556]],[4,"05MVqkQ69NBLYxY9H2Uljd",null,null,null,1,0],[1,-0.375,0.011,0.585],[3,0,0.6333065863819719,0,0.7739010063601248],[1,0.36363636363636365,0.36363636363636365,0.36363636363636365],[1,0,78.589,0]],[11,0,{},74,[12,"e892RDjrxNZISjs1LC/QQv",null,-527,[6,"84SSHZWWlOG7lu+lMJ2maL",62,[[1,"Crowd-004",["_name"],147],[2,["_lpos"],147,[1,0.146,-0.03,0.224]],[2,["_lrot"],147,[3,0,0.9864907981486069,0,0.16381668159294582]],[2,["_euler"],147,[1,0,161.143,0]],[2,["_lscale"],147,[1,0.090909,0.090909,0.090909]],[1,3,["startingPoseIndex"],50],[1,true,["shouldGetRandomPose"],50],[1,17,["poses","length"],50],[3,["poses","0"],50,558],[3,["poses","1"],50,559],[3,["poses","2"],50,560],[3,["poses","3"],50,561],[3,["poses","4"],50,562],[1,null,["poses","5"],50],[1,null,["poses","6"],50],[1,null,["poses","7"],50],[1,null,["poses","8"],50],[1,null,["poses","9"],50],[1,null,["poses","10"],50],[1,null,["poses","11"],50],[1,null,["poses","12"],50],[1,null,["poses","13"],50],[1,null,["poses","14"],50],[1,null,["poses","15"],50],[1,null,["poses","16"],50],[1,null,["poses","17"],50],[1,null,["poses","18"],50],[1,null,["poses","19"],50],[25,["_materials","0"],[0,["3ew1Vo2adBpqZ739+OrPkj"]],563],[2,["_lrot"],-525,[3,0,0,0,1]],[2,["_euler"],-526,[1,0,0,0]]]],[[15,["mainRenderer"],[0,["0b8pE5sPNepqN6zgbDPnqa"]]]],557]],[0,["e3hqu0HdxNq4e2nv3hKDvO"]],[11,0,{},74,[12,"e892RDjrxNZISjs1LC/QQv",null,-530,[6,"2foEaagzVFtYdrV1t+MgZI",62,[[1,"Crowd-005",["_name"],148],[2,["_lpos"],148,[1,-0.122,-0.03,-0.407]],[2,["_lrot"],148,[3,0,0.9795050004860918,0,0.20141984515618447]],[2,["_euler"],148,[1,0,156.76,0]],[2,["_lscale"],148,[1,0.090909,0.090909,0.090909]],[1,3,["startingPoseIndex"],51],[1,true,["shouldGetRandomPose"],51],[1,17,["poses","length"],51],[3,["poses","0"],51,565],[3,["poses","1"],51,566],[3,["poses","2"],51,567],[3,["poses","3"],51,568],[3,["poses","4"],51,569],[1,null,["poses","5"],51],[1,null,["poses","6"],51],[1,null,["poses","7"],51],[1,null,["poses","8"],51],[1,null,["poses","9"],51],[1,null,["poses","10"],51],[1,null,["poses","11"],51],[1,null,["poses","12"],51],[1,null,["poses","13"],51],[1,null,["poses","14"],51],[1,null,["poses","15"],51],[1,null,["poses","16"],51],[1,null,["poses","17"],51],[1,null,["poses","18"],51],[1,null,["poses","19"],51],[25,["_materials","0"],[0,["3ew1Vo2adBpqZ739+OrPkj"]],570],[2,["_lrot"],-528,[3,0,0,0,1]],[2,["_euler"],-529,[1,0,0,0]]]],[[15,["mainRenderer"],[0,["0b8pE5sPNepqN6zgbDPnqa"]]]],564]],[0,["e3hqu0HdxNq4e2nv3hKDvO"]],[11,0,{},74,[12,"e892RDjrxNZISjs1LC/QQv",null,-533,[6,"ccfOVvaa1Gr5y4hwsRSdHF",62,[[1,"Crowd-006",["_name"],149],[2,["_lpos"],149,[1,-0.207,-0.03,-0.333]],[2,["_lrot"],149,[3,0,0.980667631196442,0,0.1956808552811424]],[2,["_euler"],149,[1,0,157.431,0]],[2,["_lscale"],149,[1,0.090909,0.090909,0.090909]],[1,3,["startingPoseIndex"],52],[1,true,["shouldGetRandomPose"],52],[1,17,["poses","length"],52],[3,["poses","0"],52,572],[3,["poses","1"],52,573],[3,["poses","2"],52,574],[3,["poses","3"],52,575],[3,["poses","4"],52,576],[1,null,["poses","5"],52],[1,null,["poses","6"],52],[1,null,["poses","7"],52],[1,null,["poses","8"],52],[1,null,["poses","9"],52],[1,null,["poses","10"],52],[1,null,["poses","11"],52],[1,null,["poses","12"],52],[1,null,["poses","13"],52],[1,null,["poses","14"],52],[1,null,["poses","15"],52],[1,null,["poses","16"],52],[1,null,["poses","17"],52],[1,null,["poses","18"],52],[1,null,["poses","19"],52],[25,["_materials","0"],[0,["3ew1Vo2adBpqZ739+OrPkj"]],577],[2,["_lrot"],-531,[3,0,0,0,1]],[2,["_euler"],-532,[1,0,0,0]]]],[[15,["mainRenderer"],[0,["0b8pE5sPNepqN6zgbDPnqa"]]]],571]],[0,["e3hqu0HdxNq4e2nv3hKDvO"]],[32,"Beer_Bottle3",94,[[16,-534,[7,"25/ZhE8CRC778SrDUcq3aI"],[578],[9],579]],[4,"dfNibg1hZN7JrKRGGGTM69",null,null,null,1,0],[1,0.059,-0.011,0.029],[3,-0.5913096483635824,0,0,0.8064446042674825],[1,1.1101818181818182,2.8880000000000003,1.1101818181818182],[1,-72.5,0,0]],[32,"Beer_Bottle4",94,[[16,-535,[7,"49ahH5y25Cl6S2eZ7YGokJ"],[580],[9],581]],[4,"2as7NmKWpJbp35egn235nQ",null,null,null,1,0],[1,-0.342,0.008,0.387],[3,-0.4415058527917452,0,0,0.8972583696743285],[1,1.1101818181818182,2.8880000000000003,1.1101818181818182],[1,-52.4,0,0]],[11,0,{},94,[12,"e892RDjrxNZISjs1LC/QQv",null,-538,[6,"2edZd0UTRPn4MfvYAUbujf",62,[[1,"Crowd-004",["_name"],150],[2,["_lpos"],150,[1,0.188,-0.03,0.143]],[2,["_lrot"],150,[3,0,0.9694410683259211,0,0.245324305854713]],[2,["_euler"],150,[1,0,151.598,0]],[2,["_lscale"],150,[1,0.090909,0.090909,0.090909]],[1,3,["startingPoseIndex"],53],[1,true,["shouldGetRandomPose"],53],[1,17,["poses","length"],53],[3,["poses","0"],53,583],[3,["poses","1"],53,584],[3,["poses","2"],53,585],[3,["poses","3"],53,586],[3,["poses","4"],53,587],[1,null,["poses","5"],53],[1,null,["poses","6"],53],[1,null,["poses","7"],53],[1,null,["poses","8"],53],[1,null,["poses","9"],53],[1,null,["poses","10"],53],[1,null,["poses","11"],53],[1,null,["poses","12"],53],[1,null,["poses","13"],53],[1,null,["poses","14"],53],[1,null,["poses","15"],53],[1,null,["poses","16"],53],[1,null,["poses","17"],53],[1,null,["poses","18"],53],[1,null,["poses","19"],53],[25,["_materials","0"],[0,["3ew1Vo2adBpqZ739+OrPkj"]],588],[2,["_lrot"],-536,[3,0,0,0,1]],[2,["_euler"],-537,[1,0,0,0]]]],[[15,["mainRenderer"],[0,["0b8pE5sPNepqN6zgbDPnqa"]]]],582]],[0,["e3hqu0HdxNq4e2nv3hKDvO"]],[11,0,{},94,[12,"e892RDjrxNZISjs1LC/QQv",null,-541,[6,"1eSFpV84tMWJV0EQCNBh5t",62,[[1,"Crowd-005",["_name"],151],[2,["_lpos"],151,[1,-0.328,-0.03,0.372]],[2,["_lrot"],151,[3,0,0.9783467309331803,0,0.20697264087883527]],[2,["_euler"],151,[1,0,156.11,0]],[2,["_lscale"],151,[1,0.090909,0.090909,0.090909]],[1,3,["startingPoseIndex"],54],[1,true,["shouldGetRandomPose"],54],[1,17,["poses","length"],54],[3,["poses","0"],54,590],[3,["poses","1"],54,591],[3,["poses","2"],54,592],[3,["poses","3"],54,593],[3,["poses","4"],54,594],[1,null,["poses","5"],54],[1,null,["poses","6"],54],[1,null,["poses","7"],54],[1,null,["poses","8"],54],[1,null,["poses","9"],54],[1,null,["poses","10"],54],[1,null,["poses","11"],54],[1,null,["poses","12"],54],[1,null,["poses","13"],54],[1,null,["poses","14"],54],[1,null,["poses","15"],54],[1,null,["poses","16"],54],[1,null,["poses","17"],54],[1,null,["poses","18"],54],[1,null,["poses","19"],54],[25,["_materials","0"],[0,["3ew1Vo2adBpqZ739+OrPkj"]],595],[2,["_lrot"],-539,[3,0,0,0,1]],[2,["_euler"],-540,[1,0,0,0]]]],[[15,["mainRenderer"],[0,["0b8pE5sPNepqN6zgbDPnqa"]]]],589]],[0,["e3hqu0HdxNq4e2nv3hKDvO"]],[11,0,{},94,[12,"e892RDjrxNZISjs1LC/QQv",null,-544,[6,"c6cOXmP4dDA7K98okfV+Wc",62,[[1,"Crowd-006",["_name"],152],[2,["_lpos"],152,[1,-0.053,-0.03,-0.474]],[2,["_lrot"],152,[3,0,0.966573258156584,0,0.25639059385352964]],[2,["_euler"],152,[1,0,150.288,0]],[2,["_lscale"],152,[1,0.090909,0.090909,0.090909]],[1,3,["startingPoseIndex"],55],[1,true,["shouldGetRandomPose"],55],[1,17,["poses","length"],55],[3,["poses","0"],55,597],[3,["poses","1"],55,598],[3,["poses","2"],55,599],[3,["poses","3"],55,600],[3,["poses","4"],55,601],[1,null,["poses","5"],55],[1,null,["poses","6"],55],[1,null,["poses","7"],55],[1,null,["poses","8"],55],[1,null,["poses","9"],55],[1,null,["poses","10"],55],[1,null,["poses","11"],55],[1,null,["poses","12"],55],[1,null,["poses","13"],55],[1,null,["poses","14"],55],[1,null,["poses","15"],55],[1,null,["poses","16"],55],[1,null,["poses","17"],55],[1,null,["poses","18"],55],[1,null,["poses","19"],55],[25,["_materials","0"],[0,["3ew1Vo2adBpqZ739+OrPkj"]],602],[2,["_lrot"],-542,[3,0,0,0,1]],[2,["_euler"],-543,[1,0,0,0]]]],[[15,["mainRenderer"],[0,["0b8pE5sPNepqN6zgbDPnqa"]]]],596]],[0,["e3hqu0HdxNq4e2nv3hKDvO"]],[37,"table",140,[[16,-545,[7,"deTNnoNB9NTLMva2adQnDU"],[603],[9],604]],[4,"10ESfIMLBIwaVSir/zn4LP",null,null,null,1,0],[1,0.4636607225537302,-0.010000000000000035,-4.688638441085814]],[37,"table",140,[[16,-546,[7,"b2Z19kY7FAf55bh/jPUWEl"],[605],[9],606]],[4,"c5gDeVNphK07gBWy+m5mVg",null,null,null,1,0],[1,0.4636607225537302,-0.010000000000000035,-4.688638441085814]],[11,0,{},140,[12,"e892RDjrxNZISjs1LC/QQv",null,-549,[6,"dfNginxFNAkJ5GXAZGl/IM",62,[[1,"Crowd-001",["_name"],153],[2,["_lpos"],153,[1,-0.047,-0.039,-0.149]],[2,["_lrot"],153,[3,0,0.887328954191947,0,0.4611369938018696]],[2,["_euler"],153,[1,0,125.079,0]],[2,["_lscale"],153,[1,0.090909,0.090909,0.090909]],[1,3,["startingPoseIndex"],56],[1,true,["shouldGetRandomPose"],56],[1,17,["poses","length"],56],[3,["poses","0"],56,608],[3,["poses","1"],56,609],[3,["poses","2"],56,610],[3,["poses","3"],56,611],[3,["poses","4"],56,612],[1,null,["poses","5"],56],[1,null,["poses","6"],56],[1,null,["poses","7"],56],[1,null,["poses","8"],56],[1,null,["poses","9"],56],[1,null,["poses","10"],56],[1,null,["poses","11"],56],[1,null,["poses","12"],56],[1,null,["poses","13"],56],[1,null,["poses","14"],56],[1,null,["poses","15"],56],[1,null,["poses","16"],56],[1,null,["poses","17"],56],[1,null,["poses","18"],56],[1,null,["poses","19"],56],[25,["_materials","0"],[0,["3ew1Vo2adBpqZ739+OrPkj"]],613],[2,["_lrot"],-547,[3,0,0,0,1]],[2,["_euler"],-548,[1,0,0,0]]]],[[15,["mainRenderer"],[0,["0b8pE5sPNepqN6zgbDPnqa"]]]],607]],[0,["e3hqu0HdxNq4e2nv3hKDvO"]],[0,["e3hqu0HdxNq4e2nv3hKDvO"]]],0,[0,-1,62,0,-2,61,0,-3,60,0,-4,59,0,-5,172,0,-6,169,0,-7,168,0,-8,167,0,-9,166,0,4,1,0,-1,166,0,-2,167,0,-3,168,0,-4,169,0,-5,193,0,-6,58,0,-7,172,0,-8,59,0,-9,60,0,-10,61,0,-11,62,0,-1,194,0,-2,195,0,-3,196,0,-4,170,0,-5,171,0,-6,197,0,-7,198,0,-8,199,0,-9,200,0,-10,201,0,-11,202,0,-12,203,0,-13,204,0,-14,205,0,-15,206,0,-16,207,0,-17,208,0,-18,209,0,-19,210,0,-20,211,0,-21,212,0,3,157,0,5,157,0,1,156,0,1,156,0,1,156,0,1,156,0,4,59,0,3,159,0,5,159,0,1,158,0,1,158,0,1,158,0,1,158,0,4,60,0,3,161,0,5,161,0,1,160,0,1,160,0,1,160,0,1,160,0,4,61,0,3,164,0,5,164,0,1,163,0,1,163,0,1,163,0,1,163,0,4,62,0,-1,95,0,-2,75,0,-3,76,0,-4,77,0,-5,78,0,-6,68,0,-7,79,0,-1,235,0,-2,236,0,-3,237,0,-4,238,0,-5,240,0,-6,242,0,-1,110,0,-2,80,0,-3,81,0,-4,82,0,-5,83,0,-6,70,0,-7,84,0,-1,278,0,-2,279,0,-3,280,0,-4,281,0,-5,283,0,-6,285,0,-1,125,0,-2,85,0,-3,86,0,-4,87,0,-5,88,0,-6,72,0,-7,89,0,-1,321,0,-2,322,0,-3,323,0,-4,324,0,-5,326,0,-6,328,0,-1,140,0,-2,90,0,-3,91,0,-4,92,0,-5,93,0,-6,74,0,-7,94,0,-1,364,0,-2,365,0,-3,366,0,-4,367,0,-5,369,0,-6,371,0,-1,214,0,-2,215,0,-3,216,0,-4,217,0,-5,219,0,-1,173,0,-2,174,0,-3,175,0,-4,176,0,-5,177,0,-1,221,0,-2,222,0,-3,223,0,-4,224,0,-5,226,0,-1,228,0,-2,229,0,-3,230,0,-4,231,0,-5,233,0,-1,244,0,-2,245,0,-3,246,0,-4,248,0,-5,250,0,-1,257,0,-2,258,0,-3,259,0,-4,260,0,-5,262,0,-1,178,0,-2,179,0,-3,180,0,-4,181,0,-5,182,0,-1,264,0,-2,265,0,-3,266,0,-4,267,0,-5,269,0,-1,271,0,-2,272,0,-3,273,0,-4,274,0,-5,276,0,-1,287,0,-2,288,0,-3,289,0,-4,291,0,-5,293,0,-1,300,0,-2,301,0,-3,302,0,-4,303,0,-5,305,0,-1,183,0,-2,184,0,-3,185,0,-4,186,0,-5,187,0,-1,307,0,-2,308,0,-3,309,0,-4,310,0,-5,312,0,-1,314,0,-2,315,0,-3,316,0,-4,317,0,-5,319,0,-1,330,0,-2,331,0,-3,332,0,-4,334,0,-5,336,0,-1,343,0,-2,344,0,-3,345,0,-4,346,0,-5,348,0,-1,188,0,-2,189,0,-3,190,0,-4,191,0,-5,192,0,-1,350,0,-2,351,0,-3,352,0,-4,353,0,-5,355,0,-1,357,0,-2,358,0,-3,359,0,-4,360,0,-5,362,0,-1,373,0,-2,374,0,-3,375,0,-4,377,0,-5,379,0,-1,252,0,-2,253,0,-3,157,0,-4,254,0,-1,295,0,-2,296,0,-3,159,0,-4,297,0,-1,338,0,-2,339,0,-3,161,0,-4,340,0,-1,381,0,-2,382,0,-3,164,0,-4,383,0,1,256,0,1,256,0,4,157,0,1,299,0,1,299,0,4,159,0,1,162,0,1,342,0,1,342,0,1,162,0,1,162,0,1,162,0,4,161,0,1,165,0,1,385,0,1,385,0,1,165,0,1,165,0,1,165,0,4,164,0,4,166,0,4,167,0,4,168,0,4,169,0,2,170,0,2,170,0,2,171,0,2,171,0,1,213,0,1,213,0,4,172,0,2,173,0,2,173,0,2,174,0,2,174,0,2,175,0,2,175,0,2,176,0,2,176,0,2,177,0,2,177,0,2,178,0,2,178,0,2,179,0,2,179,0,2,180,0,2,180,0,2,181,0,2,181,0,2,182,0,2,182,0,2,183,0,2,183,0,2,184,0,2,184,0,2,185,0,2,185,0,2,186,0,2,186,0,2,187,0,2,187,0,2,188,0,2,188,0,2,189,0,2,189,0,2,190,0,2,190,0,2,191,0,2,191,0,2,192,0,2,192,0,2,193,0,2,194,0,2,195,0,2,196,0,2,197,0,2,198,0,2,199,0,2,200,0,2,201,0,2,202,0,2,203,0,2,204,0,2,205,0,2,206,0,2,207,0,2,208,0,2,209,0,2,210,0,2,211,0,2,212,0,2,214,0,2,215,0,2,216,0,1,218,0,1,218,0,4,217,0,1,220,0,1,220,0,4,219,0,2,221,0,2,222,0,2,223,0,1,225,0,1,225,0,4,224,0,1,227,0,1,227,0,4,226,0,2,228,0,2,229,0,2,230,0,1,232,0,1,232,0,4,231,0,1,234,0,1,234,0,4,233,0,2,235,0,2,236,0,2,237,0,1,239,0,1,239,0,4,238,0,1,241,0,1,241,0,4,240,0,1,243,0,1,243,0,4,242,0,2,244,0,2,245,0,1,247,0,1,247,0,4,246,0,1,249,0,1,249,0,4,248,0,1,251,0,1,251,0,4,250,0,2,252,0,2,253,0,1,255,0,1,255,0,4,254,0,2,257,0,2,258,0,2,259,0,1,261,0,1,261,0,4,260,0,1,263,0,1,263,0,4,262,0,2,264,0,2,265,0,2,266,0,1,268,0,1,268,0,4,267,0,1,270,0,1,270,0,4,269,0,2,271,0,2,272,0,2,273,0,1,275,0,1,275,0,4,274,0,1,277,0,1,277,0,4,276,0,2,278,0,2,279,0,2,280,0,1,282,0,1,282,0,4,281,0,1,284,0,1,284,0,4,283,0,1,286,0,1,286,0,4,285,0,2,287,0,2,288,0,1,290,0,1,290,0,4,289,0,1,292,0,1,292,0,4,291,0,1,294,0,1,294,0,4,293,0,2,295,0,2,296,0,1,298,0,1,298,0,4,297,0,2,300,0,2,301,0,2,302,0,1,304,0,1,304,0,4,303,0,1,306,0,1,306,0,4,305,0,2,307,0,2,308,0,2,309,0,1,311,0,1,311,0,4,310,0,1,313,0,1,313,0,4,312,0,2,314,0,2,315,0,2,316,0,1,318,0,1,318,0,4,317,0,1,320,0,1,320,0,4,319,0,2,321,0,2,322,0,2,323,0,1,325,0,1,325,0,4,324,0,1,327,0,1,327,0,4,326,0,1,329,0,1,329,0,4,328,0,2,330,0,2,331,0,1,333,0,1,333,0,4,332,0,1,335,0,1,335,0,4,334,0,1,337,0,1,337,0,4,336,0,2,338,0,2,339,0,1,341,0,1,341,0,4,340,0,2,343,0,2,344,0,2,345,0,1,347,0,1,347,0,4,346,0,1,349,0,1,349,0,4,348,0,2,350,0,2,351,0,2,352,0,1,354,0,1,354,0,4,353,0,1,356,0,1,356,0,4,355,0,2,357,0,2,358,0,2,359,0,1,361,0,1,361,0,4,360,0,1,363,0,1,363,0,4,362,0,2,364,0,2,365,0,2,366,0,1,368,0,1,368,0,4,367,0,1,370,0,1,370,0,4,369,0,1,372,0,1,372,0,4,371,0,2,373,0,2,374,0,1,376,0,1,376,0,4,375,0,1,378,0,1,378,0,4,377,0,1,380,0,1,380,0,4,379,0,2,381,0,2,382,0,1,384,0,1,384,0,4,383,0,14,1,549],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[6,0,6,0,6,0,6,0,-1,7,-1,7,-1,7,-1,7,-1,7,-1,7,-1,7,-1,7,-1,7,-1,7,-1,7,-1,7,-1,7,-1,7,-1,7,-1,7,-1,7,-1,7,-1,7,-1,7,-1,7,-1,7,6,0,0,6,-1,7,-1,7,-1,7,6,0,0,0,0,0,0,6,0,0,0,0,0,0,-1,7,-1,7,-1,7,-1,7,-1,7,-1,7,-1,7,-1,7,6,0,0,0,0,0,0,6,0,0,0,0,0,0,-1,7,-1,7,-1,7,6,0,0,0,0,0,0,6,0,0,0,0,0,0,-1,7,-1,7,-1,7,6,0,0,0,0,0,0,6,0,0,0,0,0,0,6,0,0,0,0,0,0,-1,7,-1,7,6,0,0,0,0,0,0,6,0,0,0,0,0,0,6,0,0,0,0,0,0,-1,7,-1,7,6,0,0,0,0,0,0,6,0,0,0,0,0,0,6,-1,7,-1,7,-1,7,6,0,0,0,0,0,0,6,0,0,0,0,0,0,-1,7,-1,7,-1,7,-1,7,-1,7,-1,7,-1,7,-1,7,6,0,0,0,0,0,0,6,0,0,0,0,0,0,-1,7,-1,7,-1,7,6,0,0,0,0,0,0,6,0,0,0,0,0,0,-1,7,-1,7,-1,7,6,0,0,0,0,0,0,6,0,0,0,0,0,0,6,0,0,0,0,0,0,-1,7,-1,7,6,0,0,0,0,0,0,6,0,0,0,0,0,0,6,0,0,0,0,0,0,-1,7,-1,7,6,0,0,0,0,0,0,6,0,0,0,0,0,0,6,-1,7,-1,7,-1,7,6,0,0,0,0,0,0,6,0,0,0,0,0,0,-1,7,-1,7,-1,7,-1,7,-1,7,-1,7,-1,7,-1,7,6,0,0,0,0,0,0,6,0,0,0,0,0,0,-1,7,-1,7,-1,7,6,0,0,0,0,0,0,6,0,0,0,0,0,0,-1,7,-1,7,-1,7,6,0,0,0,0,0,0,6,0,0,0,0,0,0,6,0,0,0,0,0,0,-1,7,-1,7,6,0,0,0,0,0,0,6,0,0,0,0,0,0,6,0,0,0,0,0,0,-1,7,-1,7,6,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,6,-1,7,-1,7,-1,7,6,0,0,0,0,0,0,6,0,0,0,0,0,0,-1,7,-1,7,-1,7,-1,7,-1,7,-1,7,-1,7,-1,7,6,0,0,0,0,0,0,6,0,0,0,0,0,0,-1,7,-1,7,-1,7,6,0,0,0,0,0,0,6,0,0,0,0,0,0,-1,7,-1,7,-1,7,6,0,0,0,0,0,0,6,0,0,0,0,0,0,6,0,0,0,0,0,0,-1,7,-1,7,6,0,0,0,0,0,0,6,0,0,0,0,0,0,6,0,0,0,0,0,0,-1,7,-1,7,6,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0],[44,91,44,78,44,79,44,61,123,124,22,125,22,159,22,159,160,161,160,161,22,45,22,45,22,45,22,45,22,45,22,45,22,45,22,45,22,45,22,45,22,45,22,45,17,84,17,84,17,84,17,84,477,128,478,162,17,18,17,18,17,58,6,1,2,3,4,5,19,6,1,2,3,4,5,19,37,46,37,54,37,46,37,46,37,54,17,18,22,41,22,42,6,1,2,3,4,5,19,6,1,2,3,4,5,19,17,18,17,59,17,18,6,1,2,3,4,5,19,6,1,2,3,4,5,19,17,18,17,18,17,60,6,1,2,3,4,5,19,6,1,2,3,4,5,19,6,1,2,3,4,5,19,17,18,17,18,6,1,2,3,4,5,19,6,1,2,3,4,5,19,6,1,2,3,4,5,19,22,41,22,42,6,1,2,3,4,5,19,6,1,2,3,4,5,19,162,17,18,17,18,17,58,6,1,2,3,4,5,19,6,1,2,3,4,5,19,37,46,37,54,37,46,37,46,37,54,17,18,22,41,22,42,6,1,2,3,4,5,19,6,1,2,3,4,5,19,17,18,17,59,17,18,6,1,2,3,4,5,19,6,1,2,3,4,5,19,17,18,17,18,17,60,6,1,2,3,4,5,19,6,1,2,3,4,5,19,6,1,2,3,4,5,19,17,18,17,18,6,1,2,3,4,5,19,6,1,2,3,4,5,19,6,1,2,3,4,5,19,22,41,22,42,6,1,2,3,4,5,19,6,1,2,3,4,5,19,163,17,18,17,18,17,58,6,1,2,3,4,5,7,6,1,2,3,4,5,7,37,46,37,54,37,46,37,46,37,54,17,18,22,41,22,42,6,1,2,3,4,5,7,6,1,2,3,4,5,7,17,18,17,59,17,18,6,1,2,3,4,5,7,6,1,2,3,4,5,7,17,18,17,18,17,60,6,1,2,3,4,5,7,6,1,2,3,4,5,7,6,1,2,3,4,5,7,17,18,17,18,6,1,2,3,4,5,7,6,1,2,3,4,5,7,6,1,2,3,4,5,7,22,41,22,42,6,1,2,3,4,5,7,6,1,2,3,4,5,7,7,7,163,17,18,17,18,17,58,6,1,2,3,4,5,7,6,1,2,3,4,5,7,37,46,37,54,37,46,37,46,37,54,17,18,22,41,22,42,6,1,2,3,4,5,7,6,1,2,3,4,5,7,17,18,17,59,17,18,6,1,2,3,4,5,7,6,1,2,3,4,5,7,17,18,17,18,17,60,6,1,2,3,4,5,7,6,1,2,3,4,5,7,6,1,2,3,4,5,7,17,18,17,18,6,1,2,3,4,5,7,6,1,2,3,4,5,7,6,1,2,3,4,5,7,22,41,22,42,6,1,2,3,4,5,7,6,1,2,3,4,5,7,7,7]],[[{"name":"img_rarity_label_ultrarare","rect":{"x":22,"y":5,"width":469,"height":409},"offset":{"x":0.5,"y":-2.5},"originalSize":{"width":512,"height":414},"rotated":false,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[-234.5,-204.5,0,234.5,-204.5,0,-234.5,204.5,0,234.5,204.5,0],"indexes":[0,1,2,2,1,3],"uv":[22,409,491,409,22,0,491,0],"nuv":[0.04296875,0,0.958984375,0,0.04296875,0.9879227053140096,0.958984375,0.9879227053140096],"minPos":{"x":-234.5,"y":-204.5,"z":0},"maxPos":{"x":234.5,"y":204.5,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[10],[479]],[[[114,"atom_new",".plist"],-1],0,0,[0],[23],[73]],[[[247,"particle-add",[{}],[[[{},"mainTexture",6,0]],11]]],0,0,[0,0],[13,11],[119,52]],[[{"name":"img_bar_fill","rect":{"x":0,"y":0,"width":660,"height":130},"offset":{"x":0,"y":0},"originalSize":{"width":660,"height":130},"rotated":false,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[-330,-65,0,330,-65,0,-330,65,0,330,65,0],"indexes":[0,1,2,2,1,3],"uv":[0,130,660,130,0,0,660,0],"nuv":[0,0,1,0,0,1,1,1],"minPos":{"x":-330,"y":-65,"z":0},"maxPos":{"x":330,"y":65,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[10],[480]],[[[58,"LightRay"],[121,"LightRay",[-5],[[323,-3,[7,"241X3IKs9FF4yJXokjPJIp"],-2],[260,true,-4,[7,"68H9VD9a9HdoXLQrCDiUix"],[1,0.1,0.1,0.1]]],[4,"49ZoazuiFBlbZzgmT6kxzi",null,null,null,-1,0]],[36,"Cone-003",1,[[149,"Cone<ModelComponent>",-6,[7,"84hii9rK1CFYkehKUt7qCw"],[0],[9],1]],[4,"80uBm8yWFB6pLHnN7QiT5t",null,null,null,1,0],[1,0,1,0],[1,20,100,1]]],0,[0,4,1,0,21,2,0,2,1,0,2,1,0,-1,2,0,2,2,0,14,1,6],[0,0],[-1,7],[61,68]],[[{"name":"img_bar_borders","rect":{"x":0,"y":0,"width":948,"height":416},"offset":{"x":0,"y":0},"originalSize":{"width":948,"height":416},"rotated":false,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[-474,-208,0,474,-208,0,-474,208,0,474,208,0],"indexes":[0,1,2,2,1,3],"uv":[0,416,948,416,0,0,948,0],"nuv":[0,0,1,0,0,1,1,1],"minPos":{"x":-474,"y":-208,"z":0},"maxPos":{"x":474,"y":208,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[10],[481]],[[{"name":"BACKGROUND_FILTER","rect":{"x":0,"y":0,"width":1080,"height":1920},"offset":{"x":0,"y":0},"originalSize":{"width":1080,"height":1920},"rotated":false,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[-540,-960,0,540,-960,0,-540,960,0,540,960,0],"indexes":[0,1,2,2,1,3],"uv":[0,1920,1080,1920,0,0,1080,0],"nuv":[0,0,1,0,0,1,1,1],"minPos":{"x":-540,"y":-960,"z":0},"maxPos":{"x":540,"y":960,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[10],[482]],[[{"name":"default_radio_button_off","rect":{"x":3,"y":3,"width":26,"height":26},"offset":{"x":0,"y":0},"originalSize":{"width":32,"height":32},"rotated":false,"capInsets":[13,13,13,13],"vertices":{"rawPosition":[-13,-13,0,13,-13,0,-13,13,0,13,13,0],"indexes":[0,1,2,2,1,3],"uv":[3,29,29,29,3,3,29,3],"nuv":[0.09375,0.09375,0.90625,0.09375,0.09375,0.90625,0.90625,0.90625],"minPos":{"x":-13,"y":-13,"z":0},"maxPos":{"x":13,"y":13,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[10],[483]],[[[44,"pasted__StageRunner_Texture_Atlas",[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{"DCC_APP_NAME":5,"USE_ALBEDO_MAP":true,"USE_EMISSIVE_MAP":true},{},{}],[[[{"albedoScale":0.800000011920929},"mainTexture",6,0,"emissiveMap",6,1],{},{}],11,0,0]]],0,0,[0,0,0],[13,16,11],[112,113,47]],[[[44,"Banner",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"DCC_APP_NAME":5}],[[[{"albedoScale":0.800000011920929,"emissiveScale":1},"mainColor",8,[4,4278190335],"emissive",8,[4,4278190080]]],11]]],0,0,[0],[11],[47]],[[[169],[180,"Stagerunner Environment Goal Export 4",[-2,-3],[4,"e8i386ajJeyZaP+PTbEXDb",null,null,null,-1,0]],[36,"pCube517",1,[[16,-4,[7,"8dii9ie6pd/KutBEKTD+BK"],[0],[9],1]],[4,"f48k+N6P9di40czrSTTF+O",null,null,null,1,0],[1,-0.003234222996979952,0.6656490564346313,11.484757423400879],[1,193.89503479003906,129.60462951660156,2.244337320327759]],[226,"pCube530",1,[[16,-5,[7,"58Q8hHSX9cMZ7UMUnK4Ubb"],[2],[9],3]],[4,"30jxun7WZR1Z9QEumISecw",null,null,null,1,0]]],0,[0,4,1,0,-1,2,0,-2,3,0,2,2,0,2,3,0,14,1,5],[0,0,0,0],[-1,7,-1,7],[484,485,486,487]],[[[44,"Stagerunner_Stage_Texture",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"DCC_APP_NAME":5}],[[[{"albedoScale":0.800000011920929,"emissiveScale":1},"mainColor",8,[4,4290559164],"emissive",8,[4,4278190080]]],11]]],0,0,[0],[11],[47]],[[[31,".bin",1522602058,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":192,"length":12,"count":6,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":192,"count":4,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.004999999888241291,-0.004999999888241291,0.005000305362045765],"maxPosition",8,[1,0.004999999888241291,0.004999999888241291,0.005000305362045765]]],-1],0,0,[],[],[]],[[[31,".bin",562259032,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":42096,"length":3330,"count":1665,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":42096,"count":877,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-4.2411932945251465,-0.18713229894638062,10.338268280029297],"maxPosition",8,[1,4.2411932945251465,2.11952805519104,13.603099822998047]]],-1],0,0,[],[],[]],[[[54,"mat_rarity_04_ultrarare",1,[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{}],[[[{},"tintColor",8,[4,4294967295],"mainTexture",6,0]],11]]],0,0,[0,0],[13,11],[157,52]],[[[114,"particle2d_superrare",".plist"],-1],0,0,[0],[23],[76]],[[[155,"util/dcc/imported-specular-glossiness",[{"hash":1971853362,"name":"util/dcc/imported-specular-glossiness|standard-vs|standard-fs","blocks":[{"name":"Constants","stageFlags":17,"binding":0,"members":[{"name":"tilingOffset","type":16,"count":1},{"name":"diffuseColor","type":16,"count":1},{"name":"specularColor","type":16,"count":1},{"name":"emissive","type":16,"count":1},{"name":"emissiveScale","type":13,"count":1},{"name":"alphaThreshold","type":13,"count":1},{"name":"shininessExponent","type":13,"count":1},{"name":"glossiness","type":13,"count":1},{"name":"metallic","type":13,"count":1},{"name":"normalScale","type":13,"count":1},{"name":"transparencyFactor","type":13,"count":1},{"name":"diffuseFactor","type":13,"count":1},{"name":"specularFactor","type":13,"count":1}],"defines":[]}],"samplerTextures":[{"name":"shininessExponentMap","type":28,"count":1,"stageFlags":16,"binding":1,"defines":["USE_SHININESS_MAP"]},{"name":"specularGlossinessMap","type":28,"count":1,"stageFlags":16,"binding":2,"defines":["USE_SPECULAR_GLOSSINESS_MAP"]},{"name":"specularMap","type":28,"count":1,"stageFlags":16,"binding":3,"defines":["USE_SPECULAR_MAP"]},{"name":"metallicMap","type":28,"count":1,"stageFlags":16,"binding":4,"defines":["USE_METALLIC_MAP"]},{"name":"albedoMap","type":28,"count":1,"stageFlags":16,"binding":5,"defines":["USE_ALBEDO_MAP"]},{"name":"transparencyMap","type":28,"count":1,"stageFlags":16,"binding":6,"defines":["USE_TRANSPARENCY_MAP"]},{"name":"emissiveMap","type":28,"count":1,"stageFlags":16,"binding":7,"defines":["USE_EMISSIVE_MAP"]},{"name":"emissiveScaleMap","type":28,"count":1,"stageFlags":16,"binding":8,"defines":["USE_EMISSIVESCALE_MAP"]},{"name":"normalMap","type":28,"count":1,"stageFlags":16,"binding":9,"defines":["USE_NORMAL_MAP"]},{"name":"occlusionMap","type":28,"count":1,"stageFlags":16,"binding":10,"defines":["USE_OCCLUSION_MAP"]}],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[],"attributes":[{"name":"a_position","format":32,"location":0,"defines":[]},{"name":"a_normal","format":32,"location":1,"defines":[]},{"name":"a_texCoord","format":21,"location":2,"defines":[]},{"name":"a_tangent","format":44,"location":3,"defines":[]},{"name":"a_color","format":44,"location":6,"defines":["USE_VERTEX_COLOR"]},{"name":"a_texCoord1","format":21,"location":7,"defines":[]},{"name":"a_joints","location":4,"defines":["CC_USE_SKINNING"]},{"name":"a_weights","format":44,"location":5,"defines":["CC_USE_SKINNING"]},{"name":"a_jointAnimInfo","format":44,"isInstanced":true,"location":8,"defines":["USE_INSTANCING","CC_USE_BAKED_ANIMATION"]},{"name":"a_matWorld0","format":44,"isInstanced":true,"location":9,"defines":["USE_INSTANCING"]},{"name":"a_matWorld1","format":44,"isInstanced":true,"location":10,"defines":["USE_INSTANCING"]},{"name":"a_matWorld2","format":44,"isInstanced":true,"location":11,"defines":["USE_INSTANCING"]},{"name":"a_lightingMapUVParam","format":44,"isInstanced":true,"location":12,"defines":["USE_INSTANCING","CC_USE_LIGHTMAP"]},{"name":"a_localShadowBiasAndProbeId","format":44,"isInstanced":true,"location":13,"defines":["USE_INSTANCING"]},{"name":"a_sh_linear_const_r","format":44,"isInstanced":true,"location":14,"defines":["USE_INSTANCING","CC_USE_LIGHT_PROBE"]},{"name":"a_sh_linear_const_g","format":44,"isInstanced":true,"location":15,"defines":["USE_INSTANCING","CC_USE_LIGHT_PROBE"]},{"name":"a_sh_linear_const_b","format":44,"isInstanced":true,"location":16,"defines":["USE_INSTANCING","CC_USE_LIGHT_PROBE"]},{"name":"a_vertexId","format":11,"location":17,"defines":["CC_USE_MORPH"]}],"fragColors":[{"name":"fragColorX","typename":"vec4","type":16,"count":1,"stageFlags":16,"location":0,"tags":[],"defines":[]},{"name":"fragColor0","typename":"vec4","type":16,"count":1,"stageFlags":16,"location":1,"tags":["CC_PIPELINE_TYPE"],"defines":["CC_PIPELINE_TYPE"]},{"name":"fragColor1","typename":"vec4","type":16,"count":1,"stageFlags":16,"location":2,"defines":["CC_PIPELINE_TYPE"]},{"name":"fragColor2","typename":"vec4","type":16,"count":1,"stageFlags":16,"location":3,"defines":["CC_PIPELINE_TYPE"]}],"descriptors":[{"rate":0,"blocks":[{"name":"CCLocal","stageFlags":17,"tags":{"builtin":"local"},"members":[{"name":"cc_matWorld","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matWorldIT","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_lightingMapUVParam","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_localShadowBias","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_reflectionProbeData1","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_reflectionProbeData2","typename":"vec4","type":16,"count":1,"precision":"highp "}],"defines":["!USE_INSTANCING"]},{"name":"CCMorph","stageFlags":1,"tags":{"builtin":"local"},"members":[{"name":"cc_displacementWeights","typename":"vec4","type":16,"count":15,"isArray":true},{"name":"cc_displacementTextureInfo","typename":"vec4","type":16,"count":1}],"defines":["CC_USE_MORPH"]},{"name":"CCSkinningTexture","stageFlags":1,"tags":{"builtin":"local"},"members":[{"name":"cc_jointTextureInfo","typename":"vec4","type":16,"count":1,"precision":"highp "}],"defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"CCSkinningAnimation","stageFlags":1,"tags":{"builtin":"local"},"members":[{"name":"cc_jointAnimInfo","typename":"vec4","type":16,"count":1,"precision":"highp "}],"defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"CCSkinning","stageFlags":1,"tags":{"builtin":"local"},"members":[{"name":"cc_joints","typename":"vec4","type":16,"count":0,"precision":"highp ","isArray":true}],"defines":["CC_USE_SKINNING","!CC_USE_BAKED_ANIMATION","!CC_USE_REAL_TIME_JOINT_TEXTURE"]},{"name":"CCForwardLight","stageFlags":16,"tags":{"builtin":"local"},"members":[{"name":"cc_lightPos","typename":"vec4","type":16,"count":0,"precision":"highp ","isArray":true},{"name":"cc_lightColor","typename":"vec4","type":16,"count":0,"isArray":true},{"name":"cc_lightSizeRangeAngle","typename":"vec4","type":16,"count":0,"isArray":true},{"name":"cc_lightDir","typename":"vec4","type":16,"count":0,"isArray":true}],"defines":["CC_FORWARD_ADD","CC_ENABLE_CLUSTERED_LIGHT_CULLING"]},{"name":"CCSH","stageFlags":16,"tags":{"builtin":"local"},"members":[{"name":"cc_sh_linear_const_r","typename":"vec4","type":16,"count":1},{"name":"cc_sh_linear_const_g","typename":"vec4","type":16,"count":1},{"name":"cc_sh_linear_const_b","typename":"vec4","type":16,"count":1},{"name":"cc_sh_quadratic_r","typename":"vec4","type":16,"count":1},{"name":"cc_sh_quadratic_g","typename":"vec4","type":16,"count":1},{"name":"cc_sh_quadratic_b","typename":"vec4","type":16,"count":1},{"name":"cc_sh_quadratic_a","typename":"vec4","type":16,"count":1}],"defines":["CC_USE_LIGHT_PROBE","!USE_INSTANCING"]}],"samplerTextures":[{"name":"cc_PositionDisplacements","typename":"sampler2D","type":28,"count":1,"stageFlags":1,"tags":{"builtin":"local"},"defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_POSITION"]},{"name":"cc_NormalDisplacements","typename":"sampler2D","type":28,"count":1,"stageFlags":1,"tags":{"builtin":"local"},"defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_NORMAL"]},{"name":"cc_TangentDisplacements","typename":"sampler2D","type":28,"count":1,"stageFlags":1,"tags":{"builtin":"local"},"defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_TANGENT"]},{"name":"cc_jointTexture","typename":"sampler2D","type":28,"count":1,"precision":"highp ","stageFlags":1,"tags":{"builtin":"local"},"defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"cc_realtimeJoint","typename":"sampler2D","type":28,"count":1,"precision":"highp ","stageFlags":1,"tags":{"builtin":"local"},"defines":["CC_USE_SKINNING","!CC_USE_BAKED_ANIMATION","CC_USE_REAL_TIME_JOINT_TEXTURE"]},{"name":"cc_reflectionProbeCubemap","typename":"samplerCube","type":31,"count":1,"stageFlags":16,"tags":{"builtin":"local"},"defines":["CC_USE_REFLECTION_PROBE"]},{"name":"cc_reflectionProbePlanarMap","typename":"sampler2D","type":28,"count":1,"stageFlags":16,"tags":{"builtin":"local"},"defines":["CC_USE_REFLECTION_PROBE"]},{"name":"cc_reflectionProbeDataMap","typename":"sampler2D","type":28,"count":1,"stageFlags":16,"tags":{"builtin":"local"},"defines":["CC_USE_REFLECTION_PROBE"]},{"name":"cc_lightingMap","typename":"sampler2D","type":28,"count":1,"stageFlags":16,"tags":{"builtin":"local"},"defines":["CC_USE_LIGHTMAP","!CC_FORWARD_ADD"]}],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[]},{"rate":1,"blocks":[{"name":"Constants","stageFlags":17,"binding":0,"members":[{"name":"tilingOffset","type":16,"count":1},{"name":"diffuseColor","type":16,"count":1},{"name":"specularColor","type":16,"count":1},{"name":"emissive","type":16,"count":1},{"name":"emissiveScale","type":13,"count":1},{"name":"alphaThreshold","type":13,"count":1},{"name":"shininessExponent","type":13,"count":1},{"name":"glossiness","type":13,"count":1},{"name":"metallic","type":13,"count":1},{"name":"normalScale","type":13,"count":1},{"name":"transparencyFactor","type":13,"count":1},{"name":"diffuseFactor","type":13,"count":1},{"name":"specularFactor","type":13,"count":1}],"defines":[]}],"samplerTextures":[{"name":"shininessExponentMap","type":28,"count":1,"stageFlags":16,"binding":1,"defines":["USE_SHININESS_MAP"]},{"name":"specularGlossinessMap","type":28,"count":1,"stageFlags":16,"binding":2,"defines":["USE_SPECULAR_GLOSSINESS_MAP"]},{"name":"specularMap","type":28,"count":1,"stageFlags":16,"binding":3,"defines":["USE_SPECULAR_MAP"]},{"name":"metallicMap","type":28,"count":1,"stageFlags":16,"binding":4,"defines":["USE_METALLIC_MAP"]},{"name":"albedoMap","type":28,"count":1,"stageFlags":16,"binding":5,"defines":["USE_ALBEDO_MAP"]},{"name":"transparencyMap","type":28,"count":1,"stageFlags":16,"binding":6,"defines":["USE_TRANSPARENCY_MAP"]},{"name":"emissiveMap","type":28,"count":1,"stageFlags":16,"binding":7,"defines":["USE_EMISSIVE_MAP"]},{"name":"emissiveScaleMap","type":28,"count":1,"stageFlags":16,"binding":8,"defines":["USE_EMISSIVESCALE_MAP"]},{"name":"normalMap","type":28,"count":1,"stageFlags":16,"binding":9,"defines":["USE_NORMAL_MAP"]},{"name":"occlusionMap","type":28,"count":1,"stageFlags":16,"binding":10,"defines":["USE_OCCLUSION_MAP"]}],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[]},{"rate":2,"blocks":[],"samplerTextures":[],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[]},{"rate":3,"blocks":[{"name":"CCGlobal","stageFlags":17,"tags":{"builtin":"global"},"members":[{"name":"cc_time","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_screenSize","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_nativeSize","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_probeInfo","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_debug_view_mode","typename":"vec4","type":16,"count":1,"precision":"mediump "}],"defines":[]},{"name":"CCCamera","stageFlags":17,"tags":{"builtin":"global"},"members":[{"name":"cc_matView","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matViewInv","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matProj","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matProjInv","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matViewProj","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matViewProjInv","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_cameraPos","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_surfaceTransform","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_screenScale","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_exposure","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_mainLitDir","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_mainLitColor","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_ambientSky","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_ambientGround","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_fogColor","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_fogBase","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_fogAdd","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_nearFar","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_viewPort","typename":"vec4","type":16,"count":1,"precision":"mediump "}],"defines":[]},{"name":"CCShadow","stageFlags":17,"tags":{"builtin":"global"},"members":[{"name":"cc_matLightView","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matLightViewProj","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_shadowInvProjDepthInfo","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_shadowProjDepthInfo","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_shadowProjInfo","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_shadowNFLSInfo","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_shadowWHPBInfo","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_shadowLPNNInfo","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_shadowColor","typename":"vec4","type":16,"count":1,"precision":"lowp "},{"name":"cc_planarNDInfo","typename":"vec4","type":16,"count":1,"precision":"mediump "}],"defines":[]},{"name":"CCCSM","stageFlags":16,"tags":{"builtin":"global"},"members":[{"name":"cc_csmViewDir0","typename":"vec4","type":16,"count":4,"precision":"highp ","isArray":true},{"name":"cc_csmViewDir1","typename":"vec4","type":16,"count":4,"precision":"highp ","isArray":true},{"name":"cc_csmViewDir2","typename":"vec4","type":16,"count":4,"precision":"highp ","isArray":true},{"name":"cc_csmAtlas","typename":"vec4","type":16,"count":4,"precision":"highp ","isArray":true},{"name":"cc_matCSMViewProj","typename":"mat4","type":25,"count":4,"precision":"highp ","isArray":true},{"name":"cc_csmProjDepthInfo","typename":"vec4","type":16,"count":4,"precision":"highp ","isArray":true},{"name":"cc_csmProjInfo","typename":"vec4","type":16,"count":4,"precision":"highp ","isArray":true},{"name":"cc_csmSplitsInfo","typename":"vec4","type":16,"count":1,"precision":"highp "}],"defines":["CC_SUPPORT_CASCADED_SHADOW_MAP"]}],"samplerTextures":[{"name":"cc_environment","typename":"samplerCube","type":31,"count":1,"stageFlags":16,"tags":{"builtin":"global"},"defines":[]},{"name":"cc_diffuseMap","typename":"samplerCube","type":31,"count":1,"stageFlags":16,"tags":{"builtin":"global"},"defines":["CC_USE_IBL","CC_USE_DIFFUSEMAP"]},{"name":"cc_shadowMap","typename":"sampler2D","type":28,"count":1,"precision":"highp ","stageFlags":16,"tags":{"builtin":"global"},"defines":["CC_RECEIVE_SHADOW"]},{"name":"cc_spotShadowMap","typename":"sampler2D","type":28,"count":1,"precision":"highp ","stageFlags":16,"tags":{"builtin":"global"},"defines":["CC_RECEIVE_SHADOW"]}],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[]}],"glsl3":{"vert":"\nprecision highp float;\n  #define CC_SURFACES_USE_SECOND_UV HAS_SECOND_UV\n  #define CC_SURFACES_USE_TWO_SIDED USE_TWOSIDE\n  #define CC_SURFACES_USE_REFLECTION_DENOISE USE_REFLECTION_DENOISE\n  #define CC_SURFACES_LIGHTING_ANISOTROPIC IS_ANISOTROPY\n  #define CC_SURFACES_USE_VERTEX_COLOR USE_VERTEX_COLOR\n  #define CC_SURFACES_USE_LEGACY_COMPATIBLE_LIGHTING USE_COMPATIBLE_LIGHTING\n#if IS_ANISOTROPY || USE_NORMAL_MAP\n  #define CC_SURFACES_USE_TANGENT_SPACE 1\n#endif\n  #define CC_SURFACES_LIGHTING_ANISOTROPIC_ENVCONVOLUTION_COUNT 31\n#ifndef CC_SURFACES_USE_SECOND_UV\n  #define CC_SURFACES_USE_SECOND_UV 0\n#endif\n#ifndef CC_SURFACES_USE_TANGENT_SPACE\n  #define CC_SURFACES_USE_TANGENT_SPACE 0\n#endif\n#ifndef CC_SURFACES_USE_VERTEX_COLOR\n  #define CC_SURFACES_USE_VERTEX_COLOR 0\n#endif\n#ifndef CC_SURFACES_TRANSFER_LOCAL_POS\n  #define CC_SURFACES_TRANSFER_LOCAL_POS 0\n#endif\n#ifndef CC_SURFACES_TRANSFER_CLIP_POS\n  #define CC_SURFACES_TRANSFER_CLIP_POS 0\n#endif\n#ifndef CC_SURFACES_USE_LIGHT_MAP\n  #ifdef CC_USE_LIGHTMAP\n    #define CC_SURFACES_USE_LIGHT_MAP CC_USE_LIGHTMAP\n  #else\n    #define CC_SURFACES_USE_LIGHT_MAP 0\n  #endif\n#endif\n#ifndef CC_SURFACES_FLIP_UV\n  #define CC_SURFACES_FLIP_UV 0\n#endif\n#ifndef CC_SURFACES_USE_TWO_SIDED\n  #define CC_SURFACES_USE_TWO_SIDED 0\n#endif\n#ifndef CC_SURFACES_USE_REFLECTION_DENOISE\n  #define CC_SURFACES_USE_REFLECTION_DENOISE 0\n#endif\n#ifndef CC_SURFACES_LIGHTING_ANISOTROPIC\n  #define CC_SURFACES_LIGHTING_ANISOTROPIC 0\n#endif\n#ifndef CC_SURFACES_LIGHTING_ANISOTROPIC_ENVCONVOLUTION_COUNT\n  #define CC_SURFACES_LIGHTING_ANISOTROPIC_ENVCONVOLUTION_COUNT 0\n#endif\n#ifndef CC_SURFACES_USE_LEGACY_COMPATIBLE_LIGHTING\n  #define CC_SURFACES_USE_LEGACY_COMPATIBLE_LIGHTING 0\n#endif\n#ifndef CC_SURFACES_LIGHTING_USE_FRESNEL\n  #define CC_SURFACES_LIGHTING_USE_FRESNEL 0\n#endif\n#ifndef CC_SURFACES_LIGHTING_TRANSMIT_SPECULAR\n  #define CC_SURFACES_LIGHTING_TRANSMIT_SPECULAR 0\n#endif\n#ifndef CC_SURFACES_LIGHTING_TRANSMIT_DIFFUSE\n  #define CC_SURFACES_LIGHTING_TRANSMIT_DIFFUSE 0\n#endif\n#ifndef CC_SURFACES_LIGHTING_USE_SHADOWMAP_TRANSMIT\n  #define CC_SURFACES_LIGHTING_USE_SHADOWMAP_TRANSMIT 0\n#endif\n#ifndef CC_SURFACES_LIGHTING_TRT\n  #define CC_SURFACES_LIGHTING_TRT 0\n#endif\n#ifndef CC_SURFACES_LIGHTING_TT\n  #define CC_SURFACES_LIGHTING_TT 0\n#endif\n#ifndef CC_SURFACES_ENABLE_DEBUG_VIEW\n  #define CC_SURFACES_ENABLE_DEBUG_VIEW 1\n#endif\n#ifndef CC_SURFACES_LIGHTING_CALCULATE_DIFFUSE\n  #define CC_SURFACES_LIGHTING_CALCULATE_DIFFUSE 1\n#endif\n#ifndef CC_SURFACES_LIGHTING_CALCULATE_SPECULAR\n  #define CC_SURFACES_LIGHTING_CALCULATE_SPECULAR 1\n#endif\n#define CC_USE_SURFACE_SHADER 1\nin vec3 a_position;\nin vec3 a_normal;\nin vec2 a_texCoord;\n#if CC_SURFACES_USE_TANGENT_SPACE\n  in vec4 a_tangent;\n#endif\n#if CC_SURFACES_USE_VERTEX_COLOR\n  in vec4 a_color;\n#endif\n#if CC_SURFACES_USE_SECOND_UV || CC_USE_LIGHTMAP\n  in vec2 a_texCoord1;\n#endif\n#if CC_USE_SKINNING\n    in vec4 a_joints;\n  in vec4 a_weights;\n#endif\n#if USE_INSTANCING\n  #if CC_USE_BAKED_ANIMATION\n    in highp vec4 a_jointAnimInfo;\n  #endif\n  in vec4 a_matWorld0;\n  in vec4 a_matWorld1;\n  in vec4 a_matWorld2;\n  #if CC_USE_LIGHTMAP\n    in vec4 a_lightingMapUVParam;\n  #endif\n  #if CC_RECEIVE_SHADOW || CC_USE_REFLECTION_PROBE\n    in vec4 a_localShadowBiasAndProbeId;\n  #endif\n  #if CC_USE_LIGHT_PROBE\n    in vec4 a_sh_linear_const_r;\n    in vec4 a_sh_linear_const_g;\n    in vec4 a_sh_linear_const_b;\n  #endif\n#endif\n#if CC_USE_MORPH\n    in float a_vertexId;\n#endif\nout highp vec3 v_worldPos;\nout mediump vec4 v_normal;\nout vec2 v_uv;\n#if CC_SURFACES_USE_VERTEX_COLOR\n  out lowp vec4 v_color;\n#endif\n#if CC_SURFACES_USE_TANGENT_SPACE\n  out mediump vec4 v_tangent;\n#endif\n#if CC_SURFACES_USE_SECOND_UV\n  out mediump vec2 v_uv1;\n#endif\n#if CC_USE_LIGHTMAP && !CC_FORWARD_ADD\n  out mediump vec3 v_luv;\n#endif\n#if CC_RECEIVE_SHADOW || CC_USE_REFLECTION_PROBE\n  out mediump vec4 v_shadowBiasAndProbeId;\n#endif\n#if CC_USE_FOG != 4 && !CC_USE_ACCURATE_FOG\n  out mediump float v_fogFactor;\n#endif\n#if CC_SURFACES_TRANSFER_LOCAL_POS\n  out highp vec4 v_localPos;\n#endif\n#if CC_SURFACES_TRANSFER_CLIP_POS\n  out highp vec4 v_clipPos;\n#endif\n#if CC_USE_LIGHT_PROBE\n  #if USE_INSTANCING\n    out mediump vec4 v_sh_linear_const_r;\n    out mediump vec4 v_sh_linear_const_g;\n    out mediump vec4 v_sh_linear_const_b;\n  #endif\n#endif\n#define VSOutput_worldPos v_worldPos\n#define VSOutput_worldNormal v_normal.xyz\n#define VSOutput_faceSideSign v_normal.w\n#define VSOutput_texcoord v_uv\n#if CC_SURFACES_USE_VERTEX_COLOR\n  #define VSOutput_vertexColor v_color\n#endif\n#if CC_SURFACES_USE_TANGENT_SPACE\n  #define VSOutput_worldTangent v_tangent.xyz\n  #define VSOutput_mirrorNormal v_tangent.w\n#endif\n#if CC_SURFACES_USE_SECOND_UV\n  #define VSOutput_texcoord1 v_uv1\n#endif\n#if CC_USE_LIGHTMAP && !CC_FORWARD_ADD\n  #define VSOutput_lightMapUV v_luv\n#endif\n#if CC_RECEIVE_SHADOW\n  #define VSOutput_shadowBias v_shadowBiasAndProbeId.xy\n#endif\n#if CC_USE_REFLECTION_PROBE\n  #define VSOutput_reflectionProbeId v_shadowBiasAndProbeId.z\n#endif\n#if CC_USE_FOG != 4 && !CC_USE_ACCURATE_FOG\n  #define VSOutput_fogFactor v_fogFactor\n#endif\n#if CC_SURFACES_TRANSFER_LOCAL_POS\n  #define VSOutput_localPos v_localPos\n#endif\n#if CC_SURFACES_TRANSFER_CLIP_POS\n  #define VSOutput_clipPos v_clipPos\n#endif\nstruct SurfacesStandardVertexIntermediate\n{\n  highp vec4 position;\n  vec3 normal;\n#if CC_SURFACES_USE_TANGENT_SPACE\n  vec4 tangent;\n#endif\n#if CC_SURFACES_USE_VERTEX_COLOR\n  vec4 color;\n#endif\n  vec2 texCoord;\n#if CC_SURFACES_USE_SECOND_UV\n  vec2 texCoord1;\n#endif\n  highp vec4 clipPos;\n  highp vec3 worldPos;\n  vec4 worldNormal;\n  #if CC_SURFACES_USE_TANGENT_SPACE\n    vec3 worldTangent, worldBinormal;\n  #endif\n#if CC_RECEIVE_SHADOW || CC_USE_REFLECTION_PROBE\n  vec4 shadowBiasAndProbeId;\n#endif\n#if CC_USE_FOG != 4 && !CC_USE_ACCURATE_FOG\n  float fogFactor;\n#endif\n#if CC_USE_LIGHTMAP && !CC_FORWARD_ADD\n  vec3 lightmapUV;\n#endif\n};\n#if CC_USE_MORPH\n    int getVertexId() {\n      return int(a_vertexId);\n    }\n#endif\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n  mediump vec4 cc_probeInfo;\n  mediump vec4 cc_debug_view_mode;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_surfaceTransform;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\nlayout(std140) uniform CCShadow {\n  highp mat4 cc_matLightView;\n  highp mat4 cc_matLightViewProj;\n  highp vec4 cc_shadowInvProjDepthInfo;\n  highp vec4 cc_shadowProjDepthInfo;\n  highp vec4 cc_shadowProjInfo;\n  mediump vec4 cc_shadowNFLSInfo;\n  mediump vec4 cc_shadowWHPBInfo;\n  mediump vec4 cc_shadowLPNNInfo;\n  lowp vec4 cc_shadowColor;\n  mediump vec4 cc_planarNDInfo;\n};\n#define QUATER_PI         0.78539816340\n#define HALF_PI           1.57079632679\n#define PI                3.14159265359\n#define PI2               6.28318530718\n#define PI4               12.5663706144\n#define INV_QUATER_PI     1.27323954474\n#define INV_HALF_PI       0.63661977237\n#define INV_PI            0.31830988618\n#define INV_PI2           0.15915494309\n#define INV_PI4           0.07957747155\n#define EPSILON           1e-6\n#define EPSILON_LOWP      1e-4\n#define LOG2              1.442695\n#define EXP_VALUE         2.71828183f\n#define FP_MAX            65504.0\n#define FP_SCALE          0.0009765625\n#define FP_SCALE_INV      1024.0\n#define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\n#define LIGHT_MAP_TYPE_DISABLED 0\n#define LIGHT_MAP_TYPE_ALL_IN_ONE 1\n#define LIGHT_MAP_TYPE_INDIRECT_OCCLUSION 2\n#define REFLECTION_PROBE_TYPE_NONE 0\n#define REFLECTION_PROBE_TYPE_CUBE 1\n#define REFLECTION_PROBE_TYPE_PLANAR 2\n#define LIGHT_TYPE_DIRECTIONAL 0.0\n#define LIGHT_TYPE_POINT 1.0\n#define LIGHT_TYPE_SPOT 2.0\n#define LIGHT_TYPE_SPHERE 3.0\n#define LIGHT_TYPE_RANGED_DIRECTIONAL 4.0\n#define IS_DIRECTIONAL_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_DIRECTIONAL)) < EPSILON_LOWP)\n#define IS_SPHERE_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_SPHERE)) < EPSILON_LOWP)\n#define IS_SPOT_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_SPOT)) < EPSILON_LOWP)\n#define IS_POINT_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_POINT)) < EPSILON_LOWP)\n#define IS_RANGED_DIRECTIONAL_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_RANGED_DIRECTIONAL)) < EPSILON_LOWP)\nhighp float decode32 (highp vec4 rgba) {\n  rgba = rgba * 255.0;\n  highp float Sign = 1.0 - (step(128.0, (rgba[3]) + 0.5)) * 2.0;\n  highp float Exponent = 2.0 * (mod(float(int((rgba[3]) + 0.5)), 128.0)) + (step(128.0, (rgba[2]) + 0.5)) - 127.0;\n  highp float Mantissa = (mod(float(int((rgba[2]) + 0.5)), 128.0)) * 65536.0 + rgba[1] * 256.0 + rgba[0] + 8388608.0;\n  return Sign * exp2(Exponent - 23.0) * Mantissa;\n}\n#if !USE_INSTANCING\n  layout(std140) uniform CCLocal {\n    highp mat4 cc_matWorld;\n    highp mat4 cc_matWorldIT;\n    highp vec4 cc_lightingMapUVParam;\n    highp vec4 cc_localShadowBias;\n    highp vec4 cc_reflectionProbeData1;\n    highp vec4 cc_reflectionProbeData2;\n  };\n#endif\nvoid CCGetWorldMatrixFull(out mat4 matWorld, out mat4 matWorldIT)\n{\n  #if USE_INSTANCING\n    matWorld = mat4(\n      vec4(a_matWorld0.xyz, 0.0),\n      vec4(a_matWorld1.xyz, 0.0),\n      vec4(a_matWorld2.xyz, 0.0),\n      vec4(a_matWorld0.w, a_matWorld1.w, a_matWorld2.w, 1.0)\n    );\n    matWorldIT = matWorld;\n  #else\n    matWorld = cc_matWorld;\n    matWorldIT = cc_matWorldIT;\n  #endif\n}\n#if CC_USE_MORPH\n  layout(std140) uniform CCMorph {\n    vec4 cc_displacementWeights[15];\n    vec4 cc_displacementTextureInfo;\n  };\n  #if CC_MORPH_TARGET_HAS_POSITION\n    uniform sampler2D cc_PositionDisplacements;\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    uniform sampler2D cc_NormalDisplacements;\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    uniform sampler2D cc_TangentDisplacements;\n  #endif\n  vec2 getPixelLocation(vec2 textureResolution, int pixelIndex) {\n    float pixelIndexF = float(pixelIndex);\n    float x = mod(pixelIndexF, textureResolution.x);\n    float y = floor(pixelIndexF / textureResolution.x);\n    return vec2(x, y);\n  }\n  vec2 getPixelCoordFromLocation(vec2 location, vec2 textureResolution) {\n    return (vec2(location.x, location.y) + .5) / textureResolution;\n  }\n  #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      vec4 fetchVec3ArrayFromTexture(sampler2D tex, int pixelIndex) {\n        ivec2 texSize = textureSize(tex, 0);\n        return texelFetch(tex, ivec2(pixelIndex % texSize.x, pixelIndex / texSize.x), 0);\n      }\n  #else\n    vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n      int pixelIndex = elementIndex * 4;\n      vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n      vec2 x = getPixelCoordFromLocation(location + vec2(0.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 y = getPixelCoordFromLocation(location + vec2(1.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 z = getPixelCoordFromLocation(location + vec2(2.0, 0.0), cc_displacementTextureInfo.xy);\n      return vec4(\n        decode32(texture(tex, x)),\n        decode32(texture(tex, y)),\n        decode32(texture(tex, z)),\n        1.0\n      );\n    }\n  #endif\n  float getDisplacementWeight(int index) {\n    int quot = index / 4;\n    int remainder = index - quot * 4;\n    if (remainder == 0) {\n      return cc_displacementWeights[quot].x;\n    } else if (remainder == 1) {\n      return cc_displacementWeights[quot].y;\n    } else if (remainder == 2) {\n      return cc_displacementWeights[quot].z;\n    } else {\n      return cc_displacementWeights[quot].w;\n    }\n  }\n  vec3 getVec3DisplacementFromTexture(sampler2D tex, int vertexIndex) {\n  #if CC_MORPH_PRECOMPUTED\n    return fetchVec3ArrayFromTexture(tex, vertexIndex).rgb;\n  #else\n    vec3 result = vec3(0, 0, 0);\n    int nVertices = int(cc_displacementTextureInfo.z);\n    for (int iTarget = 0; iTarget < CC_MORPH_TARGET_COUNT; ++iTarget) {\n      result += (fetchVec3ArrayFromTexture(tex, nVertices * iTarget + vertexIndex).rgb * getDisplacementWeight(iTarget));\n    }\n    return result;\n  #endif\n  }\n  #if CC_MORPH_TARGET_HAS_POSITION\n  vec3 getPositionDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_PositionDisplacements, vertexId);\n  }\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n  vec3 getNormalDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_NormalDisplacements, vertexId);\n  }\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n  vec3 getTangentDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_TangentDisplacements, vertexId);\n  }\n  #endif\n  void applyMorph (inout vec4 position, inout vec3 normal, inout vec4 tangent) {\n    int vertexId = getVertexId();\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    normal.xyz = normal.xyz + getNormalDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    tangent.xyz = tangent.xyz + getTangentDisplacement(vertexId);\n  #endif\n  }\n  void applyMorph (inout vec4 position) {\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(getVertexId());\n  #endif\n  }\n#endif\n#if CC_USE_SKINNING\n  #if CC_USE_BAKED_ANIMATION\n    layout(std140) uniform CCSkinningTexture {\n      highp vec4 cc_jointTextureInfo;\n    };\n    layout(std140) uniform CCSkinningAnimation {\n      highp vec4 cc_jointAnimInfo;\n    };\n    uniform highp sampler2D cc_jointTexture;\n    void CCGetJointTextureCoords(float pixelsPerJoint, float jointIdx, out highp float x, out highp float y, out highp float invSize)\n    {\n      #if USE_INSTANCING\n        highp float temp = pixelsPerJoint * (a_jointAnimInfo.x * a_jointAnimInfo.y + jointIdx) + a_jointAnimInfo.z;\n      #else\n        highp float temp = pixelsPerJoint * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + jointIdx) + cc_jointTextureInfo.z;\n      #endif\n      invSize = cc_jointTextureInfo.w;\n      highp float tempY = floor(temp * invSize);\n      x = floor(temp - tempY * cc_jointTextureInfo.x);\n      y = (tempY + 0.5) * invSize;\n    }\n  #else\n    #if CC_USE_REAL_TIME_JOINT_TEXTURE\n      uniform highp sampler2D cc_realtimeJoint;\n    #else\n      layout(std140) uniform CCSkinning {\n        highp vec4 cc_joints[CC_JOINT_UNIFORM_CAPACITY * 3];\n      };\n    #endif\n  #endif\n  #if CC_USE_BAKED_ANIMATION\n    #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      mat4 getJointMatrix (float i) {\n        highp float x, y, invSize;\n        CCGetJointTextureCoords(3.0, i, x, y, invSize);\n        vec4 v1 = texture(cc_jointTexture, vec2((x + 0.5) * invSize, y));\n        vec4 v2 = texture(cc_jointTexture, vec2((x + 1.5) * invSize, y));\n        vec4 v3 = texture(cc_jointTexture, vec2((x + 2.5) * invSize, y));\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #else\n      mat4 getJointMatrix (float i) {\n        highp float x, y, invSize;\n        CCGetJointTextureCoords(12.0, i, x, y, invSize);\n        vec4 v1 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 0.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 1.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 2.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 3.5) * invSize, y)))\n        );\n        vec4 v2 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 4.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 5.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 6.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 7.5) * invSize, y)))\n        );\n        vec4 v3 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 8.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 9.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 10.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 11.5) * invSize, y)))\n        );\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #else\n    #if CC_USE_REAL_TIME_JOINT_TEXTURE\n      #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n        mat4 getJointMatrix (float i) {\n          float x = i;\n          vec4 v1 = texture(cc_realtimeJoint, vec2( x / 256.0, 0.5 / 3.0));\n          vec4 v2 = texture(cc_realtimeJoint, vec2( x / 256.0, 1.5 / 3.0));\n          vec4 v3 = texture(cc_realtimeJoint, vec2( x / 256.0, 2.5 / 3.0));\n          return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n        }\n      #else\n        mat4 getJointMatrix (float i) {\n         float x = 4.0 * i;\n          vec4 v1 = vec4(\n            decode32(texture(cc_realtimeJoint, vec2((x + 0.5)/ 1024.0, 0.5 / 3.0))),\n            decode32(texture(cc_realtimeJoint, vec2((x + 1.5)/ 1024.0, 0.5 / 3.0))),\n            decode32(texture(cc_realtimeJoint, vec2((x + 2.5)/ 1024.0, 0.5 / 3.0))),\n            decode32(texture(cc_realtimeJoint, vec2((x + 3.5)/ 1024.0, 0.5 / 3.0)))\n          );\n          vec4 v2 = vec4(\n            decode32(texture(cc_realtimeJoint, vec2((x + 0.5)/ 1024.0, 1.5 / 3.0))),\n            decode32(texture(cc_realtimeJoint, vec2((x + 1.5)/ 1024.0, 1.5 / 3.0))),\n            decode32(texture(cc_realtimeJoint, vec2((x + 2.5)/ 1024.0, 1.5 / 3.0))),\n            decode32(texture(cc_realtimeJoint, vec2((x + 3.5)/ 1024.0, 1.5 / 3.0)))\n          );\n          vec4 v3 = vec4(\n            decode32(texture(cc_realtimeJoint, vec2((x + 0.5)/ 1024.0, 2.5 / 3.0))),\n            decode32(texture(cc_realtimeJoint, vec2((x + 1.5)/ 1024.0, 2.5 / 3.0))),\n            decode32(texture(cc_realtimeJoint, vec2((x + 2.5)/ 1024.0, 2.5 / 3.0))),\n            decode32(texture(cc_realtimeJoint, vec2((x + 3.5)/ 1024.0, 2.5 / 3.0)))\n          );\n          return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n        }\n      #endif\n    #else\n      mat4 getJointMatrix (float i) {\n        int idx = int(i);\n        vec4 v1 = cc_joints[idx * 3];\n        vec4 v2 = cc_joints[idx * 3 + 1];\n        vec4 v3 = cc_joints[idx * 3 + 2];\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #endif\n  mat4 skinMatrix () {\n    vec4 joints = vec4(a_joints);\n    return getJointMatrix(joints.x) * a_weights.x\n         + getJointMatrix(joints.y) * a_weights.y\n         + getJointMatrix(joints.z) * a_weights.z\n         + getJointMatrix(joints.w) * a_weights.w;\n  }\n  void CCSkin (inout vec4 position) {\n    mat4 m = skinMatrix();\n    position = m * position;\n  }\n  void CCSkin (inout vec4 position, inout vec3 normal, inout vec4 tangent) {\n    mat4 m = skinMatrix();\n    position = m * position;\n    normal = (m * vec4(normal, 0.0)).xyz;\n    tangent.xyz = (m * vec4(tangent.xyz, 0.0)).xyz;\n  }\n#endif\n#if CC_USE_FOG != 4 && !CC_USE_ACCURATE_FOG\n  #if CC_USE_FOG != 4\n    float LinearFog(vec4 pos, vec3 cameraPos, float fogStart, float fogEnd) {\n        vec4 wPos = pos;\n        float cam_dis = distance(cameraPos, wPos.xyz);\n        return clamp((fogEnd - cam_dis) / (fogEnd - fogStart), 0., 1.);\n    }\n    float ExpFog(vec4 pos, vec3 cameraPos, float fogStart, float fogDensity, float fogAtten) {\n        vec4 wPos = pos;\n        float cam_dis = max(distance(cameraPos, wPos.xyz) - fogStart, 0.0) / fogAtten * 4.;\n        float f = exp(-cam_dis * fogDensity);\n        return f;\n    }\n    float ExpSquaredFog(vec4 pos, vec3 cameraPos, float fogStart, float fogDensity, float fogAtten) {\n        vec4 wPos = pos;\n        float cam_dis = max(distance(cameraPos, wPos.xyz) - fogStart, 0.0) / fogAtten * 4.;\n        float f = exp(-cam_dis * cam_dis * fogDensity * fogDensity);\n        return f;\n    }\n    float LayeredFog(vec4 pos, vec3 cameraPos, float fogTop, float fogRange, float fogAtten) {\n        vec4 wPos = pos;\n        vec3 camWorldProj = cameraPos.xyz;\n        camWorldProj.y = 0.;\n        vec3 worldPosProj = wPos.xyz;\n        worldPosProj.y = 0.;\n        float fDeltaD = distance(worldPosProj, camWorldProj) / fogAtten * 2.0;\n        float fDeltaY, fDensityIntegral;\n        if (cameraPos.y > fogTop) {\n            if (wPos.y < fogTop) {\n                fDeltaY = (fogTop - wPos.y) / fogRange * 2.0;\n                fDensityIntegral = fDeltaY * fDeltaY * 0.5;\n            }\n            else {\n                fDeltaY = 0.;\n                fDensityIntegral = 0.;\n            }\n        }\n        else {\n            if (wPos.y < fogTop) {\n                float fDeltaA = (fogTop - cameraPos.y) / fogRange * 2.;\n                float fDeltaB = (fogTop - wPos.y) / fogRange * 2.;\n                fDeltaY = abs(fDeltaA - fDeltaB);\n                fDensityIntegral = abs((fDeltaA * fDeltaA * 0.5) - (fDeltaB * fDeltaB * 0.5));\n            }\n            else {\n                fDeltaY = abs(fogTop - cameraPos.y) / fogRange * 2.;\n                fDensityIntegral = abs(fDeltaY * fDeltaY * 0.5);\n            }\n        }\n        float fDensity;\n        if (fDeltaY != 0.) {\n            fDensity = (sqrt(1.0 + ((fDeltaD / fDeltaY) * (fDeltaD / fDeltaY)))) * fDensityIntegral;\n        }\n        else {\n            fDensity = 0.;\n        }\n        float f = exp(-fDensity);\n        return f;\n    }\n  #endif\n  void CC_TRANSFER_FOG_BASE(vec4 pos, out float factor)\n  {\n  #if CC_USE_FOG == 0\n  \tfactor = LinearFog(pos, cc_cameraPos.xyz, cc_fogBase.x, cc_fogBase.y);\n  #elif CC_USE_FOG == 1\n  \tfactor = ExpFog(pos, cc_cameraPos.xyz, cc_fogBase.x, cc_fogBase.z, cc_fogAdd.z);\n  #elif CC_USE_FOG == 2\n  \tfactor = ExpSquaredFog(pos, cc_cameraPos.xyz, cc_fogBase.x, cc_fogBase.z, cc_fogAdd.z);\n  #elif CC_USE_FOG == 3\n  \tfactor = LayeredFog(pos, cc_cameraPos.xyz, cc_fogAdd.x, cc_fogAdd.y, cc_fogAdd.z);\n  #else\n  \tfactor = 1.0;\n  #endif\n  }\n#endif\nlayout(std140) uniform Constants {\n  vec4  tilingOffset;\n  vec4  diffuseColor;\n  vec4  specularColor;\n  vec4  emissive;\n  float emissiveScale;\n  float alphaThreshold;\n  float shininessExponent;\n  float glossiness;\n  float metallic;\n  float normalScale;\n  float transparencyFactor;\n  float diffuseFactor;\n  float specularFactor;\n};\n#define CC_SURFACES_VERTEX_MODIFY_UV\nvoid SurfacesVertexModifyUV(inout SurfacesStandardVertexIntermediate In)\n{\n  In.texCoord = In.texCoord * tilingOffset.xy + tilingOffset.zw;\n#if CC_SURFACES_USE_SECOND_UV\n  In.texCoord1 = In.texCoord1 * tilingOffset.xy + tilingOffset.zw;\n#endif\n}\n#ifndef CC_SURFACES_VERTEX_MODIFY_LOCAL_POS\nvec3 SurfacesVertexModifyLocalPos(in SurfacesStandardVertexIntermediate In)\n{\n  return In.position.xyz;\n}\n#endif\n#ifndef CC_SURFACES_VERTEX_MODIFY_LOCAL_NORMAL\nvec3 SurfacesVertexModifyLocalNormal(in SurfacesStandardVertexIntermediate In)\n{\n  return In.normal.xyz;\n}\n#endif\n#ifndef CC_SURFACES_VERTEX_MODIFY_LOCAL_TANGENT\n  #if CC_SURFACES_USE_TANGENT_SPACE\n  vec4 SurfacesVertexModifyLocalTangent(in SurfacesStandardVertexIntermediate In)\n    {\n      return In.tangent;\n    }\n  #endif\n#endif\n#ifndef CC_SURFACES_VERTEX_MODIFY_LOCAL_SHARED_DATA\nvoid SurfacesVertexModifyLocalSharedData(inout SurfacesStandardVertexIntermediate In)\n{\n}\n#endif\n#ifndef CC_SURFACES_VERTEX_MODIFY_WORLD_POS\nvec3 SurfacesVertexModifyWorldPos(in SurfacesStandardVertexIntermediate In)\n{\n  return In.worldPos;\n}\n#endif\n#ifndef CC_SURFACES_VERTEX_MODIFY_CLIP_POS\nvec4 SurfacesVertexModifyClipPos(in SurfacesStandardVertexIntermediate In)\n{\n  return In.clipPos;\n}\n#endif\n#ifndef CC_SURFACES_VERTEX_MODIFY_UV\nvoid SurfacesVertexModifyUV(inout SurfacesStandardVertexIntermediate In)\n{\n}\n#endif\n#ifndef CC_SURFACES_VERTEX_MODIFY_WORLD_NORMAL\nvec3 SurfacesVertexModifyWorldNormal(in SurfacesStandardVertexIntermediate In)\n{\n    vec3 worldNormal = In.worldNormal.xyz;\n  #if CC_SURFACES_USE_TWO_SIDED\n      worldNormal.xyz *= In.worldNormal.w;\n  #endif\n  return worldNormal;\n}\n#endif\n#ifndef CC_SURFACES_VERTEX_MODIFY_SHARED_DATA\nvoid SurfacesVertexModifySharedData(inout SurfacesStandardVertexIntermediate In)\n{\n}\n#endif\nvoid CCSurfacesVertexInput(out SurfacesStandardVertexIntermediate In)\n{\n  In.position = vec4(a_position, 1.0);\n  In.normal = a_normal;\n#if CC_SURFACES_USE_TANGENT_SPACE\n  In.tangent = a_tangent;\n#endif\n#if CC_SURFACES_USE_VERTEX_COLOR\n  In.color = a_color;\n#endif\n  In.texCoord = a_texCoord;\n#if CC_SURFACES_USE_SECOND_UV\n  In.texCoord1 = a_texCoord1;\n#endif\n}\nvoid CCSurfacesVertexOutput(in SurfacesStandardVertexIntermediate In)\n{\n  gl_Position = In.clipPos;\n  VSOutput_worldNormal = In.worldNormal.xyz;\n  VSOutput_faceSideSign = In.worldNormal.w;\n  VSOutput_worldPos = In.worldPos;\n#if CC_SURFACES_USE_TANGENT_SPACE\n  VSOutput_worldTangent = In.worldTangent.xyz;\n  VSOutput_mirrorNormal = In.tangent.w > 0.0 ? 1.0 : -1.0;\n#endif\n#if CC_SURFACES_USE_VERTEX_COLOR\n  VSOutput_vertexColor = In.color;\n#endif\n  VSOutput_texcoord = In.texCoord;\n#if CC_SURFACES_USE_SECOND_UV\n  VSOutput_texcoord1 = In.texCoord1;\n#endif\n#if CC_USE_FOG != 4 && !CC_USE_ACCURATE_FOG\n  VSOutput_fogFactor = In.fogFactor;\n#endif\n#if CC_RECEIVE_SHADOW\n  VSOutput_shadowBias = In.shadowBiasAndProbeId.xy;\n#endif\n#if CC_USE_REFLECTION_PROBE\n  VSOutput_reflectionProbeId = In.shadowBiasAndProbeId.z;\n#endif\n#if CC_USE_LIGHTMAP && !CC_FORWARD_ADD\n  VSOutput_lightMapUV = In.lightmapUV;\n#endif\n#if CC_SURFACES_TRANSFER_LOCAL_POS\n  VSOutput_localPos = In.position;\n#endif\n#if CC_SURFACES_TRANSFER_CLIP_POS\n  VSOutput_clipPos = In.clipPos;\n#endif\n#if CC_USE_LIGHT_PROBE\n  #if USE_INSTANCING\n    v_sh_linear_const_r = a_sh_linear_const_r;\n    v_sh_linear_const_g = a_sh_linear_const_g;\n    v_sh_linear_const_b = a_sh_linear_const_b;\n  #endif\n#endif\n}\nvoid CCSurfacesVertexAnimation(inout SurfacesStandardVertexIntermediate In)\n{\nvec4 temp = vec4(0.0);\n#if CC_USE_MORPH\n  #if CC_SURFACES_USE_TANGENT_SPACE\n    applyMorph(In.position, In.normal, In.tangent);\n  #else\n    applyMorph(In.position, In.normal, temp);\n  #endif\n#endif\n#if CC_USE_SKINNING\n  #if CC_SURFACES_USE_TANGENT_SPACE\n    CCSkin(In.position, In.normal, In.tangent);\n  #else\n    CCSkin(In.position, In.normal, temp);\n  #endif\n#endif\n}\nvoid CCSurfacesVertexWorldTransform(inout SurfacesStandardVertexIntermediate In)\n{\n    mat4 matWorld, matWorldIT;\n    CCGetWorldMatrixFull(matWorld, matWorldIT);\n    In.worldPos = (matWorld * In.position).xyz;\n    In.worldNormal.xyz = normalize((matWorldIT * vec4(In.normal.xyz, 0.0)).xyz);\n    #if CC_SURFACES_USE_TANGENT_SPACE\n      In.worldTangent = normalize((matWorld * vec4(In.tangent.xyz, 0.0)).xyz);\n      In.worldBinormal = cross(In.worldNormal.xyz, In.worldTangent) * In.tangent.w;\n    #endif\n}\nvoid CCSurfacesVertexTransformUV(inout SurfacesStandardVertexIntermediate In)\n{\n  #if CC_SURFACES_FLIP_UV\n    In.texCoord = cc_cameraPos.w > 1.0 ? vec2(In.texCoord.x, 1.0 - In.texCoord.y) : In.texCoord;\n    #if CC_SURFACES_USE_SECOND_UV\n      In.texCoord1 = cc_cameraPos.w > 1.0 ? vec2(In.texCoord1.x, 1.0 - In.texCoord1.y) : In.texCoord1;\n    #endif\n  #endif\n}\nvoid CCSurfacesVertexTransferFog(inout SurfacesStandardVertexIntermediate In)\n{\n#if CC_USE_FOG != 4 && !CC_USE_ACCURATE_FOG\n    CC_TRANSFER_FOG_BASE(vec4(In.worldPos, 1.0), In.fogFactor);\n#endif\n}\nvoid CCSurfacesVertexTransferShadow(inout SurfacesStandardVertexIntermediate In)\n{\n  #if CC_RECEIVE_SHADOW || CC_USE_REFLECTION_PROBE\n    In.shadowBiasAndProbeId = vec4(0.0);\n  #endif\n  #if CC_RECEIVE_SHADOW\n    In.shadowBiasAndProbeId.xy = vec2(cc_shadowWHPBInfo.w, cc_shadowLPNNInfo.z);\n    #if USE_INSTANCING\n      In.shadowBiasAndProbeId.xy += a_localShadowBiasAndProbeId.xy;\n    #else\n      In.shadowBiasAndProbeId.xy += cc_localShadowBias.xy;\n    #endif\n  #endif\n  #if CC_USE_REFLECTION_PROBE\n    #if USE_INSTANCING\n      In.shadowBiasAndProbeId.zw = a_localShadowBiasAndProbeId.zw;\n    #else\n      In.shadowBiasAndProbeId.zw = cc_localShadowBias.zw;\n    #endif\n  #endif\n}\nvoid CCSurfacesVertexTransferLightMapUV(inout SurfacesStandardVertexIntermediate In)\n{\n#if CC_USE_LIGHTMAP && !CC_FORWARD_ADD\n  #if USE_INSTANCING\n    In.lightmapUV.xy = a_lightingMapUVParam.xy + a_texCoord1 * a_lightingMapUVParam.z;\n    In.lightmapUV.z = a_lightingMapUVParam.w;\n  #else\n    In.lightmapUV.xy = cc_lightingMapUVParam.xy + a_texCoord1 * cc_lightingMapUVParam.z;\n    In.lightmapUV.z = cc_lightingMapUVParam.w;\n  #endif\n#endif\n}\nvoid main()\n{\n  SurfacesStandardVertexIntermediate In;\n  CCSurfacesVertexInput(In);\n  CCSurfacesVertexAnimation(In);\n  In.position.xyz = SurfacesVertexModifyLocalPos(In);\n  In.normal.xyz = SurfacesVertexModifyLocalNormal(In);\n  #if CC_SURFACES_USE_TANGENT_SPACE\n    In.tangent = SurfacesVertexModifyLocalTangent(In);\n  #endif\n  SurfacesVertexModifyLocalSharedData(In);\n  CCSurfacesVertexWorldTransform(In);\n  In.worldPos = SurfacesVertexModifyWorldPos(In);\n  In.clipPos = cc_matProj * cc_matView * vec4(In.worldPos, 1.0);\n  In.clipPos = SurfacesVertexModifyClipPos(In);\n  vec3 viewDirect = normalize(cc_cameraPos.xyz - In.worldPos);\n  In.worldNormal.w = dot(In.worldNormal.xyz, viewDirect) < 0.0 ? -1.0 : 1.0;\n  In.worldNormal.xyz = SurfacesVertexModifyWorldNormal(In);\n  SurfacesVertexModifyUV(In);\n  SurfacesVertexModifySharedData(In);\n  CCSurfacesVertexTransformUV(In);\n  CCSurfacesVertexTransferFog(In);\n  CCSurfacesVertexTransferShadow(In);\n  CCSurfacesVertexTransferLightMapUV(In);\n  CCSurfacesVertexOutput(In);\n}","frag":"\nprecision highp float;\n  #define CC_SURFACES_USE_SECOND_UV HAS_SECOND_UV\n  #define CC_SURFACES_USE_TWO_SIDED USE_TWOSIDE\n  #define CC_SURFACES_USE_REFLECTION_DENOISE USE_REFLECTION_DENOISE\n  #define CC_SURFACES_LIGHTING_ANISOTROPIC IS_ANISOTROPY\n  #define CC_SURFACES_USE_VERTEX_COLOR USE_VERTEX_COLOR\n  #define CC_SURFACES_USE_LEGACY_COMPATIBLE_LIGHTING USE_COMPATIBLE_LIGHTING\n#if IS_ANISOTROPY || USE_NORMAL_MAP\n  #define CC_SURFACES_USE_TANGENT_SPACE 1\n#endif\n  #define CC_SURFACES_LIGHTING_ANISOTROPIC_ENVCONVOLUTION_COUNT 31\n#ifndef CC_SURFACES_USE_SECOND_UV\n  #define CC_SURFACES_USE_SECOND_UV 0\n#endif\n#ifndef CC_SURFACES_USE_TANGENT_SPACE\n  #define CC_SURFACES_USE_TANGENT_SPACE 0\n#endif\n#ifndef CC_SURFACES_USE_VERTEX_COLOR\n  #define CC_SURFACES_USE_VERTEX_COLOR 0\n#endif\n#ifndef CC_SURFACES_TRANSFER_LOCAL_POS\n  #define CC_SURFACES_TRANSFER_LOCAL_POS 0\n#endif\n#ifndef CC_SURFACES_TRANSFER_CLIP_POS\n  #define CC_SURFACES_TRANSFER_CLIP_POS 0\n#endif\n#ifndef CC_SURFACES_USE_LIGHT_MAP\n  #ifdef CC_USE_LIGHTMAP\n    #define CC_SURFACES_USE_LIGHT_MAP CC_USE_LIGHTMAP\n  #else\n    #define CC_SURFACES_USE_LIGHT_MAP 0\n  #endif\n#endif\n#ifndef CC_SURFACES_FLIP_UV\n  #define CC_SURFACES_FLIP_UV 0\n#endif\n#ifndef CC_SURFACES_USE_TWO_SIDED\n  #define CC_SURFACES_USE_TWO_SIDED 0\n#endif\n#ifndef CC_SURFACES_USE_REFLECTION_DENOISE\n  #define CC_SURFACES_USE_REFLECTION_DENOISE 0\n#endif\n#ifndef CC_SURFACES_LIGHTING_ANISOTROPIC\n  #define CC_SURFACES_LIGHTING_ANISOTROPIC 0\n#endif\n#ifndef CC_SURFACES_LIGHTING_ANISOTROPIC_ENVCONVOLUTION_COUNT\n  #define CC_SURFACES_LIGHTING_ANISOTROPIC_ENVCONVOLUTION_COUNT 0\n#endif\n#ifndef CC_SURFACES_USE_LEGACY_COMPATIBLE_LIGHTING\n  #define CC_SURFACES_USE_LEGACY_COMPATIBLE_LIGHTING 0\n#endif\n#ifndef CC_SURFACES_LIGHTING_USE_FRESNEL\n  #define CC_SURFACES_LIGHTING_USE_FRESNEL 0\n#endif\n#ifndef CC_SURFACES_LIGHTING_TRANSMIT_SPECULAR\n  #define CC_SURFACES_LIGHTING_TRANSMIT_SPECULAR 0\n#endif\n#ifndef CC_SURFACES_LIGHTING_TRANSMIT_DIFFUSE\n  #define CC_SURFACES_LIGHTING_TRANSMIT_DIFFUSE 0\n#endif\n#ifndef CC_SURFACES_LIGHTING_USE_SHADOWMAP_TRANSMIT\n  #define CC_SURFACES_LIGHTING_USE_SHADOWMAP_TRANSMIT 0\n#endif\n#ifndef CC_SURFACES_LIGHTING_TRT\n  #define CC_SURFACES_LIGHTING_TRT 0\n#endif\n#ifndef CC_SURFACES_LIGHTING_TT\n  #define CC_SURFACES_LIGHTING_TT 0\n#endif\n#ifndef CC_SURFACES_ENABLE_DEBUG_VIEW\n  #define CC_SURFACES_ENABLE_DEBUG_VIEW 1\n#endif\n#ifndef CC_SURFACES_LIGHTING_CALCULATE_DIFFUSE\n  #define CC_SURFACES_LIGHTING_CALCULATE_DIFFUSE 1\n#endif\n#ifndef CC_SURFACES_LIGHTING_CALCULATE_SPECULAR\n  #define CC_SURFACES_LIGHTING_CALCULATE_SPECULAR 1\n#endif\n#define CC_USE_SURFACE_SHADER 1\nin highp vec3 v_worldPos;\nin mediump vec4 v_normal;\nin vec2 v_uv;\n#if CC_SURFACES_USE_VERTEX_COLOR\n  in lowp vec4 v_color;\n#endif\n#if CC_SURFACES_USE_TANGENT_SPACE\n  in mediump vec4 v_tangent;\n#endif\n#if CC_SURFACES_USE_SECOND_UV\n  in mediump vec2 v_uv1;\n#endif\n#if CC_USE_LIGHTMAP && !CC_FORWARD_ADD\n  in mediump vec3 v_luv;\n#endif\n#if CC_RECEIVE_SHADOW || CC_USE_REFLECTION_PROBE\n  in mediump vec4 v_shadowBiasAndProbeId;\n#endif\n#if CC_USE_FOG != 4 && !CC_USE_ACCURATE_FOG\n  in mediump float v_fogFactor;\n#endif\n#if CC_SURFACES_TRANSFER_LOCAL_POS\n  in highp vec4 v_localPos;\n#endif\n#if CC_SURFACES_TRANSFER_CLIP_POS\n  in highp vec4 v_clipPos;\n#endif\n#if CC_USE_LIGHT_PROBE\n  #if USE_INSTANCING\n    in mediump vec4 v_sh_linear_const_r;\n    in mediump vec4 v_sh_linear_const_g;\n    in mediump vec4 v_sh_linear_const_b;\n  #endif\n#endif\n#define FSInput_worldPos v_worldPos\n#define FSInput_worldNormal v_normal.xyz\n#define FSInput_faceSideSign v_normal.w\n#define FSInput_texcoord v_uv\n#if CC_SURFACES_USE_VERTEX_COLOR\n  #define FSInput_vertexColor v_color\n#else\n  #define FSInput_vertexColor vec4(1.0)\n#endif\n#if CC_SURFACES_USE_TANGENT_SPACE\n  #define FSInput_worldTangent v_tangent.xyz\n  #define FSInput_mirrorNormal v_tangent.w\n#else\n  #define FSInput_worldTangent vec3(0.0, 0.0, 0.0)\n  #define FSInput_mirrorNormal 1.0\n#endif\n#if CC_SURFACES_USE_SECOND_UV\n  #define FSInput_texcoord1 v_uv1\n#else\n  #define FSInput_texcoord1 vec2(0.0, 0.0)\n#endif\n#if CC_USE_LIGHTMAP && !CC_FORWARD_ADD\n  #define FSInput_lightMapUV v_luv\n#endif\n#if CC_RECEIVE_SHADOW\n  #define FSInput_shadowBias v_shadowBiasAndProbeId.xy\n#endif\n#if CC_USE_REFLECTION_PROBE\n  #define FSInput_reflectionProbeId v_shadowBiasAndProbeId.z\n#endif\n#if CC_USE_FOG != 4 && !CC_USE_ACCURATE_FOG\n  #define FSInput_fogFactor v_fogFactor\n#endif\n#if CC_SURFACES_TRANSFER_LOCAL_POS\n  #define FSInput_localPos v_localPos\n#endif\n#if CC_SURFACES_TRANSFER_CLIP_POS\n  #define FSInput_clipPos v_clipPos\n#endif\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n  mediump vec4 cc_probeInfo;\n  mediump vec4 cc_debug_view_mode;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_surfaceTransform;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\n#define CC_SURFACES_DEBUG_VIEW_VERTEX_COLOR 1\n#define CC_SURFACES_DEBUG_VIEW_VERTEX_NORMAL CC_SURFACES_DEBUG_VIEW_VERTEX_COLOR + 1\n#define CC_SURFACES_DEBUG_VIEW_VERTEX_TANGENT CC_SURFACES_DEBUG_VIEW_VERTEX_NORMAL + 1\n#define CC_SURFACES_DEBUG_VIEW_WORLD_POS CC_SURFACES_DEBUG_VIEW_VERTEX_TANGENT + 1\n#define CC_SURFACES_DEBUG_VIEW_VERTEX_MIRROR CC_SURFACES_DEBUG_VIEW_WORLD_POS + 1\n#define CC_SURFACES_DEBUG_VIEW_FACE_SIDE CC_SURFACES_DEBUG_VIEW_VERTEX_MIRROR + 1\n#define CC_SURFACES_DEBUG_VIEW_UV0 CC_SURFACES_DEBUG_VIEW_FACE_SIDE + 1\n#define CC_SURFACES_DEBUG_VIEW_UV1 CC_SURFACES_DEBUG_VIEW_UV0 + 1\n#define CC_SURFACES_DEBUG_VIEW_UVLIGHTMAP CC_SURFACES_DEBUG_VIEW_UV1 + 1\n#define CC_SURFACES_DEBUG_VIEW_PROJ_DEPTH CC_SURFACES_DEBUG_VIEW_UVLIGHTMAP + 1\n#define CC_SURFACES_DEBUG_VIEW_LINEAR_DEPTH CC_SURFACES_DEBUG_VIEW_PROJ_DEPTH + 1\n#define CC_SURFACES_DEBUG_VIEW_FRAGMENT_NORMAL CC_SURFACES_DEBUG_VIEW_LINEAR_DEPTH + 1\n#define CC_SURFACES_DEBUG_VIEW_FRAGMENT_TANGENT CC_SURFACES_DEBUG_VIEW_FRAGMENT_NORMAL + 1\n#define CC_SURFACES_DEBUG_VIEW_FRAGMENT_BINORMAL CC_SURFACES_DEBUG_VIEW_FRAGMENT_TANGENT + 1\n#define CC_SURFACES_DEBUG_VIEW_BASE_COLOR CC_SURFACES_DEBUG_VIEW_FRAGMENT_BINORMAL + 1\n#define CC_SURFACES_DEBUG_VIEW_DIFFUSE_COLOR CC_SURFACES_DEBUG_VIEW_BASE_COLOR + 1\n#define CC_SURFACES_DEBUG_VIEW_SPECULAR_COLOR CC_SURFACES_DEBUG_VIEW_DIFFUSE_COLOR + 1\n#define CC_SURFACES_DEBUG_VIEW_TRANSPARENCY CC_SURFACES_DEBUG_VIEW_SPECULAR_COLOR + 1\n#define CC_SURFACES_DEBUG_VIEW_METALLIC CC_SURFACES_DEBUG_VIEW_TRANSPARENCY + 1\n#define CC_SURFACES_DEBUG_VIEW_ROUGHNESS CC_SURFACES_DEBUG_VIEW_METALLIC + 1\n#define CC_SURFACES_DEBUG_VIEW_SPECULAR_INTENSITY CC_SURFACES_DEBUG_VIEW_ROUGHNESS + 1\n#define CC_SURFACES_DEBUG_VIEW_IOR CC_SURFACES_DEBUG_VIEW_SPECULAR_INTENSITY + 1\n#define CC_SURFACES_DEBUG_VIEW_DIRECT_DIFFUSE CC_SURFACES_DEBUG_VIEW_IOR + 1\n#define CC_SURFACES_DEBUG_VIEW_DIRECT_SPECULAR CC_SURFACES_DEBUG_VIEW_DIRECT_DIFFUSE + 1\n#define CC_SURFACES_DEBUG_VIEW_DIRECT_ALL CC_SURFACES_DEBUG_VIEW_DIRECT_SPECULAR + 1\n#define CC_SURFACES_DEBUG_VIEW_ENV_DIFFUSE CC_SURFACES_DEBUG_VIEW_DIRECT_ALL + 1\n#define CC_SURFACES_DEBUG_VIEW_ENV_SPECULAR CC_SURFACES_DEBUG_VIEW_ENV_DIFFUSE + 1\n#define CC_SURFACES_DEBUG_VIEW_ENV_ALL CC_SURFACES_DEBUG_VIEW_ENV_SPECULAR + 1\n#define CC_SURFACES_DEBUG_VIEW_EMISSIVE CC_SURFACES_DEBUG_VIEW_ENV_ALL + 1\n#define CC_SURFACES_DEBUG_VIEW_LIGHT_MAP CC_SURFACES_DEBUG_VIEW_EMISSIVE + 1\n#define CC_SURFACES_DEBUG_VIEW_SHADOW CC_SURFACES_DEBUG_VIEW_LIGHT_MAP + 1\n#define CC_SURFACES_DEBUG_VIEW_AO CC_SURFACES_DEBUG_VIEW_SHADOW + 1\n#define CC_SURFACES_DEBUG_VIEW_FRESNEL CC_SURFACES_DEBUG_VIEW_AO + 1\n#define CC_SURFACES_DEBUG_VIEW_TRANSMIT_DIRECT_DIFFUSE CC_SURFACES_DEBUG_VIEW_FRESNEL + 1\n#define CC_SURFACES_DEBUG_VIEW_TRANSMIT_DIRECT_SPECULAR CC_SURFACES_DEBUG_VIEW_TRANSMIT_DIRECT_DIFFUSE + 1\n#define CC_SURFACES_DEBUG_VIEW_TRANSMIT_ENV_DIFFUSE CC_SURFACES_DEBUG_VIEW_TRANSMIT_DIRECT_SPECULAR + 1\n#define CC_SURFACES_DEBUG_VIEW_TRANSMIT_ENV_SPECULAR CC_SURFACES_DEBUG_VIEW_TRANSMIT_ENV_DIFFUSE + 1\n#define CC_SURFACES_DEBUG_VIEW_TRANSMIT_ALL CC_SURFACES_DEBUG_VIEW_TRANSMIT_ENV_SPECULAR + 1\n#define CC_SURFACES_DEBUG_VIEW_TRT_DIRECT CC_SURFACES_DEBUG_VIEW_TRANSMIT_ALL + 1\n#define CC_SURFACES_DEBUG_VIEW_TRT_ENVIRONMENT CC_SURFACES_DEBUG_VIEW_TRT_DIRECT + 1\n#define CC_SURFACES_DEBUG_VIEW_TRT_ALL CC_SURFACES_DEBUG_VIEW_TRT_ENVIRONMENT + 1\n#define CC_SURFACES_DEBUG_VIEW_FOG CC_SURFACES_DEBUG_VIEW_TRT_ALL + 1\n#define CC_SURFACES_DEBUG_VIEW_SINGLE 1\n#define CC_SURFACES_DEBUG_VIEW_COMPOSITE_AND_MISC 2\n#define IS_DEBUG_VIEW_ENABLE_WITH_CAMERA (cc_surfaceTransform.y != 3.0)\n#define IS_DEBUG_VIEW_LIGHTING_ENABLE_WITH_ALBEDO (UnpackBitFromFloat(cc_debug_view_mode.w, 6) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_MISC_ENABLE_CSM_LAYER_COLORATION (UnpackBitFromFloat(cc_debug_view_mode.w, 7) && IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_DIRECT_DIFFUSE (UnpackBitFromFloat(cc_debug_view_mode.y, 0) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_DIRECT_SPECULAR (UnpackBitFromFloat(cc_debug_view_mode.y, 1) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_ENV_DIFFUSE (UnpackBitFromFloat(cc_debug_view_mode.y, 2) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_ENV_SPECULAR (UnpackBitFromFloat(cc_debug_view_mode.y, 3) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_EMISSIVE (UnpackBitFromFloat(cc_debug_view_mode.y, 4) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_LIGHT_MAP (UnpackBitFromFloat(cc_debug_view_mode.y, 5) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_SHADOW (UnpackBitFromFloat(cc_debug_view_mode.y, 6) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_AO (UnpackBitFromFloat(cc_debug_view_mode.y, 7) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_NORMAL_MAP (UnpackBitFromFloat(cc_debug_view_mode.z, 0) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_FOG (UnpackBitFromFloat(cc_debug_view_mode.z, 1) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_TONE_MAPPING (UnpackBitFromFloat(cc_debug_view_mode.z, 2) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_GAMMA_CORRECTION (UnpackBitFromFloat(cc_debug_view_mode.z, 3) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_FRESNEL (UnpackBitFromFloat(cc_debug_view_mode.z, 4) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_TRANSMIT_DIFFUSE (UnpackBitFromFloat(cc_debug_view_mode.z, 5) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_TRANSMIT_SPECULAR (UnpackBitFromFloat(cc_debug_view_mode.z, 6) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_TRT (UnpackBitFromFloat(cc_debug_view_mode.z, 7) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_TT (UnpackBitFromFloat(cc_debug_view_mode.w, 0) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#if (CC_PIPELINE_TYPE == 0 || CC_FORCE_FORWARD_SHADING)\n  #if CC_FORWARD_ADD\n    #if CC_PIPELINE_TYPE == 0\n      #define LIGHTS_PER_PASS 1\n    #else\n      #define LIGHTS_PER_PASS 10\n    #endif\n    #if CC_ENABLE_CLUSTERED_LIGHT_CULLING == 0\n    layout(std140) uniform CCForwardLight {\n      highp vec4 cc_lightPos[LIGHTS_PER_PASS];\n      vec4 cc_lightColor[LIGHTS_PER_PASS];\n      vec4 cc_lightSizeRangeAngle[LIGHTS_PER_PASS];\n      vec4 cc_lightDir[LIGHTS_PER_PASS];\n    };\n    #endif\n  #endif\n#endif\n#if CC_USE_LIGHT_PROBE\n  #if !USE_INSTANCING\n    layout(std140) uniform CCSH {\n      vec4 cc_sh_linear_const_r;\n      vec4 cc_sh_linear_const_g;\n      vec4 cc_sh_linear_const_b;\n      vec4 cc_sh_quadratic_r;\n      vec4 cc_sh_quadratic_g;\n      vec4 cc_sh_quadratic_b;\n      vec4 cc_sh_quadratic_a;\n    };\n  #endif\n#endif\nlayout(std140) uniform CCShadow {\n  highp mat4 cc_matLightView;\n  highp mat4 cc_matLightViewProj;\n  highp vec4 cc_shadowInvProjDepthInfo;\n  highp vec4 cc_shadowProjDepthInfo;\n  highp vec4 cc_shadowProjInfo;\n  mediump vec4 cc_shadowNFLSInfo;\n  mediump vec4 cc_shadowWHPBInfo;\n  mediump vec4 cc_shadowLPNNInfo;\n  lowp vec4 cc_shadowColor;\n  mediump vec4 cc_planarNDInfo;\n};\n#if CC_SUPPORT_CASCADED_SHADOW_MAP\n  layout(std140) uniform CCCSM {\n    highp vec4 cc_csmViewDir0[4];\n    highp vec4 cc_csmViewDir1[4];\n    highp vec4 cc_csmViewDir2[4];\n    highp vec4 cc_csmAtlas[4];\n    highp mat4 cc_matCSMViewProj[4];\n    highp vec4 cc_csmProjDepthInfo[4];\n    highp vec4 cc_csmProjInfo[4];\n    highp vec4 cc_csmSplitsInfo;\n  };\n#endif\nuniform samplerCube cc_environment;\n#if CC_USE_IBL\n  #if CC_USE_DIFFUSEMAP\n    uniform samplerCube cc_diffuseMap;\n  #endif\n#endif\n#if CC_USE_REFLECTION_PROBE\n  uniform samplerCube cc_reflectionProbeCubemap;\n  uniform sampler2D cc_reflectionProbePlanarMap;\n  uniform sampler2D cc_reflectionProbeDataMap;\n#endif\n#define QUATER_PI         0.78539816340\n#define HALF_PI           1.57079632679\n#define PI                3.14159265359\n#define PI2               6.28318530718\n#define PI4               12.5663706144\n#define INV_QUATER_PI     1.27323954474\n#define INV_HALF_PI       0.63661977237\n#define INV_PI            0.31830988618\n#define INV_PI2           0.15915494309\n#define INV_PI4           0.07957747155\n#define EPSILON           1e-6\n#define EPSILON_LOWP      1e-4\n#define LOG2              1.442695\n#define EXP_VALUE         2.71828183f\n#define FP_MAX            65504.0\n#define FP_SCALE          0.0009765625\n#define FP_SCALE_INV      1024.0\n#define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\n#define LIGHT_MAP_TYPE_DISABLED 0\n#define LIGHT_MAP_TYPE_ALL_IN_ONE 1\n#define LIGHT_MAP_TYPE_INDIRECT_OCCLUSION 2\n#define REFLECTION_PROBE_TYPE_NONE 0\n#define REFLECTION_PROBE_TYPE_CUBE 1\n#define REFLECTION_PROBE_TYPE_PLANAR 2\n#define LIGHT_TYPE_DIRECTIONAL 0.0\n#define LIGHT_TYPE_POINT 1.0\n#define LIGHT_TYPE_SPOT 2.0\n#define LIGHT_TYPE_SPHERE 3.0\n#define LIGHT_TYPE_RANGED_DIRECTIONAL 4.0\n#define IS_DIRECTIONAL_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_DIRECTIONAL)) < EPSILON_LOWP)\n#define IS_SPHERE_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_SPHERE)) < EPSILON_LOWP)\n#define IS_SPOT_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_SPOT)) < EPSILON_LOWP)\n#define IS_POINT_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_POINT)) < EPSILON_LOWP)\n#define IS_RANGED_DIRECTIONAL_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_RANGED_DIRECTIONAL)) < EPSILON_LOWP)\nvec4 fragTextureLod (sampler2D tex, vec2 coord, float lod) {\n    return textureLod(tex, coord, lod);\n}\nvec4 fragTextureLod (samplerCube tex, vec3 coord, float lod) {\n    return textureLod(tex, coord, lod);\n}\n#define UnpackBitFromFloat(value, bit) (mod(floor(value / pow(10.0, float(bit))), 10.0) > 0.0)\nhighp float unpackHighpData (float mainPart, float modPart) {\n  highp float data = mainPart;\n  return data + modPart;\n}\nvoid packHighpData (out float mainPart, out float modPart, highp float data) {\n  mainPart = fract(data);\n  modPart = data - mainPart;\n}\nhighp float unpackHighpData (float mainPart, float modPart, const float modValue) {\n  highp float data = mainPart * modValue;\n  return data + modPart * modValue;\n}\nvoid packHighpData (out float mainPart, out float modPart, highp float data, const float modValue) {\n  highp float divide = data / modValue;\n  mainPart = floor(divide);\n  modPart = (data - mainPart * modValue) / modValue;\n}\nhighp vec2 unpackHighpData (vec2 mainPart, vec2 modPart) {\n  highp vec2 data = mainPart;\n  return data + modPart;\n}\nvoid packHighpData (out vec2 mainPart, out vec2 modPart, highp vec2 data) {\n  mainPart = fract(data);\n  modPart = data - mainPart;\n}\nhighp vec2 unpackHighpData (vec2 mainPart, vec2 modPart, const float modValue) {\n  highp vec2 data = mainPart * modValue;\n  return data + modPart * modValue;\n}\nvoid packHighpData (out vec2 mainPart, out vec2 modPart, highp vec2 data, const float modValue) {\n  highp vec2 divide = data / modValue;\n  mainPart = floor(divide);\n  modPart = (data - mainPart * modValue) / modValue;\n}\nhighp vec3 unpackHighpData (vec3 mainPart, vec3 modPart) {\n  highp vec3 data = mainPart;\n  return data + modPart;\n}\nvoid packHighpData (out vec3 mainPart, out vec3 modPart, highp vec3 data) {\n  mainPart = fract(data);\n  modPart = data - mainPart;\n}\nhighp vec3 unpackHighpData (vec3 mainPart, vec3 modPart, const float modValue) {\n  highp vec3 data = mainPart * modValue;\n  return data + modPart * modValue;\n}\nvoid packHighpData (out vec3 mainPart, out vec3 modPart, highp vec3 data, const float modValue) {\n  highp vec3 divide = data / modValue;\n  mainPart = floor(divide);\n  modPart = (data - mainPart * modValue) / modValue;\n}\nhighp vec4 unpackHighpData (vec4 mainPart, vec4 modPart) {\n  highp vec4 data = mainPart;\n  return data + modPart;\n}\nvoid packHighpData (out vec4 mainPart, out vec4 modPart, highp vec4 data) {\n  mainPart = fract(data);\n  modPart = data - mainPart;\n}\nhighp vec4 unpackHighpData (vec4 mainPart, vec4 modPart, const float modValue) {\n  highp vec4 data = mainPart * modValue;\n  return data + modPart * modValue;\n}\nvoid packHighpData (out vec4 mainPart, out vec4 modPart, highp vec4 data, const float modValue) {\n  highp vec4 divide = data / modValue;\n  mainPart = floor(divide);\n  modPart = (data - mainPart * modValue) / modValue;\n}\nhighp float decode32 (highp vec4 rgba) {\n  rgba = rgba * 255.0;\n  highp float Sign = 1.0 - (step(128.0, (rgba[3]) + 0.5)) * 2.0;\n  highp float Exponent = 2.0 * (mod(float(int((rgba[3]) + 0.5)), 128.0)) + (step(128.0, (rgba[2]) + 0.5)) - 127.0;\n  highp float Mantissa = (mod(float(int((rgba[2]) + 0.5)), 128.0)) * 65536.0 + rgba[1] * 256.0 + rgba[0] + 8388608.0;\n  return Sign * exp2(Exponent - 23.0) * Mantissa;\n}\nvec4 packRGBE (vec3 rgb) {\n  highp float maxComp = max(max(rgb.r, rgb.g), rgb.b);\n  highp float e = 128.0;\n  if (maxComp > 0.0001) {\n    e = log(maxComp) / log(1.1);\n    e = ceil(e);\n    e = clamp(e + 128.0, 0.0, 255.0);\n  }\n  highp float sc = 1.0 / pow(1.1, e - 128.0);\n  vec3 encode = clamp(rgb * sc, vec3(0.0), vec3(1.0)) * 255.0;\n  vec3 encode_rounded = floor(encode) + step(encode - floor(encode), vec3(0.5));\n  return vec4(encode_rounded, e) / 255.0;\n}\nvec3 unpackRGBE (vec4 rgbe) {\n  return rgbe.rgb * pow(1.1, rgbe.a * 255.0 - 128.0);\n}\nvec3 ACESToneMap (vec3 color) {\n  color = min(color, vec3(8.0));\n  const float A = 2.51;\n  const float B = 0.03;\n  const float C = 2.43;\n  const float D = 0.59;\n  const float E = 0.14;\n  return (color * (A * color + B)) / (color * (C * color + D) + E);\n}\nvec3 SRGBToLinear (vec3 gamma) {\n#ifdef CC_USE_SURFACE_SHADER\n  #if CC_USE_DEBUG_VIEW == CC_SURFACES_DEBUG_VIEW_COMPOSITE_AND_MISC\n    if (!IS_DEBUG_VIEW_COMPOSITE_ENABLE_GAMMA_CORRECTION) {\n      return gamma;\n    }\n  #endif\n#endif\n  return gamma * gamma;\n}\nvec3 LinearToSRGB(vec3 linear) {\n#ifdef CC_USE_SURFACE_SHADER\n  #if CC_USE_DEBUG_VIEW == CC_SURFACES_DEBUG_VIEW_COMPOSITE_AND_MISC\n    if (!IS_DEBUG_VIEW_COMPOSITE_ENABLE_GAMMA_CORRECTION) {\n      return linear;\n    }\n  #endif\n#endif\n  return sqrt(linear);\n}\nbool isnans(vec2 val) {\n    return isnan(val.x) || isnan(val.y);\n}\nbool isnans(vec3 val) {\n    return isnan(val.x) || isnan(val.y) || isnan(val.z);\n}\nbool isnans(vec4 val) {\n    return isnan(val.x) || isnan(val.y) || isnan(val.z) || isnan(val.w);\n}\nbool isinfs(vec2 val) {\n    return isinf(val.x) || isinf(val.y);\n}\nbool isinfs(vec3 val) {\n    return isinf(val.x) || isinf(val.y) || isinf(val.z);\n}\nbool isinfs(vec4 val) {\n    return isinf(val.x) || isinf(val.y) || isinf(val.z) || isinf(val.w);\n}\nfloat saturate(float value) {\n    return min(max(value, 0.0), 1.0);\n}\nvec2 saturate(vec2 value) { return vec2(saturate(value.x), saturate(value.y)); }\nvec3 saturate(vec3 value) { return vec3(saturate(value.x), saturate(value.y), saturate(value.z)); }\nvec4 saturate(vec4 value) { return vec4(saturate(value.x), saturate(value.y), saturate(value.z), saturate(value.w)); }\nvec2 GetPlanarReflectScreenUV(vec3 worldPos, mat4 matVirtualCameraViewProj, float flipNDCSign, vec3 viewDir, vec3 reflectDir)\n{\n  vec4 clipPos = matVirtualCameraViewProj * vec4(worldPos, 1.0);\n  vec2 screenUV = clipPos.xy / clipPos.w * 0.5 + 0.5;\n  screenUV = vec2(1.0 - screenUV.x, screenUV.y);\n  screenUV = flipNDCSign == 1.0 ? vec2(screenUV.x, 1.0 - screenUV.y) : screenUV;\n  return screenUV;\n}\nfloat GetLinearDepthFromViewSpace(vec3 viewPos, float near, float far) {\n  float dist = length(viewPos);\n  return (dist - near) / (far - near);\n}\nvec3 CalculateBinormal(vec3 normal, vec3 tangent, float mirrorNormal)\n{\n    return cross(normal.xyz, tangent) * mirrorNormal;\n}\nvec3 CalculateNormalFromTangentSpace(vec3 normalFromTangentSpace, float normalStrength, vec3 normal, vec3 tangent, float mirrorNormal)\n{\n    vec3 binormal = CalculateBinormal(normal, tangent, mirrorNormal);\n    return (normalFromTangentSpace.x * normalStrength) * normalize(tangent) +\n           (normalFromTangentSpace.y * normalStrength) * normalize(binormal) +\n            normalFromTangentSpace.z * normalize(normal);\n}\nvec3 RotationVecFromAxisY(vec3 v, float cosTheta, float sinTheta)\n{\n    vec3 result;\n    result.x = dot(v, vec3(cosTheta, 0.0, -sinTheta));\n    result.y = v.y;\n    result.z = dot(v, vec3(sinTheta, 0.0,  cosTheta));\n    return result;\n}\nvoid RotateTangentAndBinormal(inout vec3 tangent, inout vec3 binormal, vec3 normal, float rotationAngle)\n{\n    float cosTheta = cos(rotationAngle), sinTheta = sin(rotationAngle);\n    vec3 B = RotationVecFromAxisY(vec3(1.0, 0.0, 0.0), cosTheta, sinTheta);\n    vec3 T = RotationVecFromAxisY(vec3(0.0, 0.0, 1.0), cosTheta, sinTheta);\n    vec3 tangentNew, binormalNew;\n    binormalNew = B.x * binormal + B.y * normal + B.z * tangent;\n    binormal = normalize(binormalNew);\n    tangentNew = T.x * binormal + T.y * normal + T.z * tangent;\n    tangent = normalize(tangentNew);\n}\nvec2 signNotZero(vec2 v) {\n  return vec2((v.x >= 0.0) ? +1.0 : -1.0, (v.y >= 0.0) ? +1.0 : -1.0);\n}\nvec2 float32x3_to_oct(in vec3 v) {\n  vec2 p = v.xy * (1.0 / (abs(v.x) + abs(v.y) + abs(v.z)));\n  return (v.z <= 0.0) ? ((1.0 - abs(p.yx)) * signNotZero(p)) : p;\n}\nbool GetMetallicAlbedoFromDiffuseSpecularWithoutColor(out float metallic, out vec3 albedo, vec3 diffuse, vec3 specular, float f0 )\n{\n\tfloat d = max(max(diffuse.x, diffuse.y), diffuse.z);\n\tvec3 normalizedColor = diffuse / (d + (d < EPSILON_LOWP ? EPSILON_LOWP : 0.0));\n\tnormalizedColor = d < EPSILON_LOWP ? specular : normalizedColor;\n\tfloat s = max(max(specular.x, specular.y), specular.z);\n\tfloat delta = (d + s) * (d + s)  - 4.0 * f0 * d;\n\tfloat deltaSqrt = sqrt(max(0.0, delta));\n\tfloat solverMetallic = (-d - s + 2.0 * f0 + deltaSqrt) / (2.0 * f0);\n\tvec3 solverAlbedo = (d + s) * normalizedColor - vec3(f0 * (1.0 - solverMetallic));\n\tbool isValidSolver = delta >= 0.0;\n\tmetallic = isValidSolver ? clamp(solverMetallic, 0.0, 1.0) : 0.0;\n\talbedo = isValidSolver ? vec3(max(0.0, solverAlbedo.x), max(0.0, solverAlbedo.y), max(0.0, solverAlbedo.z)) : diffuse;\n\treturn isValidSolver;\n}\n  vec3 EnvReflectionWithMipFiltering(vec3 R, float roughness, float mipCount, float denoiseIntensity) {\n    #if CC_USE_IBL\n      #if !CC_SURFACES_USE_LEGACY_COMPATIBLE_LIGHTING && !CC_IBL_CONVOLUTED\n        roughness = pow(roughness, 0.5);\n      #endif\n    \tfloat mip = roughness * (mipCount - 1.0);\n    \tfloat delta = (dot(dFdx(R), dFdy(R))) * 1000.0;\n    \tfloat mipBias = mix(0.0, 5.0, clamp(delta, 0.0, 1.0));\n      vec3 rotationDir = RotationVecFromAxisY(R.xyz, cc_surfaceTransform.z, cc_surfaceTransform.w);\n    \tvec4 biased = fragTextureLod(cc_environment, rotationDir, mip + mipBias);\n     \tvec4 filtered = texture(cc_environment, rotationDir);\n      #if CC_USE_IBL == 2\n      \tbiased.rgb = unpackRGBE(biased);\n      \tfiltered.rgb = unpackRGBE(filtered);\n      #else\n      \tbiased.rgb = SRGBToLinear(biased.rgb);\n      \tfiltered.rgb = SRGBToLinear(filtered.rgb);\n      #endif\n      return mix(biased.rgb, filtered.rgb, denoiseIntensity);\n    #else\n      return vec3(0.0, 0.0, 0.0);\n    #endif\n  }\n  vec3 EnvReflection(samplerCube tex, vec3 R, float roughness, float mipCount) {\n    #if !CC_SURFACES_USE_LEGACY_COMPATIBLE_LIGHTING && !CC_IBL_CONVOLUTED\n      roughness = pow(roughness, 0.5);\n    #endif\n    vec3 rotationDir = RotationVecFromAxisY(R.xyz, cc_surfaceTransform.z, cc_surfaceTransform.w);\n    vec4 envmap = fragTextureLod(tex, rotationDir, roughness * (mipCount - 1.0));\n    #if CC_USE_IBL == 2 || CC_USE_REFLECTION_PROBE != REFLECTION_PROBE_TYPE_NONE\n      return unpackRGBE(envmap);\n    #else\n      return SRGBToLinear(envmap.rgb);\n    #endif\n  }\n#if CC_SUPPORT_CASCADED_SHADOW_MAP\n#endif\nfloat CCGetLinearDepth(vec3 worldPos, float viewSpaceBias) {\n\tvec4 viewPos = cc_matLightView * vec4(worldPos.xyz, 1.0);\n  viewPos.z += viewSpaceBias;\n\treturn GetLinearDepthFromViewSpace(viewPos.xyz, cc_shadowNFLSInfo.x, cc_shadowNFLSInfo.y);\n}\nfloat CCGetLinearDepth(vec3 worldPos) {\n\treturn CCGetLinearDepth(worldPos, 0.0);\n}\n#if CC_RECEIVE_SHADOW\n  uniform highp sampler2D cc_shadowMap;\n  uniform highp sampler2D cc_spotShadowMap;\n  float SampleShadowMap (vec3 shadowNDCPos, highp sampler2D shadowMap)\n  {\n    #if CC_SHADOWMAP_FORMAT == 1\n      return dot(texture(shadowMap, shadowNDCPos.xy), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0));\n    #else\n      return texture(shadowMap, shadowNDCPos.xy).x;\n    #endif\n  }\n  float NativePCFShadowFactorHard (vec3 shadowNDCPos, highp sampler2D shadowMap, vec2 shadowMapResolution)\n  {\n    #if CC_SHADOWMAP_FORMAT == 1\n      return step(shadowNDCPos.z, dot(texture(shadowMap, shadowNDCPos.xy), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n    #else\n      return step(shadowNDCPos.z, texture(shadowMap, shadowNDCPos.xy).x);\n    #endif\n  }\n  float NativePCFShadowFactorSoft (vec3 shadowNDCPos, highp sampler2D shadowMap, vec2 shadowMapResolution)\n  {\n    vec2 oneTap = 1.0 / shadowMapResolution;\n    vec2 shadowNDCPos_offset = shadowNDCPos.xy + oneTap;\n    float block0, block1, block2, block3;\n    #if CC_SHADOWMAP_FORMAT == 1\n      block0 = step(shadowNDCPos.z, dot(texture(shadowMap, vec2(shadowNDCPos.x, shadowNDCPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block1 = step(shadowNDCPos.z, dot(texture(shadowMap, vec2(shadowNDCPos_offset.x, shadowNDCPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block2 = step(shadowNDCPos.z, dot(texture(shadowMap, vec2(shadowNDCPos.x, shadowNDCPos_offset.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block3 = step(shadowNDCPos.z, dot(texture(shadowMap, vec2(shadowNDCPos_offset.x, shadowNDCPos_offset.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n    #else\n      block0 = step(shadowNDCPos.z, texture(shadowMap, vec2(shadowNDCPos.x, shadowNDCPos.y)).x);\n      block1 = step(shadowNDCPos.z, texture(shadowMap, vec2(shadowNDCPos_offset.x, shadowNDCPos.y)).x);\n      block2 = step(shadowNDCPos.z, texture(shadowMap, vec2(shadowNDCPos.x, shadowNDCPos_offset.y)).x);\n      block3 = step(shadowNDCPos.z, texture(shadowMap, vec2(shadowNDCPos_offset.x, shadowNDCPos_offset.y)).x);\n    #endif\n    float coefX   = mod(shadowNDCPos.x, oneTap.x) * shadowMapResolution.x;\n    float resultX = mix(block0, block1, coefX);\n    float resultY = mix(block2, block3, coefX);\n    float coefY   = mod(shadowNDCPos.y, oneTap.y) * shadowMapResolution.y;\n    return mix(resultX, resultY, coefY);\n  }\n  float NativePCFShadowFactorSoft3X (vec3 shadowNDCPos, highp sampler2D shadowMap, vec2 shadowMapResolution)\n  {\n    vec2 oneTap = 1.0 / shadowMapResolution;\n    float shadowNDCPos_offset_L = shadowNDCPos.x - oneTap.x;\n    float shadowNDCPos_offset_R = shadowNDCPos.x + oneTap.x;\n    float shadowNDCPos_offset_U = shadowNDCPos.y - oneTap.y;\n    float shadowNDCPos_offset_D = shadowNDCPos.y + oneTap.y;\n    float block0, block1, block2, block3, block4, block5, block6, block7, block8;\n    #if CC_SHADOWMAP_FORMAT == 1\n      block0 = step(shadowNDCPos.z, dot(texture(shadowMap, vec2(shadowNDCPos_offset_L, shadowNDCPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block1 = step(shadowNDCPos.z, dot(texture(shadowMap, vec2(shadowNDCPos.x, shadowNDCPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block2 = step(shadowNDCPos.z, dot(texture(shadowMap, vec2(shadowNDCPos_offset_R, shadowNDCPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block3 = step(shadowNDCPos.z, dot(texture(shadowMap, vec2(shadowNDCPos_offset_L, shadowNDCPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block4 = step(shadowNDCPos.z, dot(texture(shadowMap, vec2(shadowNDCPos.x, shadowNDCPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block5 = step(shadowNDCPos.z, dot(texture(shadowMap, vec2(shadowNDCPos_offset_R, shadowNDCPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block6 = step(shadowNDCPos.z, dot(texture(shadowMap, vec2(shadowNDCPos_offset_L, shadowNDCPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block7 = step(shadowNDCPos.z, dot(texture(shadowMap, vec2(shadowNDCPos.x, shadowNDCPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block8 = step(shadowNDCPos.z, dot(texture(shadowMap, vec2(shadowNDCPos_offset_R, shadowNDCPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n    #else\n      block0 = step(shadowNDCPos.z, texture(shadowMap, vec2(shadowNDCPos_offset_L, shadowNDCPos_offset_U)).x);\n      block1 = step(shadowNDCPos.z, texture(shadowMap, vec2(shadowNDCPos.x, shadowNDCPos_offset_U)).x);\n      block2 = step(shadowNDCPos.z, texture(shadowMap, vec2(shadowNDCPos_offset_R, shadowNDCPos_offset_U)).x);\n      block3 = step(shadowNDCPos.z, texture(shadowMap, vec2(shadowNDCPos_offset_L, shadowNDCPos.y)).x);\n      block4 = step(shadowNDCPos.z, texture(shadowMap, vec2(shadowNDCPos.x, shadowNDCPos.y)).x);\n      block5 = step(shadowNDCPos.z, texture(shadowMap, vec2(shadowNDCPos_offset_R, shadowNDCPos.y)).x);\n      block6 = step(shadowNDCPos.z, texture(shadowMap, vec2(shadowNDCPos_offset_L, shadowNDCPos_offset_D)).x);\n      block7 = step(shadowNDCPos.z, texture(shadowMap, vec2(shadowNDCPos.x, shadowNDCPos_offset_D)).x);\n      block8 = step(shadowNDCPos.z, texture(shadowMap, vec2(shadowNDCPos_offset_R, shadowNDCPos_offset_D)).x);\n    #endif\n    float coefX = mod(shadowNDCPos.x, oneTap.x) * shadowMapResolution.x;\n    float coefY = mod(shadowNDCPos.y, oneTap.y) * shadowMapResolution.y;\n    float shadow = 0.0;\n    float resultX = mix(block0, block1, coefX);\n    float resultY = mix(block3, block4, coefX);\n    shadow += mix(resultX , resultY, coefY);\n    resultX = mix(block1, block2, coefX);\n    resultY = mix(block4, block5, coefX);\n    shadow += mix(resultX , resultY, coefY);\n    resultX = mix(block3, block4, coefX);\n    resultY = mix(block6, block7, coefX);\n    shadow += mix(resultX, resultY, coefY);\n    resultX = mix(block4, block5, coefX);\n    resultY = mix(block7, block8, coefX);\n    shadow += mix(resultX, resultY, coefY);\n    return shadow * 0.25;\n  }\n  float NativePCFShadowFactorSoft5X (vec3 shadowNDCPos, highp sampler2D shadowMap, vec2 shadowMapResolution)\n  {\n    vec2 oneTap = 1.0 / shadowMapResolution;\n    vec2 twoTap = oneTap * 2.0;\n    vec2 offset1 = shadowNDCPos.xy + vec2(-twoTap.x, -twoTap.y);\n    vec2 offset2 = shadowNDCPos.xy + vec2(-oneTap.x, -twoTap.y);\n    vec2 offset3 = shadowNDCPos.xy + vec2(0.0, -twoTap.y);\n    vec2 offset4 = shadowNDCPos.xy + vec2(oneTap.x, -twoTap.y);\n    vec2 offset5 = shadowNDCPos.xy + vec2(twoTap.x, -twoTap.y);\n    vec2 offset6 = shadowNDCPos.xy + vec2(-twoTap.x, -oneTap.y);\n    vec2 offset7 = shadowNDCPos.xy + vec2(-oneTap.x, -oneTap.y);\n    vec2 offset8 = shadowNDCPos.xy + vec2(0.0, -oneTap.y);\n    vec2 offset9 = shadowNDCPos.xy + vec2(oneTap.x, -oneTap.y);\n    vec2 offset10 = shadowNDCPos.xy + vec2(twoTap.x, -oneTap.y);\n    vec2 offset11 = shadowNDCPos.xy + vec2(-twoTap.x, 0.0);\n    vec2 offset12 = shadowNDCPos.xy + vec2(-oneTap.x, 0.0);\n    vec2 offset13 = shadowNDCPos.xy + vec2(0.0, 0.0);\n    vec2 offset14 = shadowNDCPos.xy + vec2(oneTap.x, 0.0);\n    vec2 offset15 = shadowNDCPos.xy + vec2(twoTap.x, 0.0);\n    vec2 offset16 = shadowNDCPos.xy + vec2(-twoTap.x, oneTap.y);\n    vec2 offset17 = shadowNDCPos.xy + vec2(-oneTap.x, oneTap.y);\n    vec2 offset18 = shadowNDCPos.xy + vec2(0.0, oneTap.y);\n    vec2 offset19 = shadowNDCPos.xy + vec2(oneTap.x, oneTap.y);\n    vec2 offset20 = shadowNDCPos.xy + vec2(twoTap.x, oneTap.y);\n    vec2 offset21 = shadowNDCPos.xy + vec2(-twoTap.x, twoTap.y);\n    vec2 offset22 = shadowNDCPos.xy + vec2(-oneTap.x, twoTap.y);\n    vec2 offset23 = shadowNDCPos.xy + vec2(0.0, twoTap.y);\n    vec2 offset24 = shadowNDCPos.xy + vec2(oneTap.x, twoTap.y);\n    vec2 offset25 = shadowNDCPos.xy + vec2(twoTap.x, twoTap.y);\n    float block1, block2, block3, block4, block5, block6, block7, block8, block9, block10, block11, block12, block13, block14, block15, block16, block17, block18, block19, block20, block21, block22, block23, block24, block25;\n    #if CC_SHADOWMAP_FORMAT == 1\n      block1 = step(shadowNDCPos.z, dot(texture(shadowMap, offset1), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block2 = step(shadowNDCPos.z, dot(texture(shadowMap, offset2), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block3 = step(shadowNDCPos.z, dot(texture(shadowMap, offset3), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block4 = step(shadowNDCPos.z, dot(texture(shadowMap, offset4), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block5 = step(shadowNDCPos.z, dot(texture(shadowMap, offset5), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block6 = step(shadowNDCPos.z, dot(texture(shadowMap, offset6), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block7 = step(shadowNDCPos.z, dot(texture(shadowMap, offset7), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block8 = step(shadowNDCPos.z, dot(texture(shadowMap, offset8), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block9 = step(shadowNDCPos.z, dot(texture(shadowMap, offset9), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block10 = step(shadowNDCPos.z, dot(texture(shadowMap, offset10), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block11 = step(shadowNDCPos.z, dot(texture(shadowMap, offset11), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block12 = step(shadowNDCPos.z, dot(texture(shadowMap, offset12), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block13 = step(shadowNDCPos.z, dot(texture(shadowMap, offset13), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block14 = step(shadowNDCPos.z, dot(texture(shadowMap, offset14), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block15 = step(shadowNDCPos.z, dot(texture(shadowMap, offset15), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block16 = step(shadowNDCPos.z, dot(texture(shadowMap, offset16), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block17 = step(shadowNDCPos.z, dot(texture(shadowMap, offset17), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block18 = step(shadowNDCPos.z, dot(texture(shadowMap, offset18), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block19 = step(shadowNDCPos.z, dot(texture(shadowMap, offset19), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block20 = step(shadowNDCPos.z, dot(texture(shadowMap, offset20), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block21 = step(shadowNDCPos.z, dot(texture(shadowMap, offset21), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block22 = step(shadowNDCPos.z, dot(texture(shadowMap, offset22), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block23 = step(shadowNDCPos.z, dot(texture(shadowMap, offset23), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block24 = step(shadowNDCPos.z, dot(texture(shadowMap, offset24), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block25 = step(shadowNDCPos.z, dot(texture(shadowMap, offset25), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n    #else\n      block1 = step(shadowNDCPos.z, texture(shadowMap, offset1).x);\n      block2 = step(shadowNDCPos.z, texture(shadowMap, offset2).x);\n      block3 = step(shadowNDCPos.z, texture(shadowMap, offset3).x);\n      block4 = step(shadowNDCPos.z, texture(shadowMap, offset4).x);\n      block5 = step(shadowNDCPos.z, texture(shadowMap, offset5).x);\n      block6 = step(shadowNDCPos.z, texture(shadowMap, offset6).x);\n      block7 = step(shadowNDCPos.z, texture(shadowMap, offset7).x);\n      block8 = step(shadowNDCPos.z, texture(shadowMap, offset8).x);\n      block9 = step(shadowNDCPos.z, texture(shadowMap, offset9).x);\n      block10 = step(shadowNDCPos.z, texture(shadowMap, offset10).x);\n      block11 = step(shadowNDCPos.z, texture(shadowMap, offset11).x);\n      block12 = step(shadowNDCPos.z, texture(shadowMap, offset12).x);\n      block13 = step(shadowNDCPos.z, texture(shadowMap, offset13).x);\n      block14 = step(shadowNDCPos.z, texture(shadowMap, offset14).x);\n      block15 = step(shadowNDCPos.z, texture(shadowMap, offset15).x);\n      block16 = step(shadowNDCPos.z, texture(shadowMap, offset16).x);\n      block17 = step(shadowNDCPos.z, texture(shadowMap, offset17).x);\n      block18 = step(shadowNDCPos.z, texture(shadowMap, offset18).x);\n      block19 = step(shadowNDCPos.z, texture(shadowMap, offset19).x);\n      block20 = step(shadowNDCPos.z, texture(shadowMap, offset20).x);\n      block21 = step(shadowNDCPos.z, texture(shadowMap, offset21).x);\n      block22 = step(shadowNDCPos.z, texture(shadowMap, offset22).x);\n      block23 = step(shadowNDCPos.z, texture(shadowMap, offset23).x);\n      block24 = step(shadowNDCPos.z, texture(shadowMap, offset24).x);\n      block25 = step(shadowNDCPos.z, texture(shadowMap, offset25).x);\n    #endif\n    vec2 coef = fract(shadowNDCPos.xy * shadowMapResolution);\n    vec2 v1X1 = mix(vec2(block1, block6), vec2(block2, block7), coef.xx);\n    vec2 v1X2 = mix(vec2(block2, block7), vec2(block3, block8), coef.xx);\n    vec2 v1X3 = mix(vec2(block3, block8), vec2(block4, block9), coef.xx);\n    vec2 v1X4 = mix(vec2(block4, block9), vec2(block5, block10), coef.xx);\n    float v1 = mix(v1X1.x, v1X1.y, coef.y) + mix(v1X2.x, v1X2.y, coef.y) + mix(v1X3.x, v1X3.y, coef.y) + mix(v1X4.x, v1X4.y, coef.y);\n    vec2 v2X1 = mix(vec2(block6, block11), vec2(block7, block12), coef.xx);\n    vec2 v2X2 = mix(vec2(block7, block12), vec2(block8, block13), coef.xx);\n    vec2 v2X3 = mix(vec2(block8, block13), vec2(block9, block14), coef.xx);\n    vec2 v2X4 = mix(vec2(block9, block14), vec2(block10, block15), coef.xx);\n    float v2 = mix(v2X1.x, v2X1.y, coef.y) + mix(v2X2.x, v2X2.y, coef.y) + mix(v2X3.x, v2X3.y, coef.y) + mix(v2X4.x, v2X4.y, coef.y);\n    vec2 v3X1 = mix(vec2(block11, block16), vec2(block12, block17), coef.xx);\n    vec2 v3X2 = mix(vec2(block12, block17), vec2(block13, block18), coef.xx);\n    vec2 v3X3 = mix(vec2(block13, block18), vec2(block14, block19), coef.xx);\n    vec2 v3X4 = mix(vec2(block14, block19), vec2(block15, block20), coef.xx);\n    float v3 = mix(v3X1.x, v3X1.y, coef.y) + mix(v3X2.x, v3X2.y, coef.y) + mix(v3X3.x, v3X3.y, coef.y) + mix(v3X4.x, v3X4.y, coef.y);\n    vec2 v4X1 = mix(vec2(block16, block21), vec2(block17, block22), coef.xx);\n    vec2 v4X2 = mix(vec2(block17, block22), vec2(block18, block23), coef.xx);\n    vec2 v4X3 = mix(vec2(block18, block23), vec2(block19, block24), coef.xx);\n    vec2 v4X4 = mix(vec2(block19, block24), vec2(block20, block25), coef.xx);\n    float v4 = mix(v4X1.x, v4X1.y, coef.y) + mix(v4X2.x, v4X2.y, coef.y) + mix(v4X3.x, v4X3.y, coef.y) + mix(v4X4.x, v4X4.y, coef.y);\n    float fAvg = (v1 + v2 + v3 + v4) * 0.0625;\n    return fAvg;\n  }\n  bool GetShadowNDCPos(out vec3 shadowNDCPos, vec4 shadowPosWithDepthBias)\n  {\n  \tshadowNDCPos = shadowPosWithDepthBias.xyz / shadowPosWithDepthBias.w * 0.5 + 0.5;\n  \tif (shadowNDCPos.x < 0.0 || shadowNDCPos.x > 1.0 ||\n  \t\tshadowNDCPos.y < 0.0 || shadowNDCPos.y > 1.0 ||\n  \t\tshadowNDCPos.z < 0.0 || shadowNDCPos.z > 1.0) {\n  \t\treturn false;\n  \t}\n  \tshadowNDCPos.xy = cc_cameraPos.w == 1.0 ? vec2(shadowNDCPos.xy.x, 1.0 - shadowNDCPos.xy.y) : shadowNDCPos.xy;\n  \treturn true;\n  }\n  vec4 ApplyShadowDepthBias_FaceNormal(vec4 shadowPos, vec3 worldNormal, float normalBias, vec3 matViewDir0, vec3 matViewDir1, vec3 matViewDir2, vec2 projScaleXY)\n  {\n    vec4 newShadowPos = shadowPos;\n    if (normalBias > EPSILON_LOWP)\n    {\n      vec3 viewNormal = vec3(dot(matViewDir0, worldNormal), dot(matViewDir1, worldNormal), dot(matViewDir2, worldNormal));\n      if (viewNormal.z < 0.1)\n        newShadowPos.xy += viewNormal.xy * projScaleXY * normalBias * clamp(viewNormal.z, 0.001, 0.1);\n    }\n    return newShadowPos;\n  }\n  vec4 ApplyShadowDepthBias_FaceNormal(vec4 shadowPos, vec3 worldNormal, float normalBias, mat4 matLightView, vec2 projScaleXY)\n  {\n  \tvec4 newShadowPos = shadowPos;\n  \tif (normalBias > EPSILON_LOWP)\n  \t{\n  \t\tvec4 viewNormal = matLightView * vec4(worldNormal, 0.0);\n  \t\tif (viewNormal.z < 0.1)\n  \t\t\tnewShadowPos.xy += viewNormal.xy * projScaleXY * normalBias * clamp(viewNormal.z, 0.001, 0.1);\n  \t}\n  \treturn newShadowPos;\n  }\n  float GetViewSpaceDepthFromNDCDepth_Orthgraphic(float NDCDepth, float projScaleZ, float projBiasZ)\n  {\n  \treturn (NDCDepth - projBiasZ) / projScaleZ;\n  }\n  float GetViewSpaceDepthFromNDCDepth_Perspective(float NDCDepth, float homogenousDividW, float invProjScaleZ, float invProjBiasZ)\n  {\n  \treturn NDCDepth * invProjScaleZ + homogenousDividW * invProjBiasZ;\n  }\n  vec4 ApplyShadowDepthBias_Perspective(vec4 shadowPos, float viewspaceDepthBias)\n  {\n  \tvec3 viewSpacePos;\n  \tviewSpacePos.xy = shadowPos.xy * cc_shadowProjInfo.zw;\n  \tviewSpacePos.z = GetViewSpaceDepthFromNDCDepth_Perspective(shadowPos.z, shadowPos.w, cc_shadowInvProjDepthInfo.x, cc_shadowInvProjDepthInfo.y);\n  \tviewSpacePos.xyz += cc_shadowProjDepthInfo.z * normalize(viewSpacePos.xyz) * viewspaceDepthBias;\n  \tvec4 clipSpacePos;\n  \tclipSpacePos.xy = viewSpacePos.xy * cc_shadowProjInfo.xy;\n  \tclipSpacePos.zw = viewSpacePos.z * cc_shadowProjDepthInfo.xz + vec2(cc_shadowProjDepthInfo.y, 0.0);\n  \t#if CC_SHADOWMAP_USE_LINEAR_DEPTH\n  \t\tclipSpacePos.z = GetLinearDepthFromViewSpace(viewSpacePos.xyz, cc_shadowNFLSInfo.x, cc_shadowNFLSInfo.y);\n  \t\tclipSpacePos.z = (clipSpacePos.z * 2.0 - 1.0) * clipSpacePos.w;\n  \t#endif\n  \treturn clipSpacePos;\n  }\n  vec4 ApplyShadowDepthBias_Orthographic(vec4 shadowPos, float viewspaceDepthBias, float projScaleZ, float projBiasZ)\n  {\n  \tfloat coeffA = projScaleZ;\n  \tfloat coeffB = projBiasZ;\n  \tfloat viewSpacePos_z = GetViewSpaceDepthFromNDCDepth_Orthgraphic(shadowPos.z, projScaleZ, projBiasZ);\n  \tviewSpacePos_z += viewspaceDepthBias;\n  \tvec4 result = shadowPos;\n  \tresult.z = viewSpacePos_z * coeffA + coeffB;\n  \treturn result;\n  }\n  vec4 ApplyShadowDepthBias_PerspectiveLinearDepth(vec4 shadowPos, float viewspaceDepthBias, vec3 worldPos)\n  {\n    shadowPos.z = CCGetLinearDepth(worldPos, viewspaceDepthBias) * 2.0 - 1.0;\n    shadowPos.z *= shadowPos.w;\n    return shadowPos;\n  }\n  float CCGetDirLightShadowFactorHard (vec4 shadowPosWithDepthBias) {\n\t  vec3 shadowNDCPos;\n\t  if (!GetShadowNDCPos(shadowNDCPos, shadowPosWithDepthBias)) {\n\t\t  return 1.0;\n\t  }\n    return NativePCFShadowFactorHard(shadowNDCPos, cc_shadowMap, cc_shadowWHPBInfo.xy);\n  }\n  float CCGetDirLightShadowFactorSoft (vec4 shadowPosWithDepthBias) {\n\t  vec3 shadowNDCPos;\n\t  if (!GetShadowNDCPos(shadowNDCPos, shadowPosWithDepthBias)) {\n\t\t  return 1.0;\n\t  }\n    return NativePCFShadowFactorSoft(shadowNDCPos, cc_shadowMap, cc_shadowWHPBInfo.xy);\n  }\n  float CCGetDirLightShadowFactorSoft3X (vec4 shadowPosWithDepthBias) {\n\t  vec3 shadowNDCPos;\n\t  if (!GetShadowNDCPos(shadowNDCPos, shadowPosWithDepthBias)) {\n\t\t  return 1.0;\n\t  }\n    return NativePCFShadowFactorSoft3X(shadowNDCPos, cc_shadowMap, cc_shadowWHPBInfo.xy);\n  }\n  float CCGetDirLightShadowFactorSoft5X (vec4 shadowPosWithDepthBias) {\n\t  vec3 shadowNDCPos;\n\t  if (!GetShadowNDCPos(shadowNDCPos, shadowPosWithDepthBias)) {\n\t\t  return 1.0;\n\t  }\n    return NativePCFShadowFactorSoft5X(shadowNDCPos, cc_shadowMap, cc_shadowWHPBInfo.xy);\n  }\n  float CCGetSpotLightShadowFactorHard (vec4 shadowPosWithDepthBias, vec3 worldPos) {\n\t  vec3 shadowNDCPos;\n\t  if (!GetShadowNDCPos(shadowNDCPos, shadowPosWithDepthBias)) {\n\t\t  return 1.0;\n\t  }\n    return NativePCFShadowFactorHard(shadowNDCPos, cc_spotShadowMap, cc_shadowWHPBInfo.xy);\n  }\n  float CCGetSpotLightShadowFactorSoft (vec4 shadowPosWithDepthBias, vec3 worldPos) {\n\t  vec3 shadowNDCPos;\n\t  if (!GetShadowNDCPos(shadowNDCPos, shadowPosWithDepthBias)) {\n\t\t  return 1.0;\n\t  }\n    return NativePCFShadowFactorSoft(shadowNDCPos, cc_spotShadowMap, cc_shadowWHPBInfo.xy);\n  }\n  float CCGetSpotLightShadowFactorSoft3X (vec4 shadowPosWithDepthBias, vec3 worldPos) {\n\t  vec3 shadowNDCPos;\n\t  if (!GetShadowNDCPos(shadowNDCPos, shadowPosWithDepthBias)) {\n\t\t  return 1.0;\n\t  }\n    return NativePCFShadowFactorSoft3X(shadowNDCPos, cc_spotShadowMap, cc_shadowWHPBInfo.xy);\n  }\n  float CCGetSpotLightShadowFactorSoft5X (vec4 shadowPosWithDepthBias, vec3 worldPos) {\n\t  vec3 shadowNDCPos;\n\t  if (!GetShadowNDCPos(shadowNDCPos, shadowPosWithDepthBias)) {\n\t\t  return 1.0;\n\t  }\n    return NativePCFShadowFactorSoft5X(shadowNDCPos, cc_spotShadowMap, cc_shadowWHPBInfo.xy);\n  }\n  float CCSpotShadowFactorBase(out vec4 shadowNDCPosWithBias, vec4 shadowPos, vec3 worldPos, vec2 shadowBias)\n  {\n    float pcf = cc_shadowWHPBInfo.z;\n    vec4 pos = vec4(1.0);\n    #if CC_SHADOWMAP_USE_LINEAR_DEPTH\n      pos = ApplyShadowDepthBias_PerspectiveLinearDepth(shadowPos, shadowBias.x, worldPos);\n    #else\n      pos = ApplyShadowDepthBias_Perspective(shadowPos, shadowBias.x);\n    #endif\n    float realtimeShadow = 1.0;\n    if (pcf > 2.9) {\n      realtimeShadow = CCGetSpotLightShadowFactorSoft5X(pos, worldPos);\n    }else if (pcf > 1.9) {\n      realtimeShadow = CCGetSpotLightShadowFactorSoft3X(pos, worldPos);\n    }else if (pcf > 0.9) {\n      realtimeShadow = CCGetSpotLightShadowFactorSoft(pos, worldPos);\n    }else {\n      realtimeShadow = CCGetSpotLightShadowFactorHard(pos, worldPos);\n    }\n    shadowNDCPosWithBias = pos;\n    return mix(realtimeShadow, 1.0, cc_shadowNFLSInfo.w);\n  }\n  float CCShadowFactorBase(out vec4 shadowNDCPosWithBias, vec4 shadowPos, vec3 N, vec2 shadowBias)\n  {\n    vec4 pos = ApplyShadowDepthBias_FaceNormal(shadowPos, N, shadowBias.y, cc_matLightView, cc_shadowProjInfo.xy);\n    pos = ApplyShadowDepthBias_Orthographic(pos, shadowBias.x, cc_shadowProjDepthInfo.x, cc_shadowProjDepthInfo.y);\n    float realtimeShadow = 1.0;\n    #if CC_DIR_SHADOW_PCF_TYPE == 3\n      realtimeShadow = CCGetDirLightShadowFactorSoft5X(pos);\n    #endif\n    #if CC_DIR_SHADOW_PCF_TYPE == 2\n      realtimeShadow =  CCGetDirLightShadowFactorSoft3X(pos);\n    #endif\n    #if CC_DIR_SHADOW_PCF_TYPE == 1\n      realtimeShadow = CCGetDirLightShadowFactorSoft(pos);\n    #endif\n    #if CC_DIR_SHADOW_PCF_TYPE == 0\n      realtimeShadow = CCGetDirLightShadowFactorHard(pos);\n    #endif\n    shadowNDCPosWithBias = pos;\n    return mix(realtimeShadow, 1.0, cc_shadowNFLSInfo.w);\n  }\n  #if CC_SUPPORT_CASCADED_SHADOW_MAP\n    bool CCGetCSMLevelWithTransition(out highp float ratio, vec3 clipPos) {\n      highp float maxRange = 1.0 - cc_csmSplitsInfo.x;\n      highp float minRange = cc_csmSplitsInfo.x;\n      highp float thresholdInvert = 1.0 / cc_csmSplitsInfo.x;\n      ratio = 0.0;\n      if (clipPos.x <= minRange) {\n        ratio = clipPos.x * thresholdInvert;\n        return true;\n      }\n      if (clipPos.x >= maxRange) {\n        ratio = 1.0 - (clipPos.x - maxRange) * thresholdInvert;\n        return true;\n      }\n      if (clipPos.y <= minRange) {\n        ratio = clipPos.y  * thresholdInvert;\n        return true;\n      }\n      if (clipPos.y >= maxRange) {\n        ratio = 1.0 - (clipPos.y - maxRange) * thresholdInvert;\n        return true;\n      }\n      return false;\n    }\n    bool CCHasCSMLevel(int level, vec3 worldPos) {\n      highp float layerThreshold = cc_csmViewDir0[0].w;\n      bool hasLevel = false;\n      for (int i = 0; i < 4; i++) {\n        if (i == level) {\n          vec4 shadowPos = cc_matCSMViewProj[i] * vec4(worldPos.xyz, 1.0);\n          vec3 clipPos = shadowPos.xyz / shadowPos.w * 0.5 + 0.5;\n          if (clipPos.x >= layerThreshold && clipPos.x <= (1.0 - layerThreshold) &&\n              clipPos.y >= layerThreshold && clipPos.y <= (1.0 - layerThreshold) &&\n              clipPos.z >= 0.0 && clipPos.z <= 1.0) {\n            hasLevel = true;\n          }\n        }\n      }\n      return hasLevel;\n    }\n    void CCGetCSMLevel(out vec4 csmPos, out vec4 shadowProjDepthInfo, out vec4 shadowProjInfo, out vec3 shadowViewDir0, out vec3 shadowViewDir1, out vec3 shadowViewDir2, vec3 worldPos, int level) {\n      highp float layerThreshold = cc_csmViewDir0[0].w;\n      for (int i = 0; i < 4; i++) {\n        vec4 shadowPos = cc_matCSMViewProj[i] * vec4(worldPos.xyz, 1.0);\n        vec3 clipPos = shadowPos.xyz / shadowPos.w * 0.5 + 0.5;\n        if (clipPos.x >= layerThreshold && clipPos.x <= (1.0 - layerThreshold) &&\n            clipPos.y >= layerThreshold && clipPos.y <= (1.0 - layerThreshold) &&\n            clipPos.z >= 0.0 && clipPos.z <= 1.0 && i == level) {\n          csmPos = cc_matCSMViewProj[i] * vec4(worldPos.xyz, 1.0);\n          csmPos.xy = csmPos.xy * cc_csmAtlas[i].xy + cc_csmAtlas[i].zw;\n          shadowProjDepthInfo = cc_csmProjDepthInfo[i];\n          shadowProjInfo = cc_csmProjInfo[i];\n          shadowViewDir0 = cc_csmViewDir0[i].xyz;\n          shadowViewDir1 = cc_csmViewDir1[i].xyz;\n          shadowViewDir2 = cc_csmViewDir2[i].xyz;\n        }\n      }\n    }\n    int CCGetCSMLevel(out bool isTransitionArea, out highp float transitionRatio, out vec4 csmPos, out vec4 shadowProjDepthInfo, out vec4 shadowProjInfo, out vec3 shadowViewDir0, out vec3 shadowViewDir1, out vec3 shadowViewDir2, vec3 worldPos)\n    {\n      int level = -1;\n      highp float layerThreshold = cc_csmViewDir0[0].w;\n      for (int i = 0; i < 4; i++) {\n        vec4 shadowPos = cc_matCSMViewProj[i] * vec4(worldPos.xyz, 1.0);\n        vec3 clipPos = shadowPos.xyz / shadowPos.w * 0.5 + 0.5;\n        if (clipPos.x >= layerThreshold && clipPos.x <= (1.0 - layerThreshold) &&\n            clipPos.y >= layerThreshold && clipPos.y <= (1.0 - layerThreshold) &&\n            clipPos.z >= 0.0 && clipPos.z <= 1.0 && level < 0) {\n          #if CC_CASCADED_LAYERS_TRANSITION\n            isTransitionArea = CCGetCSMLevelWithTransition(transitionRatio, clipPos);\n          #endif\n          csmPos = cc_matCSMViewProj[i] * vec4(worldPos.xyz, 1.0);\n          csmPos.xy = csmPos.xy * cc_csmAtlas[i].xy + cc_csmAtlas[i].zw;\n          shadowProjDepthInfo = cc_csmProjDepthInfo[i];\n          shadowProjInfo = cc_csmProjInfo[i];\n          shadowViewDir0 = cc_csmViewDir0[i].xyz;\n          shadowViewDir1 = cc_csmViewDir1[i].xyz;\n          shadowViewDir2 = cc_csmViewDir2[i].xyz;\n          level = i;\n        }\n      }\n      return level;\n    }\n    int CCGetCSMLevel(out vec4 csmPos, out vec4 shadowProjDepthInfo, out vec4 shadowProjInfo, out vec3 shadowViewDir0, out vec3 shadowViewDir1, out vec3 shadowViewDir2, vec3 worldPos)\n    {\n      bool isTransitionArea = false;\n      highp float transitionRatio = 0.0;\n      return CCGetCSMLevel(isTransitionArea, transitionRatio, csmPos, shadowProjDepthInfo, shadowProjInfo, shadowViewDir0, shadowViewDir1, shadowViewDir2, worldPos);\n    }\n    float CCCSMFactorBase(out vec4 csmPos, out vec4 csmNDCPosWithBias, vec3 worldPos, vec3 N, vec2 shadowBias)\n    {\n      bool isTransitionArea = false;\n      highp float ratio = 0.0;\n      csmPos = vec4(1.0);\n      vec4 shadowProjDepthInfo, shadowProjInfo;\n      vec3 shadowViewDir0, shadowViewDir1, shadowViewDir2;\n      int level = -1;\n      #if CC_CASCADED_LAYERS_TRANSITION\n        level = CCGetCSMLevel(isTransitionArea, ratio, csmPos, shadowProjDepthInfo, shadowProjInfo, shadowViewDir0, shadowViewDir1, shadowViewDir2, worldPos);\n      #else\n        level = CCGetCSMLevel(csmPos, shadowProjDepthInfo, shadowProjInfo, shadowViewDir0, shadowViewDir1, shadowViewDir2, worldPos);\n      #endif\n      if (level < 0) { return 1.0; }\n      vec4 pos = ApplyShadowDepthBias_FaceNormal(csmPos, N, shadowBias.y, shadowViewDir0, shadowViewDir1, shadowViewDir2, shadowProjInfo.xy);\n      pos = ApplyShadowDepthBias_Orthographic(pos, shadowBias.x, shadowProjDepthInfo.x, shadowProjDepthInfo.y);\n      csmNDCPosWithBias = pos;\n      float realtimeShadow = 1.0;\n      #if CC_DIR_SHADOW_PCF_TYPE == 3\n        realtimeShadow = CCGetDirLightShadowFactorSoft5X(pos);\n      #endif\n      #if CC_DIR_SHADOW_PCF_TYPE == 2\n        realtimeShadow = CCGetDirLightShadowFactorSoft3X(pos);\n      #endif\n      #if CC_DIR_SHADOW_PCF_TYPE == 1\n        realtimeShadow = CCGetDirLightShadowFactorSoft(pos);\n      #endif\n      #if CC_DIR_SHADOW_PCF_TYPE == 0\n        realtimeShadow = CCGetDirLightShadowFactorHard(pos);\n      #endif\n      #if CC_CASCADED_LAYERS_TRANSITION\n        vec4 nextCSMPos = vec4(1.0);\n        vec4 nextShadowProjDepthInfo, nextShadowProjInfo;\n        vec3 nextShadowViewDir0, nextShadowViewDir1, nextShadowViewDir2;\n        float nextRealtimeShadow = 1.0;\n        CCGetCSMLevel(nextCSMPos, nextShadowProjDepthInfo, nextShadowProjInfo, nextShadowViewDir0, nextShadowViewDir1, nextShadowViewDir2, worldPos, level + 1);\n        bool hasNextLevel = CCHasCSMLevel(level + 1, worldPos);\n        if (hasNextLevel && isTransitionArea) {\n          vec4 nexPos = ApplyShadowDepthBias_FaceNormal(nextCSMPos, N, shadowBias.y, nextShadowViewDir0, nextShadowViewDir1, nextShadowViewDir2, nextShadowProjInfo.xy);\n          nexPos = ApplyShadowDepthBias_Orthographic(nexPos, shadowBias.x, nextShadowProjDepthInfo.x, nextShadowProjDepthInfo.y);\n          #if CC_DIR_SHADOW_PCF_TYPE == 3\n            nextRealtimeShadow = CCGetDirLightShadowFactorSoft5X(nexPos);\n          #endif\n          #if CC_DIR_SHADOW_PCF_TYPE == 2\n            nextRealtimeShadow = CCGetDirLightShadowFactorSoft3X(nexPos);\n          #endif\n          #if CC_DIR_SHADOW_PCF_TYPE == 1\n            nextRealtimeShadow = CCGetDirLightShadowFactorSoft(nexPos);\n          #endif\n          #if CC_DIR_SHADOW_PCF_TYPE == 0\n            nextRealtimeShadow = CCGetDirLightShadowFactorHard(nexPos);\n          #endif\n          return mix(mix(nextRealtimeShadow, realtimeShadow, ratio), 1.0, cc_shadowNFLSInfo.w);\n        }\n        return mix(realtimeShadow, 1.0, cc_shadowNFLSInfo.w);\n      #else\n        return mix(realtimeShadow, 1.0, cc_shadowNFLSInfo.w);\n      #endif\n    }\n  #else\n    int CCGetCSMLevel(out vec4 csmPos, out vec4 shadowProjDepthInfo, out vec4 shadowProjInfo, out vec3 shadowViewDir0, out vec3 shadowViewDir1, out vec3 shadowViewDir2, vec3 worldPos) {\n      return -1;\n    }\n    float CCCSMFactorBase(out vec4 csmPos, out vec4 csmNDCPosWithBias, vec3 worldPos, vec3 N, vec2 shadowBias) {\n      csmPos = cc_matLightViewProj * vec4(worldPos, 1.0);\n      return CCShadowFactorBase(csmNDCPosWithBias, csmPos, N, shadowBias);\n    }\n  #endif\n  float CCShadowFactorBase(vec4 shadowPos, vec3 N, vec2 shadowBias) {\n    vec4 shadowNDCPosWithBias;\n    return CCShadowFactorBase(shadowNDCPosWithBias, shadowPos, N, shadowBias);\n  }\n  float CCCSMFactorBase(vec3 worldPos, vec3 N, vec2 shadowBias) {\n    vec4 csmPos, csmNDCPosWithBias;\n    return CCCSMFactorBase(csmPos, csmNDCPosWithBias, worldPos, N, shadowBias);\n  }\n  float CCSpotShadowFactorBase(vec4 shadowPos, vec3 worldPos, vec2 shadowBias)\n  {\n    vec4 shadowNDCPosWithBias;\n    return CCSpotShadowFactorBase(shadowNDCPosWithBias, shadowPos, worldPos, shadowBias);\n  }\n#endif\n#if CC_USE_FOG != 4\n  float LinearFog(vec4 pos, vec3 cameraPos, float fogStart, float fogEnd) {\n      vec4 wPos = pos;\n      float cam_dis = distance(cameraPos, wPos.xyz);\n      return clamp((fogEnd - cam_dis) / (fogEnd - fogStart), 0., 1.);\n  }\n  float ExpFog(vec4 pos, vec3 cameraPos, float fogStart, float fogDensity, float fogAtten) {\n      vec4 wPos = pos;\n      float cam_dis = max(distance(cameraPos, wPos.xyz) - fogStart, 0.0) / fogAtten * 4.;\n      float f = exp(-cam_dis * fogDensity);\n      return f;\n  }\n  float ExpSquaredFog(vec4 pos, vec3 cameraPos, float fogStart, float fogDensity, float fogAtten) {\n      vec4 wPos = pos;\n      float cam_dis = max(distance(cameraPos, wPos.xyz) - fogStart, 0.0) / fogAtten * 4.;\n      float f = exp(-cam_dis * cam_dis * fogDensity * fogDensity);\n      return f;\n  }\n  float LayeredFog(vec4 pos, vec3 cameraPos, float fogTop, float fogRange, float fogAtten) {\n      vec4 wPos = pos;\n      vec3 camWorldProj = cameraPos.xyz;\n      camWorldProj.y = 0.;\n      vec3 worldPosProj = wPos.xyz;\n      worldPosProj.y = 0.;\n      float fDeltaD = distance(worldPosProj, camWorldProj) / fogAtten * 2.0;\n      float fDeltaY, fDensityIntegral;\n      if (cameraPos.y > fogTop) {\n          if (wPos.y < fogTop) {\n              fDeltaY = (fogTop - wPos.y) / fogRange * 2.0;\n              fDensityIntegral = fDeltaY * fDeltaY * 0.5;\n          }\n          else {\n              fDeltaY = 0.;\n              fDensityIntegral = 0.;\n          }\n      }\n      else {\n          if (wPos.y < fogTop) {\n              float fDeltaA = (fogTop - cameraPos.y) / fogRange * 2.;\n              float fDeltaB = (fogTop - wPos.y) / fogRange * 2.;\n              fDeltaY = abs(fDeltaA - fDeltaB);\n              fDensityIntegral = abs((fDeltaA * fDeltaA * 0.5) - (fDeltaB * fDeltaB * 0.5));\n          }\n          else {\n              fDeltaY = abs(fogTop - cameraPos.y) / fogRange * 2.;\n              fDensityIntegral = abs(fDeltaY * fDeltaY * 0.5);\n          }\n      }\n      float fDensity;\n      if (fDeltaY != 0.) {\n          fDensity = (sqrt(1.0 + ((fDeltaD / fDeltaY) * (fDeltaD / fDeltaY)))) * fDensityIntegral;\n      }\n      else {\n          fDensity = 0.;\n      }\n      float f = exp(-fDensity);\n      return f;\n  }\n#endif\nvoid CC_TRANSFER_FOG_BASE(vec4 pos, out float factor)\n{\n#if CC_USE_FOG == 0\n\tfactor = LinearFog(pos, cc_cameraPos.xyz, cc_fogBase.x, cc_fogBase.y);\n#elif CC_USE_FOG == 1\n\tfactor = ExpFog(pos, cc_cameraPos.xyz, cc_fogBase.x, cc_fogBase.z, cc_fogAdd.z);\n#elif CC_USE_FOG == 2\n\tfactor = ExpSquaredFog(pos, cc_cameraPos.xyz, cc_fogBase.x, cc_fogBase.z, cc_fogAdd.z);\n#elif CC_USE_FOG == 3\n\tfactor = LayeredFog(pos, cc_cameraPos.xyz, cc_fogAdd.x, cc_fogAdd.y, cc_fogAdd.z);\n#else\n\tfactor = 1.0;\n#endif\n}\nvoid CC_APPLY_FOG_BASE(inout vec4 color, float factor) {\n\tcolor = vec4(mix(cc_fogColor.rgb, color.rgb, factor), color.a);\n}\n#if CC_USE_LIGHT_PROBE\n  #if CC_USE_LIGHT_PROBE\n  vec3 SHEvaluate(vec3 normal)\n  {\n      vec3 result;\n  #if USE_INSTANCING\n      vec4 normal4 = vec4(normal, 1.0);\n      result.r = dot(v_sh_linear_const_r, normal4);\n      result.g = dot(v_sh_linear_const_g, normal4);\n      result.b = dot(v_sh_linear_const_b, normal4);\n  #else\n      vec4 normal4 = vec4(normal, 1.0);\n      result.r = dot(cc_sh_linear_const_r, normal4);\n      result.g = dot(cc_sh_linear_const_g, normal4);\n      result.b = dot(cc_sh_linear_const_b, normal4);\n      vec4 n14 = normal.xyzz * normal.yzzx;\n      float n5 = normal.x * normal.x - normal.y * normal.y;\n      result.r += dot(cc_sh_quadratic_r, n14);\n      result.g += dot(cc_sh_quadratic_g, n14);\n      result.b += dot(cc_sh_quadratic_b, n14);\n      result += (cc_sh_quadratic_a.rgb * n5);\n  #endif\n    #if CC_USE_HDR\n      result *= cc_exposure.w * cc_exposure.x;\n    #endif\n    return result;\n  }\n  #endif\n#endif\n#if CC_USE_REFLECTION_PROBE\n  layout(std140) uniform CCLocal {\n    highp mat4 cc_matWorld;\n    highp mat4 cc_matWorldIT;\n    highp vec4 cc_lightingMapUVParam;\n    highp vec4 cc_localShadowBias;\n    highp vec4 cc_reflectionProbeData1;\n    highp vec4 cc_reflectionProbeData2;\n  };\n  vec4 GetTexData(sampler2D dataMap, float dataMapWidth, float x, float uv_y)\n  {\n    return vec4(\n        decode32(texture(dataMap, vec2(((x + 0.5)/dataMapWidth), uv_y))),\n        decode32(texture(dataMap, vec2(((x + 1.5)/dataMapWidth), uv_y))),\n        decode32(texture(dataMap, vec2(((x + 2.5)/dataMapWidth), uv_y))),\n        decode32(texture(dataMap, vec2(((x + 3.5)/dataMapWidth), uv_y)))\n      );\n  }\n  void GetPlanarReflectionProbeData(out vec4 plane, out float planarReflectionDepthScale, out float mipCount, float probeId)\n  {\n      #if USE_INSTANCING\n        float uv_y = (probeId + 0.5) / cc_probeInfo.x;\n        float dataMapWidth = 12.0;\n        vec4 texData1 = GetTexData(cc_reflectionProbeDataMap, dataMapWidth, 0.0, uv_y);\n        vec4 texData2 = GetTexData(cc_reflectionProbeDataMap, dataMapWidth, 4.0, uv_y);\n        plane.xyz = texData1.xyz;\n        plane.w = texData2.x;\n        planarReflectionDepthScale = texData2.y;\n        mipCount = texData2.z;\n      #else\n        plane = cc_reflectionProbeData1;\n        planarReflectionDepthScale = cc_reflectionProbeData2.x;\n        mipCount = cc_reflectionProbeData2.w;\n      #endif\n  }\n  void GetCubeReflectionProbeData(out vec3 centerPos, out vec3 boxHalfSize, out float mipCount, float probeId)\n  {\n      #if USE_INSTANCING\n        float uv_y = (probeId + 0.5) / cc_probeInfo.x;\n        float dataMapWidth = 12.0;\n        vec4 texData1 = GetTexData(cc_reflectionProbeDataMap, dataMapWidth, 0.0, uv_y);\n        vec4 texData2 = GetTexData(cc_reflectionProbeDataMap, dataMapWidth, 4.0, uv_y);\n        vec4 texData3 = GetTexData(cc_reflectionProbeDataMap, dataMapWidth, 8.0, uv_y);\n        centerPos = texData1.xyz;\n        boxHalfSize = texData2.xyz;\n        mipCount = texData3.x;\n      #else\n        centerPos = cc_reflectionProbeData1.xyz;\n        boxHalfSize = cc_reflectionProbeData2.xyz;\n        mipCount = cc_reflectionProbeData2.w;\n      #endif\n  }\n#endif\n#if CC_USE_LIGHTMAP && !CC_FORWARD_ADD\n  uniform sampler2D cc_lightingMap;\n  void SampleAndDecodeLightMapColor(out vec3 lightmapColor, out float dirShadow, out float ao, sampler2D lightingMap, vec2 luv, float lum, vec3 worldNormal)\n  {\n  #if CC_LIGHT_MAP_VERSION > 2\n  #elif CC_LIGHT_MAP_VERSION > 1\n  \tvec4 dataLow = texture(lightingMap, luv);\n  \tvec4 dataHigh = texture(lightingMap, luv + vec2(0.5, 0.0));\n  \tlightmapColor.xyz = dataLow.xyz + dataHigh.xyz * 0.00392156862745098;\n      lightmapColor.rgb *= lum;\n  \tdirShadow = dataLow.a;\n  \tao = dataHigh.a;\n  #else\n      vec4 lightmap = texture(lightingMap, luv);\n      lightmapColor = lightmap.rgb * lum;\n  \tdirShadow = lightmap.a;\n  \tao = 1.0;\n  #endif\n  }\n  void GetLightMapColor(out vec3 lightmapColor, out float dirShadow, out float ao, sampler2D lightingMap, vec2 luv, float lum, vec3 worldNormal)\n  {\n  \tvec4 lightmap;\n  \tvec2 occlusion;\n  \tSampleAndDecodeLightMapColor(lightmapColor, dirShadow, ao, lightingMap, luv, lum, worldNormal);\n  #if CC_USE_HDR\n      lightmapColor.rgb *= cc_exposure.w * cc_exposure.x;\n  #endif\n  }\n#endif\nlayout(std140) uniform Constants {\n  vec4  tilingOffset;\n  vec4  diffuseColor;\n  vec4  specularColor;\n  vec4  emissive;\n  float emissiveScale;\n  float alphaThreshold;\n  float shininessExponent;\n  float glossiness;\n  float metallic;\n  float normalScale;\n  float transparencyFactor;\n  float diffuseFactor;\n  float specularFactor;\n};\n#define DCC_APP_OTHERS 0\n#define DCC_APP_MAX 1\n#define DCC_APP_BLENDER 2\n#define DCC_APP_CINEMA4D 3\n#define DCC_APP_GLTF 4\n#define DCC_APP_MAYA 5\n#if USE_SHININESS_MAP\n  uniform sampler2D shininessExponentMap;\n#endif\n#if USE_SPECULAR_GLOSSINESS_MAP\n  uniform sampler2D specularGlossinessMap;\n#endif\n#if USE_SPECULAR_MAP\n  uniform sampler2D specularMap;\n#endif\n #if USE_METALLIC_MAP\n  uniform sampler2D metallicMap;\n#endif\n#if USE_ALBEDO_MAP\n  uniform sampler2D albedoMap;\n#endif\n#if USE_TRANSPARENCY_MAP\n  uniform sampler2D transparencyMap;\n#endif\n#if USE_EMISSIVE_MAP\n  uniform sampler2D emissiveMap;\n#endif\n#if USE_EMISSIVESCALE_MAP\n  uniform sampler2D emissiveScaleMap;\n#endif\n#if USE_NORMAL_MAP\n  uniform sampler2D normalMap;\n#endif\n#if USE_OCCLUSION_MAP\n  uniform sampler2D occlusionMap;\n#endif\nfloat discolor(vec3 srcColor)\n{\n  return dot(GRAY_VECTOR, srcColor);\n}\nfloat convertShininessExponent(float shininessExp)\n{\n  #if DCC_APP_NAME == DCC_APP_BLENDER\n    float glossiness = clamp(sqrt(shininessExp) * 0.1, 0.0, 0.95);\n  #elif DCC_APP_NAME == DCC_APP_MAX || DCC_APP_NAME == DCC_APP_MAYA\n    float l2 = clamp(log(shininessExp + EPSILON) * 0.1442695 , 0.0, 1.0);\n    float glossiness = pow(l2, 0.5);\n  #else\n    float glossiness = clamp(log(shininessExp + EPSILON) * 0.1442695 , 0.0, 1.0);\n  #endif\n    return glossiness;\n}\nfloat getSpecularIntensityFromRoughness(float roughness)\n{\n  #if DCC_APP_NAME == DCC_APP_BLENDER\n    float specularIntensityMultiplier = mix(1.0, 5.0, roughness);\n  #elif DCC_APP_NAME == DCC_APP_CINEMA4D\n    float specularIntensityMultiplier = mix(1.0, 50.0, roughness);\n  #elif DCC_APP_NAME == DCC_APP_MAX || DCC_APP_NAME == DCC_APP_MAYA\n    float specularIntensityMultiplier = mix(1.0, 20.0, roughness);\n  #else\n    float specularIntensityMultiplier = 1.0;\n  #endif\n    return specularIntensityMultiplier;\n}\nvec4 getSpecularColorAndFactor()\n{\n  vec3 inSpecular = specularColor.rgb * specularFactor;\n  float inFactor = 1.0;\n  #if USE_SPECULAR_GLOSSINESS_MAP\n    inSpecular = SRGBToLinear(texture(specularGlossinessMap, TEXTURE_UV).rgb);\n  #endif\n  #if USE_SPECULAR_MAP\n      vec4 specularTex = texture(specularMap, TEXTURE_UV);\n      specularTex.rgb = SRGBToLinear(specularTex.rgb);\n      inSpecular = specularTex.rgb;\n  #endif\n  return vec4(inSpecular, inFactor);\n}\n#define CC_SURFACES_FRAGMENT_ALPHA_CLIP_ONLY\n#define CC_SURFACES_FRAGMENT_MODIFY_WORLD_NORMAL\nvec3 SurfacesFragmentModifyWorldNormal()\n{\n  vec3 normal = FSInput_worldNormal;\n  #if USE_NORMAL_MAP\n    vec3 nmmp = texture(normalMap, NORMAL_UV).xyz - vec3(0.5);\n    normal = CalculateNormalFromTangentSpace(nmmp, normalScale, normal.xyz, FSInput_worldTangent, FSInput_mirrorNormal);\n  #endif\n  return normalize(normal);\n}\n#define CC_SURFACES_FRAGMENT_MODIFY_EMISSIVE\nvec3 SurfacesFragmentModifyEmissive()\n{\n  vec3 emissiveColor = emissive.rgb;\n  #if USE_EMISSIVE_MAP\n      emissiveColor.rgb = SRGBToLinear(texture(emissiveMap, TEXTURE_UV).rgb);\n  #endif\n  #if USE_EMISSIVESCALE_MAP\n      vec4 emissiveScaleColor = texture(emissiveScaleMap, TEXTURE_UV);\n      emissiveScaleColor.rgb = SRGBToLinear(emissiveScaleColor.rgb);\n      emissiveColor.rgb *= emissiveScaleColor.rgb;\n  #else\n      emissiveColor.rgb *= emissiveScale;\n  #endif\n  return emissiveColor;\n}\n#define CC_SURFACES_FRAGMENT_MODIFY_SHARED_DATA\nstruct SurfacesMaterialData\n{\n  #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n  vec3 worldPos, worldPos_fract_part;\n  #else\n  vec3 worldPos;\n  #endif\n  vec4 baseColor;\n  vec3 worldNormal;\n  vec3 emissive;\n  float specularIntensity;\n  float roughness;\n  float metallic;\n  float ao;\n  vec3 worldTangent, worldBinormal;\n  float ior;\n#if CC_SURFACES_LIGHTING_ANISOTROPIC\n  float anisotropyShape;\n#endif\n#if CC_SURFACES_LIGHTING_TRANSMIT_SPECULAR || CC_SURFACES_LIGHTING_TRANSMIT_DIFFUSE\n  vec3 inScatteringLightColor;\n  vec4 transmitParams;\n#endif\n#if CC_SURFACES_LIGHTING_TRANSMIT_DIFFUSE\n  vec4 transmitDiffuseParams;\n#endif\n#if CC_SURFACES_LIGHTING_TRT\n  vec3 baseColorTRT;\n  float trtIntensity, roughnessTRT;\n  vec3 worldTangentTRT, worldBinormalTRT;\n#endif\n#if CC_SURFACES_LIGHTING_TT\n  vec3 baseColorTT;\n  float ttIntensity, ttScatterCoef;\n#endif\n};\nvoid SurfacesFragmentModifySharedData(inout SurfacesMaterialData surfaceData)\n{\n    vec4 baseColor = vec4(1.0);\n    #if USE_VERTEX_COLOR\n      baseColor.rgb *= SRGBToLinear(FSInput_vertexColor.rgb);\n      baseColor.a *= FSInput_vertexColor.a;\n    #endif\n    #if USE_ALBEDO_MAP\n      vec4 texColor = texture(albedoMap, TEXTURE_UV);\n      texColor.rgb = SRGBToLinear(texColor.rgb);\n      texColor.a *= transparencyFactor;\n      baseColor *= texColor;\n    #else\n      baseColor *= diffuseColor;\n    #endif\n    baseColor.rgb *= diffuseFactor;\n    #if USE_TRANSPARENCY_MAP\n      baseColor.a = texture(transparencyMap, TEXTURE_UV).TRANSPARENCY_MAP_CHANNEL;\n      #if DCC_APP_NAME == DCC_APP_MAYA\n        baseColor.a = 1.0 - baseColor.a;\n      #endif\n    #endif\n    #if USE_ALPHA_TEST\n      if (baseColor.a < alphaThreshold) discard;\n    #endif\n    vec4 specularColorAndFactor = getSpecularColorAndFactor();\n    float inGlossiness = 0.0, inSpecularIntensity = 1.0;\n    #if HAS_EXPORTED_GLOSSINESS\n      #if USE_SPECULAR_GLOSSINESS_MAP\n        inGlossiness = 1.0 - texture(specularGlossinessMap, TEXTURE_UV).a;\n      #else\n        inGlossiness = glossiness;\n      #endif\n    #else\n      #if USE_SHININESS_MAP\n        #if GLOSSINESS_MAP_USE_SINGLE_CHANNEL\n          inGlossiness = 1.0 - texture(shininessExponentMap, TEXTURE_UV).GLOSSINESS_MAP_CHANNEL;\n        #else\n          inGlossiness = 1.0 - discolor(texture(shininessExponentMap, TEXTURE_UV).rgb);\n        #endif\n      #else\n        inGlossiness = convertShininessExponent(shininessExponent);\n      #endif\n      inSpecularIntensity *= getSpecularIntensityFromRoughness(1.0 - inGlossiness);\n    #endif\n    float inMetallic = 0.0;\n    vec3 albedo = baseColor.rgb;\n    #if HAS_EXPORTED_METALLIC\n      inMetallic = metallic;\n      float spec = specularFactor;\n      #if USE_SPECULAR_MAP\n        spec = dot(GRAY_VECTOR, texture(specularMap, TEXTURE_UV).rgb);\n      #endif\n      inSpecularIntensity *= spec * 0.5;\n    #else\n      GetMetallicAlbedoFromDiffuseSpecularWithoutColor(inMetallic, albedo.rgb, baseColor.rgb, specularColorAndFactor.rgb, 0.04);\n      inSpecularIntensity *= inMetallic;\n    #endif\n    baseColor.rgb = albedo;\n    surfaceData.baseColor = baseColor;\n    surfaceData.specularIntensity = inSpecularIntensity * 0.5;\n    surfaceData.roughness = 1.0 - inGlossiness;\n    surfaceData.metallic = inMetallic;\n    surfaceData.ao = 1.0;\n    #if USE_OCCLUSION_MAP\n      surfaceData.ao = texture(occlusionMap, OCCLUSION_UV).OCCLUSION_CHANNEL;\n    #endif\n}\nstruct LightingIntermediateData\n{\n  vec3 N, H, L, V;\n  float distToLight, distToLightSqr;\n  float distToCamera, distToCameraSqr;\n  float NoL, NoV, NoH;\n  float NoLSat, NoVSat, NoHSat;\n  float NoVAbsSat;\n  #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n  vec3 worldPosition, worldPosition_fract_part;\n  #else\n  vec3 worldPosition;\n  #endif\n  vec3 T, B;\n  float specularParam;\n  float ior;\n#if CC_SURFACES_LIGHTING_ANISOTROPIC\n  float anisotropyShape;\n#endif\n#if CC_SURFACES_LIGHTING_TRANSMIT_DIFFUSE\n  vec4 shadowPosAndDepth;\n  vec4 transmitDiffuseParams;\n#endif\n#if CC_SURFACES_LIGHTING_TRANSMIT_SPECULAR || CC_SURFACES_LIGHTING_TRANSMIT_DIFFUSE\n  vec4 transmitParams;\n  vec3 inScatteringLightColor;\n#endif\n#if CC_SURFACES_LIGHTING_TT\n  vec3 baseColorTT;\n  float ttIntensity, ttScatterCoef;\n#endif\n};\nvoid CCSurfacesLightingGetIntermediateData_PerPixel(inout LightingIntermediateData data, vec3 worldNormal, vec3 worldPos, vec3 worldTangent, vec3 worldBinormal\n#if CC_SURFACES_LIGHTING_ANISOTROPIC\n    , float anisotropyShape\n#endif\n)\n{\n  data.N = worldNormal;\n  data.V = cc_cameraPos.xyz - worldPos;\n  data.distToCameraSqr = dot(data.V, data.V);\n  data.distToCamera = sqrt(data.distToCameraSqr);\n  data.V /= data.distToCamera;\n  data.NoV = dot(data.N, data.V);\n  data.NoVSat = max(data.NoV, 0.0);\n  data.NoVAbsSat = max(abs(data.NoV), 0.0);\n  #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n  packHighpData(data.worldPosition, data.worldPosition_fract_part, worldPos);\n  #else\n  data.worldPosition = worldPos;\n  #endif\n  data.T = worldTangent;\n  data.B = worldBinormal;\n#if CC_SURFACES_LIGHTING_ANISOTROPIC\n  data.anisotropyShape = anisotropyShape;\n#endif\n#if CC_SURFACES_LIGHTING_TRANSMIT_SPECULAR || CC_SURFACES_LIGHTING_TRANSMIT_DIFFUSE\n  data.inScatteringLightColor = vec3(0.0);\n  data.transmitParams = vec4(0.0);\n#endif\n#if CC_SURFACES_LIGHTING_TRANSMIT_DIFFUSE\n  data.shadowPosAndDepth = vec4(0.0, 0.0, 999999.0, 999999.0);\n#endif\n#if CC_SURFACES_LIGHTING_TT\n  data.baseColorTT = vec3(0.0);\n  data.ttIntensity = data.ttScatterCoef = 0.0;\n#endif\n}\nvoid CCSurfacesLightingGetIntermediateData_PerLight(inout LightingIntermediateData data, vec3 lightDirWithDist)\n{\n  data.L = lightDirWithDist;\n  data.distToLightSqr = dot(data.L, data.L);\n  data.distToLight = sqrt(data.distToLightSqr);\n  data.L /= data.distToLight;\n  data.H = normalize(data.L + data.V);\n  data.NoL = dot(data.N, data.L);\n  data.NoH = dot(data.N, data.H);\n  data.NoLSat = max(data.NoL, 0.0);\n  data.NoHSat = max(data.NoH, 0.0);\n}\nstruct LightingResult\n{\n  vec3 diffuseColorWithLighting, specularColorWithLighting;\n  vec3 directDiffuse, directSpecular;\n  vec3 environmentDiffuse, environmentSpecular;\n  float shadow, ao;\n  vec3 lightmapColor;\n  vec3 emissive;\n#if CC_SURFACES_LIGHTING_USE_FRESNEL\n  float fresnel;\n#endif\n#if CC_SURFACES_LIGHTING_TRANSMIT_SPECULAR\n  vec3 directTransmitSpecular, environmentTransmitSpecular;\n#endif\n#if CC_SURFACES_LIGHTING_TRANSMIT_DIFFUSE\n  vec3 directTransmitDiffuse, environmentTransmitDiffuse;\n#endif\n#if CC_SURFACES_LIGHTING_TRT\n  vec3 directTRT, environmentTRT;\n  vec3 specularColorWithLightingTRT;\n#endif\n#if CC_SURFACES_LIGHTING_TT\n  vec3 directTT;\n  vec3 diffuseColorWithLightingTT;\n#endif\n};\nstruct LightingMiscData\n{\n  float lightType;\n  vec3 lightPos, lightDir;\n  vec4 lightColorAndIntensity;\n  vec4 lightSizeRangeAngle;\n};\nfloat D_GGX(float roughness, float NoH)\n{\n    float m = roughness * roughness;\n    float m2 = m * m;\n    float d = (NoH * m2 - NoH) * NoH + 1.0;\n    return m2 / max(EPSILON, d * d);\n}\nfloat D_GGXMobile(float roughness, float NoH) {\n  float OneMinusNoHSqr = 1.0 - NoH * NoH;\n  float a = roughness * roughness;\n  float n = NoH * a;\n  float p = a / max(EPSILON, OneMinusNoHSqr + n * n);\n  return p * p;\n}\nvoid GetAnisotropicRoughness(float roughness, float anisotropyShape, out float roughnessX, out float roughnessY)\n{\n    float shapeSign = sign(anisotropyShape);\n    anisotropyShape *= anisotropyShape;\n    float r1 = roughness, r2 = roughness;\n    float lerpedRoughness = mix(1.0, 10.0, anisotropyShape);\n    r2 *= shapeSign < 0.0 ? lerpedRoughness : 1.0;\n    r1 *= shapeSign > 0.0 ? lerpedRoughness : 1.0;\n    roughnessX = saturate(r1);\n    roughnessY = saturate(r2);\n}\nfloat D_GGXAniso(float RoughnessX, float RoughnessY, float NoH, vec3 H, vec3 X, vec3 Y)\n{\n    float mx = max(EPSILON_LOWP, RoughnessX * RoughnessX);\n    float my = max(EPSILON_LOWP, RoughnessY * RoughnessY);\n    float XoH = dot(X, H);\n    float YoH = dot(Y, H);\n    float d = XoH * XoH / (mx * mx) + YoH * YoH / (my * my) + NoH * NoH;\n    return 1.0 / max(EPSILON_LOWP, mx * my * d * d);\n}\nvec3 GetAnisotropicReflect(float roughness, float anisotropyShape, vec3 V, vec3 N, vec3 X, vec3 Y)\n{\n    float shapeSign = sign(anisotropyShape);\n    anisotropyShape *= anisotropyShape;\n    anisotropyShape = min(anisotropyShape, 0.4);\n    anisotropyShape *= smoothstep(0.0, 0.03, roughness);\n    vec3 reflectTarget = shapeSign < 0.0 ? mix(N, -Y, anisotropyShape) :\n                         shapeSign > 0.0 ? mix(N, -X, anisotropyShape) : N;\n    return reflect(-V, reflectTarget);\n}\nvec3 IntegratedGFApprox (vec3 specular, float roughness, float NoV) {\n  const vec4 c0 = vec4(-1.0, -0.0275, -0.572, 0.022);\n  const vec4 c1 = vec4(1.0, 0.0425, 1.04, -0.04);\n  vec4 r = roughness * c0 + c1;\n  float a004 = min(r.x * r.x, exp2(-9.28 * NoV)) * r.x + r.y;\n  vec2 AB = vec2(-1.04, 1.04) * a004 + r.zw;\n  AB.y *= clamp(50.0 * specular.g, 0.0, 1.0);\n  return max(vec3(0.0), specular * AB.x + AB.y);\n}\n#define DiffuseCoefficient_EnergyConservation INV_PI\nfloat CalculateFresnelCoefficient(float ior, float NoVSat)\n{\n\tfloat g, c, n, prev, next;\n\tn = ior;\n\tc = ior * NoVSat;\n\tg = sqrt(1.0 + c * c - c);\n\tprev = (g - c) / (g + c);\n\tnext = (c * (g+c) - n*n) / (c * (g-c) + n*n);\n\tprev *= prev;\n\tnext *= next;\n\treturn 0.5 * prev * (1.0 + next);\n}\nfloat SmoothDistAtt (float distSqr, float invSqrAttRadius) {\n  float factor = distSqr * invSqrAttRadius;\n  float smoothFactor = clamp(1.0 - factor * factor, 0.0, 1.0);\n  return smoothFactor * smoothFactor;\n}\nfloat GetDistAtt (float distSqr, float invSqrAttRadius) {\n  float attenuation = 1.0 / max(distSqr, 0.01*0.01);\n  attenuation *= SmoothDistAtt(distSqr , invSqrAttRadius);\n  return attenuation;\n}\nfloat GetAngleAtt (vec3 L, vec3 litDir, float litAngleScale, float litAngleOffset) {\n  float cd = dot(litDir, L);\n  float attenuation = clamp(cd * litAngleScale + litAngleOffset, 0.0, 1.0);\n  return (attenuation * attenuation);\n}\nfloat CalculateDistanceAttenuation(float distToLightSqr, float lightRadius, float lightRange)\n{\n  float litRadiusSqr = lightRadius * lightRadius;\n  float attRadiusSqrInv = 1.0 / max(lightRange, 0.01);\n  attRadiusSqrInv *= attRadiusSqrInv;\n  float edgeAttenuation = litRadiusSqr / max(litRadiusSqr, distToLightSqr);\n  return GetDistAtt(distToLightSqr, attRadiusSqrInv) * edgeAttenuation;\n}\nfloat CalculateAngleAttenuation(vec3 spotLightDir, vec3 L, float cosAngleOuter)\n{\n  float cosInner = max(dot(spotLightDir, L), 0.01);\n  float litAngleScale = 1.0 / max(0.001, cosInner - cosAngleOuter);\n  float litAngleOffset = -cosAngleOuter * litAngleScale;\n  return GetAngleAtt(L, spotLightDir, litAngleScale, litAngleOffset);\n}\nvec3 CalculateRefractDirection(vec3 N, vec3 V, float NoV, float ior)\n{\n  float NoVAbs = abs(NoV);\n  float sideSign = NoV < 0.0 ? -1.0 : 1.0;\n  N *= sideSign;\n  NoV *= sideSign;\n  float sinB = sqrt(1.0 - NoVAbs*NoVAbs) / ior;\n  vec3 X = normalize(-V + N * NoVAbs);\n  vec3 R = -N + X * sinB;\n  return R;\n}\nvec3 CalculateReflectDirection(vec3 N, vec3 V, float NoV)\n{\n  float sideSign = NoV < 0.0 ? -1.0 : 1.0;\n  N *= sideSign;\n  return reflect(-V, N);\n}\nvec3 CalculatePlanarReflectPositionOnPlane(vec3 N, vec3 V, vec3 worldPos, vec4 plane, vec3 cameraPos, float probeReflectedDepth)\n{\n  float distPixelToPlane = -dot(plane, vec4(worldPos, 1.0));\n  plane.w += distPixelToPlane;\n  float distCameraToPlane = abs(-dot(plane, vec4(cameraPos, 1.0)));\n  vec3 planeN = plane.xyz;\n  vec3 virtualCameraPos = cameraPos - 2.0 * distCameraToPlane * planeN;\n  vec3 bumpedR = normalize(reflect(-V, N));\n  vec3 reflectedPointPos = worldPos + probeReflectedDepth * bumpedR;\n  vec3 virtualCameraToReflectedPoint = normalize(reflectedPointPos - virtualCameraPos);\n  float y = distCameraToPlane / max(EPSILON_LOWP, dot(planeN, virtualCameraToReflectedPoint));\n  return virtualCameraPos + y * virtualCameraToReflectedPoint;\n}\nvec4 CalculateBoxProjectedDirection(vec3 R, vec3 worldPos, vec3 cubeCenterPos, vec3 cubeBoxHalfSize)\n{\n  vec3 W = worldPos - cubeCenterPos;\n  vec3 projectedLength = (sign(R) * cubeBoxHalfSize - W) / (R + vec3(EPSILON));\n  float len = min(min(projectedLength.x, projectedLength.y), projectedLength.z);\n  vec3 P = W + len * R;\n  float weight = len < 0.0 ? 0.0 : 1.0;\n  return vec4(P, weight);\n}\nvec3 CalculateDirectDiffuse(in LightingIntermediateData lightingData, in vec4 lightSourceColorAndIntensity)\n{\n    vec3 irradiance = vec3(lightingData.NoLSat) * lightSourceColorAndIntensity.rgb * lightSourceColorAndIntensity.w;\n    return irradiance * DiffuseCoefficient_EnergyConservation;\n}\nvec3 CalculateDirectSpecular(in LightingIntermediateData lightingData, in vec4 lightSourceColorAndIntensity)\n{\n    vec3 irradiance = vec3(lightingData.NoLSat) * lightSourceColorAndIntensity.rgb * lightSourceColorAndIntensity.w;\n    float roughness = lightingData.specularParam;\n  #if CC_SURFACES_LIGHTING_ANISOTROPIC\n      float rT, rB;\n      GetAnisotropicRoughness(roughness, lightingData.anisotropyShape, rT, rB);\n      float calcSpec = D_GGXAniso(rT, rB, lightingData.NoHSat, lightingData.H, lightingData.T, lightingData.B);\n  #else\n    #if CC_SURFACES_USE_LEGACY_COMPATIBLE_LIGHTING\n      float calcSpec = (roughness * 0.25 + 0.25) * D_GGXMobile(roughness, lightingData.NoHSat);\n    #else\n      float calcSpec = D_GGX(roughness, lightingData.NoHSat);\n    #endif\n  #endif\n    return irradiance * calcSpec;\n}\n#if CC_SURFACES_LIGHTING_ANISOTROPIC && CC_SURFACES_LIGHTING_ANISOTROPIC_ENVCONVOLUTION_COUNT\n  vec3 EnvAnisotropicReflection(samplerCube tex, vec3 R, float roughness, float mipCount, float anisotropyShape, vec3 V, vec3 N, vec3 T, vec3 B) {\n      R = normalize(R);\n      float integratedBRDF = 0.0;\n      vec3 envSpec = vec3(0.0);\n      const int SAMPLE_STEP_COUNT = CC_SURFACES_LIGHTING_ANISOTROPIC_ENVCONVOLUTION_COUNT;\n      float sampleAngleRange = PI * abs(anisotropyShape);\n      vec3 anisoDirection = anisotropyShape < 0.0 ? T : B;\n      vec3 ROnNormalPlane = normalize(R - anisoDirection * dot(R, anisoDirection));\n      vec3 stepOffset = normalize(ROnNormalPlane - N) * (sampleAngleRange / float(SAMPLE_STEP_COUNT * 2));\n      for (int i = -SAMPLE_STEP_COUNT; i <= SAMPLE_STEP_COUNT; ++i)\n      {\n          float rT, rB;\n          GetAnisotropicRoughness(roughness, anisotropyShape, rT, rB);\n          #if CC_IBL_CONVOLUTED\n            float coef = abs(float(i)) / float(SAMPLE_STEP_COUNT) * float(SAMPLE_STEP_COUNT);\n          #else\n            float coef = pow(abs(float(i)) / float(SAMPLE_STEP_COUNT), 1.3) * float(SAMPLE_STEP_COUNT);\n          #endif\n          vec3 H = normalize(N + stepOffset * sign(float(i)) * coef);\n          vec3 L = reflect(-V, H);\n          float NoHSat = saturate(dot(N, H));\n          float calcSpec = D_GGXAniso(rT, rB, NoHSat, H, T, B);\n          envSpec += calcSpec * EnvReflection(tex, L, roughness, mipCount);\n          integratedBRDF += calcSpec;\n      }\n      envSpec /= integratedBRDF;\n      return envSpec;\n  }\n#endif\nvec3 SampleEnvironmentSpecular(samplerCube tex, in LightingIntermediateData lightingData, float mipCount)\n{\n    vec3 envSpec = vec3(0.0);\n    float roughness = lightingData.specularParam;\n    #if CC_SURFACES_LIGHTING_ANISOTROPIC && !CC_SURFACES_LIGHTING_ANISOTROPIC_ENVCONVOLUTION_COUNT\n      vec3 R = GetAnisotropicReflect(roughness, lightingData.anisotropyShape, lightingData.V, lightingData.N, lightingData.T, lightingData.B);\n    #else\n      vec3 R = CalculateReflectDirection(lightingData.N, lightingData.V, lightingData.NoV);\n    #endif\n    #if CC_SURFACES_LIGHTING_ANISOTROPIC && CC_SURFACES_LIGHTING_ANISOTROPIC_ENVCONVOLUTION_COUNT\n      envSpec = EnvAnisotropicReflection(tex, R, roughness, mipCount, lightingData.anisotropyShape, lightingData.V, lightingData.N, lightingData.T, lightingData.B);\n    #else\n      #if CC_SURFACES_USE_REFLECTION_DENOISE && !CC_IBL_CONVOLUTED\n        envSpec = EnvReflectionWithMipFiltering(normalize(R), roughness, mipCount, 0.6);\n      #else\n        envSpec = EnvReflection(tex, R, roughness, mipCount);\n      #endif\n    #endif\n    return envSpec;\n}\nvec3 SampleEnvironmentSpecular(samplerCube tex, in LightingIntermediateData lightingData, float mipCount, vec3 worldPos, vec3 cubeCenterPos, vec3 boxHalfSize)\n{\n    vec3 envSpec = vec3(0.0);\n    float roughness = lightingData.specularParam;\n    #if CC_SURFACES_LIGHTING_ANISOTROPIC && !CC_SURFACES_LIGHTING_ANISOTROPIC_ENVCONVOLUTION_COUNT\n      vec3 R = GetAnisotropicReflect(roughness, lightingData.anisotropyShape, lightingData.V, lightingData.N, lightingData.T, lightingData.B);\n    #else\n      vec3 R = CalculateReflectDirection(lightingData.N, lightingData.V, lightingData.NoV);\n    #endif\n    vec4 fixedR = CalculateBoxProjectedDirection(R, worldPos, cubeCenterPos, boxHalfSize);\n    R = fixedR.xyz;\n    vec3 envmap = SampleEnvironmentSpecular(cc_environment, lightingData, cc_ambientGround.w).xyz;\n    #if CC_SURFACES_LIGHTING_ANISOTROPIC && CC_SURFACES_LIGHTING_ANISOTROPIC_ENVCONVOLUTION_COUNT\n      envSpec = EnvAnisotropicReflection(tex, fixedR.xyz, roughness, mipCount, lightingData.anisotropyShape, lightingData.V, lightingData.N, lightingData.T, lightingData.B);\n      envSpec = mix(envmap, envSpec, fixedR.w);\n    #else\n      #if CC_SURFACES_USE_REFLECTION_DENOISE && !CC_IBL_CONVOLUTED\n        envSpec = EnvReflectionWithMipFiltering(normalize(R), roughness, mipCount, 0.6);\n      #else\n        envSpec = mix(envmap, EnvReflection(tex, R, roughness, mipCount), fixedR.w);\n      #endif\n    #endif\n    return envSpec;\n}\nvec3 CalculateEnvironmentDiffuse(in LightingIntermediateData lightingData, float lightIntensity)\n{\n  float fAmb = max(EPSILON, 0.5 - lightingData.N.y * 0.5);\n  vec3 ambDiff = mix(cc_ambientSky.rgb, cc_ambientGround.rgb, fAmb);\n  #if CC_USE_IBL\n    #if CC_USE_DIFFUSEMAP && !CC_USE_LIGHT_PROBE\n      vec3 rotationDir = RotationVecFromAxisY(lightingData.N, cc_surfaceTransform.z, cc_surfaceTransform.w);\n      vec4 diffuseMap = texture(cc_diffuseMap, rotationDir);\n      #if CC_USE_DIFFUSEMAP == 2\n        ambDiff = unpackRGBE(diffuseMap);\n      #else\n        ambDiff = SRGBToLinear(diffuseMap.rgb);\n      #endif\n    #endif\n  #endif\n  ambDiff.rgb *= lightIntensity;\n  #if CC_USE_LIGHT_PROBE\n    ambDiff.rgb += SHEvaluate(lightingData.N);\n  #endif\n  return ambDiff.rgb;\n}\nvec3 CalculateEnvironmentSpecular(in LightingIntermediateData lightingData, float lightIntensity)\n{\n  vec3 envSpec = vec3(0.0);\n#if CC_USE_REFLECTION_PROBE\n    vec3 worldPos;\n    #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n    worldPos = unpackHighpData(lightingData.worldPosition, lightingData.worldPosition_fract_part);\n    #else\n    worldPos = lightingData.worldPosition;\n    #endif\n  #if CC_USE_REFLECTION_PROBE == REFLECTION_PROBE_TYPE_CUBE\n    if(FSInput_reflectionProbeId < 0.0){\n        envSpec = SampleEnvironmentSpecular(cc_reflectionProbeCubemap, lightingData, cc_ambientGround.w);\n    }else{\n      vec3 centerPos, boxHalfSize;\n      float mipCount;\n      GetCubeReflectionProbeData(centerPos, boxHalfSize, mipCount, FSInput_reflectionProbeId);\n      envSpec = SampleEnvironmentSpecular(cc_reflectionProbeCubemap, lightingData, mipCount, worldPos, centerPos, boxHalfSize);\n    }\n  #elif CC_USE_REFLECTION_PROBE == REFLECTION_PROBE_TYPE_PLANAR\n    vec3 R = normalize(CalculateReflectDirection(lightingData.N, lightingData.V, lightingData.NoV));\n    if(FSInput_reflectionProbeId < 0.0){\n        vec2 screenUV = GetPlanarReflectScreenUV(worldPos, cc_matViewProj, cc_cameraPos.w, lightingData.V, R);\n        envSpec = unpackRGBE(fragTextureLod(cc_reflectionProbePlanarMap, screenUV, 1.0)).xyz;\n    }else{\n        vec4 plane;\n        float planarReflectionDepthScale, mipCount;\n        GetPlanarReflectionProbeData(plane, planarReflectionDepthScale, mipCount, FSInput_reflectionProbeId);\n        vec3 worldPosOffset = CalculatePlanarReflectPositionOnPlane(lightingData.N, lightingData.V, worldPos, plane, cc_cameraPos.xyz, planarReflectionDepthScale);\n        vec2 screenUV = GetPlanarReflectScreenUV(worldPosOffset, cc_matViewProj, cc_cameraPos.w, lightingData.V, R);\n        envSpec = unpackRGBE(fragTextureLod(cc_reflectionProbePlanarMap, screenUV, mipCount)).xyz;\n    }\n  #endif\n#elif CC_USE_IBL\n    envSpec = SampleEnvironmentSpecular(cc_environment, lightingData, cc_ambientGround.w);\n#endif\n  return envSpec * lightIntensity;\n}\nbool CCSurfacesLightingEnableShadow(in float NoL)\n{\n  return NoL > 0.0;\n}\nfloat CCSurfacesLightingCalculateDistanceAttenuation(in LightingIntermediateData lightingData, in vec4 lightSizeRangeAngle)\n{\n  return CalculateDistanceAttenuation(lightingData.distToLightSqr, lightSizeRangeAngle.x, lightSizeRangeAngle.y);\n}\nfloat CCSurfacesLightingCalculateAngleAttenuation(in LightingIntermediateData lightingData, in vec4 lightSizeRangeAngle, in vec3 spotLightDir)\n{\n  return CalculateAngleAttenuation(spotLightDir, lightingData.L, lightSizeRangeAngle.z);\n}\nvoid CCSurfacesLightingCalculateDirect(out vec3 lightingDiffuse, out vec3 lightingSpecular, in LightingIntermediateData lightingData, in vec4 lightSourceColorAndIntensity)\n{\n#if CC_SURFACES_LIGHTING_CALCULATE_DIFFUSE\n  lightingDiffuse = CalculateDirectDiffuse(lightingData, lightSourceColorAndIntensity);\n#else\n  lightingDiffuse = vec3(0.0);\n#endif\n#if CC_SURFACES_LIGHTING_CALCULATE_SPECULAR\n  lightingSpecular = CalculateDirectSpecular(lightingData, lightSourceColorAndIntensity);\n#else\n  lightingSpecular = vec3(0.0);\n#endif\n}\nvoid CCSurfacesLightingCalculateEnvironment(out vec3 lightingDiffuse, out vec3 lightingSpecular, in LightingIntermediateData lightingData, float lightIntensity)\n{\n#if CC_SURFACES_LIGHTING_CALCULATE_DIFFUSE\n  lightingDiffuse = CalculateEnvironmentDiffuse(lightingData, lightIntensity);\n#else\n  lightingDiffuse = vec3(0.0);\n#endif\n#if CC_SURFACES_LIGHTING_CALCULATE_SPECULAR\n  lightingSpecular = CalculateEnvironmentSpecular(lightingData, lightIntensity);\n#else\n  lightingSpecular = vec3(0.0);\n#endif\n}\n#if CC_SURFACES_LIGHTING_USE_FRESNEL\n  float CCSurfaceLightingCalculateFresnel(in LightingIntermediateData lightingData)\n  {\n    return CalculateFresnelCoefficient(lightingData.ior, abs(lightingData.NoV));\n  }\n#endif\n#if CC_SURFACES_LIGHTING_TRANSMIT_SPECULAR\n  void CCSurfacesLightingCalculateDirectTransmitSpecular(out vec3 lightingSpecular, in LightingIntermediateData lightingData, in vec4 lightSourceColorAndIntensity)\n  {\n    float roughness = lightingData.specularParam;\n    float NoLSat = saturate(dot(lightingData.N, -lightingData.L));\n    vec3 irradiance = NoLSat * lightSourceColorAndIntensity.rgb * lightSourceColorAndIntensity.w;\n    vec3 R = CalculateRefractDirection(lightingData.N, lightingData.V, lightingData.NoV, lightingData.ior);\n    float RoL = dot(lightingData.L, normalize(R));\n    float calcSpec = D_GGX(roughness, saturate(RoL));\n    lightingSpecular = irradiance * calcSpec;\n  }\n  void CCSurfacesLightingCalculateEnvironmentTransmitSpecular(out vec3 lightingSpecular, in LightingIntermediateData lightingData, float lightIntensity)\n  {\n    vec3 envSpec = vec3(0.0);\n    vec3 R = CalculateRefractDirection(lightingData.N, lightingData.V, lightingData.NoV, lightingData.ior);\n    float roughness = lightingData.specularParam;\n  #if CC_USE_REFLECTION_PROBE\n    #if CC_USE_REFLECTION_PROBE == REFLECTION_PROBE_TYPE_CUBE\n      envSpec = EnvReflection(cc_reflectionProbeCubemap, R, roughness, cc_ambientGround.w);\n    #endif\n  #endif\n  #if CC_USE_IBL && CC_USE_REFLECTION_PROBE != REFLECTION_PROBE_TYPE_CUBE\n    envSpec = EnvReflection(cc_environment, R, roughness, cc_ambientGround.w);\n  #endif\n    lightingSpecular = envSpec * lightIntensity;\n    float distance = lightingData.transmitParams.w, inScatterCoef = lightingData.transmitParams.z;\n    vec2 e = lightingData.transmitParams.xy;\n    vec2 extinction = exp(-e * distance * vec2(1.0, inScatterCoef));\n    vec3 inScattered = (1.0 - extinction.y) * lightingData.inScatteringLightColor.rgb;\n    lightingSpecular = lightingSpecular * extinction.x + inScattered;\n  }\n#endif\n#if CC_SURFACES_LIGHTING_TRANSMIT_DIFFUSE\n  void CCSurfacesLightingCalculateDirectTransmitDiffuse(out vec3 transmitDiffuse, in LightingResult lightingResult, in LightingIntermediateData lightingData, in vec4 lightSourceColorAndIntensity)\n  {\n    vec3 backIrradiance = vec3(saturate(-lightingData.NoL)) * lightSourceColorAndIntensity.rgb * lightSourceColorAndIntensity.w;\n    vec3 transmitDiffuse = backIrradiance * DiffuseCoefficient_EnergyConservation;\n    lightingData.transmitParams;\n    lightingData.transmitDiffuseParams;\n    transmitDiffuse = vec3(0.0);\n  }\n  void CCSurfacesLightingCalculateEnvironmentTransmitDiffuse(out vec3 transmitDiffuse, in LightingResult lightingResult, in LightingIntermediateData lightingData, float lightIntensity)\n  {\n    lightingData.N *= -1.0;\n    vec3 backIrradiance = CalculateEnvironmentDiffuse(lightingData, lightIntensity);\n    lightingData.transmitParams;\n    lightingData.transmitDiffuseParams;\n    transmitDiffuse = vec3(0.0);\n  }\n#endif\n#if CC_SURFACES_LIGHTING_TRT\n  #ifndef CC_SURFACES_FRAGMENT_MODIFY_TRT_SPECULAR_COLOR\n    vec3 SurfacesLightingGetTRTSpecularColor(float specBRDF, bool isSaturated)\n    {\n      return vec3(specBRDF);\n    }\n  #endif\n  void CCSurfacesLightingCalculateDirectTRT(out vec3 TRTLighting, in LightingIntermediateData lightingData, in vec4 lightSourceColorAndIntensity)\n  {\n    vec3 unused;\n    CCSurfacesLightingCalculateDirect(unused, TRTLighting, lightingData, vec4(1.0));\n    float brdf = TRTLighting.x;\n    vec3 Color = SurfacesLightingGetTRTSpecularColor(brdf, true);\n    TRTLighting *= Color * lightSourceColorAndIntensity.w;\n  }\n  void CCSurfacesLightingCalculateEnvironmentTRT(out vec3 TRTLighting, in LightingIntermediateData lightingData, float lightIntensity)\n  {\n    vec3 unused;\n    TRTLighting = CalculateEnvironmentSpecular(lightingData, 1.0);\n    float brdf = length(TRTLighting);\n    vec3 Color = SurfacesLightingGetTRTSpecularColor(brdf, false);\n    TRTLighting *= Color * lightIntensity;\n  }\n#endif\n#if CC_SURFACES_LIGHTING_TT\n  void CCSurfacesLightingCalculateDirectTT(inout LightingResult lightingResult, in LightingIntermediateData lightingData, in vec4 lightSourceColorAndIntensity)\n  {\n    lightingResult.diffuseColorWithLightingTT = lightingResult.diffuseColorWithLighting;\n    float w = lightingData.ttIntensity;\n    vec3 scatteredLighting = pow(saturate(lightingData.baseColorTT * w + lightingData.NoLSat) * lightingData.NoLSat, vec3(mix(0.5, 0.5 + lightingData.ttScatterCoef, w)));\n    vec3 ttLighting = scatteredLighting - lightingData.NoLSat;\n    lightingResult.directTT = ttLighting * DiffuseCoefficient_EnergyConservation * lightSourceColorAndIntensity.xyz* lightSourceColorAndIntensity.w;\n  }\n#endif\n#ifndef CC_SURFACES_FRAGMENT_MODIFY_BASECOLOR_AND_TRANSPARENCY\nvec4 SurfacesFragmentModifyBaseColorAndTransparency()\n{\n    return FSInput_vertexColor;\n}\n#endif\n#ifndef CC_SURFACES_FRAGMENT_ALPHA_CLIP_ONLY\n#endif\n#ifndef CC_SURFACES_FRAGMENT_MODIFY_WORLD_NORMAL\nvec3 SurfacesFragmentModifyWorldNormal()\n{\n    return normalize(FSInput_worldNormal);\n}\n#endif\n#ifndef CC_SURFACES_FRAGMENT_MODIFY_WORLD_TANGENT_AND_BINORMAL\nvoid SurfacesFragmentModifyWorldTangentAndBinormal(inout vec3 worldTangent, inout vec3 worldBinormal, vec3 worldNormal)\n{\n    vec3 tangent = FSInput_worldTangent;\n#if CC_SURFACES_USE_TANGENT_SPACE\n    vec3 binormal = normalize(CalculateBinormal(worldNormal.xyz, tangent, FSInput_mirrorNormal));\n    tangent = normalize(cross(binormal, worldNormal));\n#else\n    vec3 binormal = vec3(0.0, 0.0, 0.0);\n#endif\n    worldTangent = tangent;\n    worldBinormal = binormal;\n}\n#endif\n#ifndef CC_SURFACES_FRAGMENT_MODIFY_IOR\nfloat SurfacesFragmentModifyIOR()\n{\n    return 1.0;\n}\n#endif\n#ifndef CC_SURFACES_FRAGMENT_MODIFY_ANISOTROPY_PARAMS\nvec4 SurfacesFragmentModifyAnisotropyParams(out float isRotation)\n{\n    isRotation = 1.0;\n    return vec4(1.0, 0.0, 0.0, 0.0);\n}\n#endif\n#ifndef CC_SURFACES_FRAGMENT_MODIFY_EMISSIVE\nvec3 SurfacesFragmentModifyEmissive()\n{\n    return vec3(0.0, 0.0, 0.0);\n}\n#endif\n#ifndef CC_SURFACES_FRAGMENT_MODIFY_PBRPARAMS\nvec4 SurfacesFragmentModifyPBRParams()\n{\n    return vec4(1.0, 0.5, 0.0, 0.5);\n}\n#endif\n#ifndef CC_SURFACES_FRAGMENT_MODIFY_TRANSMIT_PARAMS\nvoid SurfacesFragmentModifyTransmitParams(out vec4 transmitParams, out vec3 inScatteringLightColor)\n{\n    transmitParams = vec4(0.0, 0.0, 0.0, 0.0);\n    inScatteringLightColor = vec3(0.0);\n}\n#endif\n#ifndef CC_SURFACES_FRAGMENT_MODIFY_TRANSMIT_DIFFUSE_PARAMS\nvec4 SurfacesFragmentModifyTransmitDiffuseParams()\n{\n    return vec4(1.0, 0.0, 0.0, 0.0);\n}\n#endif\n#ifndef CC_SURFACES_FRAGMENT_MODIFY_TRT_PARAMS\nvec4 SurfacesFragmentModifyTRTParams()\n{\n    return vec4(0.2, 0.0, 0.0, 1.0);\n}\n#endif\n#ifndef CC_SURFACES_FRAGMENT_MODIFY_TRT_COLOR\nvec3 SurfacesFragmentModifyTRTColor()\n{\n    return vec3(1.0, 1.0, 1.0);\n}\n#endif\n#ifndef CC_SURFACES_FRAGMENT_MODIFY_TT_PARAMS\nvec4 SurfacesFragmentModifyTTParams()\n{\n    return vec4(0.0, 0.0, 0.0, 1.0);\n}\n#endif\n#ifndef CC_SURFACES_FRAGMENT_MODIFY_TT_COLOR\nvec3 SurfacesFragmentModifyTTColor(in vec3 baseColor, in vec3 trtColor)\n{\n    return vec3(1.0, 1.0, 1.0);\n}\n#endif\n#ifndef CC_SURFACES_FRAGMENT_MODIFY_SHARED_DATA\nvoid SurfacesFragmentModifySharedData(inout SurfacesMaterialData surfaceData)\n{\n}\n#endif\nvoid CCSurfacesFragmentGetMaterialData(inout SurfacesMaterialData surfaceData)\n{\n  #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n  packHighpData(surfaceData.worldPos, surfaceData.worldPos_fract_part, FSInput_worldPos);\n  #else\n  surfaceData.worldPos = FSInput_worldPos;\n  #endif\n  surfaceData.baseColor = SurfacesFragmentModifyBaseColorAndTransparency();\n  surfaceData.worldNormal = SurfacesFragmentModifyWorldNormal();\n  SurfacesFragmentModifyWorldTangentAndBinormal(surfaceData.worldTangent, surfaceData.worldBinormal, surfaceData.worldNormal);\n  surfaceData.ior = SurfacesFragmentModifyIOR();\n#if CC_SURFACES_LIGHTING_ANISOTROPIC\n  float isRotation;\n  vec4 anisotropyParams = SurfacesFragmentModifyAnisotropyParams(isRotation);\n  surfaceData.anisotropyShape = anisotropyParams.x;\n  if (isRotation > 0.0) {\n    RotateTangentAndBinormal(surfaceData.worldTangent, surfaceData.worldBinormal, surfaceData.worldNormal, anisotropyParams.y);\n  } else {\n    vec3 anisoDirTS = anisotropyParams.yzw;\n    vec3 tangentWS = anisoDirTS.x * surfaceData.worldTangent + anisoDirTS.y * surfaceData.worldBinormal + anisoDirTS.z * surfaceData.worldNormal;\n    surfaceData.worldTangent = normalize(tangentWS);\n    surfaceData.worldBinormal = cross(surfaceData.worldNormal, tangentWS);\n  }\n#endif\n  surfaceData.emissive = SurfacesFragmentModifyEmissive();\n  vec4 pbr = SurfacesFragmentModifyPBRParams();\n  surfaceData.ao = pbr.x;\n  surfaceData.roughness = pbr.y;\n  surfaceData.metallic = pbr.z;\n  surfaceData.specularIntensity = pbr.w;\n#if CC_SURFACES_LIGHTING_TRANSMIT_SPECULAR || CC_SURFACES_LIGHTING_TRANSMIT_DIFFUSE\n  SurfacesFragmentModifyTransmitParams(surfaceData.transmitParams, surfaceData.inScatteringLightColor);\n#endif\n#if CC_SURFACES_LIGHTING_TRANSMIT_DIFFUSE\n  surfaceData.transmitDiffuseParams = SurfacesFragmentModifyTransmitDiffuseParams();\n#endif\n  vec3 baseColorTRT = vec3(0.0);\n#if CC_SURFACES_LIGHTING_TRT\n  vec4 trtParams = SurfacesFragmentModifyTRTParams();\n  surfaceData.roughnessTRT = saturate(surfaceData.roughness + trtParams.x);\n  surfaceData.trtIntensity = trtParams.w;\n  surfaceData.baseColorTRT = baseColorTRT = SurfacesFragmentModifyTRTColor();\n  surfaceData.worldTangentTRT = surfaceData.worldTangent;\n  surfaceData.worldBinormalTRT = surfaceData.worldBinormal;\n  RotateTangentAndBinormal(surfaceData.worldTangentTRT, surfaceData.worldBinormalTRT, surfaceData.worldNormal, trtParams.y * PI);\n#endif\n#if CC_SURFACES_LIGHTING_TT\n  vec4 ttParams = SurfacesFragmentModifyTTParams();\n  surfaceData.ttScatterCoef = ttParams.x;\n  surfaceData.ttIntensity = ttParams.w;\n  surfaceData.baseColorTT = SurfacesFragmentModifyTTColor(surfaceData.baseColor.rgb, baseColorTRT);\n#endif\n  SurfacesFragmentModifySharedData(surfaceData);\n#if CC_USE_DEBUG_VIEW == CC_SURFACES_DEBUG_VIEW_COMPOSITE_AND_MISC\n  if (!IS_DEBUG_VIEW_COMPOSITE_ENABLE_NORMAL_MAP) {\n      surfaceData.worldNormal = FSInput_worldNormal;\n      surfaceData.worldTangent = FSInput_worldTangent;\n  }\n#endif\n#if CC_USE_DEBUG_VIEW\n  if (!IS_DEBUG_VIEW_LIGHTING_ENABLE_WITH_ALBEDO)\n  {\n      surfaceData.baseColor.rgb = vec3(1.0);\n      #if CC_SURFACES_LIGHTING_TRT\n        surfaceData.baseColorTRT.rgb = vec3(1.0);\n      #endif\n      #if CC_SURFACES_LIGHTING_TT\n        surfaceData.baseColorTT.rgb = vec3(1.0);\n      #endif\n  }\n#endif\n}\nvec3 CCSurfacesGetDiffuseColor(in SurfacesMaterialData surfaceData)\n{\n  return surfaceData.baseColor.rgb * (1.0 - surfaceData.metallic);\n}\nvec3 CCSurfacesGetSpecularColor(in SurfacesMaterialData surfaceData)\n{\n  float F0 = surfaceData.specularIntensity * 0.08;\n  return mix(vec3(F0), surfaceData.baseColor.rgb, surfaceData.metallic);\n}\nvoid CCSurfacesLightingInitializeColorWithLighting(inout vec3 diffuseColorWithLighting, inout vec3 specularColorWithLighting, in SurfacesMaterialData surfaceData, in LightingIntermediateData lightingData)\n{\n  diffuseColorWithLighting = CCSurfacesGetDiffuseColor(surfaceData);\n  specularColorWithLighting = IntegratedGFApprox(CCSurfacesGetSpecularColor(surfaceData).xyz, surfaceData.roughness, lightingData.NoVAbsSat);\n}\nvoid CCSurfacesLightingCalculateColorWithLighting(inout vec3 diffuseColorWithLighting, inout vec3 specularColorWithLighting, in SurfacesMaterialData surfaceData, in LightingIntermediateData lightingData)\n{\n}\nvoid CCSurfacesInitializeLightingIntermediateData(inout LightingIntermediateData lightingData, in SurfacesMaterialData surfaceData)\n{\n  vec3 worldPos;\n  #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n  worldPos = unpackHighpData(surfaceData.worldPos, surfaceData.worldPos_fract_part);\n  #else\n  worldPos = surfaceData.worldPos;\n  #endif\n  CCSurfacesLightingGetIntermediateData_PerPixel(lightingData, surfaceData.worldNormal, worldPos, surfaceData.worldTangent, surfaceData.worldBinormal\n#if CC_SURFACES_LIGHTING_ANISOTROPIC\n      , surfaceData.anisotropyShape\n#endif\n  );\n  lightingData.specularParam = surfaceData.roughness;\n  lightingData.ior = surfaceData.ior;\n#if CC_SURFACES_LIGHTING_TRANSMIT_SPECULAR || CC_SURFACES_LIGHTING_TRANSMIT_DIFFUSE\n  lightingData.transmitParams = surfaceData.transmitParams;\n  lightingData.inScatteringLightColor = surfaceData.inScatteringLightColor;\n#endif\n#if CC_SURFACES_LIGHTING_TRANSMIT_DIFFUSE\n  lightingData.transmitDiffuseParams = surfaceData.transmitDiffuseParams;\n#endif\n#if CC_SURFACES_LIGHTING_TT\n  lightingData.baseColorTT = surfaceData.baseColorTT;\n  lightingData.ttIntensity = surfaceData.ttIntensity;\n  lightingData.ttScatterCoef = surfaceData.ttScatterCoef;\n#endif\n}\nvoid CCSurfacesLightingCalculateIntermediateData_PerLight(inout LightingIntermediateData lightingData, in SurfacesMaterialData surfaceData, vec3 lightDirWithDist)\n{\n  CCSurfacesLightingGetIntermediateData_PerLight(lightingData, lightDirWithDist);\n}\n#if CC_SURFACES_LIGHTING_TRT\nvoid CCSurfacesGetLightingIntermediateDataTRT(inout LightingIntermediateData lightingDataTRT, in LightingIntermediateData lightingData, in SurfacesMaterialData surfaceData)\n{\n  lightingDataTRT = lightingData;\n  lightingDataTRT.specularParam = surfaceData.roughnessTRT;\n  lightingDataTRT.T = surfaceData.worldTangentTRT;\n  lightingDataTRT.B = surfaceData.worldBinormalTRT;\n}\nvoid CCSurfacesGetSurfacesMaterialDataTRT(inout SurfacesMaterialData surfaceDataTRT, in SurfacesMaterialData surfaceData)\n{\n  surfaceDataTRT = surfaceData;\n  surfaceDataTRT.baseColor = vec4(surfaceData.baseColorTRT, 1.0);\n}\n#endif\nvoid CCSurfacesInitializeLightingResult(inout LightingResult lightingResult, in SurfacesMaterialData surfaceData)\n{\n  lightingResult.ao = surfaceData.ao;\n  lightingResult.emissive = surfaceData.emissive;\n}\nvoid CCSurfacesInitializeLightingResult(inout LightingResult lightingResult)\n{\n  lightingResult.directDiffuse = lightingResult.directSpecular = vec3(0.0);\n#if CC_SURFACES_LIGHTING_TRANSMIT_SPECULAR\n  lightingResult.directTransmitSpecular = vec3(0.0);\n#endif\n#if CC_SURFACES_LIGHTING_TRANSMIT_DIFFUSE\n  lightingResult.directTransmitDiffuse = vec3(0.0);\n#endif\n#if CC_SURFACES_LIGHTING_TRT\n  lightingResult.directTRT = vec3(0.0);\n#endif\n#if CC_SURFACES_LIGHTING_TT\n  lightingResult.directTT = vec3(0.0);\n#endif\n}\nvoid CCSurfacesAccumulateLightingResult(inout LightingResult lightingResultAccumulated, in LightingResult lightingResult)\n{\n  lightingResultAccumulated.directDiffuse += lightingResult.directDiffuse * lightingResult.shadow;\n  lightingResultAccumulated.directSpecular += lightingResult.directSpecular * lightingResult.shadow;\n  #if CC_SURFACES_LIGHTING_TRANSMIT_SPECULAR\n    lightingResultAccumulated.directTransmitSpecular += lightingResult.directTransmitSpecular;\n  #endif\n  #if CC_SURFACES_LIGHTING_TRANSMIT_DIFFUSE\n    lightingResultAccumulated.directTransmitDiffuse += lightingResult.directTransmitDiffuse;\n  #endif\n  #if CC_SURFACES_LIGHTING_TRT\n    lightingResultAccumulated.directTRT += lightingResult.directTRT * lightingResult.shadow;\n  #endif\n  #if CC_SURFACES_LIGHTING_TT\n    lightingResultAccumulated.directTT += lightingResult.directTT * lightingResult.shadow;\n    lightingResultAccumulated.diffuseColorWithLightingTT = lightingResult.diffuseColorWithLightingTT;\n  #endif\n}\n#if CC_PIPELINE_TYPE == 1\n  vec4 CCSurfacesDeferredOutput0(in SurfacesMaterialData surfaceData)\n  {\n    return surfaceData.baseColor;\n  }\n  vec4 CCSurfacesDeferredOutput1(in SurfacesMaterialData surfaceData)\n  {\n    return vec4(float32x3_to_oct(surfaceData.worldNormal), surfaceData.roughness, surfaceData.metallic);\n  }\n  vec4 CCSurfacesDeferredOutput2(in SurfacesMaterialData surfaceData)\n  {\n    return vec4(surfaceData.emissive, surfaceData.ao);\n  }\n#endif\nvec4 CCSurfacesShading(in SurfacesMaterialData surfaceData, in LightingResult lightingResult)\n{\n  vec4 color = vec4(0.0, 0.0, 0.0, surfaceData.baseColor.a);\n#if CC_FORWARD_ADD\n  color.xyz += lightingResult.directDiffuse * lightingResult.diffuseColorWithLighting\n    + lightingResult.directSpecular * lightingResult.specularColorWithLighting;\n  #if CC_SURFACES_LIGHTING_TRANSMIT_SPECULAR\n    + lightingResult.directTransmitSpecular * lightingResult.specularColorWithLighting\n  #endif\n  ;\n#else\n  float fresnel = 1.0;\n  #if CC_SURFACES_LIGHTING_USE_FRESNEL\n    fresnel = lightingResult.fresnel;\n  #endif\n  float invFresnel = 1.0 - fresnel;\n  color.xyz +=\n    ( lightingResult.directDiffuse * lightingResult.diffuseColorWithLighting\n    + lightingResult.directSpecular * lightingResult.specularColorWithLighting * fresnel\n  #if CC_SURFACES_LIGHTING_TRANSMIT_SPECULAR\n    + lightingResult.directTransmitSpecular * lightingResult.specularColorWithLighting * invFresnel\n  #endif\n  #if CC_SURFACES_LIGHTING_TRANSMIT_DIFFUSE\n    + lightingResult.directTransmitDiffuse\n  #endif\n  #if CC_SURFACES_LIGHTING_TRT\n    + lightingResult.directTRT * lightingResult.specularColorWithLightingTRT * surfaceData.trtIntensity * surfaceData.baseColorTRT\n  #endif\n  #if CC_SURFACES_LIGHTING_TT\n    + lightingResult.directTT * lightingResult.diffuseColorWithLightingTT\n  #endif\n    )\n    * lightingResult.shadow;\n  #if CC_SURFACES_USE_LIGHT_MAP == LIGHT_MAP_TYPE_ALL_IN_ONE\n    color.xyz += lightingResult.lightmapColor * lightingResult.diffuseColorWithLighting * lightingResult.shadow;\n  #elif CC_SURFACES_USE_LIGHT_MAP == LIGHT_MAP_TYPE_INDIRECT_OCCLUSION\n    color.xyz += lightingResult.lightmapColor * lightingResult.diffuseColorWithLighting;\n  #endif\n  color.xyz +=\n    ( lightingResult.environmentDiffuse * lightingResult.diffuseColorWithLighting\n    + lightingResult.environmentSpecular * lightingResult.specularColorWithLighting * fresnel\n  #if CC_SURFACES_LIGHTING_TRANSMIT_SPECULAR\n    + lightingResult.environmentTransmitSpecular * lightingResult.specularColorWithLighting * invFresnel\n  #endif\n  #if CC_SURFACES_LIGHTING_TRANSMIT_DIFFUSE\n    + lightingResult.environmentTransmitDiffuse\n  #endif\n  #if CC_SURFACES_LIGHTING_TRT\n    + lightingResult.environmentTRT * lightingResult.specularColorWithLightingTRT * surfaceData.trtIntensity * surfaceData.baseColorTRT\n  #endif\n    )\n    * lightingResult.ao;\n  color.xyz += lightingResult.emissive;\n#endif\n  return color;\n}\n#if CC_USE_DEBUG_VIEW == CC_SURFACES_DEBUG_VIEW_SINGLE\nvoid CCSurfacesDebugViewSurfaceData(inout vec4 color, in SurfacesMaterialData surfaceData)\n{\n    vec4 black = vec4(0.0, 0.0, 0.0, 1.0);\n    float scalar;\n    if (((abs(float(cc_debug_view_mode.x) - float(CC_SURFACES_DEBUG_VIEW_FRAGMENT_NORMAL)) < EPSILON_LOWP) && (cc_surfaceTransform.y != 3.0)))\n        color = vec4(surfaceData.worldNormal * 0.5 + vec3(0.5), 1.0);\n    if (((abs(float(cc_debug_view_mode.x) - float(CC_SURFACES_DEBUG_VIEW_FRAGMENT_TANGENT)) < EPSILON_LOWP) && (cc_surfaceTransform.y != 3.0)))\n    {\n      #if CC_SURFACES_USE_TANGENT_SPACE\n        color = vec4(surfaceData.worldTangent * 0.5 + vec3(0.5), 1.0);\n      #else\n        color = black;\n      #endif\n    }\n    if (((abs(float(cc_debug_view_mode.x) - float(CC_SURFACES_DEBUG_VIEW_FRAGMENT_BINORMAL)) < EPSILON_LOWP) && (cc_surfaceTransform.y != 3.0)))\n    {\n      #if CC_SURFACES_USE_TANGENT_SPACE\n        color = vec4(surfaceData.worldBinormal * 0.5 + vec3(0.5), 1.0);\n      #else\n        color = black;\n      #endif\n    }\n    if (((abs(float(cc_debug_view_mode.x) - float(CC_SURFACES_DEBUG_VIEW_TRANSPARENCY)) < EPSILON_LOWP) && (cc_surfaceTransform.y != 3.0))) {\n        scalar = surfaceData.baseColor.a;\n        color = vec4(scalar, scalar, scalar, 1.0);\n    }\n    if (((abs(float(cc_debug_view_mode.x) - float(CC_SURFACES_DEBUG_VIEW_BASE_COLOR)) < EPSILON_LOWP) && (cc_surfaceTransform.y != 3.0)))\n        color = vec4(LinearToSRGB(surfaceData.baseColor.rgb), 1.0);\n    if (((abs(float(cc_debug_view_mode.x) - float(CC_SURFACES_DEBUG_VIEW_DIFFUSE_COLOR)) < EPSILON_LOWP) && (cc_surfaceTransform.y != 3.0)))\n        color = vec4(LinearToSRGB(CCSurfacesGetDiffuseColor(surfaceData)), 1.0);\n    if (((abs(float(cc_debug_view_mode.x) - float(CC_SURFACES_DEBUG_VIEW_SPECULAR_COLOR)) < EPSILON_LOWP) && (cc_surfaceTransform.y != 3.0)))\n        color = vec4(LinearToSRGB(CCSurfacesGetSpecularColor(surfaceData)), 1.0);\n    if (((abs(float(cc_debug_view_mode.x) - float(CC_SURFACES_DEBUG_VIEW_ROUGHNESS)) < EPSILON_LOWP) && (cc_surfaceTransform.y != 3.0))) {\n        scalar = surfaceData.roughness;\n        color = vec4(scalar, scalar, scalar, 1.0);\n    }\n    if (((abs(float(cc_debug_view_mode.x) - float(CC_SURFACES_DEBUG_VIEW_METALLIC)) < EPSILON_LOWP) && (cc_surfaceTransform.y != 3.0))) {\n        scalar = surfaceData.metallic;\n        color = vec4(scalar, scalar, scalar, 1.0);\n    }\n    if (((abs(float(cc_debug_view_mode.x) - float(CC_SURFACES_DEBUG_VIEW_SPECULAR_INTENSITY)) < EPSILON_LOWP) && (cc_surfaceTransform.y != 3.0))) {\n        scalar = surfaceData.specularIntensity;\n        color = vec4(scalar, scalar, scalar, 1.0);\n    }\n    if (((abs(float(cc_debug_view_mode.x) - float(CC_SURFACES_DEBUG_VIEW_IOR)) < EPSILON_LOWP) && (cc_surfaceTransform.y != 3.0))) {\n        scalar = surfaceData.ior - 1.0;\n        color = vec4(scalar, scalar, scalar, 1.0);\n    }\n}\n#endif\n#if (CC_PIPELINE_TYPE == 0 || CC_FORCE_FORWARD_SHADING)\n  #if CC_FORWARD_ADD && !CC_ENABLE_CLUSTERED_LIGHT_CULLING\n    void CCSurfacesLighting(inout LightingResult lightingResultAccumulated, in SurfacesMaterialData surfaceData, in vec2 shadowBias)\n    {\n      vec3 worldPos;\n      #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n      worldPos = unpackHighpData(surfaceData.worldPos, surfaceData.worldPos_fract_part);\n      #else\n      worldPos = surfaceData.worldPos;\n      #endif\n      CCSurfacesInitializeLightingResult(lightingResultAccumulated);\n      LightingIntermediateData lightingData;\n      CCSurfacesInitializeLightingIntermediateData(lightingData, surfaceData);\n      LightingResult lightingResult;\n      CCSurfacesLightingInitializeColorWithLighting(lightingResult.diffuseColorWithLighting, lightingResult.specularColorWithLighting, surfaceData, lightingData);\n      lightingResultAccumulated.diffuseColorWithLighting = lightingResult.diffuseColorWithLighting;\n      lightingResultAccumulated.specularColorWithLighting = lightingResult.specularColorWithLighting;\n      #if CC_SURFACES_LIGHTING_TRT\n        vec3 diff;\n        SurfacesMaterialData surfaceDataTRT;\n        CCSurfacesGetSurfacesMaterialDataTRT(surfaceDataTRT, surfaceData);\n        CCSurfacesLightingInitializeColorWithLighting(diff, lightingResultAccumulated.specularColorWithLightingTRT, surfaceDataTRT, lightingData);\n      #endif\n      int numLights = CC_PIPELINE_TYPE == 0 ? LIGHTS_PER_PASS : int(cc_lightDir[0].w);\n      for (int i = 0; i < LIGHTS_PER_PASS; i++) {\n        if (i >= numLights) break;\n        CCSurfacesLightingCalculateIntermediateData_PerLight(lightingData, surfaceData, cc_lightPos[i].xyz - worldPos);\n        CCSurfacesLightingCalculateColorWithLighting(lightingResult.diffuseColorWithLighting, lightingResult.specularColorWithLighting, surfaceData, lightingData);\n        vec3 diffuseLighting, specularLighting;\n        CCSurfacesLightingCalculateDirect(diffuseLighting, specularLighting, lightingData, cc_lightColor[i]);\n        float fresnel = 1.0;\n      #if CC_SURFACES_LIGHTING_USE_FRESNEL\n        fresnel = lightingResult.fresnel = CCSurfaceLightingCalculateFresnel(lightingData);\n      #endif\n        float shadow = 1.0;\n      #if CC_RECEIVE_SHADOW && CC_SHADOW_TYPE == 2\n        if (cc_lightPos[i].w > 0.0 && cc_lightSizeRangeAngle[i].w > 0.0) {\n          vec4 shadowPos = vec4(0.0), shadowNDCPosWithBias = vec4(0.0);\n          if (CCSurfacesLightingEnableShadow(lightingData.NoL)) {\n            shadowPos = cc_matLightViewProj * vec4(surfaceData.worldPos, 1.0);\n            shadow = CCSpotShadowFactorBase(shadowNDCPosWithBias, shadowPos, worldPos, shadowBias);\n          }\n          #if CC_SURFACES_LIGHTING_TRANSMIT_DIFFUSE\n            #if CC_SURFACES_LIGHTING_USE_SHADOWMAP_TRANSMIT\n              lightingData.shadowPosAndDepth.xy = shadowNDCPosWithBias.xy;\n              lightingData.shadowPosAndDepth.z = shadowPos.z;\n              lightingData.shadowPosAndDepth.w = GetViewSpaceDepthFromNDCDepth_Perspective(SampleShadowMap(shadowNDCPosWithBias.xyz, cc_spotShadowMap), shadowNDCPosWithBias.w, cc_shadowInvProjDepthInfo.x, cc_shadowInvProjDepthInfo.y);\n            #else\n              lightingData.transmitDiffuseParams.zw = vec2(0.0);\n            #endif\n          #endif\n        }\n      #endif\n      #if CC_USE_DEBUG_VIEW == CC_SURFACES_DEBUG_VIEW_COMPOSITE_AND_MISC\n        if (!IS_DEBUG_VIEW_COMPOSITE_ENABLE_SHADOW) {\n          shadow = 1.0;\n        }\n      #endif\n        lightingResult.shadow = shadow;\n        float distAtt = CCSurfacesLightingCalculateDistanceAttenuation(lightingData, cc_lightSizeRangeAngle[i]);\n        float angleAtt = 1.0;\n        if (cc_lightPos[i].w > 0.0) {\n          angleAtt = CCSurfacesLightingCalculateAngleAttenuation(lightingData, cc_lightSizeRangeAngle[i], -cc_lightDir[i].xyz);\n        }\n        float multiplier = distAtt * angleAtt;\n        lightingResult.directDiffuse = diffuseLighting * multiplier;\n        lightingResult.directSpecular = specularLighting * multiplier * fresnel;\n        #if CC_SURFACES_LIGHTING_TRANSMIT_SPECULAR\n          vec3 transmitSpecularLighting;\n          CCSurfacesLightingCalculateDirectTransmitSpecular(transmitSpecularLighting, lightingData, cc_lightColor[i]);\n          lightingResult.directTransmitSpecular = transmitSpecularLighting * multiplier * (1.0 - fresnel);\n        #endif\n        #if CC_SURFACES_LIGHTING_TRANSMIT_DIFFUSE\n          lightingResult.directTransmitDiffuse = CCSurfacesLightingCalculateDirectTransmitDiffuse(lightingResult, lightingData, cc_lightColor[i]);\n        #endif\n        #if CC_SURFACES_LIGHTING_TRT\n          LightingIntermediateData lightingDataTRT;\n          CCSurfacesGetLightingIntermediateDataTRT(lightingDataTRT, lightingData, surfaceData);\n          CCSurfacesLightingCalculateDirectTRT(lightingResult.directTRT, lightingDataTRT, cc_lightColor[i]);\n          lightingResult.directTRT *= multiplier * fresnel;\n        #endif\n        #if CC_SURFACES_LIGHTING_TT\n          CCSurfacesLightingCalculateDirectTT(lightingResult, lightingData, cc_lightColor[i]);\n        #endif\n        #ifdef CC_SURFACES_LIGHTING_MODIFY_FINAL_RESULT\n          LightingMiscData miscData;\n          miscData.lightType = cc_lightPos[i].w;\n          miscData.lightPos = cc_lightPos[i].xyz;\n          miscData.lightDir = cc_lightDir[i].xyz;\n          miscData.lightColorAndIntensity = cc_lightColor[i];\n          miscData.lightSizeRangeAngle = cc_lightSizeRangeAngle[i];\n          SurfacesLightingModifyFinalResult(lightingResult, lightingData, surfaceData, miscData);\n        #endif\n        CCSurfacesAccumulateLightingResult(lightingResultAccumulated, lightingResult);\n      }\n    }\n  #else\n    void CCSurfacesLighting(inout LightingResult lightingResult, in SurfacesMaterialData surfaceData, in vec2 shadowBias)\n    {\n      LightingIntermediateData lightingData;\n      CCSurfacesInitializeLightingIntermediateData(lightingData, surfaceData);\n      CCSurfacesInitializeLightingResult(lightingResult, surfaceData);\n      CCSurfacesLightingInitializeColorWithLighting(lightingResult.diffuseColorWithLighting, lightingResult.specularColorWithLighting, surfaceData, lightingData);\n      CCSurfacesLightingCalculateIntermediateData_PerLight(lightingData, surfaceData, -cc_mainLitDir.xyz);\n      lightingResult.shadow = 1.0;\n      #if CC_RECEIVE_SHADOW && CC_SHADOW_TYPE == 2\n        if (cc_mainLitDir.w > 0.0) {\n          vec4 shadowPos = vec4(0.0), shadowNDCPosWithBias = vec4(0.0);\n          if (CCSurfacesLightingEnableShadow(lightingData.NoL)) {\n            #if CC_DIR_LIGHT_SHADOW_TYPE == 2\n              lightingResult.shadow = CCCSMFactorBase(shadowPos, shadowNDCPosWithBias, surfaceData.worldPos, lightingData.N, shadowBias);\n            #endif\n            #if CC_DIR_LIGHT_SHADOW_TYPE == 1\n              shadowPos = cc_matLightViewProj * vec4(surfaceData.worldPos, 1.0);\n              lightingResult.shadow = CCShadowFactorBase(shadowPos, lightingData.N, shadowBias);\n            #endif\n          }\n          #if CC_SURFACES_LIGHTING_TRANSMIT_DIFFUSE\n            #if CC_SURFACES_LIGHTING_USE_SHADOWMAP_TRANSMIT\n              lightingData.shadowPosAndDepth.xy = shadowNDCPosWithBias.xy;\n              lightingData.shadowPosAndDepth.z = shadowPos.z;\n              lightingData.shadowPosAndDepth.w = GetViewSpaceDepthFromNDCDepth_Orthgraphic(SampleShadowMap(shadowNDCPosWithBias.xyz, cc_shadowMap), cc_shadowProjDepthInfo.x, cc_shadowProjDepthInfo.y);\n            #else\n              lightingData.transmitDiffuseParams.zw = vec2(0.0);\n            #endif\n          #endif\n        }\n      #endif\n      lightingResult.lightmapColor = vec3(0.0);\n      #if CC_SURFACES_USE_LIGHT_MAP && !CC_FORWARD_ADD\n\t\t    float lightmapShadow, lightmapAO;\n        GetLightMapColor(lightingResult.lightmapColor, lightmapShadow, lightmapAO, cc_lightingMap, FSInput_lightMapUV.xy, FSInput_lightMapUV.z, surfaceData.worldNormal);\n        #if CC_SURFACES_USE_LIGHT_MAP == LIGHT_MAP_TYPE_INDIRECT_OCCLUSION\n          lightingResult.shadow *= lightmapShadow;\n          lightingResult.ao *= lightmapAO;\n        #endif\n      #endif\n      lightingResult.directDiffuse = lightingResult.directSpecular = vec3(0.0);\n      #if !CC_DISABLE_DIRECTIONAL_LIGHT && !CC_FORWARD_ADD\n        CCSurfacesLightingCalculateColorWithLighting(lightingResult.diffuseColorWithLighting, lightingResult.specularColorWithLighting, surfaceData, lightingData);\n        CCSurfacesLightingCalculateDirect(lightingResult.directDiffuse, lightingResult.directSpecular, lightingData, cc_mainLitColor);\n      #endif\n      CCSurfacesLightingCalculateEnvironment(lightingResult.environmentDiffuse, lightingResult.environmentSpecular, lightingData, cc_ambientSky.w);\n      #if CC_SURFACES_LIGHTING_USE_FRESNEL\n        lightingResult.fresnel = CCSurfaceLightingCalculateFresnel(lightingData);\n      #endif\n      #if CC_SURFACES_LIGHTING_TRANSMIT_SPECULAR\n        CCSurfacesLightingCalculateDirectTransmitSpecular(lightingResult.directTransmitSpecular, lightingData, cc_mainLitColor);\n        CCSurfacesLightingCalculateEnvironmentTransmitSpecular(lightingResult.environmentTransmitSpecular, lightingData, cc_ambientSky.w);\n      #endif\n      #if CC_SURFACES_LIGHTING_TRANSMIT_DIFFUSE\n        CCSurfacesLightingCalculateDirectTransmitDiffuse(lightingResult.directTransmitDiffuse, lightingResult, lightingData, cc_mainLitColor);\n        CCSurfacesLightingCalculateEnvironmentTransmitDiffuse(lightingResult.environmentTransmitDiffuse, lightingResult, lightingData, cc_ambientSky.w);\n      #endif\n      #if CC_SURFACES_LIGHTING_TRT\n        LightingIntermediateData lightingDataTRT;\n        CCSurfacesGetLightingIntermediateDataTRT(lightingDataTRT, lightingData, surfaceData);\n        CCSurfacesLightingCalculateDirectTRT(lightingResult.directTRT, lightingDataTRT, cc_mainLitColor);\n        CCSurfacesLightingCalculateEnvironmentTRT(lightingResult.environmentTRT, lightingDataTRT, cc_ambientSky.w);\n        vec3 diff;\n        SurfacesMaterialData surfaceDataTRT;\n        CCSurfacesGetSurfacesMaterialDataTRT(surfaceDataTRT, surfaceData);\n        CCSurfacesLightingInitializeColorWithLighting(diff, lightingResult.specularColorWithLightingTRT, surfaceDataTRT, lightingDataTRT);\n      #endif\n      #if CC_SURFACES_LIGHTING_TT\n        CCSurfacesLightingCalculateDirectTT(lightingResult, lightingData, cc_mainLitColor);\n      #endif\n      #ifdef CC_SURFACES_LIGHTING_MODIFY_FINAL_RESULT\n        LightingMiscData miscData;\n        miscData.lightType = LIGHT_TYPE_DIRECTIONAL;\n        miscData.lightPos = vec3(0.0);\n        miscData.lightDir = cc_mainLitDir.xyz;\n        miscData.lightColorAndIntensity = cc_mainLitColor;\n        miscData.lightSizeRangeAngle = vec4(0.0, 0.0, 0.0, 0.0);\n        SurfacesLightingModifyFinalResult(lightingResult, lightingData, surfaceData, miscData);\n      #endif\n    }\n    #if CC_ENABLE_CLUSTERED_LIGHT_CULLING\n    #endif\n  #endif\n#endif\nvec4 CCSurfacesDebugDisplayInvalidNumber(vec4 color)\n{\n  float index = mod(cc_time.x * 10.0, 2.0);\n  vec4 error = index < 1.0 ? vec4(1.0, 0.0, 0.2, 1.0) : vec4(0.0, 1.0, 0.2, 1.0);\n  return (isnans(color.rgb) || isinfs(color.rgb)) ? error : color;\n}\nvec4 CCSurfacesDebugDisplayInvalidInputData(vec4 color, vec3 data)\n{\n  float index = mod(cc_time.x * 10.0, 2.0);\n  vec4 error = index < 1.0 ? vec4(1.0, 0.0, 0.2, 1.0) : vec4(0.0, 1.0, 0.2, 1.0);\n  return (isnans(data) || isinfs(data)) ? error : color;\n}\n#if CC_USE_DEBUG_VIEW == CC_SURFACES_DEBUG_VIEW_SINGLE && !CC_FORWARD_ADD\n  void CCSurfacesDebugViewMeshData(inout vec4 color)\n  {\n    vec4 white = vec4(1.0, 1.0, 1.0, 1.0);\n    vec4 black = vec4(0.0, 0.0, 0.0, 1.0);\n    if (((abs(float(cc_debug_view_mode.x) - float(CC_SURFACES_DEBUG_VIEW_VERTEX_COLOR)) < EPSILON_LOWP) && (cc_surfaceTransform.y != 3.0)))\n    {\n      #if CC_SURFACES_USE_VERTEX_COLOR\n        color = FSInput_vertexColor;\n      #else\n        color = white;\n      #endif\n    }\n    if (((abs(float(cc_debug_view_mode.x) - float(CC_SURFACES_DEBUG_VIEW_VERTEX_NORMAL)) < EPSILON_LOWP) && (cc_surfaceTransform.y != 3.0)))\n        color = vec4(FSInput_worldNormal * 0.5 + vec3(0.5), 1.0);\n    if (((abs(float(cc_debug_view_mode.x) - float(CC_SURFACES_DEBUG_VIEW_VERTEX_TANGENT)) < EPSILON_LOWP) && (cc_surfaceTransform.y != 3.0)))\n    {\n      #if CC_SURFACES_USE_TANGENT_SPACE\n        color = vec4(FSInput_worldTangent * 0.5 + vec3(0.5), 1.0);\n      #else\n        color = black;\n      #endif\n    }\n    if (((abs(float(cc_debug_view_mode.x) - float(CC_SURFACES_DEBUG_VIEW_VERTEX_MIRROR)) < EPSILON_LOWP) && (cc_surfaceTransform.y != 3.0)))\n    {\n      #if CC_SURFACES_USE_TANGENT_SPACE\n        float sign = FSInput_mirrorNormal * 0.5 + 0.5;\n        color = vec4(sign, sign, sign, 1.0);\n      #else\n        color = black;\n      #endif\n    }\n    if (((abs(float(cc_debug_view_mode.x) - float(CC_SURFACES_DEBUG_VIEW_FACE_SIDE)) < EPSILON_LOWP) && (cc_surfaceTransform.y != 3.0)))\n    {\n        float scalar = clamp(FSInput_faceSideSign, 0.0, 1.0);\n        color = vec4(scalar, scalar, scalar, 1.0);\n    }\n    if (((abs(float(cc_debug_view_mode.x) - float(CC_SURFACES_DEBUG_VIEW_UV0)) < EPSILON_LOWP) && (cc_surfaceTransform.y != 3.0)))\n        color = vec4(FSInput_texcoord.xy, 0.0, 1.0);\n    if (((abs(float(cc_debug_view_mode.x) - float(CC_SURFACES_DEBUG_VIEW_UV1)) < EPSILON_LOWP) && (cc_surfaceTransform.y != 3.0)))\n      color = vec4(FSInput_texcoord1.xy, 0.0, 1.0);\n    if (((abs(float(cc_debug_view_mode.x) - float(CC_SURFACES_DEBUG_VIEW_UVLIGHTMAP)) < EPSILON_LOWP) && (cc_surfaceTransform.y != 3.0)))\n    {\n      #if CC_USE_LIGHTMAP && !CC_FORWARD_ADD\n        color = vec4(FSInput_lightMapUV.xy, 0.0, 1.0);\n      #else\n        color = vec4(0.0, 0.0, 0.0, 1.0);\n      #endif\n    }\n    if (((abs(float(cc_debug_view_mode.x) - float(CC_SURFACES_DEBUG_VIEW_PROJ_DEPTH)) < EPSILON_LOWP) && (cc_surfaceTransform.y != 3.0)))\n    {\n      vec4 clipPos = cc_matProj * cc_matView * vec4(FSInput_worldPos.xyz, 1.0);\n      float depth = clipPos.z / clipPos.w;\n      color = vec4(depth, depth, depth, 1.0);\n    }\n    if (((abs(float(cc_debug_view_mode.x) - float(CC_SURFACES_DEBUG_VIEW_LINEAR_DEPTH)) < EPSILON_LOWP) && (cc_surfaceTransform.y != 3.0)))\n    {\n      vec4 viewPos = cc_matView * vec4(FSInput_worldPos.xyz, 1.0);\n      float depth = (-viewPos.z - cc_nearFar.x) / cc_nearFar.y;\n      color = vec4(depth, depth, depth, 1.0);\n    }\n    if (((abs(float(cc_debug_view_mode.x) - float(CC_SURFACES_DEBUG_VIEW_WORLD_POS)) < EPSILON_LOWP) && (cc_surfaceTransform.y != 3.0)))\n      color = vec4(FSInput_worldPos.xyz, 1.0);\n  }\n#endif\n#if CC_USE_DEBUG_VIEW == CC_SURFACES_DEBUG_VIEW_SINGLE\n  bool CCSurfacesDebugViewLightingResult(inout vec4 color, in LightingResult lightingResult)\n  {\n    bool isSRGBColor = false;\n    if (((abs(float(cc_debug_view_mode.x) - float(CC_SURFACES_DEBUG_VIEW_DIRECT_DIFFUSE)) < EPSILON_LOWP) && (cc_surfaceTransform.y != 3.0)))\n    {\n        color.rgb = lightingResult.directDiffuse * lightingResult.diffuseColorWithLighting;\n        isSRGBColor = true;\n    }\n    if (((abs(float(cc_debug_view_mode.x) - float(CC_SURFACES_DEBUG_VIEW_DIRECT_SPECULAR)) < EPSILON_LOWP) && (cc_surfaceTransform.y != 3.0)))\n    {\n        color.rgb = lightingResult.directSpecular * lightingResult.specularColorWithLighting;\n        isSRGBColor = true;\n    }\n    if (((abs(float(cc_debug_view_mode.x) - float(CC_SURFACES_DEBUG_VIEW_DIRECT_ALL)) < EPSILON_LOWP) && (cc_surfaceTransform.y != 3.0)))\n    {\n        color.rgb = lightingResult.directDiffuse * lightingResult.diffuseColorWithLighting + lightingResult.directSpecular * lightingResult.specularColorWithLighting;\n        isSRGBColor = true;\n    }\n    if (((abs(float(cc_debug_view_mode.x) - float(CC_SURFACES_DEBUG_VIEW_ENV_DIFFUSE)) < EPSILON_LOWP) && (cc_surfaceTransform.y != 3.0)))\n    {\n        color.rgb = lightingResult.environmentDiffuse * lightingResult.diffuseColorWithLighting;\n        isSRGBColor = true;\n    }\n    if (((abs(float(cc_debug_view_mode.x) - float(CC_SURFACES_DEBUG_VIEW_ENV_SPECULAR)) < EPSILON_LOWP) && (cc_surfaceTransform.y != 3.0)))\n    {\n        color.rgb = lightingResult.environmentSpecular * lightingResult.specularColorWithLighting;\n        isSRGBColor = true;\n    }\n    if (((abs(float(cc_debug_view_mode.x) - float(CC_SURFACES_DEBUG_VIEW_ENV_ALL)) < EPSILON_LOWP) && (cc_surfaceTransform.y != 3.0)))\n    {\n        color.rgb = lightingResult.environmentDiffuse * lightingResult.diffuseColorWithLighting + lightingResult.environmentSpecular * lightingResult.specularColorWithLighting;\n        isSRGBColor = true;\n    }\n    if (((abs(float(cc_debug_view_mode.x) - float(CC_SURFACES_DEBUG_VIEW_LIGHT_MAP)) < EPSILON_LOWP) && (cc_surfaceTransform.y != 3.0)))\n    {\n        color.rgb = lightingResult.lightmapColor;\n        isSRGBColor = true;\n    }\n    if (((abs(float(cc_debug_view_mode.x) - float(CC_SURFACES_DEBUG_VIEW_EMISSIVE)) < EPSILON_LOWP) && (cc_surfaceTransform.y != 3.0)))\n    {\n        color.rgb = lightingResult.emissive;\n        isSRGBColor = true;\n    }\n    if (((abs(float(cc_debug_view_mode.x) - float(CC_SURFACES_DEBUG_VIEW_AO)) < EPSILON_LOWP) && (cc_surfaceTransform.y != 3.0)))\n    {\n        color.rgb = vec3(lightingResult.ao);\n        isSRGBColor = false;\n    }\n    if (((abs(float(cc_debug_view_mode.x) - float(CC_SURFACES_DEBUG_VIEW_SHADOW)) < EPSILON_LOWP) && (cc_surfaceTransform.y != 3.0)))\n    {\n        color.rgb = vec3(lightingResult.shadow);\n        isSRGBColor = false;\n    }\n    float fresnel = 0.0;\n    vec3 directTransmitSpecular = vec3(0.0), environmentTransmitSpecular = vec3(0.0);\n    vec3 directTransmitDiffuse = vec3(0.0), environmentTransmitDiffuse = vec3(0.0);\n    vec3 diffuseColorWithLightingTT = vec3(0.0), specularColorWithLightingTRT = vec3(0.0);\n    vec3 directTRT = vec3(0.0), environmentTRT = vec3(0.0);\n  #if CC_SURFACES_LIGHTING_USE_FRESNEL\n    fresnel = lightingResult.fresnel;\n  #endif\n  #if CC_SURFACES_LIGHTING_TRANSMIT_SPECULAR\n    directTransmitSpecular = lightingResult.directTransmitSpecular;\n    environmentTransmitSpecular = lightingResult.environmentTransmitSpecular;\n  #endif\n  #if CC_SURFACES_LIGHTING_TRANSMIT_DIFFUSE\n    directTransmitDiffuse = lightingResult.directTransmitDiffuse;\n    environmentTransmitDiffuse = lightingResult.environmentTransmitDiffuse;\n  #endif\n  #if CC_SURFACES_LIGHTING_TRT\n    directTRT = lightingResult.directTRT;\n    environmentTRT = lightingResult.environmentTRT;\n    specularColorWithLightingTRT = lightingResult.specularColorWithLightingTRT;\n  #endif\n    if (((abs(float(cc_debug_view_mode.x) - float(CC_SURFACES_DEBUG_VIEW_FRESNEL)) < EPSILON_LOWP) && (cc_surfaceTransform.y != 3.0)))\n    {\n        color.rgb = vec3(fresnel);\n        isSRGBColor = false;\n    }\n    if (((abs(float(cc_debug_view_mode.x) - float(CC_SURFACES_DEBUG_VIEW_TRANSMIT_DIRECT_SPECULAR)) < EPSILON_LOWP) && (cc_surfaceTransform.y != 3.0)))\n    {\n        color.rgb = directTransmitSpecular;\n        isSRGBColor = true;\n    }\n    if (((abs(float(cc_debug_view_mode.x) - float(CC_SURFACES_DEBUG_VIEW_TRANSMIT_ENV_SPECULAR)) < EPSILON_LOWP) && (cc_surfaceTransform.y != 3.0)))\n    {\n        color.rgb = environmentTransmitSpecular;\n        isSRGBColor = true;\n    }\n    if (((abs(float(cc_debug_view_mode.x) - float(CC_SURFACES_DEBUG_VIEW_TRANSMIT_DIRECT_DIFFUSE)) < EPSILON_LOWP) && (cc_surfaceTransform.y != 3.0)))\n    {\n        color.rgb = directTransmitDiffuse;\n        isSRGBColor = true;\n    }\n    if (((abs(float(cc_debug_view_mode.x) - float(CC_SURFACES_DEBUG_VIEW_TRANSMIT_ENV_DIFFUSE)) < EPSILON_LOWP) && (cc_surfaceTransform.y != 3.0)))\n    {\n        color.rgb = environmentTransmitDiffuse;\n        isSRGBColor = true;\n    }\n    if (((abs(float(cc_debug_view_mode.x) - float(CC_SURFACES_DEBUG_VIEW_TRANSMIT_ALL)) < EPSILON_LOWP) && (cc_surfaceTransform.y != 3.0)))\n    {\n        color.rgb = directTransmitSpecular + environmentTransmitSpecular + directTransmitDiffuse + environmentTransmitDiffuse;\n        isSRGBColor = true;\n    }\n    if (((abs(float(cc_debug_view_mode.x) - float(CC_SURFACES_DEBUG_VIEW_TRT_DIRECT)) < EPSILON_LOWP) && (cc_surfaceTransform.y != 3.0)))\n    {\n        color.rgb = directTRT * specularColorWithLightingTRT;\n        isSRGBColor = true;\n    }\n    if (((abs(float(cc_debug_view_mode.x) - float(CC_SURFACES_DEBUG_VIEW_TRT_ENVIRONMENT)) < EPSILON_LOWP) && (cc_surfaceTransform.y != 3.0)))\n    {\n        color.rgb = environmentTRT * specularColorWithLightingTRT;\n        isSRGBColor = true;\n    }\n    if (((abs(float(cc_debug_view_mode.x) - float(CC_SURFACES_DEBUG_VIEW_TRT_ALL)) < EPSILON_LOWP) && (cc_surfaceTransform.y != 3.0)))\n    {\n        color.rgb = (directTRT + environmentTRT) * specularColorWithLightingTRT;\n        isSRGBColor = true;\n    }\n    return isSRGBColor;\n  }\n#endif\n#if CC_USE_DEBUG_VIEW == CC_SURFACES_DEBUG_VIEW_COMPOSITE_AND_MISC\n  void CCSurfacesDebugViewCompositeLightingResult(inout LightingResult lightingResult)\n  {\n    if (!IS_DEBUG_VIEW_COMPOSITE_ENABLE_DIRECT_DIFFUSE)\n      lightingResult.directDiffuse = vec3(0.0);\n    if (!IS_DEBUG_VIEW_COMPOSITE_ENABLE_DIRECT_SPECULAR)\n      lightingResult.directSpecular = vec3(0.0);\n    if (!IS_DEBUG_VIEW_COMPOSITE_ENABLE_ENV_DIFFUSE)\n      lightingResult.environmentDiffuse = vec3(0.0);\n    if (!IS_DEBUG_VIEW_COMPOSITE_ENABLE_ENV_SPECULAR)\n      lightingResult.environmentSpecular = vec3(0.0);\n  #if CC_SURFACES_LIGHTING_TRANSMIT_DIFFUSE\n    if (!IS_DEBUG_VIEW_COMPOSITE_ENABLE_TRANSMIT_DIFFUSE)\n      lightingResult.directTransmitDiffuse = lightingResult.environmentTransmitDiffuse = vec3(0.0);\n  #endif\n  #if CC_SURFACES_LIGHTING_TRANSMIT_SPECULAR\n    if (!IS_DEBUG_VIEW_COMPOSITE_ENABLE_TRANSMIT_SPECULAR)\n      lightingResult.directTransmitSpecular = lightingResult.environmentTransmitSpecular = vec3(0.0);\n  #endif\n  #if CC_SURFACES_LIGHTING_TRT\n    if (!IS_DEBUG_VIEW_COMPOSITE_ENABLE_TRT)\n        lightingResult.directTRT = lightingResult.environmentTRT = vec3(0.0);\n  #endif\n  #if CC_SURFACES_LIGHTING_TT\n    if (!IS_DEBUG_VIEW_COMPOSITE_ENABLE_TT)\n        lightingResult.directTT = vec3(0.0);\n  #endif\n    if (!IS_DEBUG_VIEW_COMPOSITE_ENABLE_EMISSIVE)\n      lightingResult.emissive = vec3(0.0);\n    if (!IS_DEBUG_VIEW_COMPOSITE_ENABLE_LIGHT_MAP)\n      lightingResult.lightmapColor = vec3(0.0);\n    if (!IS_DEBUG_VIEW_COMPOSITE_ENABLE_SHADOW)\n      lightingResult.shadow = 1.0;\n    if (!IS_DEBUG_VIEW_COMPOSITE_ENABLE_AO)\n      lightingResult.ao = 1.0;\n  #if CC_SURFACES_LIGHTING_USE_FRESNEL\n    if (!IS_DEBUG_VIEW_COMPOSITE_ENABLE_FRESNEL)\n      lightingResult.fresnel = 1.0;\n  #endif\n  }\n#endif\n#if (CC_PIPELINE_TYPE == 0 || CC_FORCE_FORWARD_SHADING)\n  layout(location = 0) out vec4 fragColorX;\n  void main()  {\n  #if CC_DISABLE_STRUCTURE_IN_FRAGMENT_SHADER\n    float NoL = dot(-cc_mainLitDir.xyz, FSInput_worldNormal.xyz);\n    vec4 color = SurfacesFragmentModifyBaseColorAndTransparency();\n  #else\n    SurfacesMaterialData surfaceData;\n    CCSurfacesFragmentGetMaterialData(surfaceData);\n    vec2 shadowBias = vec2(0.0);\n    vec3 colDebugCSMLayer = vec3(1.0);\n    #if CC_RECEIVE_SHADOW\n      shadowBias = FSInput_shadowBias;\n      #if !CC_FORWARD_ADD\n        #if CC_USE_DEBUG_VIEW && CC_SURFACES_ENABLE_DEBUG_VIEW\n          if (IS_DEBUG_VIEW_MISC_ENABLE_CSM_LAYER_COLORATION)\n          {\n              vec4 csmPos;\n              vec4 shadowProjDepthInfo, shadowProjInfo;\n              vec3 shadowViewDir0, shadowViewDir1, shadowViewDir2;\n              int csmLayer = -1;\n              csmLayer = CCGetCSMLevel(csmPos, shadowProjDepthInfo, shadowProjInfo, shadowViewDir0, shadowViewDir1, shadowViewDir2, surfaceData.worldPos);\n              bool OutOfRange = csmLayer < 0;\n              if (OutOfRange)\n                  colDebugCSMLayer = vec3(1.0);\n              else if (csmLayer == 0)\n                  colDebugCSMLayer = vec3(1.0, 0.0, 0.0);\n              else if (csmLayer == 1)\n                  colDebugCSMLayer = vec3(0.0, 1.0, 0.0);\n              else if (csmLayer == 2)\n                  colDebugCSMLayer = vec3(0.0, 0.0, 1.0);\n              else if (csmLayer == 3)\n                  colDebugCSMLayer = vec3(0.0, 1.0, 1.0);\n          }\n        #endif\n      #endif\n    #endif\n    #if !CC_FORWARD_ADD\n      float fogFactor = 1.0;\n      #if CC_USE_FOG != 4\n        #if !CC_USE_ACCURATE_FOG\n          fogFactor = FSInput_fogFactor;\n        #else\n          CC_TRANSFER_FOG_BASE(vec4(FSInput_worldPos, 1.0), fogFactor);\n        #endif\n      #endif\n      #if CC_USE_DEBUG_VIEW == CC_SURFACES_DEBUG_VIEW_COMPOSITE_AND_MISC && CC_SURFACES_ENABLE_DEBUG_VIEW\n        if (!IS_DEBUG_VIEW_COMPOSITE_ENABLE_FOG) {\n            fogFactor = 1.0;\n        }\n      #endif\n    #endif\n    LightingResult lightingResult;\n    CCSurfacesLighting(lightingResult, surfaceData, shadowBias);\n    #if CC_USE_DEBUG_VIEW == CC_SURFACES_DEBUG_VIEW_SINGLE && CC_SURFACES_ENABLE_DEBUG_VIEW\n      vec4 debugColor = vec4(0.0, 0.0, 0.0, 1.0);\n      float materialTransparency = CCSurfacesShading(surfaceData, lightingResult).a;\n      #if !CC_FORWARD_ADD\n        CCSurfacesDebugViewMeshData(debugColor);\n        CCSurfacesDebugViewSurfaceData(debugColor, surfaceData);\n        if (((abs(float(cc_debug_view_mode.x) - float(CC_SURFACES_DEBUG_VIEW_FOG)) < EPSILON_LOWP) && (cc_surfaceTransform.y != 3.0)))\n        {\n          debugColor.rgb = vec3(1.0 - fogFactor);\n        }\n      #endif\n      #if CC_FORWARD_ADD\n        if (((abs(float(cc_debug_view_mode.x) - float(CC_SURFACES_DEBUG_VIEW_DIRECT_DIFFUSE)) < EPSILON_LOWP) && (cc_surfaceTransform.y != 3.0)) || ((abs(float(cc_debug_view_mode.x) - float(CC_SURFACES_DEBUG_VIEW_DIRECT_SPECULAR)) < EPSILON_LOWP) && (cc_surfaceTransform.y != 3.0)) || ((abs(float(cc_debug_view_mode.x) - float(CC_SURFACES_DEBUG_VIEW_DIRECT_ALL)) < EPSILON_LOWP) && (cc_surfaceTransform.y != 3.0)))\n      #endif\n        {\n            if (CCSurfacesDebugViewLightingResult(debugColor, lightingResult))\n            {\n              debugColor.a = materialTransparency;\n              #if CC_USE_HDR\n                if (IS_DEBUG_VIEW_COMPOSITE_ENABLE_TONE_MAPPING)\n                    debugColor.rgb = ACESToneMap(debugColor.rgb);\n              #endif\n              if (IS_DEBUG_VIEW_COMPOSITE_ENABLE_GAMMA_CORRECTION)\n                  debugColor.rgb = LinearToSRGB(debugColor.rgb);\n            }\n        }\n      if (IS_DEBUG_VIEW_ENABLE_WITH_CAMERA) {\n        fragColorX = debugColor;\n        return;\n      }\n    #elif CC_USE_DEBUG_VIEW == CC_SURFACES_DEBUG_VIEW_COMPOSITE_AND_MISC && CC_SURFACES_ENABLE_DEBUG_VIEW\n      CCSurfacesDebugViewCompositeLightingResult(lightingResult);\n    #endif\n    vec4 color = CCSurfacesShading(surfaceData, lightingResult);\n    #if CC_USE_DEBUG_VIEW && CC_SURFACES_ENABLE_DEBUG_VIEW\n      if (IS_DEBUG_VIEW_MISC_ENABLE_CSM_LAYER_COLORATION) {\n          color.rgb *= colDebugCSMLayer.rgb;\n      }\n      #if CC_SURFACES_USE_TANGENT_SPACE\n        color = CCSurfacesDebugDisplayInvalidInputData(color, FSInput_worldTangent);\n      #endif\n    #endif\n  #endif\n    #if CC_USE_RGBE_OUTPUT\n      fragColorX = packRGBE(color.rgb);\n      return;\n    #endif\n    #if CC_USE_HDR\n      #if CC_USE_DEBUG_VIEW == CC_SURFACES_DEBUG_VIEW_COMPOSITE_AND_MISC && CC_SURFACES_ENABLE_DEBUG_VIEW\n        if (IS_DEBUG_VIEW_COMPOSITE_ENABLE_TONE_MAPPING)\n      #endif\n        color.rgb = ACESToneMap(color.rgb);\n    #endif\n    #if CC_USE_DEBUG_VIEW == CC_SURFACES_DEBUG_VIEW_COMPOSITE_AND_MISC\n      if (IS_DEBUG_VIEW_COMPOSITE_ENABLE_GAMMA_CORRECTION)\n    #endif\n    color.rgb = LinearToSRGB(color.rgb);\n    #if !CC_FORWARD_ADD && CC_USE_FOG != 4\n      CC_APPLY_FOG_BASE(color, fogFactor);\n    #endif\n    fragColorX = CCSurfacesDebugDisplayInvalidNumber(color);\n  }\n#elif CC_PIPELINE_TYPE == 1\n    layout(location = 0) out vec4 fragColor0;\n    layout(location = 1) out vec4 fragColor1;\n    layout(location = 2) out vec4 fragColor2;\n    void main () {\n      SurfacesMaterialData surfaceData;\n      CCSurfacesFragmentGetMaterialData(surfaceData);\n      fragColor0 = CCSurfacesDeferredOutput0(surfaceData);\n      fragColor1 = CCSurfacesDeferredOutput1(surfaceData);\n      fragColor2 = CCSurfacesDeferredOutput2(surfaceData);\n    #if CC_USE_DEBUG_VIEW == CC_SURFACES_DEBUG_VIEW_SINGLE && CC_SURFACES_ENABLE_DEBUG_VIEW\n      vec4 debugColor = vec4(0.0, 0.0, 0.0, 1.0);\n      CCSurfacesDebugViewMeshData(debugColor);\n      CCSurfacesDebugViewSurfaceData(debugColor, surfaceData);\n      if (IS_DEBUG_VIEW_ENABLE_WITH_CAMERA) {\n        fragColor0 = debugColor;\n      }\n    #endif\n    }\n#endif"},"glsl1":{"vert":"\nprecision highp float;\n  #define CC_SURFACES_USE_SECOND_UV HAS_SECOND_UV\n  #define CC_SURFACES_USE_TWO_SIDED USE_TWOSIDE\n  #define CC_SURFACES_USE_REFLECTION_DENOISE USE_REFLECTION_DENOISE\n  #define CC_SURFACES_LIGHTING_ANISOTROPIC IS_ANISOTROPY\n  #define CC_SURFACES_USE_VERTEX_COLOR USE_VERTEX_COLOR\n  #define CC_SURFACES_USE_LEGACY_COMPATIBLE_LIGHTING USE_COMPATIBLE_LIGHTING\n#if IS_ANISOTROPY || USE_NORMAL_MAP\n  #define CC_SURFACES_USE_TANGENT_SPACE 1\n#endif\n  #define CC_SURFACES_LIGHTING_ANISOTROPIC_ENVCONVOLUTION_COUNT 31\n#ifndef CC_SURFACES_USE_SECOND_UV\n  #define CC_SURFACES_USE_SECOND_UV 0\n#endif\n#ifndef CC_SURFACES_USE_TANGENT_SPACE\n  #define CC_SURFACES_USE_TANGENT_SPACE 0\n#endif\n#ifndef CC_SURFACES_USE_VERTEX_COLOR\n  #define CC_SURFACES_USE_VERTEX_COLOR 0\n#endif\n#ifndef CC_SURFACES_TRANSFER_LOCAL_POS\n  #define CC_SURFACES_TRANSFER_LOCAL_POS 0\n#endif\n#ifndef CC_SURFACES_TRANSFER_CLIP_POS\n  #define CC_SURFACES_TRANSFER_CLIP_POS 0\n#endif\n#ifndef CC_SURFACES_USE_LIGHT_MAP\n  #ifdef CC_USE_LIGHTMAP\n    #define CC_SURFACES_USE_LIGHT_MAP CC_USE_LIGHTMAP\n  #else\n    #define CC_SURFACES_USE_LIGHT_MAP 0\n  #endif\n#endif\n#ifndef CC_SURFACES_FLIP_UV\n  #define CC_SURFACES_FLIP_UV 0\n#endif\n#ifndef CC_SURFACES_USE_TWO_SIDED\n  #define CC_SURFACES_USE_TWO_SIDED 0\n#endif\n#ifndef CC_SURFACES_USE_REFLECTION_DENOISE\n  #define CC_SURFACES_USE_REFLECTION_DENOISE 0\n#endif\n#ifndef CC_SURFACES_LIGHTING_ANISOTROPIC\n  #define CC_SURFACES_LIGHTING_ANISOTROPIC 0\n#endif\n#ifndef CC_SURFACES_LIGHTING_ANISOTROPIC_ENVCONVOLUTION_COUNT\n  #define CC_SURFACES_LIGHTING_ANISOTROPIC_ENVCONVOLUTION_COUNT 0\n#endif\n#ifndef CC_SURFACES_USE_LEGACY_COMPATIBLE_LIGHTING\n  #define CC_SURFACES_USE_LEGACY_COMPATIBLE_LIGHTING 0\n#endif\n#ifndef CC_SURFACES_LIGHTING_USE_FRESNEL\n  #define CC_SURFACES_LIGHTING_USE_FRESNEL 0\n#endif\n#ifndef CC_SURFACES_LIGHTING_TRANSMIT_SPECULAR\n  #define CC_SURFACES_LIGHTING_TRANSMIT_SPECULAR 0\n#endif\n#ifndef CC_SURFACES_LIGHTING_TRANSMIT_DIFFUSE\n  #define CC_SURFACES_LIGHTING_TRANSMIT_DIFFUSE 0\n#endif\n#ifndef CC_SURFACES_LIGHTING_USE_SHADOWMAP_TRANSMIT\n  #define CC_SURFACES_LIGHTING_USE_SHADOWMAP_TRANSMIT 0\n#endif\n#ifndef CC_SURFACES_LIGHTING_TRT\n  #define CC_SURFACES_LIGHTING_TRT 0\n#endif\n#ifndef CC_SURFACES_LIGHTING_TT\n  #define CC_SURFACES_LIGHTING_TT 0\n#endif\n#ifndef CC_SURFACES_ENABLE_DEBUG_VIEW\n  #define CC_SURFACES_ENABLE_DEBUG_VIEW 1\n#endif\n#ifndef CC_SURFACES_LIGHTING_CALCULATE_DIFFUSE\n  #define CC_SURFACES_LIGHTING_CALCULATE_DIFFUSE 1\n#endif\n#ifndef CC_SURFACES_LIGHTING_CALCULATE_SPECULAR\n  #define CC_SURFACES_LIGHTING_CALCULATE_SPECULAR 1\n#endif\n#define CC_USE_SURFACE_SHADER 1\nattribute vec3 a_position;\nattribute vec3 a_normal;\nattribute vec2 a_texCoord;\n#if CC_SURFACES_USE_TANGENT_SPACE\n  attribute vec4 a_tangent;\n#endif\n#if CC_SURFACES_USE_VERTEX_COLOR\n  attribute vec4 a_color;\n#endif\n#if CC_SURFACES_USE_SECOND_UV || CC_USE_LIGHTMAP\n  attribute vec2 a_texCoord1;\n#endif\n#if CC_USE_SKINNING\n    attribute vec4 a_joints;\n  attribute vec4 a_weights;\n#endif\n#if USE_INSTANCING\n  #if CC_USE_BAKED_ANIMATION\n    attribute highp vec4 a_jointAnimInfo;\n  #endif\n  attribute vec4 a_matWorld0;\n  attribute vec4 a_matWorld1;\n  attribute vec4 a_matWorld2;\n  #if CC_USE_LIGHTMAP\n    attribute vec4 a_lightingMapUVParam;\n  #endif\n  #if CC_RECEIVE_SHADOW || CC_USE_REFLECTION_PROBE\n    attribute vec4 a_localShadowBiasAndProbeId;\n  #endif\n  #if CC_USE_LIGHT_PROBE\n    attribute vec4 a_sh_linear_const_r;\n    attribute vec4 a_sh_linear_const_g;\n    attribute vec4 a_sh_linear_const_b;\n  #endif\n#endif\n#if CC_USE_MORPH\n    attribute float a_vertexId;\n#endif\nvarying highp vec3 v_worldPos;\nvarying mediump vec4 v_normal;\nvarying vec2 v_uv;\n#if CC_SURFACES_USE_VERTEX_COLOR\n  varying lowp vec4 v_color;\n#endif\n#if CC_SURFACES_USE_TANGENT_SPACE\n  varying mediump vec4 v_tangent;\n#endif\n#if CC_SURFACES_USE_SECOND_UV\n  varying mediump vec2 v_uv1;\n#endif\n#if CC_USE_LIGHTMAP && !CC_FORWARD_ADD\n  varying mediump vec3 v_luv;\n#endif\n#if CC_RECEIVE_SHADOW || CC_USE_REFLECTION_PROBE\n  varying mediump vec4 v_shadowBiasAndProbeId;\n#endif\n#if CC_USE_FOG != 4 && !CC_USE_ACCURATE_FOG\n  varying mediump float v_fogFactor;\n#endif\n#if CC_SURFACES_TRANSFER_LOCAL_POS\n  varying highp vec4 v_localPos;\n#endif\n#if CC_SURFACES_TRANSFER_CLIP_POS\n  varying highp vec4 v_clipPos;\n#endif\n#if CC_USE_LIGHT_PROBE\n  #if USE_INSTANCING\n    varying mediump vec4 v_sh_linear_const_r;\n    varying mediump vec4 v_sh_linear_const_g;\n    varying mediump vec4 v_sh_linear_const_b;\n  #endif\n#endif\n#define VSOutput_worldPos v_worldPos\n#define VSOutput_worldNormal v_normal.xyz\n#define VSOutput_faceSideSign v_normal.w\n#define VSOutput_texcoord v_uv\n#if CC_SURFACES_USE_VERTEX_COLOR\n  #define VSOutput_vertexColor v_color\n#endif\n#if CC_SURFACES_USE_TANGENT_SPACE\n  #define VSOutput_worldTangent v_tangent.xyz\n  #define VSOutput_mirrorNormal v_tangent.w\n#endif\n#if CC_SURFACES_USE_SECOND_UV\n  #define VSOutput_texcoord1 v_uv1\n#endif\n#if CC_USE_LIGHTMAP && !CC_FORWARD_ADD\n  #define VSOutput_lightMapUV v_luv\n#endif\n#if CC_RECEIVE_SHADOW\n  #define VSOutput_shadowBias v_shadowBiasAndProbeId.xy\n#endif\n#if CC_USE_REFLECTION_PROBE\n  #define VSOutput_reflectionProbeId v_shadowBiasAndProbeId.z\n#endif\n#if CC_USE_FOG != 4 && !CC_USE_ACCURATE_FOG\n  #define VSOutput_fogFactor v_fogFactor\n#endif\n#if CC_SURFACES_TRANSFER_LOCAL_POS\n  #define VSOutput_localPos v_localPos\n#endif\n#if CC_SURFACES_TRANSFER_CLIP_POS\n  #define VSOutput_clipPos v_clipPos\n#endif\nstruct SurfacesStandardVertexIntermediate\n{\n  highp vec4 position;\n  vec3 normal;\n#if CC_SURFACES_USE_TANGENT_SPACE\n  vec4 tangent;\n#endif\n#if CC_SURFACES_USE_VERTEX_COLOR\n  vec4 color;\n#endif\n  vec2 texCoord;\n#if CC_SURFACES_USE_SECOND_UV\n  vec2 texCoord1;\n#endif\n  highp vec4 clipPos;\n  highp vec3 worldPos;\n  vec4 worldNormal;\n  #if CC_SURFACES_USE_TANGENT_SPACE\n    vec3 worldTangent, worldBinormal;\n  #endif\n#if CC_RECEIVE_SHADOW || CC_USE_REFLECTION_PROBE\n  vec4 shadowBiasAndProbeId;\n#endif\n#if CC_USE_FOG != 4 && !CC_USE_ACCURATE_FOG\n  float fogFactor;\n#endif\n#if CC_USE_LIGHTMAP && !CC_FORWARD_ADD\n  vec3 lightmapUV;\n#endif\n};\n#if CC_USE_MORPH\n    int getVertexId() {\n      return int(a_vertexId);\n    }\n#endif\nuniform highp mat4 cc_matView;\n  uniform highp mat4 cc_matProj;\n  uniform highp vec4 cc_cameraPos;\n  uniform mediump vec4 cc_fogBase;\n  uniform mediump vec4 cc_fogAdd;\nuniform mediump vec4 cc_shadowWHPBInfo;\n  uniform mediump vec4 cc_shadowLPNNInfo;\n#define QUATER_PI         0.78539816340\n#define HALF_PI           1.57079632679\n#define PI                3.14159265359\n#define PI2               6.28318530718\n#define PI4               12.5663706144\n#define INV_QUATER_PI     1.27323954474\n#define INV_HALF_PI       0.63661977237\n#define INV_PI            0.31830988618\n#define INV_PI2           0.15915494309\n#define INV_PI4           0.07957747155\n#define EPSILON           1e-6\n#define EPSILON_LOWP      1e-4\n#define LOG2              1.442695\n#define EXP_VALUE         2.71828183f\n#define FP_MAX            65504.0\n#define FP_SCALE          0.0009765625\n#define FP_SCALE_INV      1024.0\n#define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\n#define LIGHT_MAP_TYPE_DISABLED 0\n#define LIGHT_MAP_TYPE_ALL_IN_ONE 1\n#define LIGHT_MAP_TYPE_INDIRECT_OCCLUSION 2\n#define REFLECTION_PROBE_TYPE_NONE 0\n#define REFLECTION_PROBE_TYPE_CUBE 1\n#define REFLECTION_PROBE_TYPE_PLANAR 2\n#define LIGHT_TYPE_DIRECTIONAL 0.0\n#define LIGHT_TYPE_POINT 1.0\n#define LIGHT_TYPE_SPOT 2.0\n#define LIGHT_TYPE_SPHERE 3.0\n#define LIGHT_TYPE_RANGED_DIRECTIONAL 4.0\n#define IS_DIRECTIONAL_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_DIRECTIONAL)) < EPSILON_LOWP)\n#define IS_SPHERE_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_SPHERE)) < EPSILON_LOWP)\n#define IS_SPOT_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_SPOT)) < EPSILON_LOWP)\n#define IS_POINT_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_POINT)) < EPSILON_LOWP)\n#define IS_RANGED_DIRECTIONAL_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_RANGED_DIRECTIONAL)) < EPSILON_LOWP)\nhighp float decode32 (highp vec4 rgba) {\n  rgba = rgba * 255.0;\n  highp float Sign = 1.0 - (step(128.0, (rgba[3]) + 0.5)) * 2.0;\n  highp float Exponent = 2.0 * (mod(float(int((rgba[3]) + 0.5)), 128.0)) + (step(128.0, (rgba[2]) + 0.5)) - 127.0;\n  highp float Mantissa = (mod(float(int((rgba[2]) + 0.5)), 128.0)) * 65536.0 + rgba[1] * 256.0 + rgba[0] + 8388608.0;\n  return Sign * exp2(Exponent - 23.0) * Mantissa;\n}\n#if !USE_INSTANCING\n  uniform highp mat4 cc_matWorld;\n  uniform highp mat4 cc_matWorldIT;\n  uniform highp vec4 cc_lightingMapUVParam;\n  uniform highp vec4 cc_localShadowBias;\n#endif\nvoid CCGetWorldMatrixFull(out mat4 matWorld, out mat4 matWorldIT)\n{\n  #if USE_INSTANCING\n    matWorld = mat4(\n      vec4(a_matWorld0.xyz, 0.0),\n      vec4(a_matWorld1.xyz, 0.0),\n      vec4(a_matWorld2.xyz, 0.0),\n      vec4(a_matWorld0.w, a_matWorld1.w, a_matWorld2.w, 1.0)\n    );\n    matWorldIT = matWorld;\n  #else\n    matWorld = cc_matWorld;\n    matWorldIT = cc_matWorldIT;\n  #endif\n}\n#if CC_USE_MORPH\n  uniform vec4 cc_displacementWeights[15];\n  uniform vec4 cc_displacementTextureInfo;\n  #if CC_MORPH_TARGET_HAS_POSITION\n    uniform sampler2D cc_PositionDisplacements;\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    uniform sampler2D cc_NormalDisplacements;\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    uniform sampler2D cc_TangentDisplacements;\n  #endif\n  vec2 getPixelLocation(vec2 textureResolution, int pixelIndex) {\n    float pixelIndexF = float(pixelIndex);\n    float x = mod(pixelIndexF, textureResolution.x);\n    float y = floor(pixelIndexF / textureResolution.x);\n    return vec2(x, y);\n  }\n  vec2 getPixelCoordFromLocation(vec2 location, vec2 textureResolution) {\n    return (vec2(location.x, location.y) + .5) / textureResolution;\n  }\n  #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n        int pixelIndex = elementIndex;\n        vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n        vec2 uv = getPixelCoordFromLocation(location, cc_displacementTextureInfo.xy);\n        return texture2D(tex, uv);\n      }\n  #else\n    vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n      int pixelIndex = elementIndex * 4;\n      vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n      vec2 x = getPixelCoordFromLocation(location + vec2(0.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 y = getPixelCoordFromLocation(location + vec2(1.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 z = getPixelCoordFromLocation(location + vec2(2.0, 0.0), cc_displacementTextureInfo.xy);\n      return vec4(\n        decode32(texture2D(tex, x)),\n        decode32(texture2D(tex, y)),\n        decode32(texture2D(tex, z)),\n        1.0\n      );\n    }\n  #endif\n  float getDisplacementWeight(int index) {\n    int quot = index / 4;\n    int remainder = index - quot * 4;\n    if (remainder == 0) {\n      return cc_displacementWeights[quot].x;\n    } else if (remainder == 1) {\n      return cc_displacementWeights[quot].y;\n    } else if (remainder == 2) {\n      return cc_displacementWeights[quot].z;\n    } else {\n      return cc_displacementWeights[quot].w;\n    }\n  }\n  vec3 getVec3DisplacementFromTexture(sampler2D tex, int vertexIndex) {\n  #if CC_MORPH_PRECOMPUTED\n    return fetchVec3ArrayFromTexture(tex, vertexIndex).rgb;\n  #else\n    vec3 result = vec3(0, 0, 0);\n    int nVertices = int(cc_displacementTextureInfo.z);\n    for (int iTarget = 0; iTarget < CC_MORPH_TARGET_COUNT; ++iTarget) {\n      result += (fetchVec3ArrayFromTexture(tex, nVertices * iTarget + vertexIndex).rgb * getDisplacementWeight(iTarget));\n    }\n    return result;\n  #endif\n  }\n  #if CC_MORPH_TARGET_HAS_POSITION\n  vec3 getPositionDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_PositionDisplacements, vertexId);\n  }\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n  vec3 getNormalDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_NormalDisplacements, vertexId);\n  }\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n  vec3 getTangentDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_TangentDisplacements, vertexId);\n  }\n  #endif\n  void applyMorph (inout vec4 position, inout vec3 normal, inout vec4 tangent) {\n    int vertexId = getVertexId();\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    normal.xyz = normal.xyz + getNormalDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    tangent.xyz = tangent.xyz + getTangentDisplacement(vertexId);\n  #endif\n  }\n  void applyMorph (inout vec4 position) {\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(getVertexId());\n  #endif\n  }\n#endif\n#if CC_USE_SKINNING\n  #if CC_USE_BAKED_ANIMATION\n    uniform highp vec4 cc_jointTextureInfo;\n    uniform highp vec4 cc_jointAnimInfo;\n    uniform highp sampler2D cc_jointTexture;\n    void CCGetJointTextureCoords(float pixelsPerJoint, float jointIdx, out highp float x, out highp float y, out highp float invSize)\n    {\n      #if USE_INSTANCING\n        highp float temp = pixelsPerJoint * (a_jointAnimInfo.x * a_jointAnimInfo.y + jointIdx) + a_jointAnimInfo.z;\n      #else\n        highp float temp = pixelsPerJoint * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + jointIdx) + cc_jointTextureInfo.z;\n      #endif\n      invSize = cc_jointTextureInfo.w;\n      highp float tempY = floor(temp * invSize);\n      x = floor(temp - tempY * cc_jointTextureInfo.x);\n      y = (tempY + 0.5) * invSize;\n    }\n  #else\n    #if CC_USE_REAL_TIME_JOINT_TEXTURE\n      uniform highp sampler2D cc_realtimeJoint;\n    #else\n      uniform highp vec4 cc_joints[CC_JOINT_UNIFORM_CAPACITY * 3];\n    #endif\n  #endif\n  #if CC_USE_BAKED_ANIMATION\n    #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      mat4 getJointMatrix (float i) {\n        highp float x, y, invSize;\n        CCGetJointTextureCoords(3.0, i, x, y, invSize);\n        vec4 v1 = texture2D(cc_jointTexture, vec2((x + 0.5) * invSize, y));\n        vec4 v2 = texture2D(cc_jointTexture, vec2((x + 1.5) * invSize, y));\n        vec4 v3 = texture2D(cc_jointTexture, vec2((x + 2.5) * invSize, y));\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #else\n      mat4 getJointMatrix (float i) {\n        highp float x, y, invSize;\n        CCGetJointTextureCoords(12.0, i, x, y, invSize);\n        vec4 v1 = vec4(\n          decode32(texture2D(cc_jointTexture, vec2((x + 0.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 1.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 2.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 3.5) * invSize, y)))\n        );\n        vec4 v2 = vec4(\n          decode32(texture2D(cc_jointTexture, vec2((x + 4.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 5.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 6.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 7.5) * invSize, y)))\n        );\n        vec4 v3 = vec4(\n          decode32(texture2D(cc_jointTexture, vec2((x + 8.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 9.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 10.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 11.5) * invSize, y)))\n        );\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #else\n    #if CC_USE_REAL_TIME_JOINT_TEXTURE\n      #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n        mat4 getJointMatrix (float i) {\n          float x = i;\n          vec4 v1 = texture2D(cc_realtimeJoint, vec2( x / 256.0, 0.5 / 3.0));\n          vec4 v2 = texture2D(cc_realtimeJoint, vec2( x / 256.0, 1.5 / 3.0));\n          vec4 v3 = texture2D(cc_realtimeJoint, vec2( x / 256.0, 2.5 / 3.0));\n          return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n        }\n      #else\n        mat4 getJointMatrix (float i) {\n         float x = 4.0 * i;\n          vec4 v1 = vec4(\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 0.5)/ 1024.0, 0.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 1.5)/ 1024.0, 0.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 2.5)/ 1024.0, 0.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 3.5)/ 1024.0, 0.5 / 3.0)))\n          );\n          vec4 v2 = vec4(\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 0.5)/ 1024.0, 1.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 1.5)/ 1024.0, 1.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 2.5)/ 1024.0, 1.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 3.5)/ 1024.0, 1.5 / 3.0)))\n          );\n          vec4 v3 = vec4(\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 0.5)/ 1024.0, 2.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 1.5)/ 1024.0, 2.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 2.5)/ 1024.0, 2.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 3.5)/ 1024.0, 2.5 / 3.0)))\n          );\n          return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n        }\n      #endif\n    #else\n      mat4 getJointMatrix (float i) {\n        int idx = int(i);\n        vec4 v1 = cc_joints[idx * 3];\n        vec4 v2 = cc_joints[idx * 3 + 1];\n        vec4 v3 = cc_joints[idx * 3 + 2];\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #endif\n  mat4 skinMatrix () {\n    vec4 joints = vec4(a_joints);\n    return getJointMatrix(joints.x) * a_weights.x\n         + getJointMatrix(joints.y) * a_weights.y\n         + getJointMatrix(joints.z) * a_weights.z\n         + getJointMatrix(joints.w) * a_weights.w;\n  }\n  void CCSkin (inout vec4 position) {\n    mat4 m = skinMatrix();\n    position = m * position;\n  }\n  void CCSkin (inout vec4 position, inout vec3 normal, inout vec4 tangent) {\n    mat4 m = skinMatrix();\n    position = m * position;\n    normal = (m * vec4(normal, 0.0)).xyz;\n    tangent.xyz = (m * vec4(tangent.xyz, 0.0)).xyz;\n  }\n#endif\n#if CC_USE_FOG != 4 && !CC_USE_ACCURATE_FOG\n  #if CC_USE_FOG != 4\n    float LinearFog(vec4 pos, vec3 cameraPos, float fogStart, float fogEnd) {\n        vec4 wPos = pos;\n        float cam_dis = distance(cameraPos, wPos.xyz);\n        return clamp((fogEnd - cam_dis) / (fogEnd - fogStart), 0., 1.);\n    }\n    float ExpFog(vec4 pos, vec3 cameraPos, float fogStart, float fogDensity, float fogAtten) {\n        vec4 wPos = pos;\n        float cam_dis = max(distance(cameraPos, wPos.xyz) - fogStart, 0.0) / fogAtten * 4.;\n        float f = exp(-cam_dis * fogDensity);\n        return f;\n    }\n    float ExpSquaredFog(vec4 pos, vec3 cameraPos, float fogStart, float fogDensity, float fogAtten) {\n        vec4 wPos = pos;\n        float cam_dis = max(distance(cameraPos, wPos.xyz) - fogStart, 0.0) / fogAtten * 4.;\n        float f = exp(-cam_dis * cam_dis * fogDensity * fogDensity);\n        return f;\n    }\n    float LayeredFog(vec4 pos, vec3 cameraPos, float fogTop, float fogRange, float fogAtten) {\n        vec4 wPos = pos;\n        vec3 camWorldProj = cameraPos.xyz;\n        camWorldProj.y = 0.;\n        vec3 worldPosProj = wPos.xyz;\n        worldPosProj.y = 0.;\n        float fDeltaD = distance(worldPosProj, camWorldProj) / fogAtten * 2.0;\n        float fDeltaY, fDensityIntegral;\n        if (cameraPos.y > fogTop) {\n            if (wPos.y < fogTop) {\n                fDeltaY = (fogTop - wPos.y) / fogRange * 2.0;\n                fDensityIntegral = fDeltaY * fDeltaY * 0.5;\n            }\n            else {\n                fDeltaY = 0.;\n                fDensityIntegral = 0.;\n            }\n        }\n        else {\n            if (wPos.y < fogTop) {\n                float fDeltaA = (fogTop - cameraPos.y) / fogRange * 2.;\n                float fDeltaB = (fogTop - wPos.y) / fogRange * 2.;\n                fDeltaY = abs(fDeltaA - fDeltaB);\n                fDensityIntegral = abs((fDeltaA * fDeltaA * 0.5) - (fDeltaB * fDeltaB * 0.5));\n            }\n            else {\n                fDeltaY = abs(fogTop - cameraPos.y) / fogRange * 2.;\n                fDensityIntegral = abs(fDeltaY * fDeltaY * 0.5);\n            }\n        }\n        float fDensity;\n        if (fDeltaY != 0.) {\n            fDensity = (sqrt(1.0 + ((fDeltaD / fDeltaY) * (fDeltaD / fDeltaY)))) * fDensityIntegral;\n        }\n        else {\n            fDensity = 0.;\n        }\n        float f = exp(-fDensity);\n        return f;\n    }\n  #endif\n  void CC_TRANSFER_FOG_BASE(vec4 pos, out float factor)\n  {\n  #if CC_USE_FOG == 0\n  \tfactor = LinearFog(pos, cc_cameraPos.xyz, cc_fogBase.x, cc_fogBase.y);\n  #elif CC_USE_FOG == 1\n  \tfactor = ExpFog(pos, cc_cameraPos.xyz, cc_fogBase.x, cc_fogBase.z, cc_fogAdd.z);\n  #elif CC_USE_FOG == 2\n  \tfactor = ExpSquaredFog(pos, cc_cameraPos.xyz, cc_fogBase.x, cc_fogBase.z, cc_fogAdd.z);\n  #elif CC_USE_FOG == 3\n  \tfactor = LayeredFog(pos, cc_cameraPos.xyz, cc_fogAdd.x, cc_fogAdd.y, cc_fogAdd.z);\n  #else\n  \tfactor = 1.0;\n  #endif\n  }\n#endif\n    uniform vec4 tilingOffset;\n#define CC_SURFACES_VERTEX_MODIFY_UV\nvoid SurfacesVertexModifyUV(inout SurfacesStandardVertexIntermediate In)\n{\n  In.texCoord = In.texCoord * tilingOffset.xy + tilingOffset.zw;\n#if CC_SURFACES_USE_SECOND_UV\n  In.texCoord1 = In.texCoord1 * tilingOffset.xy + tilingOffset.zw;\n#endif\n}\n#ifndef CC_SURFACES_VERTEX_MODIFY_LOCAL_POS\nvec3 SurfacesVertexModifyLocalPos(in SurfacesStandardVertexIntermediate In)\n{\n  return In.position.xyz;\n}\n#endif\n#ifndef CC_SURFACES_VERTEX_MODIFY_LOCAL_NORMAL\nvec3 SurfacesVertexModifyLocalNormal(in SurfacesStandardVertexIntermediate In)\n{\n  return In.normal.xyz;\n}\n#endif\n#ifndef CC_SURFACES_VERTEX_MODIFY_LOCAL_TANGENT\n  #if CC_SURFACES_USE_TANGENT_SPACE\n  vec4 SurfacesVertexModifyLocalTangent(in SurfacesStandardVertexIntermediate In)\n    {\n      return In.tangent;\n    }\n  #endif\n#endif\n#ifndef CC_SURFACES_VERTEX_MODIFY_LOCAL_SHARED_DATA\nvoid SurfacesVertexModifyLocalSharedData(inout SurfacesStandardVertexIntermediate In)\n{\n}\n#endif\n#ifndef CC_SURFACES_VERTEX_MODIFY_WORLD_POS\nvec3 SurfacesVertexModifyWorldPos(in SurfacesStandardVertexIntermediate In)\n{\n  return In.worldPos;\n}\n#endif\n#ifndef CC_SURFACES_VERTEX_MODIFY_CLIP_POS\nvec4 SurfacesVertexModifyClipPos(in SurfacesStandardVertexIntermediate In)\n{\n  return In.clipPos;\n}\n#endif\n#ifndef CC_SURFACES_VERTEX_MODIFY_UV\nvoid SurfacesVertexModifyUV(inout SurfacesStandardVertexIntermediate In)\n{\n}\n#endif\n#ifndef CC_SURFACES_VERTEX_MODIFY_WORLD_NORMAL\nvec3 SurfacesVertexModifyWorldNormal(in SurfacesStandardVertexIntermediate In)\n{\n    vec3 worldNormal = In.worldNormal.xyz;\n  #if CC_SURFACES_USE_TWO_SIDED\n      worldNormal.xyz *= In.worldNormal.w;\n  #endif\n  return worldNormal;\n}\n#endif\n#ifndef CC_SURFACES_VERTEX_MODIFY_SHARED_DATA\nvoid SurfacesVertexModifySharedData(inout SurfacesStandardVertexIntermediate In)\n{\n}\n#endif\nvoid CCSurfacesVertexInput(out SurfacesStandardVertexIntermediate In)\n{\n  In.position = vec4(a_position, 1.0);\n  In.normal = a_normal;\n#if CC_SURFACES_USE_TANGENT_SPACE\n  In.tangent = a_tangent;\n#endif\n#if CC_SURFACES_USE_VERTEX_COLOR\n  In.color = a_color;\n#endif\n  In.texCoord = a_texCoord;\n#if CC_SURFACES_USE_SECOND_UV\n  In.texCoord1 = a_texCoord1;\n#endif\n}\nvoid CCSurfacesVertexOutput(in SurfacesStandardVertexIntermediate In)\n{\n  gl_Position = In.clipPos;\n  VSOutput_worldNormal = In.worldNormal.xyz;\n  VSOutput_faceSideSign = In.worldNormal.w;\n  VSOutput_worldPos = In.worldPos;\n#if CC_SURFACES_USE_TANGENT_SPACE\n  VSOutput_worldTangent = In.worldTangent.xyz;\n  VSOutput_mirrorNormal = In.tangent.w > 0.0 ? 1.0 : -1.0;\n#endif\n#if CC_SURFACES_USE_VERTEX_COLOR\n  VSOutput_vertexColor = In.color;\n#endif\n  VSOutput_texcoord = In.texCoord;\n#if CC_SURFACES_USE_SECOND_UV\n  VSOutput_texcoord1 = In.texCoord1;\n#endif\n#if CC_USE_FOG != 4 && !CC_USE_ACCURATE_FOG\n  VSOutput_fogFactor = In.fogFactor;\n#endif\n#if CC_RECEIVE_SHADOW\n  VSOutput_shadowBias = In.shadowBiasAndProbeId.xy;\n#endif\n#if CC_USE_REFLECTION_PROBE\n  VSOutput_reflectionProbeId = In.shadowBiasAndProbeId.z;\n#endif\n#if CC_USE_LIGHTMAP && !CC_FORWARD_ADD\n  VSOutput_lightMapUV = In.lightmapUV;\n#endif\n#if CC_SURFACES_TRANSFER_LOCAL_POS\n  VSOutput_localPos = In.position;\n#endif\n#if CC_SURFACES_TRANSFER_CLIP_POS\n  VSOutput_clipPos = In.clipPos;\n#endif\n#if CC_USE_LIGHT_PROBE\n  #if USE_INSTANCING\n    v_sh_linear_const_r = a_sh_linear_const_r;\n    v_sh_linear_const_g = a_sh_linear_const_g;\n    v_sh_linear_const_b = a_sh_linear_const_b;\n  #endif\n#endif\n}\nvoid CCSurfacesVertexAnimation(inout SurfacesStandardVertexIntermediate In)\n{\nvec4 temp = vec4(0.0);\n#if CC_USE_MORPH\n  #if CC_SURFACES_USE_TANGENT_SPACE\n    applyMorph(In.position, In.normal, In.tangent);\n  #else\n    applyMorph(In.position, In.normal, temp);\n  #endif\n#endif\n#if CC_USE_SKINNING\n  #if CC_SURFACES_USE_TANGENT_SPACE\n    CCSkin(In.position, In.normal, In.tangent);\n  #else\n    CCSkin(In.position, In.normal, temp);\n  #endif\n#endif\n}\nvoid CCSurfacesVertexWorldTransform(inout SurfacesStandardVertexIntermediate In)\n{\n    mat4 matWorld, matWorldIT;\n    CCGetWorldMatrixFull(matWorld, matWorldIT);\n    In.worldPos = (matWorld * In.position).xyz;\n    In.worldNormal.xyz = normalize((matWorldIT * vec4(In.normal.xyz, 0.0)).xyz);\n    #if CC_SURFACES_USE_TANGENT_SPACE\n      In.worldTangent = normalize((matWorld * vec4(In.tangent.xyz, 0.0)).xyz);\n      In.worldBinormal = cross(In.worldNormal.xyz, In.worldTangent) * In.tangent.w;\n    #endif\n}\nvoid CCSurfacesVertexTransformUV(inout SurfacesStandardVertexIntermediate In)\n{\n  #if CC_SURFACES_FLIP_UV\n    In.texCoord = cc_cameraPos.w > 1.0 ? vec2(In.texCoord.x, 1.0 - In.texCoord.y) : In.texCoord;\n    #if CC_SURFACES_USE_SECOND_UV\n      In.texCoord1 = cc_cameraPos.w > 1.0 ? vec2(In.texCoord1.x, 1.0 - In.texCoord1.y) : In.texCoord1;\n    #endif\n  #endif\n}\nvoid CCSurfacesVertexTransferFog(inout SurfacesStandardVertexIntermediate In)\n{\n#if CC_USE_FOG != 4 && !CC_USE_ACCURATE_FOG\n    CC_TRANSFER_FOG_BASE(vec4(In.worldPos, 1.0), In.fogFactor);\n#endif\n}\nvoid CCSurfacesVertexTransferShadow(inout SurfacesStandardVertexIntermediate In)\n{\n  #if CC_RECEIVE_SHADOW || CC_USE_REFLECTION_PROBE\n    In.shadowBiasAndProbeId = vec4(0.0);\n  #endif\n  #if CC_RECEIVE_SHADOW\n    In.shadowBiasAndProbeId.xy = vec2(cc_shadowWHPBInfo.w, cc_shadowLPNNInfo.z);\n    #if USE_INSTANCING\n      In.shadowBiasAndProbeId.xy += a_localShadowBiasAndProbeId.xy;\n    #else\n      In.shadowBiasAndProbeId.xy += cc_localShadowBias.xy;\n    #endif\n  #endif\n  #if CC_USE_REFLECTION_PROBE\n    #if USE_INSTANCING\n      In.shadowBiasAndProbeId.zw = a_localShadowBiasAndProbeId.zw;\n    #else\n      In.shadowBiasAndProbeId.zw = cc_localShadowBias.zw;\n    #endif\n  #endif\n}\nvoid CCSurfacesVertexTransferLightMapUV(inout SurfacesStandardVertexIntermediate In)\n{\n#if CC_USE_LIGHTMAP && !CC_FORWARD_ADD\n  #if USE_INSTANCING\n    In.lightmapUV.xy = a_lightingMapUVParam.xy + a_texCoord1 * a_lightingMapUVParam.z;\n    In.lightmapUV.z = a_lightingMapUVParam.w;\n  #else\n    In.lightmapUV.xy = cc_lightingMapUVParam.xy + a_texCoord1 * cc_lightingMapUVParam.z;\n    In.lightmapUV.z = cc_lightingMapUVParam.w;\n  #endif\n#endif\n}\nvoid main()\n{\n  SurfacesStandardVertexIntermediate In;\n  CCSurfacesVertexInput(In);\n  CCSurfacesVertexAnimation(In);\n  In.position.xyz = SurfacesVertexModifyLocalPos(In);\n  In.normal.xyz = SurfacesVertexModifyLocalNormal(In);\n  #if CC_SURFACES_USE_TANGENT_SPACE\n    In.tangent = SurfacesVertexModifyLocalTangent(In);\n  #endif\n  SurfacesVertexModifyLocalSharedData(In);\n  CCSurfacesVertexWorldTransform(In);\n  In.worldPos = SurfacesVertexModifyWorldPos(In);\n  In.clipPos = cc_matProj * cc_matView * vec4(In.worldPos, 1.0);\n  In.clipPos = SurfacesVertexModifyClipPos(In);\n  vec3 viewDirect = normalize(cc_cameraPos.xyz - In.worldPos);\n  In.worldNormal.w = dot(In.worldNormal.xyz, viewDirect) < 0.0 ? -1.0 : 1.0;\n  In.worldNormal.xyz = SurfacesVertexModifyWorldNormal(In);\n  SurfacesVertexModifyUV(In);\n  SurfacesVertexModifySharedData(In);\n  CCSurfacesVertexTransformUV(In);\n  CCSurfacesVertexTransferFog(In);\n  CCSurfacesVertexTransferShadow(In);\n  CCSurfacesVertexTransferLightMapUV(In);\n  CCSurfacesVertexOutput(In);\n}","frag":"\n#ifdef GL_EXT_draw_buffers\n#extension GL_EXT_draw_buffers: enable\n#endif\n#ifdef GL_OES_standard_derivatives\n#extension GL_OES_standard_derivatives: enable\n#endif\n#ifdef GL_EXT_shader_texture_lod\n#extension GL_EXT_shader_texture_lod: enable\n#endif\nprecision highp float;\n  #define CC_SURFACES_USE_SECOND_UV HAS_SECOND_UV\n  #define CC_SURFACES_USE_TWO_SIDED USE_TWOSIDE\n  #define CC_SURFACES_USE_REFLECTION_DENOISE USE_REFLECTION_DENOISE\n  #define CC_SURFACES_LIGHTING_ANISOTROPIC IS_ANISOTROPY\n  #define CC_SURFACES_USE_VERTEX_COLOR USE_VERTEX_COLOR\n  #define CC_SURFACES_USE_LEGACY_COMPATIBLE_LIGHTING USE_COMPATIBLE_LIGHTING\n#if IS_ANISOTROPY || USE_NORMAL_MAP\n  #define CC_SURFACES_USE_TANGENT_SPACE 1\n#endif\n  #define CC_SURFACES_LIGHTING_ANISOTROPIC_ENVCONVOLUTION_COUNT 31\n#ifndef CC_SURFACES_USE_SECOND_UV\n  #define CC_SURFACES_USE_SECOND_UV 0\n#endif\n#ifndef CC_SURFACES_USE_TANGENT_SPACE\n  #define CC_SURFACES_USE_TANGENT_SPACE 0\n#endif\n#ifndef CC_SURFACES_USE_VERTEX_COLOR\n  #define CC_SURFACES_USE_VERTEX_COLOR 0\n#endif\n#ifndef CC_SURFACES_TRANSFER_LOCAL_POS\n  #define CC_SURFACES_TRANSFER_LOCAL_POS 0\n#endif\n#ifndef CC_SURFACES_TRANSFER_CLIP_POS\n  #define CC_SURFACES_TRANSFER_CLIP_POS 0\n#endif\n#ifndef CC_SURFACES_USE_LIGHT_MAP\n  #ifdef CC_USE_LIGHTMAP\n    #define CC_SURFACES_USE_LIGHT_MAP CC_USE_LIGHTMAP\n  #else\n    #define CC_SURFACES_USE_LIGHT_MAP 0\n  #endif\n#endif\n#ifndef CC_SURFACES_FLIP_UV\n  #define CC_SURFACES_FLIP_UV 0\n#endif\n#ifndef CC_SURFACES_USE_TWO_SIDED\n  #define CC_SURFACES_USE_TWO_SIDED 0\n#endif\n#ifndef CC_SURFACES_USE_REFLECTION_DENOISE\n  #define CC_SURFACES_USE_REFLECTION_DENOISE 0\n#endif\n#ifndef CC_SURFACES_LIGHTING_ANISOTROPIC\n  #define CC_SURFACES_LIGHTING_ANISOTROPIC 0\n#endif\n#ifndef CC_SURFACES_LIGHTING_ANISOTROPIC_ENVCONVOLUTION_COUNT\n  #define CC_SURFACES_LIGHTING_ANISOTROPIC_ENVCONVOLUTION_COUNT 0\n#endif\n#ifndef CC_SURFACES_USE_LEGACY_COMPATIBLE_LIGHTING\n  #define CC_SURFACES_USE_LEGACY_COMPATIBLE_LIGHTING 0\n#endif\n#ifndef CC_SURFACES_LIGHTING_USE_FRESNEL\n  #define CC_SURFACES_LIGHTING_USE_FRESNEL 0\n#endif\n#ifndef CC_SURFACES_LIGHTING_TRANSMIT_SPECULAR\n  #define CC_SURFACES_LIGHTING_TRANSMIT_SPECULAR 0\n#endif\n#ifndef CC_SURFACES_LIGHTING_TRANSMIT_DIFFUSE\n  #define CC_SURFACES_LIGHTING_TRANSMIT_DIFFUSE 0\n#endif\n#ifndef CC_SURFACES_LIGHTING_USE_SHADOWMAP_TRANSMIT\n  #define CC_SURFACES_LIGHTING_USE_SHADOWMAP_TRANSMIT 0\n#endif\n#ifndef CC_SURFACES_LIGHTING_TRT\n  #define CC_SURFACES_LIGHTING_TRT 0\n#endif\n#ifndef CC_SURFACES_LIGHTING_TT\n  #define CC_SURFACES_LIGHTING_TT 0\n#endif\n#ifndef CC_SURFACES_ENABLE_DEBUG_VIEW\n  #define CC_SURFACES_ENABLE_DEBUG_VIEW 1\n#endif\n#ifndef CC_SURFACES_LIGHTING_CALCULATE_DIFFUSE\n  #define CC_SURFACES_LIGHTING_CALCULATE_DIFFUSE 1\n#endif\n#ifndef CC_SURFACES_LIGHTING_CALCULATE_SPECULAR\n  #define CC_SURFACES_LIGHTING_CALCULATE_SPECULAR 1\n#endif\n#define CC_USE_SURFACE_SHADER 1\nvarying highp vec3 v_worldPos;\nvarying mediump vec4 v_normal;\nvarying vec2 v_uv;\n#if CC_SURFACES_USE_VERTEX_COLOR\n  varying lowp vec4 v_color;\n#endif\n#if CC_SURFACES_USE_TANGENT_SPACE\n  varying mediump vec4 v_tangent;\n#endif\n#if CC_SURFACES_USE_SECOND_UV\n  varying mediump vec2 v_uv1;\n#endif\n#if CC_USE_LIGHTMAP && !CC_FORWARD_ADD\n  varying mediump vec3 v_luv;\n#endif\n#if CC_RECEIVE_SHADOW || CC_USE_REFLECTION_PROBE\n  varying mediump vec4 v_shadowBiasAndProbeId;\n#endif\n#if CC_USE_FOG != 4 && !CC_USE_ACCURATE_FOG\n  varying mediump float v_fogFactor;\n#endif\n#if CC_SURFACES_TRANSFER_LOCAL_POS\n  varying highp vec4 v_localPos;\n#endif\n#if CC_SURFACES_TRANSFER_CLIP_POS\n  varying highp vec4 v_clipPos;\n#endif\n#if CC_USE_LIGHT_PROBE\n  #if USE_INSTANCING\n    varying mediump vec4 v_sh_linear_const_r;\n    varying mediump vec4 v_sh_linear_const_g;\n    varying mediump vec4 v_sh_linear_const_b;\n  #endif\n#endif\n#define FSInput_worldPos v_worldPos\n#define FSInput_worldNormal v_normal.xyz\n#define FSInput_faceSideSign v_normal.w\n#define FSInput_texcoord v_uv\n#if CC_SURFACES_USE_VERTEX_COLOR\n  #define FSInput_vertexColor v_color\n#else\n  #define FSInput_vertexColor vec4(1.0)\n#endif\n#if CC_SURFACES_USE_TANGENT_SPACE\n  #define FSInput_worldTangent v_tangent.xyz\n  #define FSInput_mirrorNormal v_tangent.w\n#else\n  #define FSInput_worldTangent vec3(0.0, 0.0, 0.0)\n  #define FSInput_mirrorNormal 1.0\n#endif\n#if CC_SURFACES_USE_SECOND_UV\n  #define FSInput_texcoord1 v_uv1\n#else\n  #define FSInput_texcoord1 vec2(0.0, 0.0)\n#endif\n#if CC_USE_LIGHTMAP && !CC_FORWARD_ADD\n  #define FSInput_lightMapUV v_luv\n#endif\n#if CC_RECEIVE_SHADOW\n  #define FSInput_shadowBias v_shadowBiasAndProbeId.xy\n#endif\n#if CC_USE_REFLECTION_PROBE\n  #define FSInput_reflectionProbeId v_shadowBiasAndProbeId.z\n#endif\n#if CC_USE_FOG != 4 && !CC_USE_ACCURATE_FOG\n  #define FSInput_fogFactor v_fogFactor\n#endif\n#if CC_SURFACES_TRANSFER_LOCAL_POS\n  #define FSInput_localPos v_localPos\n#endif\n#if CC_SURFACES_TRANSFER_CLIP_POS\n  #define FSInput_clipPos v_clipPos\n#endif\nuniform highp vec4 cc_time;\n  uniform mediump vec4 cc_probeInfo;\n  uniform mediump vec4 cc_debug_view_mode;\nuniform highp mat4 cc_matView;\n  uniform highp mat4 cc_matProj;\n  uniform highp mat4 cc_matViewProj;\n  uniform highp vec4 cc_cameraPos;\n  uniform mediump vec4 cc_surfaceTransform;\n  uniform mediump vec4 cc_exposure;\n  uniform mediump vec4 cc_mainLitDir;\n  uniform mediump vec4 cc_mainLitColor;\n  uniform mediump vec4 cc_ambientSky;\n  uniform mediump vec4 cc_ambientGround;\n  uniform mediump vec4 cc_fogColor;\n  uniform mediump vec4 cc_fogBase;\n  uniform mediump vec4 cc_fogAdd;\n  uniform mediump vec4 cc_nearFar;\n#define CC_SURFACES_DEBUG_VIEW_VERTEX_COLOR 1\n#define CC_SURFACES_DEBUG_VIEW_VERTEX_NORMAL CC_SURFACES_DEBUG_VIEW_VERTEX_COLOR + 1\n#define CC_SURFACES_DEBUG_VIEW_VERTEX_TANGENT CC_SURFACES_DEBUG_VIEW_VERTEX_NORMAL + 1\n#define CC_SURFACES_DEBUG_VIEW_WORLD_POS CC_SURFACES_DEBUG_VIEW_VERTEX_TANGENT + 1\n#define CC_SURFACES_DEBUG_VIEW_VERTEX_MIRROR CC_SURFACES_DEBUG_VIEW_WORLD_POS + 1\n#define CC_SURFACES_DEBUG_VIEW_FACE_SIDE CC_SURFACES_DEBUG_VIEW_VERTEX_MIRROR + 1\n#define CC_SURFACES_DEBUG_VIEW_UV0 CC_SURFACES_DEBUG_VIEW_FACE_SIDE + 1\n#define CC_SURFACES_DEBUG_VIEW_UV1 CC_SURFACES_DEBUG_VIEW_UV0 + 1\n#define CC_SURFACES_DEBUG_VIEW_UVLIGHTMAP CC_SURFACES_DEBUG_VIEW_UV1 + 1\n#define CC_SURFACES_DEBUG_VIEW_PROJ_DEPTH CC_SURFACES_DEBUG_VIEW_UVLIGHTMAP + 1\n#define CC_SURFACES_DEBUG_VIEW_LINEAR_DEPTH CC_SURFACES_DEBUG_VIEW_PROJ_DEPTH + 1\n#define CC_SURFACES_DEBUG_VIEW_FRAGMENT_NORMAL CC_SURFACES_DEBUG_VIEW_LINEAR_DEPTH + 1\n#define CC_SURFACES_DEBUG_VIEW_FRAGMENT_TANGENT CC_SURFACES_DEBUG_VIEW_FRAGMENT_NORMAL + 1\n#define CC_SURFACES_DEBUG_VIEW_FRAGMENT_BINORMAL CC_SURFACES_DEBUG_VIEW_FRAGMENT_TANGENT + 1\n#define CC_SURFACES_DEBUG_VIEW_BASE_COLOR CC_SURFACES_DEBUG_VIEW_FRAGMENT_BINORMAL + 1\n#define CC_SURFACES_DEBUG_VIEW_DIFFUSE_COLOR CC_SURFACES_DEBUG_VIEW_BASE_COLOR + 1\n#define CC_SURFACES_DEBUG_VIEW_SPECULAR_COLOR CC_SURFACES_DEBUG_VIEW_DIFFUSE_COLOR + 1\n#define CC_SURFACES_DEBUG_VIEW_TRANSPARENCY CC_SURFACES_DEBUG_VIEW_SPECULAR_COLOR + 1\n#define CC_SURFACES_DEBUG_VIEW_METALLIC CC_SURFACES_DEBUG_VIEW_TRANSPARENCY + 1\n#define CC_SURFACES_DEBUG_VIEW_ROUGHNESS CC_SURFACES_DEBUG_VIEW_METALLIC + 1\n#define CC_SURFACES_DEBUG_VIEW_SPECULAR_INTENSITY CC_SURFACES_DEBUG_VIEW_ROUGHNESS + 1\n#define CC_SURFACES_DEBUG_VIEW_IOR CC_SURFACES_DEBUG_VIEW_SPECULAR_INTENSITY + 1\n#define CC_SURFACES_DEBUG_VIEW_DIRECT_DIFFUSE CC_SURFACES_DEBUG_VIEW_IOR + 1\n#define CC_SURFACES_DEBUG_VIEW_DIRECT_SPECULAR CC_SURFACES_DEBUG_VIEW_DIRECT_DIFFUSE + 1\n#define CC_SURFACES_DEBUG_VIEW_DIRECT_ALL CC_SURFACES_DEBUG_VIEW_DIRECT_SPECULAR + 1\n#define CC_SURFACES_DEBUG_VIEW_ENV_DIFFUSE CC_SURFACES_DEBUG_VIEW_DIRECT_ALL + 1\n#define CC_SURFACES_DEBUG_VIEW_ENV_SPECULAR CC_SURFACES_DEBUG_VIEW_ENV_DIFFUSE + 1\n#define CC_SURFACES_DEBUG_VIEW_ENV_ALL CC_SURFACES_DEBUG_VIEW_ENV_SPECULAR + 1\n#define CC_SURFACES_DEBUG_VIEW_EMISSIVE CC_SURFACES_DEBUG_VIEW_ENV_ALL + 1\n#define CC_SURFACES_DEBUG_VIEW_LIGHT_MAP CC_SURFACES_DEBUG_VIEW_EMISSIVE + 1\n#define CC_SURFACES_DEBUG_VIEW_SHADOW CC_SURFACES_DEBUG_VIEW_LIGHT_MAP + 1\n#define CC_SURFACES_DEBUG_VIEW_AO CC_SURFACES_DEBUG_VIEW_SHADOW + 1\n#define CC_SURFACES_DEBUG_VIEW_FRESNEL CC_SURFACES_DEBUG_VIEW_AO + 1\n#define CC_SURFACES_DEBUG_VIEW_TRANSMIT_DIRECT_DIFFUSE CC_SURFACES_DEBUG_VIEW_FRESNEL + 1\n#define CC_SURFACES_DEBUG_VIEW_TRANSMIT_DIRECT_SPECULAR CC_SURFACES_DEBUG_VIEW_TRANSMIT_DIRECT_DIFFUSE + 1\n#define CC_SURFACES_DEBUG_VIEW_TRANSMIT_ENV_DIFFUSE CC_SURFACES_DEBUG_VIEW_TRANSMIT_DIRECT_SPECULAR + 1\n#define CC_SURFACES_DEBUG_VIEW_TRANSMIT_ENV_SPECULAR CC_SURFACES_DEBUG_VIEW_TRANSMIT_ENV_DIFFUSE + 1\n#define CC_SURFACES_DEBUG_VIEW_TRANSMIT_ALL CC_SURFACES_DEBUG_VIEW_TRANSMIT_ENV_SPECULAR + 1\n#define CC_SURFACES_DEBUG_VIEW_TRT_DIRECT CC_SURFACES_DEBUG_VIEW_TRANSMIT_ALL + 1\n#define CC_SURFACES_DEBUG_VIEW_TRT_ENVIRONMENT CC_SURFACES_DEBUG_VIEW_TRT_DIRECT + 1\n#define CC_SURFACES_DEBUG_VIEW_TRT_ALL CC_SURFACES_DEBUG_VIEW_TRT_ENVIRONMENT + 1\n#define CC_SURFACES_DEBUG_VIEW_FOG CC_SURFACES_DEBUG_VIEW_TRT_ALL + 1\n#define CC_SURFACES_DEBUG_VIEW_SINGLE 1\n#define CC_SURFACES_DEBUG_VIEW_COMPOSITE_AND_MISC 2\n#define IS_DEBUG_VIEW_ENABLE_WITH_CAMERA (cc_surfaceTransform.y != 3.0)\n#define IS_DEBUG_VIEW_LIGHTING_ENABLE_WITH_ALBEDO (UnpackBitFromFloat(cc_debug_view_mode.w, 6) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_MISC_ENABLE_CSM_LAYER_COLORATION (UnpackBitFromFloat(cc_debug_view_mode.w, 7) && IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_DIRECT_DIFFUSE (UnpackBitFromFloat(cc_debug_view_mode.y, 0) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_DIRECT_SPECULAR (UnpackBitFromFloat(cc_debug_view_mode.y, 1) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_ENV_DIFFUSE (UnpackBitFromFloat(cc_debug_view_mode.y, 2) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_ENV_SPECULAR (UnpackBitFromFloat(cc_debug_view_mode.y, 3) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_EMISSIVE (UnpackBitFromFloat(cc_debug_view_mode.y, 4) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_LIGHT_MAP (UnpackBitFromFloat(cc_debug_view_mode.y, 5) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_SHADOW (UnpackBitFromFloat(cc_debug_view_mode.y, 6) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_AO (UnpackBitFromFloat(cc_debug_view_mode.y, 7) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_NORMAL_MAP (UnpackBitFromFloat(cc_debug_view_mode.z, 0) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_FOG (UnpackBitFromFloat(cc_debug_view_mode.z, 1) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_TONE_MAPPING (UnpackBitFromFloat(cc_debug_view_mode.z, 2) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_GAMMA_CORRECTION (UnpackBitFromFloat(cc_debug_view_mode.z, 3) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_FRESNEL (UnpackBitFromFloat(cc_debug_view_mode.z, 4) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_TRANSMIT_DIFFUSE (UnpackBitFromFloat(cc_debug_view_mode.z, 5) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_TRANSMIT_SPECULAR (UnpackBitFromFloat(cc_debug_view_mode.z, 6) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_TRT (UnpackBitFromFloat(cc_debug_view_mode.z, 7) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_TT (UnpackBitFromFloat(cc_debug_view_mode.w, 0) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#if (CC_PIPELINE_TYPE == 0 || CC_FORCE_FORWARD_SHADING)\n  #if CC_FORWARD_ADD\n    #if CC_PIPELINE_TYPE == 0\n      #define LIGHTS_PER_PASS 1\n    #else\n      #define LIGHTS_PER_PASS 10\n    #endif\n    #if CC_ENABLE_CLUSTERED_LIGHT_CULLING == 0\n    uniform highp vec4 cc_lightPos[LIGHTS_PER_PASS];\n  uniform vec4 cc_lightColor[LIGHTS_PER_PASS];\n  uniform vec4 cc_lightSizeRangeAngle[LIGHTS_PER_PASS];\n  uniform vec4 cc_lightDir[LIGHTS_PER_PASS];\n    #endif\n  #endif\n#endif\n#if CC_USE_LIGHT_PROBE\n  #if !USE_INSTANCING\n    uniform vec4 cc_sh_linear_const_r;\n  uniform vec4 cc_sh_linear_const_g;\n  uniform vec4 cc_sh_linear_const_b;\n  uniform vec4 cc_sh_quadratic_r;\n  uniform vec4 cc_sh_quadratic_g;\n  uniform vec4 cc_sh_quadratic_b;\n  uniform vec4 cc_sh_quadratic_a;\n  #endif\n#endif\nuniform highp mat4 cc_matLightView;\n  uniform highp mat4 cc_matLightViewProj;\n  uniform highp vec4 cc_shadowInvProjDepthInfo;\n  uniform highp vec4 cc_shadowProjDepthInfo;\n  uniform highp vec4 cc_shadowProjInfo;\n  uniform mediump vec4 cc_shadowNFLSInfo;\n  uniform mediump vec4 cc_shadowWHPBInfo;\n#if CC_SUPPORT_CASCADED_SHADOW_MAP\n  uniform highp vec4 cc_csmViewDir0[4];\n  uniform highp vec4 cc_csmViewDir1[4];\n  uniform highp vec4 cc_csmViewDir2[4];\n  uniform highp vec4 cc_csmAtlas[4];\n  uniform highp mat4 cc_matCSMViewProj[4];\n  uniform highp vec4 cc_csmProjDepthInfo[4];\n  uniform highp vec4 cc_csmProjInfo[4];\n  uniform highp vec4 cc_csmSplitsInfo;\n#endif\nuniform samplerCube cc_environment;\n#if CC_USE_IBL\n  #if CC_USE_DIFFUSEMAP\n    uniform samplerCube cc_diffuseMap;\n  #endif\n#endif\n#if CC_USE_REFLECTION_PROBE\n  uniform samplerCube cc_reflectionProbeCubemap;\n  uniform sampler2D cc_reflectionProbePlanarMap;\n  uniform sampler2D cc_reflectionProbeDataMap;\n#endif\n#define QUATER_PI         0.78539816340\n#define HALF_PI           1.57079632679\n#define PI                3.14159265359\n#define PI2               6.28318530718\n#define PI4               12.5663706144\n#define INV_QUATER_PI     1.27323954474\n#define INV_HALF_PI       0.63661977237\n#define INV_PI            0.31830988618\n#define INV_PI2           0.15915494309\n#define INV_PI4           0.07957747155\n#define EPSILON           1e-6\n#define EPSILON_LOWP      1e-4\n#define LOG2              1.442695\n#define EXP_VALUE         2.71828183f\n#define FP_MAX            65504.0\n#define FP_SCALE          0.0009765625\n#define FP_SCALE_INV      1024.0\n#define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\n#define LIGHT_MAP_TYPE_DISABLED 0\n#define LIGHT_MAP_TYPE_ALL_IN_ONE 1\n#define LIGHT_MAP_TYPE_INDIRECT_OCCLUSION 2\n#define REFLECTION_PROBE_TYPE_NONE 0\n#define REFLECTION_PROBE_TYPE_CUBE 1\n#define REFLECTION_PROBE_TYPE_PLANAR 2\n#define LIGHT_TYPE_DIRECTIONAL 0.0\n#define LIGHT_TYPE_POINT 1.0\n#define LIGHT_TYPE_SPOT 2.0\n#define LIGHT_TYPE_SPHERE 3.0\n#define LIGHT_TYPE_RANGED_DIRECTIONAL 4.0\n#define IS_DIRECTIONAL_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_DIRECTIONAL)) < EPSILON_LOWP)\n#define IS_SPHERE_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_SPHERE)) < EPSILON_LOWP)\n#define IS_SPOT_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_SPOT)) < EPSILON_LOWP)\n#define IS_POINT_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_POINT)) < EPSILON_LOWP)\n#define IS_RANGED_DIRECTIONAL_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_RANGED_DIRECTIONAL)) < EPSILON_LOWP)\nvec4 fragTextureLod (sampler2D tex, vec2 coord, float lod) {\n    #ifdef GL_EXT_shader_texture_lod\n      return texture2DLodEXT(tex, coord, lod);\n    #else\n      return texture2D(tex, coord, lod);\n    #endif\n}\nvec4 fragTextureLod (samplerCube tex, vec3 coord, float lod) {\n    #ifdef GL_EXT_shader_texture_lod\n      return textureCubeLodEXT(tex, coord, lod);\n    #else\n      return textureCube(tex, coord, lod);\n    #endif\n}\n#define UnpackBitFromFloat(value, bit) (mod(floor(value / pow(10.0, float(bit))), 10.0) > 0.0)\nhighp float unpackHighpData (float mainPart, float modPart) {\n  highp float data = mainPart;\n  return data + modPart;\n}\nvoid packHighpData (out float mainPart, out float modPart, highp float data) {\n  mainPart = fract(data);\n  modPart = data - mainPart;\n}\nhighp float unpackHighpData (float mainPart, float modPart, const float modValue) {\n  highp float data = mainPart * modValue;\n  return data + modPart * modValue;\n}\nvoid packHighpData (out float mainPart, out float modPart, highp float data, const float modValue) {\n  highp float divide = data / modValue;\n  mainPart = floor(divide);\n  modPart = (data - mainPart * modValue) / modValue;\n}\nhighp vec2 unpackHighpData (vec2 mainPart, vec2 modPart) {\n  highp vec2 data = mainPart;\n  return data + modPart;\n}\nvoid packHighpData (out vec2 mainPart, out vec2 modPart, highp vec2 data) {\n  mainPart = fract(data);\n  modPart = data - mainPart;\n}\nhighp vec2 unpackHighpData (vec2 mainPart, vec2 modPart, const float modValue) {\n  highp vec2 data = mainPart * modValue;\n  return data + modPart * modValue;\n}\nvoid packHighpData (out vec2 mainPart, out vec2 modPart, highp vec2 data, const float modValue) {\n  highp vec2 divide = data / modValue;\n  mainPart = floor(divide);\n  modPart = (data - mainPart * modValue) / modValue;\n}\nhighp vec3 unpackHighpData (vec3 mainPart, vec3 modPart) {\n  highp vec3 data = mainPart;\n  return data + modPart;\n}\nvoid packHighpData (out vec3 mainPart, out vec3 modPart, highp vec3 data) {\n  mainPart = fract(data);\n  modPart = data - mainPart;\n}\nhighp vec3 unpackHighpData (vec3 mainPart, vec3 modPart, const float modValue) {\n  highp vec3 data = mainPart * modValue;\n  return data + modPart * modValue;\n}\nvoid packHighpData (out vec3 mainPart, out vec3 modPart, highp vec3 data, const float modValue) {\n  highp vec3 divide = data / modValue;\n  mainPart = floor(divide);\n  modPart = (data - mainPart * modValue) / modValue;\n}\nhighp vec4 unpackHighpData (vec4 mainPart, vec4 modPart) {\n  highp vec4 data = mainPart;\n  return data + modPart;\n}\nvoid packHighpData (out vec4 mainPart, out vec4 modPart, highp vec4 data) {\n  mainPart = fract(data);\n  modPart = data - mainPart;\n}\nhighp vec4 unpackHighpData (vec4 mainPart, vec4 modPart, const float modValue) {\n  highp vec4 data = mainPart * modValue;\n  return data + modPart * modValue;\n}\nvoid packHighpData (out vec4 mainPart, out vec4 modPart, highp vec4 data, const float modValue) {\n  highp vec4 divide = data / modValue;\n  mainPart = floor(divide);\n  modPart = (data - mainPart * modValue) / modValue;\n}\nhighp float decode32 (highp vec4 rgba) {\n  rgba = rgba * 255.0;\n  highp float Sign = 1.0 - (step(128.0, (rgba[3]) + 0.5)) * 2.0;\n  highp float Exponent = 2.0 * (mod(float(int((rgba[3]) + 0.5)), 128.0)) + (step(128.0, (rgba[2]) + 0.5)) - 127.0;\n  highp float Mantissa = (mod(float(int((rgba[2]) + 0.5)), 128.0)) * 65536.0 + rgba[1] * 256.0 + rgba[0] + 8388608.0;\n  return Sign * exp2(Exponent - 23.0) * Mantissa;\n}\nvec4 packRGBE (vec3 rgb) {\n  highp float maxComp = max(max(rgb.r, rgb.g), rgb.b);\n  highp float e = 128.0;\n  if (maxComp > 0.0001) {\n    e = log(maxComp) / log(1.1);\n    e = ceil(e);\n    e = clamp(e + 128.0, 0.0, 255.0);\n  }\n  highp float sc = 1.0 / pow(1.1, e - 128.0);\n  vec3 encode = clamp(rgb * sc, vec3(0.0), vec3(1.0)) * 255.0;\n  vec3 encode_rounded = floor(encode) + step(encode - floor(encode), vec3(0.5));\n  return vec4(encode_rounded, e) / 255.0;\n}\nvec3 unpackRGBE (vec4 rgbe) {\n  return rgbe.rgb * pow(1.1, rgbe.a * 255.0 - 128.0);\n}\nvec3 ACESToneMap (vec3 color) {\n  color = min(color, vec3(8.0));\n  const float A = 2.51;\n  const float B = 0.03;\n  const float C = 2.43;\n  const float D = 0.59;\n  const float E = 0.14;\n  return (color * (A * color + B)) / (color * (C * color + D) + E);\n}\nvec3 SRGBToLinear (vec3 gamma) {\n#ifdef CC_USE_SURFACE_SHADER\n  #if CC_USE_DEBUG_VIEW == CC_SURFACES_DEBUG_VIEW_COMPOSITE_AND_MISC\n    if (!IS_DEBUG_VIEW_COMPOSITE_ENABLE_GAMMA_CORRECTION) {\n      return gamma;\n    }\n  #endif\n#endif\n  return gamma * gamma;\n}\nvec3 LinearToSRGB(vec3 linear) {\n#ifdef CC_USE_SURFACE_SHADER\n  #if CC_USE_DEBUG_VIEW == CC_SURFACES_DEBUG_VIEW_COMPOSITE_AND_MISC\n    if (!IS_DEBUG_VIEW_COMPOSITE_ENABLE_GAMMA_CORRECTION) {\n      return linear;\n    }\n  #endif\n#endif\n  return sqrt(linear);\n}\nbool isnan(float val) {\n  return (val < 0.0 || 0.0 < val || val == 0.0) ? false : true;\n}\nbool isinf(float x) {\n  return x == x * 2.0 && x != 0.0;\n}\nbool isnans(vec2 val) {\n    return isnan(val.x) || isnan(val.y);\n}\nbool isnans(vec3 val) {\n    return isnan(val.x) || isnan(val.y) || isnan(val.z);\n}\nbool isnans(vec4 val) {\n    return isnan(val.x) || isnan(val.y) || isnan(val.z) || isnan(val.w);\n}\nbool isinfs(vec2 val) {\n    return isinf(val.x) || isinf(val.y);\n}\nbool isinfs(vec3 val) {\n    return isinf(val.x) || isinf(val.y) || isinf(val.z);\n}\nbool isinfs(vec4 val) {\n    return isinf(val.x) || isinf(val.y) || isinf(val.z) || isinf(val.w);\n}\nfloat saturate(float value) {\n    return min(max(value, 0.0), 1.0);\n}\nvec2 saturate(vec2 value) { return vec2(saturate(value.x), saturate(value.y)); }\nvec3 saturate(vec3 value) { return vec3(saturate(value.x), saturate(value.y), saturate(value.z)); }\nvec4 saturate(vec4 value) { return vec4(saturate(value.x), saturate(value.y), saturate(value.z), saturate(value.w)); }\nvec2 GetPlanarReflectScreenUV(vec3 worldPos, mat4 matVirtualCameraViewProj, float flipNDCSign, vec3 viewDir, vec3 reflectDir)\n{\n  vec4 clipPos = matVirtualCameraViewProj * vec4(worldPos, 1.0);\n  vec2 screenUV = clipPos.xy / clipPos.w * 0.5 + 0.5;\n  screenUV = vec2(1.0 - screenUV.x, screenUV.y);\n  screenUV = flipNDCSign == 1.0 ? vec2(screenUV.x, 1.0 - screenUV.y) : screenUV;\n  return screenUV;\n}\nfloat GetLinearDepthFromViewSpace(vec3 viewPos, float near, float far) {\n  float dist = length(viewPos);\n  return (dist - near) / (far - near);\n}\nvec3 CalculateBinormal(vec3 normal, vec3 tangent, float mirrorNormal)\n{\n    return cross(normal.xyz, tangent) * mirrorNormal;\n}\nvec3 CalculateNormalFromTangentSpace(vec3 normalFromTangentSpace, float normalStrength, vec3 normal, vec3 tangent, float mirrorNormal)\n{\n    vec3 binormal = CalculateBinormal(normal, tangent, mirrorNormal);\n    return (normalFromTangentSpace.x * normalStrength) * normalize(tangent) +\n           (normalFromTangentSpace.y * normalStrength) * normalize(binormal) +\n            normalFromTangentSpace.z * normalize(normal);\n}\nvec3 RotationVecFromAxisY(vec3 v, float cosTheta, float sinTheta)\n{\n    vec3 result;\n    result.x = dot(v, vec3(cosTheta, 0.0, -sinTheta));\n    result.y = v.y;\n    result.z = dot(v, vec3(sinTheta, 0.0,  cosTheta));\n    return result;\n}\nvoid RotateTangentAndBinormal(inout vec3 tangent, inout vec3 binormal, vec3 normal, float rotationAngle)\n{\n    float cosTheta = cos(rotationAngle), sinTheta = sin(rotationAngle);\n    vec3 B = RotationVecFromAxisY(vec3(1.0, 0.0, 0.0), cosTheta, sinTheta);\n    vec3 T = RotationVecFromAxisY(vec3(0.0, 0.0, 1.0), cosTheta, sinTheta);\n    vec3 tangentNew, binormalNew;\n    binormalNew = B.x * binormal + B.y * normal + B.z * tangent;\n    binormal = normalize(binormalNew);\n    tangentNew = T.x * binormal + T.y * normal + T.z * tangent;\n    tangent = normalize(tangentNew);\n}\nvec2 signNotZero(vec2 v) {\n  return vec2((v.x >= 0.0) ? +1.0 : -1.0, (v.y >= 0.0) ? +1.0 : -1.0);\n}\nvec2 float32x3_to_oct(in vec3 v) {\n  vec2 p = v.xy * (1.0 / (abs(v.x) + abs(v.y) + abs(v.z)));\n  return (v.z <= 0.0) ? ((1.0 - abs(p.yx)) * signNotZero(p)) : p;\n}\nbool GetMetallicAlbedoFromDiffuseSpecularWithoutColor(out float metallic, out vec3 albedo, vec3 diffuse, vec3 specular, float f0 )\n{\n\tfloat d = max(max(diffuse.x, diffuse.y), diffuse.z);\n\tvec3 normalizedColor = diffuse / (d + (d < EPSILON_LOWP ? EPSILON_LOWP : 0.0));\n\tnormalizedColor = d < EPSILON_LOWP ? specular : normalizedColor;\n\tfloat s = max(max(specular.x, specular.y), specular.z);\n\tfloat delta = (d + s) * (d + s)  - 4.0 * f0 * d;\n\tfloat deltaSqrt = sqrt(max(0.0, delta));\n\tfloat solverMetallic = (-d - s + 2.0 * f0 + deltaSqrt) / (2.0 * f0);\n\tvec3 solverAlbedo = (d + s) * normalizedColor - vec3(f0 * (1.0 - solverMetallic));\n\tbool isValidSolver = delta >= 0.0;\n\tmetallic = isValidSolver ? clamp(solverMetallic, 0.0, 1.0) : 0.0;\n\talbedo = isValidSolver ? vec3(max(0.0, solverAlbedo.x), max(0.0, solverAlbedo.y), max(0.0, solverAlbedo.z)) : diffuse;\n\treturn isValidSolver;\n}\n  vec3 EnvReflectionWithMipFiltering(vec3 R, float roughness, float mipCount, float denoiseIntensity) {\n    #if CC_USE_IBL\n      #if !CC_SURFACES_USE_LEGACY_COMPATIBLE_LIGHTING && !CC_IBL_CONVOLUTED\n        roughness = pow(roughness, 0.5);\n      #endif\n    \tfloat mip = roughness * (mipCount - 1.0);\n    \tfloat delta = (dot(dFdx(R), dFdy(R))) * 1000.0;\n    \tfloat mipBias = mix(0.0, 5.0, clamp(delta, 0.0, 1.0));\n      vec3 rotationDir = RotationVecFromAxisY(R.xyz, cc_surfaceTransform.z, cc_surfaceTransform.w);\n    \tvec4 biased = fragTextureLod(cc_environment, rotationDir, mip + mipBias);\n     \tvec4 filtered = textureCube(cc_environment, rotationDir);\n      #if CC_USE_IBL == 2\n      \tbiased.rgb = unpackRGBE(biased);\n      \tfiltered.rgb = unpackRGBE(filtered);\n      #else\n      \tbiased.rgb = SRGBToLinear(biased.rgb);\n      \tfiltered.rgb = SRGBToLinear(filtered.rgb);\n      #endif\n      return mix(biased.rgb, filtered.rgb, denoiseIntensity);\n    #else\n      return vec3(0.0, 0.0, 0.0);\n    #endif\n  }\n  vec3 EnvReflection(samplerCube tex, vec3 R, float roughness, float mipCount) {\n    #if !CC_SURFACES_USE_LEGACY_COMPATIBLE_LIGHTING && !CC_IBL_CONVOLUTED\n      roughness = pow(roughness, 0.5);\n    #endif\n    vec3 rotationDir = RotationVecFromAxisY(R.xyz, cc_surfaceTransform.z, cc_surfaceTransform.w);\n    vec4 envmap = fragTextureLod(tex, rotationDir, roughness * (mipCount - 1.0));\n    #if CC_USE_IBL == 2 || CC_USE_REFLECTION_PROBE != REFLECTION_PROBE_TYPE_NONE\n      return unpackRGBE(envmap);\n    #else\n      return SRGBToLinear(envmap.rgb);\n    #endif\n  }\n#if CC_SUPPORT_CASCADED_SHADOW_MAP\n#endif\nfloat CCGetLinearDepth(vec3 worldPos, float viewSpaceBias) {\n\tvec4 viewPos = cc_matLightView * vec4(worldPos.xyz, 1.0);\n  viewPos.z += viewSpaceBias;\n\treturn GetLinearDepthFromViewSpace(viewPos.xyz, cc_shadowNFLSInfo.x, cc_shadowNFLSInfo.y);\n}\nfloat CCGetLinearDepth(vec3 worldPos) {\n\treturn CCGetLinearDepth(worldPos, 0.0);\n}\n#if CC_RECEIVE_SHADOW\n  uniform highp sampler2D cc_shadowMap;\n  uniform highp sampler2D cc_spotShadowMap;\n  float SampleShadowMap (vec3 shadowNDCPos, highp sampler2D shadowMap)\n  {\n    #if CC_SHADOWMAP_FORMAT == 1\n      return dot(texture2D(shadowMap, shadowNDCPos.xy), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0));\n    #else\n      return texture2D(shadowMap, shadowNDCPos.xy).x;\n    #endif\n  }\n  float NativePCFShadowFactorHard (vec3 shadowNDCPos, highp sampler2D shadowMap, vec2 shadowMapResolution)\n  {\n    #if CC_SHADOWMAP_FORMAT == 1\n      return step(shadowNDCPos.z, dot(texture2D(shadowMap, shadowNDCPos.xy), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n    #else\n      return step(shadowNDCPos.z, texture2D(shadowMap, shadowNDCPos.xy).x);\n    #endif\n  }\n  float NativePCFShadowFactorSoft (vec3 shadowNDCPos, highp sampler2D shadowMap, vec2 shadowMapResolution)\n  {\n    vec2 oneTap = 1.0 / shadowMapResolution;\n    vec2 shadowNDCPos_offset = shadowNDCPos.xy + oneTap;\n    float block0, block1, block2, block3;\n    #if CC_SHADOWMAP_FORMAT == 1\n      block0 = step(shadowNDCPos.z, dot(texture2D(shadowMap, vec2(shadowNDCPos.x, shadowNDCPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block1 = step(shadowNDCPos.z, dot(texture2D(shadowMap, vec2(shadowNDCPos_offset.x, shadowNDCPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block2 = step(shadowNDCPos.z, dot(texture2D(shadowMap, vec2(shadowNDCPos.x, shadowNDCPos_offset.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block3 = step(shadowNDCPos.z, dot(texture2D(shadowMap, vec2(shadowNDCPos_offset.x, shadowNDCPos_offset.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n    #else\n      block0 = step(shadowNDCPos.z, texture2D(shadowMap, vec2(shadowNDCPos.x, shadowNDCPos.y)).x);\n      block1 = step(shadowNDCPos.z, texture2D(shadowMap, vec2(shadowNDCPos_offset.x, shadowNDCPos.y)).x);\n      block2 = step(shadowNDCPos.z, texture2D(shadowMap, vec2(shadowNDCPos.x, shadowNDCPos_offset.y)).x);\n      block3 = step(shadowNDCPos.z, texture2D(shadowMap, vec2(shadowNDCPos_offset.x, shadowNDCPos_offset.y)).x);\n    #endif\n    float coefX   = mod(shadowNDCPos.x, oneTap.x) * shadowMapResolution.x;\n    float resultX = mix(block0, block1, coefX);\n    float resultY = mix(block2, block3, coefX);\n    float coefY   = mod(shadowNDCPos.y, oneTap.y) * shadowMapResolution.y;\n    return mix(resultX, resultY, coefY);\n  }\n  float NativePCFShadowFactorSoft3X (vec3 shadowNDCPos, highp sampler2D shadowMap, vec2 shadowMapResolution)\n  {\n    vec2 oneTap = 1.0 / shadowMapResolution;\n    float shadowNDCPos_offset_L = shadowNDCPos.x - oneTap.x;\n    float shadowNDCPos_offset_R = shadowNDCPos.x + oneTap.x;\n    float shadowNDCPos_offset_U = shadowNDCPos.y - oneTap.y;\n    float shadowNDCPos_offset_D = shadowNDCPos.y + oneTap.y;\n    float block0, block1, block2, block3, block4, block5, block6, block7, block8;\n    #if CC_SHADOWMAP_FORMAT == 1\n      block0 = step(shadowNDCPos.z, dot(texture2D(shadowMap, vec2(shadowNDCPos_offset_L, shadowNDCPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block1 = step(shadowNDCPos.z, dot(texture2D(shadowMap, vec2(shadowNDCPos.x, shadowNDCPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block2 = step(shadowNDCPos.z, dot(texture2D(shadowMap, vec2(shadowNDCPos_offset_R, shadowNDCPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block3 = step(shadowNDCPos.z, dot(texture2D(shadowMap, vec2(shadowNDCPos_offset_L, shadowNDCPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block4 = step(shadowNDCPos.z, dot(texture2D(shadowMap, vec2(shadowNDCPos.x, shadowNDCPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block5 = step(shadowNDCPos.z, dot(texture2D(shadowMap, vec2(shadowNDCPos_offset_R, shadowNDCPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block6 = step(shadowNDCPos.z, dot(texture2D(shadowMap, vec2(shadowNDCPos_offset_L, shadowNDCPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block7 = step(shadowNDCPos.z, dot(texture2D(shadowMap, vec2(shadowNDCPos.x, shadowNDCPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block8 = step(shadowNDCPos.z, dot(texture2D(shadowMap, vec2(shadowNDCPos_offset_R, shadowNDCPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n    #else\n      block0 = step(shadowNDCPos.z, texture2D(shadowMap, vec2(shadowNDCPos_offset_L, shadowNDCPos_offset_U)).x);\n      block1 = step(shadowNDCPos.z, texture2D(shadowMap, vec2(shadowNDCPos.x, shadowNDCPos_offset_U)).x);\n      block2 = step(shadowNDCPos.z, texture2D(shadowMap, vec2(shadowNDCPos_offset_R, shadowNDCPos_offset_U)).x);\n      block3 = step(shadowNDCPos.z, texture2D(shadowMap, vec2(shadowNDCPos_offset_L, shadowNDCPos.y)).x);\n      block4 = step(shadowNDCPos.z, texture2D(shadowMap, vec2(shadowNDCPos.x, shadowNDCPos.y)).x);\n      block5 = step(shadowNDCPos.z, texture2D(shadowMap, vec2(shadowNDCPos_offset_R, shadowNDCPos.y)).x);\n      block6 = step(shadowNDCPos.z, texture2D(shadowMap, vec2(shadowNDCPos_offset_L, shadowNDCPos_offset_D)).x);\n      block7 = step(shadowNDCPos.z, texture2D(shadowMap, vec2(shadowNDCPos.x, shadowNDCPos_offset_D)).x);\n      block8 = step(shadowNDCPos.z, texture2D(shadowMap, vec2(shadowNDCPos_offset_R, shadowNDCPos_offset_D)).x);\n    #endif\n    float coefX = mod(shadowNDCPos.x, oneTap.x) * shadowMapResolution.x;\n    float coefY = mod(shadowNDCPos.y, oneTap.y) * shadowMapResolution.y;\n    float shadow = 0.0;\n    float resultX = mix(block0, block1, coefX);\n    float resultY = mix(block3, block4, coefX);\n    shadow += mix(resultX , resultY, coefY);\n    resultX = mix(block1, block2, coefX);\n    resultY = mix(block4, block5, coefX);\n    shadow += mix(resultX , resultY, coefY);\n    resultX = mix(block3, block4, coefX);\n    resultY = mix(block6, block7, coefX);\n    shadow += mix(resultX, resultY, coefY);\n    resultX = mix(block4, block5, coefX);\n    resultY = mix(block7, block8, coefX);\n    shadow += mix(resultX, resultY, coefY);\n    return shadow * 0.25;\n  }\n  float NativePCFShadowFactorSoft5X (vec3 shadowNDCPos, highp sampler2D shadowMap, vec2 shadowMapResolution)\n  {\n    vec2 oneTap = 1.0 / shadowMapResolution;\n    vec2 twoTap = oneTap * 2.0;\n    vec2 offset1 = shadowNDCPos.xy + vec2(-twoTap.x, -twoTap.y);\n    vec2 offset2 = shadowNDCPos.xy + vec2(-oneTap.x, -twoTap.y);\n    vec2 offset3 = shadowNDCPos.xy + vec2(0.0, -twoTap.y);\n    vec2 offset4 = shadowNDCPos.xy + vec2(oneTap.x, -twoTap.y);\n    vec2 offset5 = shadowNDCPos.xy + vec2(twoTap.x, -twoTap.y);\n    vec2 offset6 = shadowNDCPos.xy + vec2(-twoTap.x, -oneTap.y);\n    vec2 offset7 = shadowNDCPos.xy + vec2(-oneTap.x, -oneTap.y);\n    vec2 offset8 = shadowNDCPos.xy + vec2(0.0, -oneTap.y);\n    vec2 offset9 = shadowNDCPos.xy + vec2(oneTap.x, -oneTap.y);\n    vec2 offset10 = shadowNDCPos.xy + vec2(twoTap.x, -oneTap.y);\n    vec2 offset11 = shadowNDCPos.xy + vec2(-twoTap.x, 0.0);\n    vec2 offset12 = shadowNDCPos.xy + vec2(-oneTap.x, 0.0);\n    vec2 offset13 = shadowNDCPos.xy + vec2(0.0, 0.0);\n    vec2 offset14 = shadowNDCPos.xy + vec2(oneTap.x, 0.0);\n    vec2 offset15 = shadowNDCPos.xy + vec2(twoTap.x, 0.0);\n    vec2 offset16 = shadowNDCPos.xy + vec2(-twoTap.x, oneTap.y);\n    vec2 offset17 = shadowNDCPos.xy + vec2(-oneTap.x, oneTap.y);\n    vec2 offset18 = shadowNDCPos.xy + vec2(0.0, oneTap.y);\n    vec2 offset19 = shadowNDCPos.xy + vec2(oneTap.x, oneTap.y);\n    vec2 offset20 = shadowNDCPos.xy + vec2(twoTap.x, oneTap.y);\n    vec2 offset21 = shadowNDCPos.xy + vec2(-twoTap.x, twoTap.y);\n    vec2 offset22 = shadowNDCPos.xy + vec2(-oneTap.x, twoTap.y);\n    vec2 offset23 = shadowNDCPos.xy + vec2(0.0, twoTap.y);\n    vec2 offset24 = shadowNDCPos.xy + vec2(oneTap.x, twoTap.y);\n    vec2 offset25 = shadowNDCPos.xy + vec2(twoTap.x, twoTap.y);\n    float block1, block2, block3, block4, block5, block6, block7, block8, block9, block10, block11, block12, block13, block14, block15, block16, block17, block18, block19, block20, block21, block22, block23, block24, block25;\n    #if CC_SHADOWMAP_FORMAT == 1\n      block1 = step(shadowNDCPos.z, dot(texture2D(shadowMap, offset1), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block2 = step(shadowNDCPos.z, dot(texture2D(shadowMap, offset2), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block3 = step(shadowNDCPos.z, dot(texture2D(shadowMap, offset3), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block4 = step(shadowNDCPos.z, dot(texture2D(shadowMap, offset4), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block5 = step(shadowNDCPos.z, dot(texture2D(shadowMap, offset5), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block6 = step(shadowNDCPos.z, dot(texture2D(shadowMap, offset6), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block7 = step(shadowNDCPos.z, dot(texture2D(shadowMap, offset7), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block8 = step(shadowNDCPos.z, dot(texture2D(shadowMap, offset8), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block9 = step(shadowNDCPos.z, dot(texture2D(shadowMap, offset9), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block10 = step(shadowNDCPos.z, dot(texture2D(shadowMap, offset10), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block11 = step(shadowNDCPos.z, dot(texture2D(shadowMap, offset11), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block12 = step(shadowNDCPos.z, dot(texture2D(shadowMap, offset12), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block13 = step(shadowNDCPos.z, dot(texture2D(shadowMap, offset13), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block14 = step(shadowNDCPos.z, dot(texture2D(shadowMap, offset14), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block15 = step(shadowNDCPos.z, dot(texture2D(shadowMap, offset15), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block16 = step(shadowNDCPos.z, dot(texture2D(shadowMap, offset16), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block17 = step(shadowNDCPos.z, dot(texture2D(shadowMap, offset17), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block18 = step(shadowNDCPos.z, dot(texture2D(shadowMap, offset18), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block19 = step(shadowNDCPos.z, dot(texture2D(shadowMap, offset19), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block20 = step(shadowNDCPos.z, dot(texture2D(shadowMap, offset20), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block21 = step(shadowNDCPos.z, dot(texture2D(shadowMap, offset21), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block22 = step(shadowNDCPos.z, dot(texture2D(shadowMap, offset22), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block23 = step(shadowNDCPos.z, dot(texture2D(shadowMap, offset23), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block24 = step(shadowNDCPos.z, dot(texture2D(shadowMap, offset24), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block25 = step(shadowNDCPos.z, dot(texture2D(shadowMap, offset25), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n    #else\n      block1 = step(shadowNDCPos.z, texture2D(shadowMap, offset1).x);\n      block2 = step(shadowNDCPos.z, texture2D(shadowMap, offset2).x);\n      block3 = step(shadowNDCPos.z, texture2D(shadowMap, offset3).x);\n      block4 = step(shadowNDCPos.z, texture2D(shadowMap, offset4).x);\n      block5 = step(shadowNDCPos.z, texture2D(shadowMap, offset5).x);\n      block6 = step(shadowNDCPos.z, texture2D(shadowMap, offset6).x);\n      block7 = step(shadowNDCPos.z, texture2D(shadowMap, offset7).x);\n      block8 = step(shadowNDCPos.z, texture2D(shadowMap, offset8).x);\n      block9 = step(shadowNDCPos.z, texture2D(shadowMap, offset9).x);\n      block10 = step(shadowNDCPos.z, texture2D(shadowMap, offset10).x);\n      block11 = step(shadowNDCPos.z, texture2D(shadowMap, offset11).x);\n      block12 = step(shadowNDCPos.z, texture2D(shadowMap, offset12).x);\n      block13 = step(shadowNDCPos.z, texture2D(shadowMap, offset13).x);\n      block14 = step(shadowNDCPos.z, texture2D(shadowMap, offset14).x);\n      block15 = step(shadowNDCPos.z, texture2D(shadowMap, offset15).x);\n      block16 = step(shadowNDCPos.z, texture2D(shadowMap, offset16).x);\n      block17 = step(shadowNDCPos.z, texture2D(shadowMap, offset17).x);\n      block18 = step(shadowNDCPos.z, texture2D(shadowMap, offset18).x);\n      block19 = step(shadowNDCPos.z, texture2D(shadowMap, offset19).x);\n      block20 = step(shadowNDCPos.z, texture2D(shadowMap, offset20).x);\n      block21 = step(shadowNDCPos.z, texture2D(shadowMap, offset21).x);\n      block22 = step(shadowNDCPos.z, texture2D(shadowMap, offset22).x);\n      block23 = step(shadowNDCPos.z, texture2D(shadowMap, offset23).x);\n      block24 = step(shadowNDCPos.z, texture2D(shadowMap, offset24).x);\n      block25 = step(shadowNDCPos.z, texture2D(shadowMap, offset25).x);\n    #endif\n    vec2 coef = fract(shadowNDCPos.xy * shadowMapResolution);\n    vec2 v1X1 = mix(vec2(block1, block6), vec2(block2, block7), coef.xx);\n    vec2 v1X2 = mix(vec2(block2, block7), vec2(block3, block8), coef.xx);\n    vec2 v1X3 = mix(vec2(block3, block8), vec2(block4, block9), coef.xx);\n    vec2 v1X4 = mix(vec2(block4, block9), vec2(block5, block10), coef.xx);\n    float v1 = mix(v1X1.x, v1X1.y, coef.y) + mix(v1X2.x, v1X2.y, coef.y) + mix(v1X3.x, v1X3.y, coef.y) + mix(v1X4.x, v1X4.y, coef.y);\n    vec2 v2X1 = mix(vec2(block6, block11), vec2(block7, block12), coef.xx);\n    vec2 v2X2 = mix(vec2(block7, block12), vec2(block8, block13), coef.xx);\n    vec2 v2X3 = mix(vec2(block8, block13), vec2(block9, block14), coef.xx);\n    vec2 v2X4 = mix(vec2(block9, block14), vec2(block10, block15), coef.xx);\n    float v2 = mix(v2X1.x, v2X1.y, coef.y) + mix(v2X2.x, v2X2.y, coef.y) + mix(v2X3.x, v2X3.y, coef.y) + mix(v2X4.x, v2X4.y, coef.y);\n    vec2 v3X1 = mix(vec2(block11, block16), vec2(block12, block17), coef.xx);\n    vec2 v3X2 = mix(vec2(block12, block17), vec2(block13, block18), coef.xx);\n    vec2 v3X3 = mix(vec2(block13, block18), vec2(block14, block19), coef.xx);\n    vec2 v3X4 = mix(vec2(block14, block19), vec2(block15, block20), coef.xx);\n    float v3 = mix(v3X1.x, v3X1.y, coef.y) + mix(v3X2.x, v3X2.y, coef.y) + mix(v3X3.x, v3X3.y, coef.y) + mix(v3X4.x, v3X4.y, coef.y);\n    vec2 v4X1 = mix(vec2(block16, block21), vec2(block17, block22), coef.xx);\n    vec2 v4X2 = mix(vec2(block17, block22), vec2(block18, block23), coef.xx);\n    vec2 v4X3 = mix(vec2(block18, block23), vec2(block19, block24), coef.xx);\n    vec2 v4X4 = mix(vec2(block19, block24), vec2(block20, block25), coef.xx);\n    float v4 = mix(v4X1.x, v4X1.y, coef.y) + mix(v4X2.x, v4X2.y, coef.y) + mix(v4X3.x, v4X3.y, coef.y) + mix(v4X4.x, v4X4.y, coef.y);\n    float fAvg = (v1 + v2 + v3 + v4) * 0.0625;\n    return fAvg;\n  }\n  bool GetShadowNDCPos(out vec3 shadowNDCPos, vec4 shadowPosWithDepthBias)\n  {\n  \tshadowNDCPos = shadowPosWithDepthBias.xyz / shadowPosWithDepthBias.w * 0.5 + 0.5;\n  \tif (shadowNDCPos.x < 0.0 || shadowNDCPos.x > 1.0 ||\n  \t\tshadowNDCPos.y < 0.0 || shadowNDCPos.y > 1.0 ||\n  \t\tshadowNDCPos.z < 0.0 || shadowNDCPos.z > 1.0) {\n  \t\treturn false;\n  \t}\n  \tshadowNDCPos.xy = cc_cameraPos.w == 1.0 ? vec2(shadowNDCPos.xy.x, 1.0 - shadowNDCPos.xy.y) : shadowNDCPos.xy;\n  \treturn true;\n  }\n  vec4 ApplyShadowDepthBias_FaceNormal(vec4 shadowPos, vec3 worldNormal, float normalBias, vec3 matViewDir0, vec3 matViewDir1, vec3 matViewDir2, vec2 projScaleXY)\n  {\n    vec4 newShadowPos = shadowPos;\n    if (normalBias > EPSILON_LOWP)\n    {\n      vec3 viewNormal = vec3(dot(matViewDir0, worldNormal), dot(matViewDir1, worldNormal), dot(matViewDir2, worldNormal));\n      if (viewNormal.z < 0.1)\n        newShadowPos.xy += viewNormal.xy * projScaleXY * normalBias * clamp(viewNormal.z, 0.001, 0.1);\n    }\n    return newShadowPos;\n  }\n  vec4 ApplyShadowDepthBias_FaceNormal(vec4 shadowPos, vec3 worldNormal, float normalBias, mat4 matLightView, vec2 projScaleXY)\n  {\n  \tvec4 newShadowPos = shadowPos;\n  \tif (normalBias > EPSILON_LOWP)\n  \t{\n  \t\tvec4 viewNormal = matLightView * vec4(worldNormal, 0.0);\n  \t\tif (viewNormal.z < 0.1)\n  \t\t\tnewShadowPos.xy += viewNormal.xy * projScaleXY * normalBias * clamp(viewNormal.z, 0.001, 0.1);\n  \t}\n  \treturn newShadowPos;\n  }\n  float GetViewSpaceDepthFromNDCDepth_Orthgraphic(float NDCDepth, float projScaleZ, float projBiasZ)\n  {\n  \treturn (NDCDepth - projBiasZ) / projScaleZ;\n  }\n  float GetViewSpaceDepthFromNDCDepth_Perspective(float NDCDepth, float homogenousDividW, float invProjScaleZ, float invProjBiasZ)\n  {\n  \treturn NDCDepth * invProjScaleZ + homogenousDividW * invProjBiasZ;\n  }\n  vec4 ApplyShadowDepthBias_Perspective(vec4 shadowPos, float viewspaceDepthBias)\n  {\n  \tvec3 viewSpacePos;\n  \tviewSpacePos.xy = shadowPos.xy * cc_shadowProjInfo.zw;\n  \tviewSpacePos.z = GetViewSpaceDepthFromNDCDepth_Perspective(shadowPos.z, shadowPos.w, cc_shadowInvProjDepthInfo.x, cc_shadowInvProjDepthInfo.y);\n  \tviewSpacePos.xyz += cc_shadowProjDepthInfo.z * normalize(viewSpacePos.xyz) * viewspaceDepthBias;\n  \tvec4 clipSpacePos;\n  \tclipSpacePos.xy = viewSpacePos.xy * cc_shadowProjInfo.xy;\n  \tclipSpacePos.zw = viewSpacePos.z * cc_shadowProjDepthInfo.xz + vec2(cc_shadowProjDepthInfo.y, 0.0);\n  \t#if CC_SHADOWMAP_USE_LINEAR_DEPTH\n  \t\tclipSpacePos.z = GetLinearDepthFromViewSpace(viewSpacePos.xyz, cc_shadowNFLSInfo.x, cc_shadowNFLSInfo.y);\n  \t\tclipSpacePos.z = (clipSpacePos.z * 2.0 - 1.0) * clipSpacePos.w;\n  \t#endif\n  \treturn clipSpacePos;\n  }\n  vec4 ApplyShadowDepthBias_Orthographic(vec4 shadowPos, float viewspaceDepthBias, float projScaleZ, float projBiasZ)\n  {\n  \tfloat coeffA = projScaleZ;\n  \tfloat coeffB = projBiasZ;\n  \tfloat viewSpacePos_z = GetViewSpaceDepthFromNDCDepth_Orthgraphic(shadowPos.z, projScaleZ, projBiasZ);\n  \tviewSpacePos_z += viewspaceDepthBias;\n  \tvec4 result = shadowPos;\n  \tresult.z = viewSpacePos_z * coeffA + coeffB;\n  \treturn result;\n  }\n  vec4 ApplyShadowDepthBias_PerspectiveLinearDepth(vec4 shadowPos, float viewspaceDepthBias, vec3 worldPos)\n  {\n    shadowPos.z = CCGetLinearDepth(worldPos, viewspaceDepthBias) * 2.0 - 1.0;\n    shadowPos.z *= shadowPos.w;\n    return shadowPos;\n  }\n  float CCGetDirLightShadowFactorHard (vec4 shadowPosWithDepthBias) {\n\t  vec3 shadowNDCPos;\n\t  if (!GetShadowNDCPos(shadowNDCPos, shadowPosWithDepthBias)) {\n\t\t  return 1.0;\n\t  }\n    return NativePCFShadowFactorHard(shadowNDCPos, cc_shadowMap, cc_shadowWHPBInfo.xy);\n  }\n  float CCGetDirLightShadowFactorSoft (vec4 shadowPosWithDepthBias) {\n\t  vec3 shadowNDCPos;\n\t  if (!GetShadowNDCPos(shadowNDCPos, shadowPosWithDepthBias)) {\n\t\t  return 1.0;\n\t  }\n    return NativePCFShadowFactorSoft(shadowNDCPos, cc_shadowMap, cc_shadowWHPBInfo.xy);\n  }\n  float CCGetDirLightShadowFactorSoft3X (vec4 shadowPosWithDepthBias) {\n\t  vec3 shadowNDCPos;\n\t  if (!GetShadowNDCPos(shadowNDCPos, shadowPosWithDepthBias)) {\n\t\t  return 1.0;\n\t  }\n    return NativePCFShadowFactorSoft3X(shadowNDCPos, cc_shadowMap, cc_shadowWHPBInfo.xy);\n  }\n  float CCGetDirLightShadowFactorSoft5X (vec4 shadowPosWithDepthBias) {\n\t  vec3 shadowNDCPos;\n\t  if (!GetShadowNDCPos(shadowNDCPos, shadowPosWithDepthBias)) {\n\t\t  return 1.0;\n\t  }\n    return NativePCFShadowFactorSoft5X(shadowNDCPos, cc_shadowMap, cc_shadowWHPBInfo.xy);\n  }\n  float CCGetSpotLightShadowFactorHard (vec4 shadowPosWithDepthBias, vec3 worldPos) {\n\t  vec3 shadowNDCPos;\n\t  if (!GetShadowNDCPos(shadowNDCPos, shadowPosWithDepthBias)) {\n\t\t  return 1.0;\n\t  }\n    return NativePCFShadowFactorHard(shadowNDCPos, cc_spotShadowMap, cc_shadowWHPBInfo.xy);\n  }\n  float CCGetSpotLightShadowFactorSoft (vec4 shadowPosWithDepthBias, vec3 worldPos) {\n\t  vec3 shadowNDCPos;\n\t  if (!GetShadowNDCPos(shadowNDCPos, shadowPosWithDepthBias)) {\n\t\t  return 1.0;\n\t  }\n    return NativePCFShadowFactorSoft(shadowNDCPos, cc_spotShadowMap, cc_shadowWHPBInfo.xy);\n  }\n  float CCGetSpotLightShadowFactorSoft3X (vec4 shadowPosWithDepthBias, vec3 worldPos) {\n\t  vec3 shadowNDCPos;\n\t  if (!GetShadowNDCPos(shadowNDCPos, shadowPosWithDepthBias)) {\n\t\t  return 1.0;\n\t  }\n    return NativePCFShadowFactorSoft3X(shadowNDCPos, cc_spotShadowMap, cc_shadowWHPBInfo.xy);\n  }\n  float CCGetSpotLightShadowFactorSoft5X (vec4 shadowPosWithDepthBias, vec3 worldPos) {\n\t  vec3 shadowNDCPos;\n\t  if (!GetShadowNDCPos(shadowNDCPos, shadowPosWithDepthBias)) {\n\t\t  return 1.0;\n\t  }\n    return NativePCFShadowFactorSoft5X(shadowNDCPos, cc_spotShadowMap, cc_shadowWHPBInfo.xy);\n  }\n  float CCSpotShadowFactorBase(out vec4 shadowNDCPosWithBias, vec4 shadowPos, vec3 worldPos, vec2 shadowBias)\n  {\n    float pcf = cc_shadowWHPBInfo.z;\n    vec4 pos = vec4(1.0);\n    #if CC_SHADOWMAP_USE_LINEAR_DEPTH\n      pos = ApplyShadowDepthBias_PerspectiveLinearDepth(shadowPos, shadowBias.x, worldPos);\n    #else\n      pos = ApplyShadowDepthBias_Perspective(shadowPos, shadowBias.x);\n    #endif\n    float realtimeShadow = 1.0;\n    if (pcf > 2.9) {\n      realtimeShadow = CCGetSpotLightShadowFactorSoft5X(pos, worldPos);\n    }else if (pcf > 1.9) {\n      realtimeShadow = CCGetSpotLightShadowFactorSoft3X(pos, worldPos);\n    }else if (pcf > 0.9) {\n      realtimeShadow = CCGetSpotLightShadowFactorSoft(pos, worldPos);\n    }else {\n      realtimeShadow = CCGetSpotLightShadowFactorHard(pos, worldPos);\n    }\n    shadowNDCPosWithBias = pos;\n    return mix(realtimeShadow, 1.0, cc_shadowNFLSInfo.w);\n  }\n  float CCShadowFactorBase(out vec4 shadowNDCPosWithBias, vec4 shadowPos, vec3 N, vec2 shadowBias)\n  {\n    vec4 pos = ApplyShadowDepthBias_FaceNormal(shadowPos, N, shadowBias.y, cc_matLightView, cc_shadowProjInfo.xy);\n    pos = ApplyShadowDepthBias_Orthographic(pos, shadowBias.x, cc_shadowProjDepthInfo.x, cc_shadowProjDepthInfo.y);\n    float realtimeShadow = 1.0;\n    #if CC_DIR_SHADOW_PCF_TYPE == 3\n      realtimeShadow = CCGetDirLightShadowFactorSoft5X(pos);\n    #endif\n    #if CC_DIR_SHADOW_PCF_TYPE == 2\n      realtimeShadow =  CCGetDirLightShadowFactorSoft3X(pos);\n    #endif\n    #if CC_DIR_SHADOW_PCF_TYPE == 1\n      realtimeShadow = CCGetDirLightShadowFactorSoft(pos);\n    #endif\n    #if CC_DIR_SHADOW_PCF_TYPE == 0\n      realtimeShadow = CCGetDirLightShadowFactorHard(pos);\n    #endif\n    shadowNDCPosWithBias = pos;\n    return mix(realtimeShadow, 1.0, cc_shadowNFLSInfo.w);\n  }\n  #if CC_SUPPORT_CASCADED_SHADOW_MAP\n    bool CCGetCSMLevelWithTransition(out highp float ratio, vec3 clipPos) {\n      highp float maxRange = 1.0 - cc_csmSplitsInfo.x;\n      highp float minRange = cc_csmSplitsInfo.x;\n      highp float thresholdInvert = 1.0 / cc_csmSplitsInfo.x;\n      ratio = 0.0;\n      if (clipPos.x <= minRange) {\n        ratio = clipPos.x * thresholdInvert;\n        return true;\n      }\n      if (clipPos.x >= maxRange) {\n        ratio = 1.0 - (clipPos.x - maxRange) * thresholdInvert;\n        return true;\n      }\n      if (clipPos.y <= minRange) {\n        ratio = clipPos.y  * thresholdInvert;\n        return true;\n      }\n      if (clipPos.y >= maxRange) {\n        ratio = 1.0 - (clipPos.y - maxRange) * thresholdInvert;\n        return true;\n      }\n      return false;\n    }\n    bool CCHasCSMLevel(int level, vec3 worldPos) {\n      highp float layerThreshold = cc_csmViewDir0[0].w;\n      bool hasLevel = false;\n      for (int i = 0; i < 4; i++) {\n        if (i == level) {\n          vec4 shadowPos = cc_matCSMViewProj[i] * vec4(worldPos.xyz, 1.0);\n          vec3 clipPos = shadowPos.xyz / shadowPos.w * 0.5 + 0.5;\n          if (clipPos.x >= layerThreshold && clipPos.x <= (1.0 - layerThreshold) &&\n              clipPos.y >= layerThreshold && clipPos.y <= (1.0 - layerThreshold) &&\n              clipPos.z >= 0.0 && clipPos.z <= 1.0) {\n            hasLevel = true;\n          }\n        }\n      }\n      return hasLevel;\n    }\n    void CCGetCSMLevel(out vec4 csmPos, out vec4 shadowProjDepthInfo, out vec4 shadowProjInfo, out vec3 shadowViewDir0, out vec3 shadowViewDir1, out vec3 shadowViewDir2, vec3 worldPos, int level) {\n      highp float layerThreshold = cc_csmViewDir0[0].w;\n      for (int i = 0; i < 4; i++) {\n        vec4 shadowPos = cc_matCSMViewProj[i] * vec4(worldPos.xyz, 1.0);\n        vec3 clipPos = shadowPos.xyz / shadowPos.w * 0.5 + 0.5;\n        if (clipPos.x >= layerThreshold && clipPos.x <= (1.0 - layerThreshold) &&\n            clipPos.y >= layerThreshold && clipPos.y <= (1.0 - layerThreshold) &&\n            clipPos.z >= 0.0 && clipPos.z <= 1.0 && i == level) {\n          csmPos = cc_matCSMViewProj[i] * vec4(worldPos.xyz, 1.0);\n          csmPos.xy = csmPos.xy * cc_csmAtlas[i].xy + cc_csmAtlas[i].zw;\n          shadowProjDepthInfo = cc_csmProjDepthInfo[i];\n          shadowProjInfo = cc_csmProjInfo[i];\n          shadowViewDir0 = cc_csmViewDir0[i].xyz;\n          shadowViewDir1 = cc_csmViewDir1[i].xyz;\n          shadowViewDir2 = cc_csmViewDir2[i].xyz;\n        }\n      }\n    }\n    int CCGetCSMLevel(out bool isTransitionArea, out highp float transitionRatio, out vec4 csmPos, out vec4 shadowProjDepthInfo, out vec4 shadowProjInfo, out vec3 shadowViewDir0, out vec3 shadowViewDir1, out vec3 shadowViewDir2, vec3 worldPos)\n    {\n      int level = -1;\n      highp float layerThreshold = cc_csmViewDir0[0].w;\n      for (int i = 0; i < 4; i++) {\n        vec4 shadowPos = cc_matCSMViewProj[i] * vec4(worldPos.xyz, 1.0);\n        vec3 clipPos = shadowPos.xyz / shadowPos.w * 0.5 + 0.5;\n        if (clipPos.x >= layerThreshold && clipPos.x <= (1.0 - layerThreshold) &&\n            clipPos.y >= layerThreshold && clipPos.y <= (1.0 - layerThreshold) &&\n            clipPos.z >= 0.0 && clipPos.z <= 1.0 && level < 0) {\n          #if CC_CASCADED_LAYERS_TRANSITION\n            isTransitionArea = CCGetCSMLevelWithTransition(transitionRatio, clipPos);\n          #endif\n          csmPos = cc_matCSMViewProj[i] * vec4(worldPos.xyz, 1.0);\n          csmPos.xy = csmPos.xy * cc_csmAtlas[i].xy + cc_csmAtlas[i].zw;\n          shadowProjDepthInfo = cc_csmProjDepthInfo[i];\n          shadowProjInfo = cc_csmProjInfo[i];\n          shadowViewDir0 = cc_csmViewDir0[i].xyz;\n          shadowViewDir1 = cc_csmViewDir1[i].xyz;\n          shadowViewDir2 = cc_csmViewDir2[i].xyz;\n          level = i;\n        }\n      }\n      return level;\n    }\n    int CCGetCSMLevel(out vec4 csmPos, out vec4 shadowProjDepthInfo, out vec4 shadowProjInfo, out vec3 shadowViewDir0, out vec3 shadowViewDir1, out vec3 shadowViewDir2, vec3 worldPos)\n    {\n      bool isTransitionArea = false;\n      highp float transitionRatio = 0.0;\n      return CCGetCSMLevel(isTransitionArea, transitionRatio, csmPos, shadowProjDepthInfo, shadowProjInfo, shadowViewDir0, shadowViewDir1, shadowViewDir2, worldPos);\n    }\n    float CCCSMFactorBase(out vec4 csmPos, out vec4 csmNDCPosWithBias, vec3 worldPos, vec3 N, vec2 shadowBias)\n    {\n      bool isTransitionArea = false;\n      highp float ratio = 0.0;\n      csmPos = vec4(1.0);\n      vec4 shadowProjDepthInfo, shadowProjInfo;\n      vec3 shadowViewDir0, shadowViewDir1, shadowViewDir2;\n      int level = -1;\n      #if CC_CASCADED_LAYERS_TRANSITION\n        level = CCGetCSMLevel(isTransitionArea, ratio, csmPos, shadowProjDepthInfo, shadowProjInfo, shadowViewDir0, shadowViewDir1, shadowViewDir2, worldPos);\n      #else\n        level = CCGetCSMLevel(csmPos, shadowProjDepthInfo, shadowProjInfo, shadowViewDir0, shadowViewDir1, shadowViewDir2, worldPos);\n      #endif\n      if (level < 0) { return 1.0; }\n      vec4 pos = ApplyShadowDepthBias_FaceNormal(csmPos, N, shadowBias.y, shadowViewDir0, shadowViewDir1, shadowViewDir2, shadowProjInfo.xy);\n      pos = ApplyShadowDepthBias_Orthographic(pos, shadowBias.x, shadowProjDepthInfo.x, shadowProjDepthInfo.y);\n      csmNDCPosWithBias = pos;\n      float realtimeShadow = 1.0;\n      #if CC_DIR_SHADOW_PCF_TYPE == 3\n        realtimeShadow = CCGetDirLightShadowFactorSoft5X(pos);\n      #endif\n      #if CC_DIR_SHADOW_PCF_TYPE == 2\n        realtimeShadow = CCGetDirLightShadowFactorSoft3X(pos);\n      #endif\n      #if CC_DIR_SHADOW_PCF_TYPE == 1\n        realtimeShadow = CCGetDirLightShadowFactorSoft(pos);\n      #endif\n      #if CC_DIR_SHADOW_PCF_TYPE == 0\n        realtimeShadow = CCGetDirLightShadowFactorHard(pos);\n      #endif\n      #if CC_CASCADED_LAYERS_TRANSITION\n        vec4 nextCSMPos = vec4(1.0);\n        vec4 nextShadowProjDepthInfo, nextShadowProjInfo;\n        vec3 nextShadowViewDir0, nextShadowViewDir1, nextShadowViewDir2;\n        float nextRealtimeShadow = 1.0;\n        CCGetCSMLevel(nextCSMPos, nextShadowProjDepthInfo, nextShadowProjInfo, nextShadowViewDir0, nextShadowViewDir1, nextShadowViewDir2, worldPos, level + 1);\n        bool hasNextLevel = CCHasCSMLevel(level + 1, worldPos);\n        if (hasNextLevel && isTransitionArea) {\n          vec4 nexPos = ApplyShadowDepthBias_FaceNormal(nextCSMPos, N, shadowBias.y, nextShadowViewDir0, nextShadowViewDir1, nextShadowViewDir2, nextShadowProjInfo.xy);\n          nexPos = ApplyShadowDepthBias_Orthographic(nexPos, shadowBias.x, nextShadowProjDepthInfo.x, nextShadowProjDepthInfo.y);\n          #if CC_DIR_SHADOW_PCF_TYPE == 3\n            nextRealtimeShadow = CCGetDirLightShadowFactorSoft5X(nexPos);\n          #endif\n          #if CC_DIR_SHADOW_PCF_TYPE == 2\n            nextRealtimeShadow = CCGetDirLightShadowFactorSoft3X(nexPos);\n          #endif\n          #if CC_DIR_SHADOW_PCF_TYPE == 1\n            nextRealtimeShadow = CCGetDirLightShadowFactorSoft(nexPos);\n          #endif\n          #if CC_DIR_SHADOW_PCF_TYPE == 0\n            nextRealtimeShadow = CCGetDirLightShadowFactorHard(nexPos);\n          #endif\n          return mix(mix(nextRealtimeShadow, realtimeShadow, ratio), 1.0, cc_shadowNFLSInfo.w);\n        }\n        return mix(realtimeShadow, 1.0, cc_shadowNFLSInfo.w);\n      #else\n        return mix(realtimeShadow, 1.0, cc_shadowNFLSInfo.w);\n      #endif\n    }\n  #else\n    int CCGetCSMLevel(out vec4 csmPos, out vec4 shadowProjDepthInfo, out vec4 shadowProjInfo, out vec3 shadowViewDir0, out vec3 shadowViewDir1, out vec3 shadowViewDir2, vec3 worldPos) {\n      return -1;\n    }\n    float CCCSMFactorBase(out vec4 csmPos, out vec4 csmNDCPosWithBias, vec3 worldPos, vec3 N, vec2 shadowBias) {\n      csmPos = cc_matLightViewProj * vec4(worldPos, 1.0);\n      return CCShadowFactorBase(csmNDCPosWithBias, csmPos, N, shadowBias);\n    }\n  #endif\n  float CCShadowFactorBase(vec4 shadowPos, vec3 N, vec2 shadowBias) {\n    vec4 shadowNDCPosWithBias;\n    return CCShadowFactorBase(shadowNDCPosWithBias, shadowPos, N, shadowBias);\n  }\n  float CCCSMFactorBase(vec3 worldPos, vec3 N, vec2 shadowBias) {\n    vec4 csmPos, csmNDCPosWithBias;\n    return CCCSMFactorBase(csmPos, csmNDCPosWithBias, worldPos, N, shadowBias);\n  }\n  float CCSpotShadowFactorBase(vec4 shadowPos, vec3 worldPos, vec2 shadowBias)\n  {\n    vec4 shadowNDCPosWithBias;\n    return CCSpotShadowFactorBase(shadowNDCPosWithBias, shadowPos, worldPos, shadowBias);\n  }\n#endif\n#if CC_USE_FOG != 4\n  float LinearFog(vec4 pos, vec3 cameraPos, float fogStart, float fogEnd) {\n      vec4 wPos = pos;\n      float cam_dis = distance(cameraPos, wPos.xyz);\n      return clamp((fogEnd - cam_dis) / (fogEnd - fogStart), 0., 1.);\n  }\n  float ExpFog(vec4 pos, vec3 cameraPos, float fogStart, float fogDensity, float fogAtten) {\n      vec4 wPos = pos;\n      float cam_dis = max(distance(cameraPos, wPos.xyz) - fogStart, 0.0) / fogAtten * 4.;\n      float f = exp(-cam_dis * fogDensity);\n      return f;\n  }\n  float ExpSquaredFog(vec4 pos, vec3 cameraPos, float fogStart, float fogDensity, float fogAtten) {\n      vec4 wPos = pos;\n      float cam_dis = max(distance(cameraPos, wPos.xyz) - fogStart, 0.0) / fogAtten * 4.;\n      float f = exp(-cam_dis * cam_dis * fogDensity * fogDensity);\n      return f;\n  }\n  float LayeredFog(vec4 pos, vec3 cameraPos, float fogTop, float fogRange, float fogAtten) {\n      vec4 wPos = pos;\n      vec3 camWorldProj = cameraPos.xyz;\n      camWorldProj.y = 0.;\n      vec3 worldPosProj = wPos.xyz;\n      worldPosProj.y = 0.;\n      float fDeltaD = distance(worldPosProj, camWorldProj) / fogAtten * 2.0;\n      float fDeltaY, fDensityIntegral;\n      if (cameraPos.y > fogTop) {\n          if (wPos.y < fogTop) {\n              fDeltaY = (fogTop - wPos.y) / fogRange * 2.0;\n              fDensityIntegral = fDeltaY * fDeltaY * 0.5;\n          }\n          else {\n              fDeltaY = 0.;\n              fDensityIntegral = 0.;\n          }\n      }\n      else {\n          if (wPos.y < fogTop) {\n              float fDeltaA = (fogTop - cameraPos.y) / fogRange * 2.;\n              float fDeltaB = (fogTop - wPos.y) / fogRange * 2.;\n              fDeltaY = abs(fDeltaA - fDeltaB);\n              fDensityIntegral = abs((fDeltaA * fDeltaA * 0.5) - (fDeltaB * fDeltaB * 0.5));\n          }\n          else {\n              fDeltaY = abs(fogTop - cameraPos.y) / fogRange * 2.;\n              fDensityIntegral = abs(fDeltaY * fDeltaY * 0.5);\n          }\n      }\n      float fDensity;\n      if (fDeltaY != 0.) {\n          fDensity = (sqrt(1.0 + ((fDeltaD / fDeltaY) * (fDeltaD / fDeltaY)))) * fDensityIntegral;\n      }\n      else {\n          fDensity = 0.;\n      }\n      float f = exp(-fDensity);\n      return f;\n  }\n#endif\nvoid CC_TRANSFER_FOG_BASE(vec4 pos, out float factor)\n{\n#if CC_USE_FOG == 0\n\tfactor = LinearFog(pos, cc_cameraPos.xyz, cc_fogBase.x, cc_fogBase.y);\n#elif CC_USE_FOG == 1\n\tfactor = ExpFog(pos, cc_cameraPos.xyz, cc_fogBase.x, cc_fogBase.z, cc_fogAdd.z);\n#elif CC_USE_FOG == 2\n\tfactor = ExpSquaredFog(pos, cc_cameraPos.xyz, cc_fogBase.x, cc_fogBase.z, cc_fogAdd.z);\n#elif CC_USE_FOG == 3\n\tfactor = LayeredFog(pos, cc_cameraPos.xyz, cc_fogAdd.x, cc_fogAdd.y, cc_fogAdd.z);\n#else\n\tfactor = 1.0;\n#endif\n}\nvoid CC_APPLY_FOG_BASE(inout vec4 color, float factor) {\n\tcolor = vec4(mix(cc_fogColor.rgb, color.rgb, factor), color.a);\n}\n#if CC_USE_LIGHT_PROBE\n  #if CC_USE_LIGHT_PROBE\n  vec3 SHEvaluate(vec3 normal)\n  {\n      vec3 result;\n  #if USE_INSTANCING\n      vec4 normal4 = vec4(normal, 1.0);\n      result.r = dot(v_sh_linear_const_r, normal4);\n      result.g = dot(v_sh_linear_const_g, normal4);\n      result.b = dot(v_sh_linear_const_b, normal4);\n  #else\n      vec4 normal4 = vec4(normal, 1.0);\n      result.r = dot(cc_sh_linear_const_r, normal4);\n      result.g = dot(cc_sh_linear_const_g, normal4);\n      result.b = dot(cc_sh_linear_const_b, normal4);\n      vec4 n14 = normal.xyzz * normal.yzzx;\n      float n5 = normal.x * normal.x - normal.y * normal.y;\n      result.r += dot(cc_sh_quadratic_r, n14);\n      result.g += dot(cc_sh_quadratic_g, n14);\n      result.b += dot(cc_sh_quadratic_b, n14);\n      result += (cc_sh_quadratic_a.rgb * n5);\n  #endif\n    #if CC_USE_HDR\n      result *= cc_exposure.w * cc_exposure.x;\n    #endif\n    return result;\n  }\n  #endif\n#endif\n#if CC_USE_REFLECTION_PROBE\n  uniform highp vec4 cc_reflectionProbeData1;\n  uniform highp vec4 cc_reflectionProbeData2;\n  vec4 GetTexData(sampler2D dataMap, float dataMapWidth, float x, float uv_y)\n  {\n    return vec4(\n        decode32(texture2D(dataMap, vec2(((x + 0.5)/dataMapWidth), uv_y))),\n        decode32(texture2D(dataMap, vec2(((x + 1.5)/dataMapWidth), uv_y))),\n        decode32(texture2D(dataMap, vec2(((x + 2.5)/dataMapWidth), uv_y))),\n        decode32(texture2D(dataMap, vec2(((x + 3.5)/dataMapWidth), uv_y)))\n      );\n  }\n  void GetPlanarReflectionProbeData(out vec4 plane, out float planarReflectionDepthScale, out float mipCount, float probeId)\n  {\n      #if USE_INSTANCING\n        float uv_y = (probeId + 0.5) / cc_probeInfo.x;\n        float dataMapWidth = 12.0;\n        vec4 texData1 = GetTexData(cc_reflectionProbeDataMap, dataMapWidth, 0.0, uv_y);\n        vec4 texData2 = GetTexData(cc_reflectionProbeDataMap, dataMapWidth, 4.0, uv_y);\n        plane.xyz = texData1.xyz;\n        plane.w = texData2.x;\n        planarReflectionDepthScale = texData2.y;\n        mipCount = texData2.z;\n      #else\n        plane = cc_reflectionProbeData1;\n        planarReflectionDepthScale = cc_reflectionProbeData2.x;\n        mipCount = cc_reflectionProbeData2.w;\n      #endif\n  }\n  void GetCubeReflectionProbeData(out vec3 centerPos, out vec3 boxHalfSize, out float mipCount, float probeId)\n  {\n      #if USE_INSTANCING\n        float uv_y = (probeId + 0.5) / cc_probeInfo.x;\n        float dataMapWidth = 12.0;\n        vec4 texData1 = GetTexData(cc_reflectionProbeDataMap, dataMapWidth, 0.0, uv_y);\n        vec4 texData2 = GetTexData(cc_reflectionProbeDataMap, dataMapWidth, 4.0, uv_y);\n        vec4 texData3 = GetTexData(cc_reflectionProbeDataMap, dataMapWidth, 8.0, uv_y);\n        centerPos = texData1.xyz;\n        boxHalfSize = texData2.xyz;\n        mipCount = texData3.x;\n      #else\n        centerPos = cc_reflectionProbeData1.xyz;\n        boxHalfSize = cc_reflectionProbeData2.xyz;\n        mipCount = cc_reflectionProbeData2.w;\n      #endif\n  }\n#endif\n#if CC_USE_LIGHTMAP && !CC_FORWARD_ADD\n  uniform sampler2D cc_lightingMap;\n  void SampleAndDecodeLightMapColor(out vec3 lightmapColor, out float dirShadow, out float ao, sampler2D lightingMap, vec2 luv, float lum, vec3 worldNormal)\n  {\n  #if CC_LIGHT_MAP_VERSION > 2\n  #elif CC_LIGHT_MAP_VERSION > 1\n  \tvec4 dataLow = texture2D(lightingMap, luv);\n  \tvec4 dataHigh = texture2D(lightingMap, luv + vec2(0.5, 0.0));\n  \tlightmapColor.xyz = dataLow.xyz + dataHigh.xyz * 0.00392156862745098;\n      lightmapColor.rgb *= lum;\n  \tdirShadow = dataLow.a;\n  \tao = dataHigh.a;\n  #else\n      vec4 lightmap = texture2D(lightingMap, luv);\n      lightmapColor = lightmap.rgb * lum;\n  \tdirShadow = lightmap.a;\n  \tao = 1.0;\n  #endif\n  }\n  void GetLightMapColor(out vec3 lightmapColor, out float dirShadow, out float ao, sampler2D lightingMap, vec2 luv, float lum, vec3 worldNormal)\n  {\n  \tvec4 lightmap;\n  \tvec2 occlusion;\n  \tSampleAndDecodeLightMapColor(lightmapColor, dirShadow, ao, lightingMap, luv, lum, worldNormal);\n  #if CC_USE_HDR\n      lightmapColor.rgb *= cc_exposure.w * cc_exposure.x;\n  #endif\n  }\n#endif\n    uniform vec4 diffuseColor;\n    uniform vec4 specularColor;\n    uniform vec4 emissive;\n    uniform float emissiveScale;\n    uniform float alphaThreshold;\n    uniform float shininessExponent;\n    uniform float glossiness;\n    uniform float metallic;\n    uniform float normalScale;\n    uniform float transparencyFactor;\n    uniform float diffuseFactor;\n    uniform float specularFactor;\n#define DCC_APP_OTHERS 0\n#define DCC_APP_MAX 1\n#define DCC_APP_BLENDER 2\n#define DCC_APP_CINEMA4D 3\n#define DCC_APP_GLTF 4\n#define DCC_APP_MAYA 5\n#if USE_SHININESS_MAP\n  uniform sampler2D shininessExponentMap;\n#endif\n#if USE_SPECULAR_GLOSSINESS_MAP\n  uniform sampler2D specularGlossinessMap;\n#endif\n#if USE_SPECULAR_MAP\n  uniform sampler2D specularMap;\n#endif\n #if USE_METALLIC_MAP\n  uniform sampler2D metallicMap;\n#endif\n#if USE_ALBEDO_MAP\n  uniform sampler2D albedoMap;\n#endif\n#if USE_TRANSPARENCY_MAP\n  uniform sampler2D transparencyMap;\n#endif\n#if USE_EMISSIVE_MAP\n  uniform sampler2D emissiveMap;\n#endif\n#if USE_EMISSIVESCALE_MAP\n  uniform sampler2D emissiveScaleMap;\n#endif\n#if USE_NORMAL_MAP\n  uniform sampler2D normalMap;\n#endif\n#if USE_OCCLUSION_MAP\n  uniform sampler2D occlusionMap;\n#endif\nfloat discolor(vec3 srcColor)\n{\n  return dot(GRAY_VECTOR, srcColor);\n}\nfloat convertShininessExponent(float shininessExp)\n{\n  #if DCC_APP_NAME == DCC_APP_BLENDER\n    float glossiness = clamp(sqrt(shininessExp) * 0.1, 0.0, 0.95);\n  #elif DCC_APP_NAME == DCC_APP_MAX || DCC_APP_NAME == DCC_APP_MAYA\n    float l2 = clamp(log(shininessExp + EPSILON) * 0.1442695 , 0.0, 1.0);\n    float glossiness = pow(l2, 0.5);\n  #else\n    float glossiness = clamp(log(shininessExp + EPSILON) * 0.1442695 , 0.0, 1.0);\n  #endif\n    return glossiness;\n}\nfloat getSpecularIntensityFromRoughness(float roughness)\n{\n  #if DCC_APP_NAME == DCC_APP_BLENDER\n    float specularIntensityMultiplier = mix(1.0, 5.0, roughness);\n  #elif DCC_APP_NAME == DCC_APP_CINEMA4D\n    float specularIntensityMultiplier = mix(1.0, 50.0, roughness);\n  #elif DCC_APP_NAME == DCC_APP_MAX || DCC_APP_NAME == DCC_APP_MAYA\n    float specularIntensityMultiplier = mix(1.0, 20.0, roughness);\n  #else\n    float specularIntensityMultiplier = 1.0;\n  #endif\n    return specularIntensityMultiplier;\n}\nvec4 getSpecularColorAndFactor()\n{\n  vec3 inSpecular = specularColor.rgb * specularFactor;\n  float inFactor = 1.0;\n  #if USE_SPECULAR_GLOSSINESS_MAP\n    inSpecular = SRGBToLinear(texture2D(specularGlossinessMap, TEXTURE_UV).rgb);\n  #endif\n  #if USE_SPECULAR_MAP\n      vec4 specularTex = texture2D(specularMap, TEXTURE_UV);\n      specularTex.rgb = SRGBToLinear(specularTex.rgb);\n      inSpecular = specularTex.rgb;\n  #endif\n  return vec4(inSpecular, inFactor);\n}\n#define CC_SURFACES_FRAGMENT_ALPHA_CLIP_ONLY\n#define CC_SURFACES_FRAGMENT_MODIFY_WORLD_NORMAL\nvec3 SurfacesFragmentModifyWorldNormal()\n{\n  vec3 normal = FSInput_worldNormal;\n  #if USE_NORMAL_MAP\n    vec3 nmmp = texture2D(normalMap, NORMAL_UV).xyz - vec3(0.5);\n    normal = CalculateNormalFromTangentSpace(nmmp, normalScale, normal.xyz, FSInput_worldTangent, FSInput_mirrorNormal);\n  #endif\n  return normalize(normal);\n}\n#define CC_SURFACES_FRAGMENT_MODIFY_EMISSIVE\nvec3 SurfacesFragmentModifyEmissive()\n{\n  vec3 emissiveColor = emissive.rgb;\n  #if USE_EMISSIVE_MAP\n      emissiveColor.rgb = SRGBToLinear(texture2D(emissiveMap, TEXTURE_UV).rgb);\n  #endif\n  #if USE_EMISSIVESCALE_MAP\n      vec4 emissiveScaleColor = texture2D(emissiveScaleMap, TEXTURE_UV);\n      emissiveScaleColor.rgb = SRGBToLinear(emissiveScaleColor.rgb);\n      emissiveColor.rgb *= emissiveScaleColor.rgb;\n  #else\n      emissiveColor.rgb *= emissiveScale;\n  #endif\n  return emissiveColor;\n}\n#define CC_SURFACES_FRAGMENT_MODIFY_SHARED_DATA\nstruct SurfacesMaterialData\n{\n  #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n  vec3 worldPos, worldPos_fract_part;\n  #else\n  vec3 worldPos;\n  #endif\n  vec4 baseColor;\n  vec3 worldNormal;\n  vec3 emissive;\n  float specularIntensity;\n  float roughness;\n  float metallic;\n  float ao;\n  vec3 worldTangent, worldBinormal;\n  float ior;\n#if CC_SURFACES_LIGHTING_ANISOTROPIC\n  float anisotropyShape;\n#endif\n#if CC_SURFACES_LIGHTING_TRANSMIT_SPECULAR || CC_SURFACES_LIGHTING_TRANSMIT_DIFFUSE\n  vec3 inScatteringLightColor;\n  vec4 transmitParams;\n#endif\n#if CC_SURFACES_LIGHTING_TRANSMIT_DIFFUSE\n  vec4 transmitDiffuseParams;\n#endif\n#if CC_SURFACES_LIGHTING_TRT\n  vec3 baseColorTRT;\n  float trtIntensity, roughnessTRT;\n  vec3 worldTangentTRT, worldBinormalTRT;\n#endif\n#if CC_SURFACES_LIGHTING_TT\n  vec3 baseColorTT;\n  float ttIntensity, ttScatterCoef;\n#endif\n};\nvoid SurfacesFragmentModifySharedData(inout SurfacesMaterialData surfaceData)\n{\n    vec4 baseColor = vec4(1.0);\n    #if USE_VERTEX_COLOR\n      baseColor.rgb *= SRGBToLinear(FSInput_vertexColor.rgb);\n      baseColor.a *= FSInput_vertexColor.a;\n    #endif\n    #if USE_ALBEDO_MAP\n      vec4 texColor = texture2D(albedoMap, TEXTURE_UV);\n      texColor.rgb = SRGBToLinear(texColor.rgb);\n      texColor.a *= transparencyFactor;\n      baseColor *= texColor;\n    #else\n      baseColor *= diffuseColor;\n    #endif\n    baseColor.rgb *= diffuseFactor;\n    #if USE_TRANSPARENCY_MAP\n      baseColor.a = texture2D(transparencyMap, TEXTURE_UV).TRANSPARENCY_MAP_CHANNEL;\n      #if DCC_APP_NAME == DCC_APP_MAYA\n        baseColor.a = 1.0 - baseColor.a;\n      #endif\n    #endif\n    #if USE_ALPHA_TEST\n      if (baseColor.a < alphaThreshold) discard;\n    #endif\n    vec4 specularColorAndFactor = getSpecularColorAndFactor();\n    float inGlossiness = 0.0, inSpecularIntensity = 1.0;\n    #if HAS_EXPORTED_GLOSSINESS\n      #if USE_SPECULAR_GLOSSINESS_MAP\n        inGlossiness = 1.0 - texture2D(specularGlossinessMap, TEXTURE_UV).a;\n      #else\n        inGlossiness = glossiness;\n      #endif\n    #else\n      #if USE_SHININESS_MAP\n        #if GLOSSINESS_MAP_USE_SINGLE_CHANNEL\n          inGlossiness = 1.0 - texture2D(shininessExponentMap, TEXTURE_UV).GLOSSINESS_MAP_CHANNEL;\n        #else\n          inGlossiness = 1.0 - discolor(texture2D(shininessExponentMap, TEXTURE_UV).rgb);\n        #endif\n      #else\n        inGlossiness = convertShininessExponent(shininessExponent);\n      #endif\n      inSpecularIntensity *= getSpecularIntensityFromRoughness(1.0 - inGlossiness);\n    #endif\n    float inMetallic = 0.0;\n    vec3 albedo = baseColor.rgb;\n    #if HAS_EXPORTED_METALLIC\n      inMetallic = metallic;\n      float spec = specularFactor;\n      #if USE_SPECULAR_MAP\n        spec = dot(GRAY_VECTOR, texture2D(specularMap, TEXTURE_UV).rgb);\n      #endif\n      inSpecularIntensity *= spec * 0.5;\n    #else\n      GetMetallicAlbedoFromDiffuseSpecularWithoutColor(inMetallic, albedo.rgb, baseColor.rgb, specularColorAndFactor.rgb, 0.04);\n      inSpecularIntensity *= inMetallic;\n    #endif\n    baseColor.rgb = albedo;\n    surfaceData.baseColor = baseColor;\n    surfaceData.specularIntensity = inSpecularIntensity * 0.5;\n    surfaceData.roughness = 1.0 - inGlossiness;\n    surfaceData.metallic = inMetallic;\n    surfaceData.ao = 1.0;\n    #if USE_OCCLUSION_MAP\n      surfaceData.ao = texture2D(occlusionMap, OCCLUSION_UV).OCCLUSION_CHANNEL;\n    #endif\n}\nstruct LightingIntermediateData\n{\n  vec3 N, H, L, V;\n  float distToLight, distToLightSqr;\n  float distToCamera, distToCameraSqr;\n  float NoL, NoV, NoH;\n  float NoLSat, NoVSat, NoHSat;\n  float NoVAbsSat;\n  #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n  vec3 worldPosition, worldPosition_fract_part;\n  #else\n  vec3 worldPosition;\n  #endif\n  vec3 T, B;\n  float specularParam;\n  float ior;\n#if CC_SURFACES_LIGHTING_ANISOTROPIC\n  float anisotropyShape;\n#endif\n#if CC_SURFACES_LIGHTING_TRANSMIT_DIFFUSE\n  vec4 shadowPosAndDepth;\n  vec4 transmitDiffuseParams;\n#endif\n#if CC_SURFACES_LIGHTING_TRANSMIT_SPECULAR || CC_SURFACES_LIGHTING_TRANSMIT_DIFFUSE\n  vec4 transmitParams;\n  vec3 inScatteringLightColor;\n#endif\n#if CC_SURFACES_LIGHTING_TT\n  vec3 baseColorTT;\n  float ttIntensity, ttScatterCoef;\n#endif\n};\nvoid CCSurfacesLightingGetIntermediateData_PerPixel(inout LightingIntermediateData data, vec3 worldNormal, vec3 worldPos, vec3 worldTangent, vec3 worldBinormal\n#if CC_SURFACES_LIGHTING_ANISOTROPIC\n    , float anisotropyShape\n#endif\n)\n{\n  data.N = worldNormal;\n  data.V = cc_cameraPos.xyz - worldPos;\n  data.distToCameraSqr = dot(data.V, data.V);\n  data.distToCamera = sqrt(data.distToCameraSqr);\n  data.V /= data.distToCamera;\n  data.NoV = dot(data.N, data.V);\n  data.NoVSat = max(data.NoV, 0.0);\n  data.NoVAbsSat = max(abs(data.NoV), 0.0);\n  #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n  packHighpData(data.worldPosition, data.worldPosition_fract_part, worldPos);\n  #else\n  data.worldPosition = worldPos;\n  #endif\n  data.T = worldTangent;\n  data.B = worldBinormal;\n#if CC_SURFACES_LIGHTING_ANISOTROPIC\n  data.anisotropyShape = anisotropyShape;\n#endif\n#if CC_SURFACES_LIGHTING_TRANSMIT_SPECULAR || CC_SURFACES_LIGHTING_TRANSMIT_DIFFUSE\n  data.inScatteringLightColor = vec3(0.0);\n  data.transmitParams = vec4(0.0);\n#endif\n#if CC_SURFACES_LIGHTING_TRANSMIT_DIFFUSE\n  data.shadowPosAndDepth = vec4(0.0, 0.0, 999999.0, 999999.0);\n#endif\n#if CC_SURFACES_LIGHTING_TT\n  data.baseColorTT = vec3(0.0);\n  data.ttIntensity = data.ttScatterCoef = 0.0;\n#endif\n}\nvoid CCSurfacesLightingGetIntermediateData_PerLight(inout LightingIntermediateData data, vec3 lightDirWithDist)\n{\n  data.L = lightDirWithDist;\n  data.distToLightSqr = dot(data.L, data.L);\n  data.distToLight = sqrt(data.distToLightSqr);\n  data.L /= data.distToLight;\n  data.H = normalize(data.L + data.V);\n  data.NoL = dot(data.N, data.L);\n  data.NoH = dot(data.N, data.H);\n  data.NoLSat = max(data.NoL, 0.0);\n  data.NoHSat = max(data.NoH, 0.0);\n}\nstruct LightingResult\n{\n  vec3 diffuseColorWithLighting, specularColorWithLighting;\n  vec3 directDiffuse, directSpecular;\n  vec3 environmentDiffuse, environmentSpecular;\n  float shadow, ao;\n  vec3 lightmapColor;\n  vec3 emissive;\n#if CC_SURFACES_LIGHTING_USE_FRESNEL\n  float fresnel;\n#endif\n#if CC_SURFACES_LIGHTING_TRANSMIT_SPECULAR\n  vec3 directTransmitSpecular, environmentTransmitSpecular;\n#endif\n#if CC_SURFACES_LIGHTING_TRANSMIT_DIFFUSE\n  vec3 directTransmitDiffuse, environmentTransmitDiffuse;\n#endif\n#if CC_SURFACES_LIGHTING_TRT\n  vec3 directTRT, environmentTRT;\n  vec3 specularColorWithLightingTRT;\n#endif\n#if CC_SURFACES_LIGHTING_TT\n  vec3 directTT;\n  vec3 diffuseColorWithLightingTT;\n#endif\n};\nstruct LightingMiscData\n{\n  float lightType;\n  vec3 lightPos, lightDir;\n  vec4 lightColorAndIntensity;\n  vec4 lightSizeRangeAngle;\n};\nfloat D_GGX(float roughness, float NoH)\n{\n    float m = roughness * roughness;\n    float m2 = m * m;\n    float d = (NoH * m2 - NoH) * NoH + 1.0;\n    return m2 / max(EPSILON, d * d);\n}\nfloat D_GGXMobile(float roughness, float NoH) {\n  float OneMinusNoHSqr = 1.0 - NoH * NoH;\n  float a = roughness * roughness;\n  float n = NoH * a;\n  float p = a / max(EPSILON, OneMinusNoHSqr + n * n);\n  return p * p;\n}\nvoid GetAnisotropicRoughness(float roughness, float anisotropyShape, out float roughnessX, out float roughnessY)\n{\n    float shapeSign = sign(anisotropyShape);\n    anisotropyShape *= anisotropyShape;\n    float r1 = roughness, r2 = roughness;\n    float lerpedRoughness = mix(1.0, 10.0, anisotropyShape);\n    r2 *= shapeSign < 0.0 ? lerpedRoughness : 1.0;\n    r1 *= shapeSign > 0.0 ? lerpedRoughness : 1.0;\n    roughnessX = saturate(r1);\n    roughnessY = saturate(r2);\n}\nfloat D_GGXAniso(float RoughnessX, float RoughnessY, float NoH, vec3 H, vec3 X, vec3 Y)\n{\n    float mx = max(EPSILON_LOWP, RoughnessX * RoughnessX);\n    float my = max(EPSILON_LOWP, RoughnessY * RoughnessY);\n    float XoH = dot(X, H);\n    float YoH = dot(Y, H);\n    float d = XoH * XoH / (mx * mx) + YoH * YoH / (my * my) + NoH * NoH;\n    return 1.0 / max(EPSILON_LOWP, mx * my * d * d);\n}\nvec3 GetAnisotropicReflect(float roughness, float anisotropyShape, vec3 V, vec3 N, vec3 X, vec3 Y)\n{\n    float shapeSign = sign(anisotropyShape);\n    anisotropyShape *= anisotropyShape;\n    anisotropyShape = min(anisotropyShape, 0.4);\n    anisotropyShape *= smoothstep(0.0, 0.03, roughness);\n    vec3 reflectTarget = shapeSign < 0.0 ? mix(N, -Y, anisotropyShape) :\n                         shapeSign > 0.0 ? mix(N, -X, anisotropyShape) : N;\n    return reflect(-V, reflectTarget);\n}\nvec3 IntegratedGFApprox (vec3 specular, float roughness, float NoV) {\n  const vec4 c0 = vec4(-1.0, -0.0275, -0.572, 0.022);\n  const vec4 c1 = vec4(1.0, 0.0425, 1.04, -0.04);\n  vec4 r = roughness * c0 + c1;\n  float a004 = min(r.x * r.x, exp2(-9.28 * NoV)) * r.x + r.y;\n  vec2 AB = vec2(-1.04, 1.04) * a004 + r.zw;\n  AB.y *= clamp(50.0 * specular.g, 0.0, 1.0);\n  return max(vec3(0.0), specular * AB.x + AB.y);\n}\n#define DiffuseCoefficient_EnergyConservation INV_PI\nfloat CalculateFresnelCoefficient(float ior, float NoVSat)\n{\n\tfloat g, c, n, prev, next;\n\tn = ior;\n\tc = ior * NoVSat;\n\tg = sqrt(1.0 + c * c - c);\n\tprev = (g - c) / (g + c);\n\tnext = (c * (g+c) - n*n) / (c * (g-c) + n*n);\n\tprev *= prev;\n\tnext *= next;\n\treturn 0.5 * prev * (1.0 + next);\n}\nfloat SmoothDistAtt (float distSqr, float invSqrAttRadius) {\n  float factor = distSqr * invSqrAttRadius;\n  float smoothFactor = clamp(1.0 - factor * factor, 0.0, 1.0);\n  return smoothFactor * smoothFactor;\n}\nfloat GetDistAtt (float distSqr, float invSqrAttRadius) {\n  float attenuation = 1.0 / max(distSqr, 0.01*0.01);\n  attenuation *= SmoothDistAtt(distSqr , invSqrAttRadius);\n  return attenuation;\n}\nfloat GetAngleAtt (vec3 L, vec3 litDir, float litAngleScale, float litAngleOffset) {\n  float cd = dot(litDir, L);\n  float attenuation = clamp(cd * litAngleScale + litAngleOffset, 0.0, 1.0);\n  return (attenuation * attenuation);\n}\nfloat CalculateDistanceAttenuation(float distToLightSqr, float lightRadius, float lightRange)\n{\n  float litRadiusSqr = lightRadius * lightRadius;\n  float attRadiusSqrInv = 1.0 / max(lightRange, 0.01);\n  attRadiusSqrInv *= attRadiusSqrInv;\n  float edgeAttenuation = litRadiusSqr / max(litRadiusSqr, distToLightSqr);\n  return GetDistAtt(distToLightSqr, attRadiusSqrInv) * edgeAttenuation;\n}\nfloat CalculateAngleAttenuation(vec3 spotLightDir, vec3 L, float cosAngleOuter)\n{\n  float cosInner = max(dot(spotLightDir, L), 0.01);\n  float litAngleScale = 1.0 / max(0.001, cosInner - cosAngleOuter);\n  float litAngleOffset = -cosAngleOuter * litAngleScale;\n  return GetAngleAtt(L, spotLightDir, litAngleScale, litAngleOffset);\n}\nvec3 CalculateRefractDirection(vec3 N, vec3 V, float NoV, float ior)\n{\n  float NoVAbs = abs(NoV);\n  float sideSign = NoV < 0.0 ? -1.0 : 1.0;\n  N *= sideSign;\n  NoV *= sideSign;\n  float sinB = sqrt(1.0 - NoVAbs*NoVAbs) / ior;\n  vec3 X = normalize(-V + N * NoVAbs);\n  vec3 R = -N + X * sinB;\n  return R;\n}\nvec3 CalculateReflectDirection(vec3 N, vec3 V, float NoV)\n{\n  float sideSign = NoV < 0.0 ? -1.0 : 1.0;\n  N *= sideSign;\n  return reflect(-V, N);\n}\nvec3 CalculatePlanarReflectPositionOnPlane(vec3 N, vec3 V, vec3 worldPos, vec4 plane, vec3 cameraPos, float probeReflectedDepth)\n{\n  float distPixelToPlane = -dot(plane, vec4(worldPos, 1.0));\n  plane.w += distPixelToPlane;\n  float distCameraToPlane = abs(-dot(plane, vec4(cameraPos, 1.0)));\n  vec3 planeN = plane.xyz;\n  vec3 virtualCameraPos = cameraPos - 2.0 * distCameraToPlane * planeN;\n  vec3 bumpedR = normalize(reflect(-V, N));\n  vec3 reflectedPointPos = worldPos + probeReflectedDepth * bumpedR;\n  vec3 virtualCameraToReflectedPoint = normalize(reflectedPointPos - virtualCameraPos);\n  float y = distCameraToPlane / max(EPSILON_LOWP, dot(planeN, virtualCameraToReflectedPoint));\n  return virtualCameraPos + y * virtualCameraToReflectedPoint;\n}\nvec4 CalculateBoxProjectedDirection(vec3 R, vec3 worldPos, vec3 cubeCenterPos, vec3 cubeBoxHalfSize)\n{\n  vec3 W = worldPos - cubeCenterPos;\n  vec3 projectedLength = (sign(R) * cubeBoxHalfSize - W) / (R + vec3(EPSILON));\n  float len = min(min(projectedLength.x, projectedLength.y), projectedLength.z);\n  vec3 P = W + len * R;\n  float weight = len < 0.0 ? 0.0 : 1.0;\n  return vec4(P, weight);\n}\nvec3 CalculateDirectDiffuse(in LightingIntermediateData lightingData, in vec4 lightSourceColorAndIntensity)\n{\n    vec3 irradiance = vec3(lightingData.NoLSat) * lightSourceColorAndIntensity.rgb * lightSourceColorAndIntensity.w;\n    return irradiance * DiffuseCoefficient_EnergyConservation;\n}\nvec3 CalculateDirectSpecular(in LightingIntermediateData lightingData, in vec4 lightSourceColorAndIntensity)\n{\n    vec3 irradiance = vec3(lightingData.NoLSat) * lightSourceColorAndIntensity.rgb * lightSourceColorAndIntensity.w;\n    float roughness = lightingData.specularParam;\n  #if CC_SURFACES_LIGHTING_ANISOTROPIC\n      float rT, rB;\n      GetAnisotropicRoughness(roughness, lightingData.anisotropyShape, rT, rB);\n      float calcSpec = D_GGXAniso(rT, rB, lightingData.NoHSat, lightingData.H, lightingData.T, lightingData.B);\n  #else\n    #if CC_SURFACES_USE_LEGACY_COMPATIBLE_LIGHTING\n      float calcSpec = (roughness * 0.25 + 0.25) * D_GGXMobile(roughness, lightingData.NoHSat);\n    #else\n      float calcSpec = D_GGX(roughness, lightingData.NoHSat);\n    #endif\n  #endif\n    return irradiance * calcSpec;\n}\n#if CC_SURFACES_LIGHTING_ANISOTROPIC && CC_SURFACES_LIGHTING_ANISOTROPIC_ENVCONVOLUTION_COUNT\n  vec3 EnvAnisotropicReflection(samplerCube tex, vec3 R, float roughness, float mipCount, float anisotropyShape, vec3 V, vec3 N, vec3 T, vec3 B) {\n      R = normalize(R);\n      float integratedBRDF = 0.0;\n      vec3 envSpec = vec3(0.0);\n      const int SAMPLE_STEP_COUNT = CC_SURFACES_LIGHTING_ANISOTROPIC_ENVCONVOLUTION_COUNT;\n      float sampleAngleRange = PI * abs(anisotropyShape);\n      vec3 anisoDirection = anisotropyShape < 0.0 ? T : B;\n      vec3 ROnNormalPlane = normalize(R - anisoDirection * dot(R, anisoDirection));\n      vec3 stepOffset = normalize(ROnNormalPlane - N) * (sampleAngleRange / float(SAMPLE_STEP_COUNT * 2));\n      for (int i = -SAMPLE_STEP_COUNT; i <= SAMPLE_STEP_COUNT; ++i)\n      {\n          float rT, rB;\n          GetAnisotropicRoughness(roughness, anisotropyShape, rT, rB);\n          #if CC_IBL_CONVOLUTED\n            float coef = abs(float(i)) / float(SAMPLE_STEP_COUNT) * float(SAMPLE_STEP_COUNT);\n          #else\n            float coef = pow(abs(float(i)) / float(SAMPLE_STEP_COUNT), 1.3) * float(SAMPLE_STEP_COUNT);\n          #endif\n          vec3 H = normalize(N + stepOffset * sign(float(i)) * coef);\n          vec3 L = reflect(-V, H);\n          float NoHSat = saturate(dot(N, H));\n          float calcSpec = D_GGXAniso(rT, rB, NoHSat, H, T, B);\n          envSpec += calcSpec * EnvReflection(tex, L, roughness, mipCount);\n          integratedBRDF += calcSpec;\n      }\n      envSpec /= integratedBRDF;\n      return envSpec;\n  }\n#endif\nvec3 SampleEnvironmentSpecular(samplerCube tex, in LightingIntermediateData lightingData, float mipCount)\n{\n    vec3 envSpec = vec3(0.0);\n    float roughness = lightingData.specularParam;\n    #if CC_SURFACES_LIGHTING_ANISOTROPIC && !CC_SURFACES_LIGHTING_ANISOTROPIC_ENVCONVOLUTION_COUNT\n      vec3 R = GetAnisotropicReflect(roughness, lightingData.anisotropyShape, lightingData.V, lightingData.N, lightingData.T, lightingData.B);\n    #else\n      vec3 R = CalculateReflectDirection(lightingData.N, lightingData.V, lightingData.NoV);\n    #endif\n    #if CC_SURFACES_LIGHTING_ANISOTROPIC && CC_SURFACES_LIGHTING_ANISOTROPIC_ENVCONVOLUTION_COUNT\n      envSpec = EnvAnisotropicReflection(tex, R, roughness, mipCount, lightingData.anisotropyShape, lightingData.V, lightingData.N, lightingData.T, lightingData.B);\n    #else\n      #if CC_SURFACES_USE_REFLECTION_DENOISE && !CC_IBL_CONVOLUTED\n        envSpec = EnvReflectionWithMipFiltering(normalize(R), roughness, mipCount, 0.6);\n      #else\n        envSpec = EnvReflection(tex, R, roughness, mipCount);\n      #endif\n    #endif\n    return envSpec;\n}\nvec3 SampleEnvironmentSpecular(samplerCube tex, in LightingIntermediateData lightingData, float mipCount, vec3 worldPos, vec3 cubeCenterPos, vec3 boxHalfSize)\n{\n    vec3 envSpec = vec3(0.0);\n    float roughness = lightingData.specularParam;\n    #if CC_SURFACES_LIGHTING_ANISOTROPIC && !CC_SURFACES_LIGHTING_ANISOTROPIC_ENVCONVOLUTION_COUNT\n      vec3 R = GetAnisotropicReflect(roughness, lightingData.anisotropyShape, lightingData.V, lightingData.N, lightingData.T, lightingData.B);\n    #else\n      vec3 R = CalculateReflectDirection(lightingData.N, lightingData.V, lightingData.NoV);\n    #endif\n    vec4 fixedR = CalculateBoxProjectedDirection(R, worldPos, cubeCenterPos, boxHalfSize);\n    R = fixedR.xyz;\n    vec3 envmap = SampleEnvironmentSpecular(cc_environment, lightingData, cc_ambientGround.w).xyz;\n    #if CC_SURFACES_LIGHTING_ANISOTROPIC && CC_SURFACES_LIGHTING_ANISOTROPIC_ENVCONVOLUTION_COUNT\n      envSpec = EnvAnisotropicReflection(tex, fixedR.xyz, roughness, mipCount, lightingData.anisotropyShape, lightingData.V, lightingData.N, lightingData.T, lightingData.B);\n      envSpec = mix(envmap, envSpec, fixedR.w);\n    #else\n      #if CC_SURFACES_USE_REFLECTION_DENOISE && !CC_IBL_CONVOLUTED\n        envSpec = EnvReflectionWithMipFiltering(normalize(R), roughness, mipCount, 0.6);\n      #else\n        envSpec = mix(envmap, EnvReflection(tex, R, roughness, mipCount), fixedR.w);\n      #endif\n    #endif\n    return envSpec;\n}\nvec3 CalculateEnvironmentDiffuse(in LightingIntermediateData lightingData, float lightIntensity)\n{\n  float fAmb = max(EPSILON, 0.5 - lightingData.N.y * 0.5);\n  vec3 ambDiff = mix(cc_ambientSky.rgb, cc_ambientGround.rgb, fAmb);\n  #if CC_USE_IBL\n    #if CC_USE_DIFFUSEMAP && !CC_USE_LIGHT_PROBE\n      vec3 rotationDir = RotationVecFromAxisY(lightingData.N, cc_surfaceTransform.z, cc_surfaceTransform.w);\n      vec4 diffuseMap = textureCube(cc_diffuseMap, rotationDir);\n      #if CC_USE_DIFFUSEMAP == 2\n        ambDiff = unpackRGBE(diffuseMap);\n      #else\n        ambDiff = SRGBToLinear(diffuseMap.rgb);\n      #endif\n    #endif\n  #endif\n  ambDiff.rgb *= lightIntensity;\n  #if CC_USE_LIGHT_PROBE\n    ambDiff.rgb += SHEvaluate(lightingData.N);\n  #endif\n  return ambDiff.rgb;\n}\nvec3 CalculateEnvironmentSpecular(in LightingIntermediateData lightingData, float lightIntensity)\n{\n  vec3 envSpec = vec3(0.0);\n#if CC_USE_REFLECTION_PROBE\n    vec3 worldPos;\n    #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n    worldPos = unpackHighpData(lightingData.worldPosition, lightingData.worldPosition_fract_part);\n    #else\n    worldPos = lightingData.worldPosition;\n    #endif\n  #if CC_USE_REFLECTION_PROBE == REFLECTION_PROBE_TYPE_CUBE\n    if(FSInput_reflectionProbeId < 0.0){\n        envSpec = SampleEnvironmentSpecular(cc_reflectionProbeCubemap, lightingData, cc_ambientGround.w);\n    }else{\n      vec3 centerPos, boxHalfSize;\n      float mipCount;\n      GetCubeReflectionProbeData(centerPos, boxHalfSize, mipCount, FSInput_reflectionProbeId);\n      envSpec = SampleEnvironmentSpecular(cc_reflectionProbeCubemap, lightingData, mipCount, worldPos, centerPos, boxHalfSize);\n    }\n  #elif CC_USE_REFLECTION_PROBE == REFLECTION_PROBE_TYPE_PLANAR\n    vec3 R = normalize(CalculateReflectDirection(lightingData.N, lightingData.V, lightingData.NoV));\n    if(FSInput_reflectionProbeId < 0.0){\n        vec2 screenUV = GetPlanarReflectScreenUV(worldPos, cc_matViewProj, cc_cameraPos.w, lightingData.V, R);\n        envSpec = unpackRGBE(fragTextureLod(cc_reflectionProbePlanarMap, screenUV, 1.0)).xyz;\n    }else{\n        vec4 plane;\n        float planarReflectionDepthScale, mipCount;\n        GetPlanarReflectionProbeData(plane, planarReflectionDepthScale, mipCount, FSInput_reflectionProbeId);\n        vec3 worldPosOffset = CalculatePlanarReflectPositionOnPlane(lightingData.N, lightingData.V, worldPos, plane, cc_cameraPos.xyz, planarReflectionDepthScale);\n        vec2 screenUV = GetPlanarReflectScreenUV(worldPosOffset, cc_matViewProj, cc_cameraPos.w, lightingData.V, R);\n        envSpec = unpackRGBE(fragTextureLod(cc_reflectionProbePlanarMap, screenUV, mipCount)).xyz;\n    }\n  #endif\n#elif CC_USE_IBL\n    envSpec = SampleEnvironmentSpecular(cc_environment, lightingData, cc_ambientGround.w);\n#endif\n  return envSpec * lightIntensity;\n}\nbool CCSurfacesLightingEnableShadow(in float NoL)\n{\n  return NoL > 0.0;\n}\nfloat CCSurfacesLightingCalculateDistanceAttenuation(in LightingIntermediateData lightingData, in vec4 lightSizeRangeAngle)\n{\n  return CalculateDistanceAttenuation(lightingData.distToLightSqr, lightSizeRangeAngle.x, lightSizeRangeAngle.y);\n}\nfloat CCSurfacesLightingCalculateAngleAttenuation(in LightingIntermediateData lightingData, in vec4 lightSizeRangeAngle, in vec3 spotLightDir)\n{\n  return CalculateAngleAttenuation(spotLightDir, lightingData.L, lightSizeRangeAngle.z);\n}\nvoid CCSurfacesLightingCalculateDirect(out vec3 lightingDiffuse, out vec3 lightingSpecular, in LightingIntermediateData lightingData, in vec4 lightSourceColorAndIntensity)\n{\n#if CC_SURFACES_LIGHTING_CALCULATE_DIFFUSE\n  lightingDiffuse = CalculateDirectDiffuse(lightingData, lightSourceColorAndIntensity);\n#else\n  lightingDiffuse = vec3(0.0);\n#endif\n#if CC_SURFACES_LIGHTING_CALCULATE_SPECULAR\n  lightingSpecular = CalculateDirectSpecular(lightingData, lightSourceColorAndIntensity);\n#else\n  lightingSpecular = vec3(0.0);\n#endif\n}\nvoid CCSurfacesLightingCalculateEnvironment(out vec3 lightingDiffuse, out vec3 lightingSpecular, in LightingIntermediateData lightingData, float lightIntensity)\n{\n#if CC_SURFACES_LIGHTING_CALCULATE_DIFFUSE\n  lightingDiffuse = CalculateEnvironmentDiffuse(lightingData, lightIntensity);\n#else\n  lightingDiffuse = vec3(0.0);\n#endif\n#if CC_SURFACES_LIGHTING_CALCULATE_SPECULAR\n  lightingSpecular = CalculateEnvironmentSpecular(lightingData, lightIntensity);\n#else\n  lightingSpecular = vec3(0.0);\n#endif\n}\n#if CC_SURFACES_LIGHTING_USE_FRESNEL\n  float CCSurfaceLightingCalculateFresnel(in LightingIntermediateData lightingData)\n  {\n    return CalculateFresnelCoefficient(lightingData.ior, abs(lightingData.NoV));\n  }\n#endif\n#if CC_SURFACES_LIGHTING_TRANSMIT_SPECULAR\n  void CCSurfacesLightingCalculateDirectTransmitSpecular(out vec3 lightingSpecular, in LightingIntermediateData lightingData, in vec4 lightSourceColorAndIntensity)\n  {\n    float roughness = lightingData.specularParam;\n    float NoLSat = saturate(dot(lightingData.N, -lightingData.L));\n    vec3 irradiance = NoLSat * lightSourceColorAndIntensity.rgb * lightSourceColorAndIntensity.w;\n    vec3 R = CalculateRefractDirection(lightingData.N, lightingData.V, lightingData.NoV, lightingData.ior);\n    float RoL = dot(lightingData.L, normalize(R));\n    float calcSpec = D_GGX(roughness, saturate(RoL));\n    lightingSpecular = irradiance * calcSpec;\n  }\n  void CCSurfacesLightingCalculateEnvironmentTransmitSpecular(out vec3 lightingSpecular, in LightingIntermediateData lightingData, float lightIntensity)\n  {\n    vec3 envSpec = vec3(0.0);\n    vec3 R = CalculateRefractDirection(lightingData.N, lightingData.V, lightingData.NoV, lightingData.ior);\n    float roughness = lightingData.specularParam;\n  #if CC_USE_REFLECTION_PROBE\n    #if CC_USE_REFLECTION_PROBE == REFLECTION_PROBE_TYPE_CUBE\n      envSpec = EnvReflection(cc_reflectionProbeCubemap, R, roughness, cc_ambientGround.w);\n    #endif\n  #endif\n  #if CC_USE_IBL && CC_USE_REFLECTION_PROBE != REFLECTION_PROBE_TYPE_CUBE\n    envSpec = EnvReflection(cc_environment, R, roughness, cc_ambientGround.w);\n  #endif\n    lightingSpecular = envSpec * lightIntensity;\n    float distance = lightingData.transmitParams.w, inScatterCoef = lightingData.transmitParams.z;\n    vec2 e = lightingData.transmitParams.xy;\n    vec2 extinction = exp(-e * distance * vec2(1.0, inScatterCoef));\n    vec3 inScattered = (1.0 - extinction.y) * lightingData.inScatteringLightColor.rgb;\n    lightingSpecular = lightingSpecular * extinction.x + inScattered;\n  }\n#endif\n#if CC_SURFACES_LIGHTING_TRANSMIT_DIFFUSE\n  void CCSurfacesLightingCalculateDirectTransmitDiffuse(out vec3 transmitDiffuse, in LightingResult lightingResult, in LightingIntermediateData lightingData, in vec4 lightSourceColorAndIntensity)\n  {\n    vec3 backIrradiance = vec3(saturate(-lightingData.NoL)) * lightSourceColorAndIntensity.rgb * lightSourceColorAndIntensity.w;\n    vec3 transmitDiffuse = backIrradiance * DiffuseCoefficient_EnergyConservation;\n    lightingData.transmitParams;\n    lightingData.transmitDiffuseParams;\n    transmitDiffuse = vec3(0.0);\n  }\n  void CCSurfacesLightingCalculateEnvironmentTransmitDiffuse(out vec3 transmitDiffuse, in LightingResult lightingResult, in LightingIntermediateData lightingData, float lightIntensity)\n  {\n    lightingData.N *= -1.0;\n    vec3 backIrradiance = CalculateEnvironmentDiffuse(lightingData, lightIntensity);\n    lightingData.transmitParams;\n    lightingData.transmitDiffuseParams;\n    transmitDiffuse = vec3(0.0);\n  }\n#endif\n#if CC_SURFACES_LIGHTING_TRT\n  #ifndef CC_SURFACES_FRAGMENT_MODIFY_TRT_SPECULAR_COLOR\n    vec3 SurfacesLightingGetTRTSpecularColor(float specBRDF, bool isSaturated)\n    {\n      return vec3(specBRDF);\n    }\n  #endif\n  void CCSurfacesLightingCalculateDirectTRT(out vec3 TRTLighting, in LightingIntermediateData lightingData, in vec4 lightSourceColorAndIntensity)\n  {\n    vec3 unused;\n    CCSurfacesLightingCalculateDirect(unused, TRTLighting, lightingData, vec4(1.0));\n    float brdf = TRTLighting.x;\n    vec3 Color = SurfacesLightingGetTRTSpecularColor(brdf, true);\n    TRTLighting *= Color * lightSourceColorAndIntensity.w;\n  }\n  void CCSurfacesLightingCalculateEnvironmentTRT(out vec3 TRTLighting, in LightingIntermediateData lightingData, float lightIntensity)\n  {\n    vec3 unused;\n    TRTLighting = CalculateEnvironmentSpecular(lightingData, 1.0);\n    float brdf = length(TRTLighting);\n    vec3 Color = SurfacesLightingGetTRTSpecularColor(brdf, false);\n    TRTLighting *= Color * lightIntensity;\n  }\n#endif\n#if CC_SURFACES_LIGHTING_TT\n  void CCSurfacesLightingCalculateDirectTT(inout LightingResult lightingResult, in LightingIntermediateData lightingData, in vec4 lightSourceColorAndIntensity)\n  {\n    lightingResult.diffuseColorWithLightingTT = lightingResult.diffuseColorWithLighting;\n    float w = lightingData.ttIntensity;\n    vec3 scatteredLighting = pow(saturate(lightingData.baseColorTT * w + lightingData.NoLSat) * lightingData.NoLSat, vec3(mix(0.5, 0.5 + lightingData.ttScatterCoef, w)));\n    vec3 ttLighting = scatteredLighting - lightingData.NoLSat;\n    lightingResult.directTT = ttLighting * DiffuseCoefficient_EnergyConservation * lightSourceColorAndIntensity.xyz* lightSourceColorAndIntensity.w;\n  }\n#endif\n#ifndef CC_SURFACES_FRAGMENT_MODIFY_BASECOLOR_AND_TRANSPARENCY\nvec4 SurfacesFragmentModifyBaseColorAndTransparency()\n{\n    return FSInput_vertexColor;\n}\n#endif\n#ifndef CC_SURFACES_FRAGMENT_ALPHA_CLIP_ONLY\n#endif\n#ifndef CC_SURFACES_FRAGMENT_MODIFY_WORLD_NORMAL\nvec3 SurfacesFragmentModifyWorldNormal()\n{\n    return normalize(FSInput_worldNormal);\n}\n#endif\n#ifndef CC_SURFACES_FRAGMENT_MODIFY_WORLD_TANGENT_AND_BINORMAL\nvoid SurfacesFragmentModifyWorldTangentAndBinormal(inout vec3 worldTangent, inout vec3 worldBinormal, vec3 worldNormal)\n{\n    vec3 tangent = FSInput_worldTangent;\n#if CC_SURFACES_USE_TANGENT_SPACE\n    vec3 binormal = normalize(CalculateBinormal(worldNormal.xyz, tangent, FSInput_mirrorNormal));\n    tangent = normalize(cross(binormal, worldNormal));\n#else\n    vec3 binormal = vec3(0.0, 0.0, 0.0);\n#endif\n    worldTangent = tangent;\n    worldBinormal = binormal;\n}\n#endif\n#ifndef CC_SURFACES_FRAGMENT_MODIFY_IOR\nfloat SurfacesFragmentModifyIOR()\n{\n    return 1.0;\n}\n#endif\n#ifndef CC_SURFACES_FRAGMENT_MODIFY_ANISOTROPY_PARAMS\nvec4 SurfacesFragmentModifyAnisotropyParams(out float isRotation)\n{\n    isRotation = 1.0;\n    return vec4(1.0, 0.0, 0.0, 0.0);\n}\n#endif\n#ifndef CC_SURFACES_FRAGMENT_MODIFY_EMISSIVE\nvec3 SurfacesFragmentModifyEmissive()\n{\n    return vec3(0.0, 0.0, 0.0);\n}\n#endif\n#ifndef CC_SURFACES_FRAGMENT_MODIFY_PBRPARAMS\nvec4 SurfacesFragmentModifyPBRParams()\n{\n    return vec4(1.0, 0.5, 0.0, 0.5);\n}\n#endif\n#ifndef CC_SURFACES_FRAGMENT_MODIFY_TRANSMIT_PARAMS\nvoid SurfacesFragmentModifyTransmitParams(out vec4 transmitParams, out vec3 inScatteringLightColor)\n{\n    transmitParams = vec4(0.0, 0.0, 0.0, 0.0);\n    inScatteringLightColor = vec3(0.0);\n}\n#endif\n#ifndef CC_SURFACES_FRAGMENT_MODIFY_TRANSMIT_DIFFUSE_PARAMS\nvec4 SurfacesFragmentModifyTransmitDiffuseParams()\n{\n    return vec4(1.0, 0.0, 0.0, 0.0);\n}\n#endif\n#ifndef CC_SURFACES_FRAGMENT_MODIFY_TRT_PARAMS\nvec4 SurfacesFragmentModifyTRTParams()\n{\n    return vec4(0.2, 0.0, 0.0, 1.0);\n}\n#endif\n#ifndef CC_SURFACES_FRAGMENT_MODIFY_TRT_COLOR\nvec3 SurfacesFragmentModifyTRTColor()\n{\n    return vec3(1.0, 1.0, 1.0);\n}\n#endif\n#ifndef CC_SURFACES_FRAGMENT_MODIFY_TT_PARAMS\nvec4 SurfacesFragmentModifyTTParams()\n{\n    return vec4(0.0, 0.0, 0.0, 1.0);\n}\n#endif\n#ifndef CC_SURFACES_FRAGMENT_MODIFY_TT_COLOR\nvec3 SurfacesFragmentModifyTTColor(in vec3 baseColor, in vec3 trtColor)\n{\n    return vec3(1.0, 1.0, 1.0);\n}\n#endif\n#ifndef CC_SURFACES_FRAGMENT_MODIFY_SHARED_DATA\nvoid SurfacesFragmentModifySharedData(inout SurfacesMaterialData surfaceData)\n{\n}\n#endif\nvoid CCSurfacesFragmentGetMaterialData(inout SurfacesMaterialData surfaceData)\n{\n  #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n  packHighpData(surfaceData.worldPos, surfaceData.worldPos_fract_part, FSInput_worldPos);\n  #else\n  surfaceData.worldPos = FSInput_worldPos;\n  #endif\n  surfaceData.baseColor = SurfacesFragmentModifyBaseColorAndTransparency();\n  surfaceData.worldNormal = SurfacesFragmentModifyWorldNormal();\n  SurfacesFragmentModifyWorldTangentAndBinormal(surfaceData.worldTangent, surfaceData.worldBinormal, surfaceData.worldNormal);\n  surfaceData.ior = SurfacesFragmentModifyIOR();\n#if CC_SURFACES_LIGHTING_ANISOTROPIC\n  float isRotation;\n  vec4 anisotropyParams = SurfacesFragmentModifyAnisotropyParams(isRotation);\n  surfaceData.anisotropyShape = anisotropyParams.x;\n  if (isRotation > 0.0) {\n    RotateTangentAndBinormal(surfaceData.worldTangent, surfaceData.worldBinormal, surfaceData.worldNormal, anisotropyParams.y);\n  } else {\n    vec3 anisoDirTS = anisotropyParams.yzw;\n    vec3 tangentWS = anisoDirTS.x * surfaceData.worldTangent + anisoDirTS.y * surfaceData.worldBinormal + anisoDirTS.z * surfaceData.worldNormal;\n    surfaceData.worldTangent = normalize(tangentWS);\n    surfaceData.worldBinormal = cross(surfaceData.worldNormal, tangentWS);\n  }\n#endif\n  surfaceData.emissive = SurfacesFragmentModifyEmissive();\n  vec4 pbr = SurfacesFragmentModifyPBRParams();\n  surfaceData.ao = pbr.x;\n  surfaceData.roughness = pbr.y;\n  surfaceData.metallic = pbr.z;\n  surfaceData.specularIntensity = pbr.w;\n#if CC_SURFACES_LIGHTING_TRANSMIT_SPECULAR || CC_SURFACES_LIGHTING_TRANSMIT_DIFFUSE\n  SurfacesFragmentModifyTransmitParams(surfaceData.transmitParams, surfaceData.inScatteringLightColor);\n#endif\n#if CC_SURFACES_LIGHTING_TRANSMIT_DIFFUSE\n  surfaceData.transmitDiffuseParams = SurfacesFragmentModifyTransmitDiffuseParams();\n#endif\n  vec3 baseColorTRT = vec3(0.0);\n#if CC_SURFACES_LIGHTING_TRT\n  vec4 trtParams = SurfacesFragmentModifyTRTParams();\n  surfaceData.roughnessTRT = saturate(surfaceData.roughness + trtParams.x);\n  surfaceData.trtIntensity = trtParams.w;\n  surfaceData.baseColorTRT = baseColorTRT = SurfacesFragmentModifyTRTColor();\n  surfaceData.worldTangentTRT = surfaceData.worldTangent;\n  surfaceData.worldBinormalTRT = surfaceData.worldBinormal;\n  RotateTangentAndBinormal(surfaceData.worldTangentTRT, surfaceData.worldBinormalTRT, surfaceData.worldNormal, trtParams.y * PI);\n#endif\n#if CC_SURFACES_LIGHTING_TT\n  vec4 ttParams = SurfacesFragmentModifyTTParams();\n  surfaceData.ttScatterCoef = ttParams.x;\n  surfaceData.ttIntensity = ttParams.w;\n  surfaceData.baseColorTT = SurfacesFragmentModifyTTColor(surfaceData.baseColor.rgb, baseColorTRT);\n#endif\n  SurfacesFragmentModifySharedData(surfaceData);\n#if CC_USE_DEBUG_VIEW == CC_SURFACES_DEBUG_VIEW_COMPOSITE_AND_MISC\n  if (!IS_DEBUG_VIEW_COMPOSITE_ENABLE_NORMAL_MAP) {\n      surfaceData.worldNormal = FSInput_worldNormal;\n      surfaceData.worldTangent = FSInput_worldTangent;\n  }\n#endif\n#if CC_USE_DEBUG_VIEW\n  if (!IS_DEBUG_VIEW_LIGHTING_ENABLE_WITH_ALBEDO)\n  {\n      surfaceData.baseColor.rgb = vec3(1.0);\n      #if CC_SURFACES_LIGHTING_TRT\n        surfaceData.baseColorTRT.rgb = vec3(1.0);\n      #endif\n      #if CC_SURFACES_LIGHTING_TT\n        surfaceData.baseColorTT.rgb = vec3(1.0);\n      #endif\n  }\n#endif\n}\nvec3 CCSurfacesGetDiffuseColor(in SurfacesMaterialData surfaceData)\n{\n  return surfaceData.baseColor.rgb * (1.0 - surfaceData.metallic);\n}\nvec3 CCSurfacesGetSpecularColor(in SurfacesMaterialData surfaceData)\n{\n  float F0 = surfaceData.specularIntensity * 0.08;\n  return mix(vec3(F0), surfaceData.baseColor.rgb, surfaceData.metallic);\n}\nvoid CCSurfacesLightingInitializeColorWithLighting(inout vec3 diffuseColorWithLighting, inout vec3 specularColorWithLighting, in SurfacesMaterialData surfaceData, in LightingIntermediateData lightingData)\n{\n  diffuseColorWithLighting = CCSurfacesGetDiffuseColor(surfaceData);\n  specularColorWithLighting = IntegratedGFApprox(CCSurfacesGetSpecularColor(surfaceData).xyz, surfaceData.roughness, lightingData.NoVAbsSat);\n}\nvoid CCSurfacesLightingCalculateColorWithLighting(inout vec3 diffuseColorWithLighting, inout vec3 specularColorWithLighting, in SurfacesMaterialData surfaceData, in LightingIntermediateData lightingData)\n{\n}\nvoid CCSurfacesInitializeLightingIntermediateData(inout LightingIntermediateData lightingData, in SurfacesMaterialData surfaceData)\n{\n  vec3 worldPos;\n  #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n  worldPos = unpackHighpData(surfaceData.worldPos, surfaceData.worldPos_fract_part);\n  #else\n  worldPos = surfaceData.worldPos;\n  #endif\n  CCSurfacesLightingGetIntermediateData_PerPixel(lightingData, surfaceData.worldNormal, worldPos, surfaceData.worldTangent, surfaceData.worldBinormal\n#if CC_SURFACES_LIGHTING_ANISOTROPIC\n      , surfaceData.anisotropyShape\n#endif\n  );\n  lightingData.specularParam = surfaceData.roughness;\n  lightingData.ior = surfaceData.ior;\n#if CC_SURFACES_LIGHTING_TRANSMIT_SPECULAR || CC_SURFACES_LIGHTING_TRANSMIT_DIFFUSE\n  lightingData.transmitParams = surfaceData.transmitParams;\n  lightingData.inScatteringLightColor = surfaceData.inScatteringLightColor;\n#endif\n#if CC_SURFACES_LIGHTING_TRANSMIT_DIFFUSE\n  lightingData.transmitDiffuseParams = surfaceData.transmitDiffuseParams;\n#endif\n#if CC_SURFACES_LIGHTING_TT\n  lightingData.baseColorTT = surfaceData.baseColorTT;\n  lightingData.ttIntensity = surfaceData.ttIntensity;\n  lightingData.ttScatterCoef = surfaceData.ttScatterCoef;\n#endif\n}\nvoid CCSurfacesLightingCalculateIntermediateData_PerLight(inout LightingIntermediateData lightingData, in SurfacesMaterialData surfaceData, vec3 lightDirWithDist)\n{\n  CCSurfacesLightingGetIntermediateData_PerLight(lightingData, lightDirWithDist);\n}\n#if CC_SURFACES_LIGHTING_TRT\nvoid CCSurfacesGetLightingIntermediateDataTRT(inout LightingIntermediateData lightingDataTRT, in LightingIntermediateData lightingData, in SurfacesMaterialData surfaceData)\n{\n  lightingDataTRT = lightingData;\n  lightingDataTRT.specularParam = surfaceData.roughnessTRT;\n  lightingDataTRT.T = surfaceData.worldTangentTRT;\n  lightingDataTRT.B = surfaceData.worldBinormalTRT;\n}\nvoid CCSurfacesGetSurfacesMaterialDataTRT(inout SurfacesMaterialData surfaceDataTRT, in SurfacesMaterialData surfaceData)\n{\n  surfaceDataTRT = surfaceData;\n  surfaceDataTRT.baseColor = vec4(surfaceData.baseColorTRT, 1.0);\n}\n#endif\nvoid CCSurfacesInitializeLightingResult(inout LightingResult lightingResult, in SurfacesMaterialData surfaceData)\n{\n  lightingResult.ao = surfaceData.ao;\n  lightingResult.emissive = surfaceData.emissive;\n}\nvoid CCSurfacesInitializeLightingResult(inout LightingResult lightingResult)\n{\n  lightingResult.directDiffuse = lightingResult.directSpecular = vec3(0.0);\n#if CC_SURFACES_LIGHTING_TRANSMIT_SPECULAR\n  lightingResult.directTransmitSpecular = vec3(0.0);\n#endif\n#if CC_SURFACES_LIGHTING_TRANSMIT_DIFFUSE\n  lightingResult.directTransmitDiffuse = vec3(0.0);\n#endif\n#if CC_SURFACES_LIGHTING_TRT\n  lightingResult.directTRT = vec3(0.0);\n#endif\n#if CC_SURFACES_LIGHTING_TT\n  lightingResult.directTT = vec3(0.0);\n#endif\n}\nvoid CCSurfacesAccumulateLightingResult(inout LightingResult lightingResultAccumulated, in LightingResult lightingResult)\n{\n  lightingResultAccumulated.directDiffuse += lightingResult.directDiffuse * lightingResult.shadow;\n  lightingResultAccumulated.directSpecular += lightingResult.directSpecular * lightingResult.shadow;\n  #if CC_SURFACES_LIGHTING_TRANSMIT_SPECULAR\n    lightingResultAccumulated.directTransmitSpecular += lightingResult.directTransmitSpecular;\n  #endif\n  #if CC_SURFACES_LIGHTING_TRANSMIT_DIFFUSE\n    lightingResultAccumulated.directTransmitDiffuse += lightingResult.directTransmitDiffuse;\n  #endif\n  #if CC_SURFACES_LIGHTING_TRT\n    lightingResultAccumulated.directTRT += lightingResult.directTRT * lightingResult.shadow;\n  #endif\n  #if CC_SURFACES_LIGHTING_TT\n    lightingResultAccumulated.directTT += lightingResult.directTT * lightingResult.shadow;\n    lightingResultAccumulated.diffuseColorWithLightingTT = lightingResult.diffuseColorWithLightingTT;\n  #endif\n}\n#if CC_PIPELINE_TYPE == 1\n  vec4 CCSurfacesDeferredOutput0(in SurfacesMaterialData surfaceData)\n  {\n    return surfaceData.baseColor;\n  }\n  vec4 CCSurfacesDeferredOutput1(in SurfacesMaterialData surfaceData)\n  {\n    return vec4(float32x3_to_oct(surfaceData.worldNormal), surfaceData.roughness, surfaceData.metallic);\n  }\n  vec4 CCSurfacesDeferredOutput2(in SurfacesMaterialData surfaceData)\n  {\n    return vec4(surfaceData.emissive, surfaceData.ao);\n  }\n#endif\nvec4 CCSurfacesShading(in SurfacesMaterialData surfaceData, in LightingResult lightingResult)\n{\n  vec4 color = vec4(0.0, 0.0, 0.0, surfaceData.baseColor.a);\n#if CC_FORWARD_ADD\n  color.xyz += lightingResult.directDiffuse * lightingResult.diffuseColorWithLighting\n    + lightingResult.directSpecular * lightingResult.specularColorWithLighting;\n  #if CC_SURFACES_LIGHTING_TRANSMIT_SPECULAR\n    + lightingResult.directTransmitSpecular * lightingResult.specularColorWithLighting\n  #endif\n  ;\n#else\n  float fresnel = 1.0;\n  #if CC_SURFACES_LIGHTING_USE_FRESNEL\n    fresnel = lightingResult.fresnel;\n  #endif\n  float invFresnel = 1.0 - fresnel;\n  color.xyz +=\n    ( lightingResult.directDiffuse * lightingResult.diffuseColorWithLighting\n    + lightingResult.directSpecular * lightingResult.specularColorWithLighting * fresnel\n  #if CC_SURFACES_LIGHTING_TRANSMIT_SPECULAR\n    + lightingResult.directTransmitSpecular * lightingResult.specularColorWithLighting * invFresnel\n  #endif\n  #if CC_SURFACES_LIGHTING_TRANSMIT_DIFFUSE\n    + lightingResult.directTransmitDiffuse\n  #endif\n  #if CC_SURFACES_LIGHTING_TRT\n    + lightingResult.directTRT * lightingResult.specularColorWithLightingTRT * surfaceData.trtIntensity * surfaceData.baseColorTRT\n  #endif\n  #if CC_SURFACES_LIGHTING_TT\n    + lightingResult.directTT * lightingResult.diffuseColorWithLightingTT\n  #endif\n    )\n    * lightingResult.shadow;\n  #if CC_SURFACES_USE_LIGHT_MAP == LIGHT_MAP_TYPE_ALL_IN_ONE\n    color.xyz += lightingResult.lightmapColor * lightingResult.diffuseColorWithLighting * lightingResult.shadow;\n  #elif CC_SURFACES_USE_LIGHT_MAP == LIGHT_MAP_TYPE_INDIRECT_OCCLUSION\n    color.xyz += lightingResult.lightmapColor * lightingResult.diffuseColorWithLighting;\n  #endif\n  color.xyz +=\n    ( lightingResult.environmentDiffuse * lightingResult.diffuseColorWithLighting\n    + lightingResult.environmentSpecular * lightingResult.specularColorWithLighting * fresnel\n  #if CC_SURFACES_LIGHTING_TRANSMIT_SPECULAR\n    + lightingResult.environmentTransmitSpecular * lightingResult.specularColorWithLighting * invFresnel\n  #endif\n  #if CC_SURFACES_LIGHTING_TRANSMIT_DIFFUSE\n    + lightingResult.environmentTransmitDiffuse\n  #endif\n  #if CC_SURFACES_LIGHTING_TRT\n    + lightingResult.environmentTRT * lightingResult.specularColorWithLightingTRT * surfaceData.trtIntensity * surfaceData.baseColorTRT\n  #endif\n    )\n    * lightingResult.ao;\n  color.xyz += lightingResult.emissive;\n#endif\n  return color;\n}\n#if CC_USE_DEBUG_VIEW == CC_SURFACES_DEBUG_VIEW_SINGLE\nvoid CCSurfacesDebugViewSurfaceData(inout vec4 color, in SurfacesMaterialData surfaceData)\n{\n    vec4 black = vec4(0.0, 0.0, 0.0, 1.0);\n    float scalar;\n    if (((abs(float(cc_debug_view_mode.x) - float(CC_SURFACES_DEBUG_VIEW_FRAGMENT_NORMAL)) < EPSILON_LOWP) && (cc_surfaceTransform.y != 3.0)))\n        color = vec4(surfaceData.worldNormal * 0.5 + vec3(0.5), 1.0);\n    if (((abs(float(cc_debug_view_mode.x) - float(CC_SURFACES_DEBUG_VIEW_FRAGMENT_TANGENT)) < EPSILON_LOWP) && (cc_surfaceTransform.y != 3.0)))\n    {\n      #if CC_SURFACES_USE_TANGENT_SPACE\n        color = vec4(surfaceData.worldTangent * 0.5 + vec3(0.5), 1.0);\n      #else\n        color = black;\n      #endif\n    }\n    if (((abs(float(cc_debug_view_mode.x) - float(CC_SURFACES_DEBUG_VIEW_FRAGMENT_BINORMAL)) < EPSILON_LOWP) && (cc_surfaceTransform.y != 3.0)))\n    {\n      #if CC_SURFACES_USE_TANGENT_SPACE\n        color = vec4(surfaceData.worldBinormal * 0.5 + vec3(0.5), 1.0);\n      #else\n        color = black;\n      #endif\n    }\n    if (((abs(float(cc_debug_view_mode.x) - float(CC_SURFACES_DEBUG_VIEW_TRANSPARENCY)) < EPSILON_LOWP) && (cc_surfaceTransform.y != 3.0))) {\n        scalar = surfaceData.baseColor.a;\n        color = vec4(scalar, scalar, scalar, 1.0);\n    }\n    if (((abs(float(cc_debug_view_mode.x) - float(CC_SURFACES_DEBUG_VIEW_BASE_COLOR)) < EPSILON_LOWP) && (cc_surfaceTransform.y != 3.0)))\n        color = vec4(LinearToSRGB(surfaceData.baseColor.rgb), 1.0);\n    if (((abs(float(cc_debug_view_mode.x) - float(CC_SURFACES_DEBUG_VIEW_DIFFUSE_COLOR)) < EPSILON_LOWP) && (cc_surfaceTransform.y != 3.0)))\n        color = vec4(LinearToSRGB(CCSurfacesGetDiffuseColor(surfaceData)), 1.0);\n    if (((abs(float(cc_debug_view_mode.x) - float(CC_SURFACES_DEBUG_VIEW_SPECULAR_COLOR)) < EPSILON_LOWP) && (cc_surfaceTransform.y != 3.0)))\n        color = vec4(LinearToSRGB(CCSurfacesGetSpecularColor(surfaceData)), 1.0);\n    if (((abs(float(cc_debug_view_mode.x) - float(CC_SURFACES_DEBUG_VIEW_ROUGHNESS)) < EPSILON_LOWP) && (cc_surfaceTransform.y != 3.0))) {\n        scalar = surfaceData.roughness;\n        color = vec4(scalar, scalar, scalar, 1.0);\n    }\n    if (((abs(float(cc_debug_view_mode.x) - float(CC_SURFACES_DEBUG_VIEW_METALLIC)) < EPSILON_LOWP) && (cc_surfaceTransform.y != 3.0))) {\n        scalar = surfaceData.metallic;\n        color = vec4(scalar, scalar, scalar, 1.0);\n    }\n    if (((abs(float(cc_debug_view_mode.x) - float(CC_SURFACES_DEBUG_VIEW_SPECULAR_INTENSITY)) < EPSILON_LOWP) && (cc_surfaceTransform.y != 3.0))) {\n        scalar = surfaceData.specularIntensity;\n        color = vec4(scalar, scalar, scalar, 1.0);\n    }\n    if (((abs(float(cc_debug_view_mode.x) - float(CC_SURFACES_DEBUG_VIEW_IOR)) < EPSILON_LOWP) && (cc_surfaceTransform.y != 3.0))) {\n        scalar = surfaceData.ior - 1.0;\n        color = vec4(scalar, scalar, scalar, 1.0);\n    }\n}\n#endif\n#if (CC_PIPELINE_TYPE == 0 || CC_FORCE_FORWARD_SHADING)\n  #if CC_FORWARD_ADD && !CC_ENABLE_CLUSTERED_LIGHT_CULLING\n    void CCSurfacesLighting(inout LightingResult lightingResultAccumulated, in SurfacesMaterialData surfaceData, in vec2 shadowBias)\n    {\n      vec3 worldPos;\n      #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n      worldPos = unpackHighpData(surfaceData.worldPos, surfaceData.worldPos_fract_part);\n      #else\n      worldPos = surfaceData.worldPos;\n      #endif\n      CCSurfacesInitializeLightingResult(lightingResultAccumulated);\n      LightingIntermediateData lightingData;\n      CCSurfacesInitializeLightingIntermediateData(lightingData, surfaceData);\n      LightingResult lightingResult;\n      CCSurfacesLightingInitializeColorWithLighting(lightingResult.diffuseColorWithLighting, lightingResult.specularColorWithLighting, surfaceData, lightingData);\n      lightingResultAccumulated.diffuseColorWithLighting = lightingResult.diffuseColorWithLighting;\n      lightingResultAccumulated.specularColorWithLighting = lightingResult.specularColorWithLighting;\n      #if CC_SURFACES_LIGHTING_TRT\n        vec3 diff;\n        SurfacesMaterialData surfaceDataTRT;\n        CCSurfacesGetSurfacesMaterialDataTRT(surfaceDataTRT, surfaceData);\n        CCSurfacesLightingInitializeColorWithLighting(diff, lightingResultAccumulated.specularColorWithLightingTRT, surfaceDataTRT, lightingData);\n      #endif\n      int numLights = CC_PIPELINE_TYPE == 0 ? LIGHTS_PER_PASS : int(cc_lightDir[0].w);\n      for (int i = 0; i < LIGHTS_PER_PASS; i++) {\n        if (i >= numLights) break;\n        CCSurfacesLightingCalculateIntermediateData_PerLight(lightingData, surfaceData, cc_lightPos[i].xyz - worldPos);\n        CCSurfacesLightingCalculateColorWithLighting(lightingResult.diffuseColorWithLighting, lightingResult.specularColorWithLighting, surfaceData, lightingData);\n        vec3 diffuseLighting, specularLighting;\n        CCSurfacesLightingCalculateDirect(diffuseLighting, specularLighting, lightingData, cc_lightColor[i]);\n        float fresnel = 1.0;\n      #if CC_SURFACES_LIGHTING_USE_FRESNEL\n        fresnel = lightingResult.fresnel = CCSurfaceLightingCalculateFresnel(lightingData);\n      #endif\n        float shadow = 1.0;\n      #if CC_RECEIVE_SHADOW && CC_SHADOW_TYPE == 2\n        if (cc_lightPos[i].w > 0.0 && cc_lightSizeRangeAngle[i].w > 0.0) {\n          vec4 shadowPos = vec4(0.0), shadowNDCPosWithBias = vec4(0.0);\n          if (CCSurfacesLightingEnableShadow(lightingData.NoL)) {\n            shadowPos = cc_matLightViewProj * vec4(surfaceData.worldPos, 1.0);\n            shadow = CCSpotShadowFactorBase(shadowNDCPosWithBias, shadowPos, worldPos, shadowBias);\n          }\n          #if CC_SURFACES_LIGHTING_TRANSMIT_DIFFUSE\n            #if CC_SURFACES_LIGHTING_USE_SHADOWMAP_TRANSMIT\n              lightingData.shadowPosAndDepth.xy = shadowNDCPosWithBias.xy;\n              lightingData.shadowPosAndDepth.z = shadowPos.z;\n              lightingData.shadowPosAndDepth.w = GetViewSpaceDepthFromNDCDepth_Perspective(SampleShadowMap(shadowNDCPosWithBias.xyz, cc_spotShadowMap), shadowNDCPosWithBias.w, cc_shadowInvProjDepthInfo.x, cc_shadowInvProjDepthInfo.y);\n            #else\n              lightingData.transmitDiffuseParams.zw = vec2(0.0);\n            #endif\n          #endif\n        }\n      #endif\n      #if CC_USE_DEBUG_VIEW == CC_SURFACES_DEBUG_VIEW_COMPOSITE_AND_MISC\n        if (!IS_DEBUG_VIEW_COMPOSITE_ENABLE_SHADOW) {\n          shadow = 1.0;\n        }\n      #endif\n        lightingResult.shadow = shadow;\n        float distAtt = CCSurfacesLightingCalculateDistanceAttenuation(lightingData, cc_lightSizeRangeAngle[i]);\n        float angleAtt = 1.0;\n        if (cc_lightPos[i].w > 0.0) {\n          angleAtt = CCSurfacesLightingCalculateAngleAttenuation(lightingData, cc_lightSizeRangeAngle[i], -cc_lightDir[i].xyz);\n        }\n        float multiplier = distAtt * angleAtt;\n        lightingResult.directDiffuse = diffuseLighting * multiplier;\n        lightingResult.directSpecular = specularLighting * multiplier * fresnel;\n        #if CC_SURFACES_LIGHTING_TRANSMIT_SPECULAR\n          vec3 transmitSpecularLighting;\n          CCSurfacesLightingCalculateDirectTransmitSpecular(transmitSpecularLighting, lightingData, cc_lightColor[i]);\n          lightingResult.directTransmitSpecular = transmitSpecularLighting * multiplier * (1.0 - fresnel);\n        #endif\n        #if CC_SURFACES_LIGHTING_TRANSMIT_DIFFUSE\n          lightingResult.directTransmitDiffuse = CCSurfacesLightingCalculateDirectTransmitDiffuse(lightingResult, lightingData, cc_lightColor[i]);\n        #endif\n        #if CC_SURFACES_LIGHTING_TRT\n          LightingIntermediateData lightingDataTRT;\n          CCSurfacesGetLightingIntermediateDataTRT(lightingDataTRT, lightingData, surfaceData);\n          CCSurfacesLightingCalculateDirectTRT(lightingResult.directTRT, lightingDataTRT, cc_lightColor[i]);\n          lightingResult.directTRT *= multiplier * fresnel;\n        #endif\n        #if CC_SURFACES_LIGHTING_TT\n          CCSurfacesLightingCalculateDirectTT(lightingResult, lightingData, cc_lightColor[i]);\n        #endif\n        #ifdef CC_SURFACES_LIGHTING_MODIFY_FINAL_RESULT\n          LightingMiscData miscData;\n          miscData.lightType = cc_lightPos[i].w;\n          miscData.lightPos = cc_lightPos[i].xyz;\n          miscData.lightDir = cc_lightDir[i].xyz;\n          miscData.lightColorAndIntensity = cc_lightColor[i];\n          miscData.lightSizeRangeAngle = cc_lightSizeRangeAngle[i];\n          SurfacesLightingModifyFinalResult(lightingResult, lightingData, surfaceData, miscData);\n        #endif\n        CCSurfacesAccumulateLightingResult(lightingResultAccumulated, lightingResult);\n      }\n    }\n  #else\n    void CCSurfacesLighting(inout LightingResult lightingResult, in SurfacesMaterialData surfaceData, in vec2 shadowBias)\n    {\n      LightingIntermediateData lightingData;\n      CCSurfacesInitializeLightingIntermediateData(lightingData, surfaceData);\n      CCSurfacesInitializeLightingResult(lightingResult, surfaceData);\n      CCSurfacesLightingInitializeColorWithLighting(lightingResult.diffuseColorWithLighting, lightingResult.specularColorWithLighting, surfaceData, lightingData);\n      CCSurfacesLightingCalculateIntermediateData_PerLight(lightingData, surfaceData, -cc_mainLitDir.xyz);\n      lightingResult.shadow = 1.0;\n      #if CC_RECEIVE_SHADOW && CC_SHADOW_TYPE == 2\n        if (cc_mainLitDir.w > 0.0) {\n          vec4 shadowPos = vec4(0.0), shadowNDCPosWithBias = vec4(0.0);\n          if (CCSurfacesLightingEnableShadow(lightingData.NoL)) {\n            #if CC_DIR_LIGHT_SHADOW_TYPE == 2\n              lightingResult.shadow = CCCSMFactorBase(shadowPos, shadowNDCPosWithBias, surfaceData.worldPos, lightingData.N, shadowBias);\n            #endif\n            #if CC_DIR_LIGHT_SHADOW_TYPE == 1\n              shadowPos = cc_matLightViewProj * vec4(surfaceData.worldPos, 1.0);\n              lightingResult.shadow = CCShadowFactorBase(shadowPos, lightingData.N, shadowBias);\n            #endif\n          }\n          #if CC_SURFACES_LIGHTING_TRANSMIT_DIFFUSE\n            #if CC_SURFACES_LIGHTING_USE_SHADOWMAP_TRANSMIT\n              lightingData.shadowPosAndDepth.xy = shadowNDCPosWithBias.xy;\n              lightingData.shadowPosAndDepth.z = shadowPos.z;\n              lightingData.shadowPosAndDepth.w = GetViewSpaceDepthFromNDCDepth_Orthgraphic(SampleShadowMap(shadowNDCPosWithBias.xyz, cc_shadowMap), cc_shadowProjDepthInfo.x, cc_shadowProjDepthInfo.y);\n            #else\n              lightingData.transmitDiffuseParams.zw = vec2(0.0);\n            #endif\n          #endif\n        }\n      #endif\n      lightingResult.lightmapColor = vec3(0.0);\n      #if CC_SURFACES_USE_LIGHT_MAP && !CC_FORWARD_ADD\n\t\t    float lightmapShadow, lightmapAO;\n        GetLightMapColor(lightingResult.lightmapColor, lightmapShadow, lightmapAO, cc_lightingMap, FSInput_lightMapUV.xy, FSInput_lightMapUV.z, surfaceData.worldNormal);\n        #if CC_SURFACES_USE_LIGHT_MAP == LIGHT_MAP_TYPE_INDIRECT_OCCLUSION\n          lightingResult.shadow *= lightmapShadow;\n          lightingResult.ao *= lightmapAO;\n        #endif\n      #endif\n      lightingResult.directDiffuse = lightingResult.directSpecular = vec3(0.0);\n      #if !CC_DISABLE_DIRECTIONAL_LIGHT && !CC_FORWARD_ADD\n        CCSurfacesLightingCalculateColorWithLighting(lightingResult.diffuseColorWithLighting, lightingResult.specularColorWithLighting, surfaceData, lightingData);\n        CCSurfacesLightingCalculateDirect(lightingResult.directDiffuse, lightingResult.directSpecular, lightingData, cc_mainLitColor);\n      #endif\n      CCSurfacesLightingCalculateEnvironment(lightingResult.environmentDiffuse, lightingResult.environmentSpecular, lightingData, cc_ambientSky.w);\n      #if CC_SURFACES_LIGHTING_USE_FRESNEL\n        lightingResult.fresnel = CCSurfaceLightingCalculateFresnel(lightingData);\n      #endif\n      #if CC_SURFACES_LIGHTING_TRANSMIT_SPECULAR\n        CCSurfacesLightingCalculateDirectTransmitSpecular(lightingResult.directTransmitSpecular, lightingData, cc_mainLitColor);\n        CCSurfacesLightingCalculateEnvironmentTransmitSpecular(lightingResult.environmentTransmitSpecular, lightingData, cc_ambientSky.w);\n      #endif\n      #if CC_SURFACES_LIGHTING_TRANSMIT_DIFFUSE\n        CCSurfacesLightingCalculateDirectTransmitDiffuse(lightingResult.directTransmitDiffuse, lightingResult, lightingData, cc_mainLitColor);\n        CCSurfacesLightingCalculateEnvironmentTransmitDiffuse(lightingResult.environmentTransmitDiffuse, lightingResult, lightingData, cc_ambientSky.w);\n      #endif\n      #if CC_SURFACES_LIGHTING_TRT\n        LightingIntermediateData lightingDataTRT;\n        CCSurfacesGetLightingIntermediateDataTRT(lightingDataTRT, lightingData, surfaceData);\n        CCSurfacesLightingCalculateDirectTRT(lightingResult.directTRT, lightingDataTRT, cc_mainLitColor);\n        CCSurfacesLightingCalculateEnvironmentTRT(lightingResult.environmentTRT, lightingDataTRT, cc_ambientSky.w);\n        vec3 diff;\n        SurfacesMaterialData surfaceDataTRT;\n        CCSurfacesGetSurfacesMaterialDataTRT(surfaceDataTRT, surfaceData);\n        CCSurfacesLightingInitializeColorWithLighting(diff, lightingResult.specularColorWithLightingTRT, surfaceDataTRT, lightingDataTRT);\n      #endif\n      #if CC_SURFACES_LIGHTING_TT\n        CCSurfacesLightingCalculateDirectTT(lightingResult, lightingData, cc_mainLitColor);\n      #endif\n      #ifdef CC_SURFACES_LIGHTING_MODIFY_FINAL_RESULT\n        LightingMiscData miscData;\n        miscData.lightType = LIGHT_TYPE_DIRECTIONAL;\n        miscData.lightPos = vec3(0.0);\n        miscData.lightDir = cc_mainLitDir.xyz;\n        miscData.lightColorAndIntensity = cc_mainLitColor;\n        miscData.lightSizeRangeAngle = vec4(0.0, 0.0, 0.0, 0.0);\n        SurfacesLightingModifyFinalResult(lightingResult, lightingData, surfaceData, miscData);\n      #endif\n    }\n    #if CC_ENABLE_CLUSTERED_LIGHT_CULLING\n    #endif\n  #endif\n#endif\nvec4 CCSurfacesDebugDisplayInvalidNumber(vec4 color)\n{\n  float index = mod(cc_time.x * 10.0, 2.0);\n  vec4 error = index < 1.0 ? vec4(1.0, 0.0, 0.2, 1.0) : vec4(0.0, 1.0, 0.2, 1.0);\n  return (isnans(color.rgb) || isinfs(color.rgb)) ? error : color;\n}\nvec4 CCSurfacesDebugDisplayInvalidInputData(vec4 color, vec3 data)\n{\n  float index = mod(cc_time.x * 10.0, 2.0);\n  vec4 error = index < 1.0 ? vec4(1.0, 0.0, 0.2, 1.0) : vec4(0.0, 1.0, 0.2, 1.0);\n  return (isnans(data) || isinfs(data)) ? error : color;\n}\n#if CC_USE_DEBUG_VIEW == CC_SURFACES_DEBUG_VIEW_SINGLE && !CC_FORWARD_ADD\n  void CCSurfacesDebugViewMeshData(inout vec4 color)\n  {\n    vec4 white = vec4(1.0, 1.0, 1.0, 1.0);\n    vec4 black = vec4(0.0, 0.0, 0.0, 1.0);\n    if (((abs(float(cc_debug_view_mode.x) - float(CC_SURFACES_DEBUG_VIEW_VERTEX_COLOR)) < EPSILON_LOWP) && (cc_surfaceTransform.y != 3.0)))\n    {\n      #if CC_SURFACES_USE_VERTEX_COLOR\n        color = FSInput_vertexColor;\n      #else\n        color = white;\n      #endif\n    }\n    if (((abs(float(cc_debug_view_mode.x) - float(CC_SURFACES_DEBUG_VIEW_VERTEX_NORMAL)) < EPSILON_LOWP) && (cc_surfaceTransform.y != 3.0)))\n        color = vec4(FSInput_worldNormal * 0.5 + vec3(0.5), 1.0);\n    if (((abs(float(cc_debug_view_mode.x) - float(CC_SURFACES_DEBUG_VIEW_VERTEX_TANGENT)) < EPSILON_LOWP) && (cc_surfaceTransform.y != 3.0)))\n    {\n      #if CC_SURFACES_USE_TANGENT_SPACE\n        color = vec4(FSInput_worldTangent * 0.5 + vec3(0.5), 1.0);\n      #else\n        color = black;\n      #endif\n    }\n    if (((abs(float(cc_debug_view_mode.x) - float(CC_SURFACES_DEBUG_VIEW_VERTEX_MIRROR)) < EPSILON_LOWP) && (cc_surfaceTransform.y != 3.0)))\n    {\n      #if CC_SURFACES_USE_TANGENT_SPACE\n        float sign = FSInput_mirrorNormal * 0.5 + 0.5;\n        color = vec4(sign, sign, sign, 1.0);\n      #else\n        color = black;\n      #endif\n    }\n    if (((abs(float(cc_debug_view_mode.x) - float(CC_SURFACES_DEBUG_VIEW_FACE_SIDE)) < EPSILON_LOWP) && (cc_surfaceTransform.y != 3.0)))\n    {\n        float scalar = clamp(FSInput_faceSideSign, 0.0, 1.0);\n        color = vec4(scalar, scalar, scalar, 1.0);\n    }\n    if (((abs(float(cc_debug_view_mode.x) - float(CC_SURFACES_DEBUG_VIEW_UV0)) < EPSILON_LOWP) && (cc_surfaceTransform.y != 3.0)))\n        color = vec4(FSInput_texcoord.xy, 0.0, 1.0);\n    if (((abs(float(cc_debug_view_mode.x) - float(CC_SURFACES_DEBUG_VIEW_UV1)) < EPSILON_LOWP) && (cc_surfaceTransform.y != 3.0)))\n      color = vec4(FSInput_texcoord1.xy, 0.0, 1.0);\n    if (((abs(float(cc_debug_view_mode.x) - float(CC_SURFACES_DEBUG_VIEW_UVLIGHTMAP)) < EPSILON_LOWP) && (cc_surfaceTransform.y != 3.0)))\n    {\n      #if CC_USE_LIGHTMAP && !CC_FORWARD_ADD\n        color = vec4(FSInput_lightMapUV.xy, 0.0, 1.0);\n      #else\n        color = vec4(0.0, 0.0, 0.0, 1.0);\n      #endif\n    }\n    if (((abs(float(cc_debug_view_mode.x) - float(CC_SURFACES_DEBUG_VIEW_PROJ_DEPTH)) < EPSILON_LOWP) && (cc_surfaceTransform.y != 3.0)))\n    {\n      vec4 clipPos = cc_matProj * cc_matView * vec4(FSInput_worldPos.xyz, 1.0);\n      float depth = clipPos.z / clipPos.w;\n      color = vec4(depth, depth, depth, 1.0);\n    }\n    if (((abs(float(cc_debug_view_mode.x) - float(CC_SURFACES_DEBUG_VIEW_LINEAR_DEPTH)) < EPSILON_LOWP) && (cc_surfaceTransform.y != 3.0)))\n    {\n      vec4 viewPos = cc_matView * vec4(FSInput_worldPos.xyz, 1.0);\n      float depth = (-viewPos.z - cc_nearFar.x) / cc_nearFar.y;\n      color = vec4(depth, depth, depth, 1.0);\n    }\n    if (((abs(float(cc_debug_view_mode.x) - float(CC_SURFACES_DEBUG_VIEW_WORLD_POS)) < EPSILON_LOWP) && (cc_surfaceTransform.y != 3.0)))\n      color = vec4(FSInput_worldPos.xyz, 1.0);\n  }\n#endif\n#if CC_USE_DEBUG_VIEW == CC_SURFACES_DEBUG_VIEW_SINGLE\n  bool CCSurfacesDebugViewLightingResult(inout vec4 color, in LightingResult lightingResult)\n  {\n    bool isSRGBColor = false;\n    if (((abs(float(cc_debug_view_mode.x) - float(CC_SURFACES_DEBUG_VIEW_DIRECT_DIFFUSE)) < EPSILON_LOWP) && (cc_surfaceTransform.y != 3.0)))\n    {\n        color.rgb = lightingResult.directDiffuse * lightingResult.diffuseColorWithLighting;\n        isSRGBColor = true;\n    }\n    if (((abs(float(cc_debug_view_mode.x) - float(CC_SURFACES_DEBUG_VIEW_DIRECT_SPECULAR)) < EPSILON_LOWP) && (cc_surfaceTransform.y != 3.0)))\n    {\n        color.rgb = lightingResult.directSpecular * lightingResult.specularColorWithLighting;\n        isSRGBColor = true;\n    }\n    if (((abs(float(cc_debug_view_mode.x) - float(CC_SURFACES_DEBUG_VIEW_DIRECT_ALL)) < EPSILON_LOWP) && (cc_surfaceTransform.y != 3.0)))\n    {\n        color.rgb = lightingResult.directDiffuse * lightingResult.diffuseColorWithLighting + lightingResult.directSpecular * lightingResult.specularColorWithLighting;\n        isSRGBColor = true;\n    }\n    if (((abs(float(cc_debug_view_mode.x) - float(CC_SURFACES_DEBUG_VIEW_ENV_DIFFUSE)) < EPSILON_LOWP) && (cc_surfaceTransform.y != 3.0)))\n    {\n        color.rgb = lightingResult.environmentDiffuse * lightingResult.diffuseColorWithLighting;\n        isSRGBColor = true;\n    }\n    if (((abs(float(cc_debug_view_mode.x) - float(CC_SURFACES_DEBUG_VIEW_ENV_SPECULAR)) < EPSILON_LOWP) && (cc_surfaceTransform.y != 3.0)))\n    {\n        color.rgb = lightingResult.environmentSpecular * lightingResult.specularColorWithLighting;\n        isSRGBColor = true;\n    }\n    if (((abs(float(cc_debug_view_mode.x) - float(CC_SURFACES_DEBUG_VIEW_ENV_ALL)) < EPSILON_LOWP) && (cc_surfaceTransform.y != 3.0)))\n    {\n        color.rgb = lightingResult.environmentDiffuse * lightingResult.diffuseColorWithLighting + lightingResult.environmentSpecular * lightingResult.specularColorWithLighting;\n        isSRGBColor = true;\n    }\n    if (((abs(float(cc_debug_view_mode.x) - float(CC_SURFACES_DEBUG_VIEW_LIGHT_MAP)) < EPSILON_LOWP) && (cc_surfaceTransform.y != 3.0)))\n    {\n        color.rgb = lightingResult.lightmapColor;\n        isSRGBColor = true;\n    }\n    if (((abs(float(cc_debug_view_mode.x) - float(CC_SURFACES_DEBUG_VIEW_EMISSIVE)) < EPSILON_LOWP) && (cc_surfaceTransform.y != 3.0)))\n    {\n        color.rgb = lightingResult.emissive;\n        isSRGBColor = true;\n    }\n    if (((abs(float(cc_debug_view_mode.x) - float(CC_SURFACES_DEBUG_VIEW_AO)) < EPSILON_LOWP) && (cc_surfaceTransform.y != 3.0)))\n    {\n        color.rgb = vec3(lightingResult.ao);\n        isSRGBColor = false;\n    }\n    if (((abs(float(cc_debug_view_mode.x) - float(CC_SURFACES_DEBUG_VIEW_SHADOW)) < EPSILON_LOWP) && (cc_surfaceTransform.y != 3.0)))\n    {\n        color.rgb = vec3(lightingResult.shadow);\n        isSRGBColor = false;\n    }\n    float fresnel = 0.0;\n    vec3 directTransmitSpecular = vec3(0.0), environmentTransmitSpecular = vec3(0.0);\n    vec3 directTransmitDiffuse = vec3(0.0), environmentTransmitDiffuse = vec3(0.0);\n    vec3 diffuseColorWithLightingTT = vec3(0.0), specularColorWithLightingTRT = vec3(0.0);\n    vec3 directTRT = vec3(0.0), environmentTRT = vec3(0.0);\n  #if CC_SURFACES_LIGHTING_USE_FRESNEL\n    fresnel = lightingResult.fresnel;\n  #endif\n  #if CC_SURFACES_LIGHTING_TRANSMIT_SPECULAR\n    directTransmitSpecular = lightingResult.directTransmitSpecular;\n    environmentTransmitSpecular = lightingResult.environmentTransmitSpecular;\n  #endif\n  #if CC_SURFACES_LIGHTING_TRANSMIT_DIFFUSE\n    directTransmitDiffuse = lightingResult.directTransmitDiffuse;\n    environmentTransmitDiffuse = lightingResult.environmentTransmitDiffuse;\n  #endif\n  #if CC_SURFACES_LIGHTING_TRT\n    directTRT = lightingResult.directTRT;\n    environmentTRT = lightingResult.environmentTRT;\n    specularColorWithLightingTRT = lightingResult.specularColorWithLightingTRT;\n  #endif\n    if (((abs(float(cc_debug_view_mode.x) - float(CC_SURFACES_DEBUG_VIEW_FRESNEL)) < EPSILON_LOWP) && (cc_surfaceTransform.y != 3.0)))\n    {\n        color.rgb = vec3(fresnel);\n        isSRGBColor = false;\n    }\n    if (((abs(float(cc_debug_view_mode.x) - float(CC_SURFACES_DEBUG_VIEW_TRANSMIT_DIRECT_SPECULAR)) < EPSILON_LOWP) && (cc_surfaceTransform.y != 3.0)))\n    {\n        color.rgb = directTransmitSpecular;\n        isSRGBColor = true;\n    }\n    if (((abs(float(cc_debug_view_mode.x) - float(CC_SURFACES_DEBUG_VIEW_TRANSMIT_ENV_SPECULAR)) < EPSILON_LOWP) && (cc_surfaceTransform.y != 3.0)))\n    {\n        color.rgb = environmentTransmitSpecular;\n        isSRGBColor = true;\n    }\n    if (((abs(float(cc_debug_view_mode.x) - float(CC_SURFACES_DEBUG_VIEW_TRANSMIT_DIRECT_DIFFUSE)) < EPSILON_LOWP) && (cc_surfaceTransform.y != 3.0)))\n    {\n        color.rgb = directTransmitDiffuse;\n        isSRGBColor = true;\n    }\n    if (((abs(float(cc_debug_view_mode.x) - float(CC_SURFACES_DEBUG_VIEW_TRANSMIT_ENV_DIFFUSE)) < EPSILON_LOWP) && (cc_surfaceTransform.y != 3.0)))\n    {\n        color.rgb = environmentTransmitDiffuse;\n        isSRGBColor = true;\n    }\n    if (((abs(float(cc_debug_view_mode.x) - float(CC_SURFACES_DEBUG_VIEW_TRANSMIT_ALL)) < EPSILON_LOWP) && (cc_surfaceTransform.y != 3.0)))\n    {\n        color.rgb = directTransmitSpecular + environmentTransmitSpecular + directTransmitDiffuse + environmentTransmitDiffuse;\n        isSRGBColor = true;\n    }\n    if (((abs(float(cc_debug_view_mode.x) - float(CC_SURFACES_DEBUG_VIEW_TRT_DIRECT)) < EPSILON_LOWP) && (cc_surfaceTransform.y != 3.0)))\n    {\n        color.rgb = directTRT * specularColorWithLightingTRT;\n        isSRGBColor = true;\n    }\n    if (((abs(float(cc_debug_view_mode.x) - float(CC_SURFACES_DEBUG_VIEW_TRT_ENVIRONMENT)) < EPSILON_LOWP) && (cc_surfaceTransform.y != 3.0)))\n    {\n        color.rgb = environmentTRT * specularColorWithLightingTRT;\n        isSRGBColor = true;\n    }\n    if (((abs(float(cc_debug_view_mode.x) - float(CC_SURFACES_DEBUG_VIEW_TRT_ALL)) < EPSILON_LOWP) && (cc_surfaceTransform.y != 3.0)))\n    {\n        color.rgb = (directTRT + environmentTRT) * specularColorWithLightingTRT;\n        isSRGBColor = true;\n    }\n    return isSRGBColor;\n  }\n#endif\n#if CC_USE_DEBUG_VIEW == CC_SURFACES_DEBUG_VIEW_COMPOSITE_AND_MISC\n  void CCSurfacesDebugViewCompositeLightingResult(inout LightingResult lightingResult)\n  {\n    if (!IS_DEBUG_VIEW_COMPOSITE_ENABLE_DIRECT_DIFFUSE)\n      lightingResult.directDiffuse = vec3(0.0);\n    if (!IS_DEBUG_VIEW_COMPOSITE_ENABLE_DIRECT_SPECULAR)\n      lightingResult.directSpecular = vec3(0.0);\n    if (!IS_DEBUG_VIEW_COMPOSITE_ENABLE_ENV_DIFFUSE)\n      lightingResult.environmentDiffuse = vec3(0.0);\n    if (!IS_DEBUG_VIEW_COMPOSITE_ENABLE_ENV_SPECULAR)\n      lightingResult.environmentSpecular = vec3(0.0);\n  #if CC_SURFACES_LIGHTING_TRANSMIT_DIFFUSE\n    if (!IS_DEBUG_VIEW_COMPOSITE_ENABLE_TRANSMIT_DIFFUSE)\n      lightingResult.directTransmitDiffuse = lightingResult.environmentTransmitDiffuse = vec3(0.0);\n  #endif\n  #if CC_SURFACES_LIGHTING_TRANSMIT_SPECULAR\n    if (!IS_DEBUG_VIEW_COMPOSITE_ENABLE_TRANSMIT_SPECULAR)\n      lightingResult.directTransmitSpecular = lightingResult.environmentTransmitSpecular = vec3(0.0);\n  #endif\n  #if CC_SURFACES_LIGHTING_TRT\n    if (!IS_DEBUG_VIEW_COMPOSITE_ENABLE_TRT)\n        lightingResult.directTRT = lightingResult.environmentTRT = vec3(0.0);\n  #endif\n  #if CC_SURFACES_LIGHTING_TT\n    if (!IS_DEBUG_VIEW_COMPOSITE_ENABLE_TT)\n        lightingResult.directTT = vec3(0.0);\n  #endif\n    if (!IS_DEBUG_VIEW_COMPOSITE_ENABLE_EMISSIVE)\n      lightingResult.emissive = vec3(0.0);\n    if (!IS_DEBUG_VIEW_COMPOSITE_ENABLE_LIGHT_MAP)\n      lightingResult.lightmapColor = vec3(0.0);\n    if (!IS_DEBUG_VIEW_COMPOSITE_ENABLE_SHADOW)\n      lightingResult.shadow = 1.0;\n    if (!IS_DEBUG_VIEW_COMPOSITE_ENABLE_AO)\n      lightingResult.ao = 1.0;\n  #if CC_SURFACES_LIGHTING_USE_FRESNEL\n    if (!IS_DEBUG_VIEW_COMPOSITE_ENABLE_FRESNEL)\n      lightingResult.fresnel = 1.0;\n  #endif\n  }\n#endif\n#if (CC_PIPELINE_TYPE == 0 || CC_FORCE_FORWARD_SHADING)\n  void main()  {\n  #if CC_DISABLE_STRUCTURE_IN_FRAGMENT_SHADER\n    float NoL = dot(-cc_mainLitDir.xyz, FSInput_worldNormal.xyz);\n    vec4 color = SurfacesFragmentModifyBaseColorAndTransparency();\n  #else\n    SurfacesMaterialData surfaceData;\n    CCSurfacesFragmentGetMaterialData(surfaceData);\n    vec2 shadowBias = vec2(0.0);\n    vec3 colDebugCSMLayer = vec3(1.0);\n    #if CC_RECEIVE_SHADOW\n      shadowBias = FSInput_shadowBias;\n      #if !CC_FORWARD_ADD\n        #if CC_USE_DEBUG_VIEW && CC_SURFACES_ENABLE_DEBUG_VIEW\n          if (IS_DEBUG_VIEW_MISC_ENABLE_CSM_LAYER_COLORATION)\n          {\n              vec4 csmPos;\n              vec4 shadowProjDepthInfo, shadowProjInfo;\n              vec3 shadowViewDir0, shadowViewDir1, shadowViewDir2;\n              int csmLayer = -1;\n              csmLayer = CCGetCSMLevel(csmPos, shadowProjDepthInfo, shadowProjInfo, shadowViewDir0, shadowViewDir1, shadowViewDir2, surfaceData.worldPos);\n              bool OutOfRange = csmLayer < 0;\n              if (OutOfRange)\n                  colDebugCSMLayer = vec3(1.0);\n              else if (csmLayer == 0)\n                  colDebugCSMLayer = vec3(1.0, 0.0, 0.0);\n              else if (csmLayer == 1)\n                  colDebugCSMLayer = vec3(0.0, 1.0, 0.0);\n              else if (csmLayer == 2)\n                  colDebugCSMLayer = vec3(0.0, 0.0, 1.0);\n              else if (csmLayer == 3)\n                  colDebugCSMLayer = vec3(0.0, 1.0, 1.0);\n          }\n        #endif\n      #endif\n    #endif\n    #if !CC_FORWARD_ADD\n      float fogFactor = 1.0;\n      #if CC_USE_FOG != 4\n        #if !CC_USE_ACCURATE_FOG\n          fogFactor = FSInput_fogFactor;\n        #else\n          CC_TRANSFER_FOG_BASE(vec4(FSInput_worldPos, 1.0), fogFactor);\n        #endif\n      #endif\n      #if CC_USE_DEBUG_VIEW == CC_SURFACES_DEBUG_VIEW_COMPOSITE_AND_MISC && CC_SURFACES_ENABLE_DEBUG_VIEW\n        if (!IS_DEBUG_VIEW_COMPOSITE_ENABLE_FOG) {\n            fogFactor = 1.0;\n        }\n      #endif\n    #endif\n    LightingResult lightingResult;\n    CCSurfacesLighting(lightingResult, surfaceData, shadowBias);\n    #if CC_USE_DEBUG_VIEW == CC_SURFACES_DEBUG_VIEW_SINGLE && CC_SURFACES_ENABLE_DEBUG_VIEW\n      vec4 debugColor = vec4(0.0, 0.0, 0.0, 1.0);\n      float materialTransparency = CCSurfacesShading(surfaceData, lightingResult).a;\n      #if !CC_FORWARD_ADD\n        CCSurfacesDebugViewMeshData(debugColor);\n        CCSurfacesDebugViewSurfaceData(debugColor, surfaceData);\n        if (((abs(float(cc_debug_view_mode.x) - float(CC_SURFACES_DEBUG_VIEW_FOG)) < EPSILON_LOWP) && (cc_surfaceTransform.y != 3.0)))\n        {\n          debugColor.rgb = vec3(1.0 - fogFactor);\n        }\n      #endif\n      #if CC_FORWARD_ADD\n        if (((abs(float(cc_debug_view_mode.x) - float(CC_SURFACES_DEBUG_VIEW_DIRECT_DIFFUSE)) < EPSILON_LOWP) && (cc_surfaceTransform.y != 3.0)) || ((abs(float(cc_debug_view_mode.x) - float(CC_SURFACES_DEBUG_VIEW_DIRECT_SPECULAR)) < EPSILON_LOWP) && (cc_surfaceTransform.y != 3.0)) || ((abs(float(cc_debug_view_mode.x) - float(CC_SURFACES_DEBUG_VIEW_DIRECT_ALL)) < EPSILON_LOWP) && (cc_surfaceTransform.y != 3.0)))\n      #endif\n        {\n            if (CCSurfacesDebugViewLightingResult(debugColor, lightingResult))\n            {\n              debugColor.a = materialTransparency;\n              #if CC_USE_HDR\n                if (IS_DEBUG_VIEW_COMPOSITE_ENABLE_TONE_MAPPING)\n                    debugColor.rgb = ACESToneMap(debugColor.rgb);\n              #endif\n              if (IS_DEBUG_VIEW_COMPOSITE_ENABLE_GAMMA_CORRECTION)\n                  debugColor.rgb = LinearToSRGB(debugColor.rgb);\n            }\n        }\n      if (IS_DEBUG_VIEW_ENABLE_WITH_CAMERA) {\n        gl_FragData[0] = debugColor;\n        return;\n      }\n    #elif CC_USE_DEBUG_VIEW == CC_SURFACES_DEBUG_VIEW_COMPOSITE_AND_MISC && CC_SURFACES_ENABLE_DEBUG_VIEW\n      CCSurfacesDebugViewCompositeLightingResult(lightingResult);\n    #endif\n    vec4 color = CCSurfacesShading(surfaceData, lightingResult);\n    #if CC_USE_DEBUG_VIEW && CC_SURFACES_ENABLE_DEBUG_VIEW\n      if (IS_DEBUG_VIEW_MISC_ENABLE_CSM_LAYER_COLORATION) {\n          color.rgb *= colDebugCSMLayer.rgb;\n      }\n      #if CC_SURFACES_USE_TANGENT_SPACE\n        color = CCSurfacesDebugDisplayInvalidInputData(color, FSInput_worldTangent);\n      #endif\n    #endif\n  #endif\n    #if CC_USE_RGBE_OUTPUT\n      gl_FragData[0] = packRGBE(color.rgb);\n      return;\n    #endif\n    #if CC_USE_HDR\n      #if CC_USE_DEBUG_VIEW == CC_SURFACES_DEBUG_VIEW_COMPOSITE_AND_MISC && CC_SURFACES_ENABLE_DEBUG_VIEW\n        if (IS_DEBUG_VIEW_COMPOSITE_ENABLE_TONE_MAPPING)\n      #endif\n        color.rgb = ACESToneMap(color.rgb);\n    #endif\n    #if CC_USE_DEBUG_VIEW == CC_SURFACES_DEBUG_VIEW_COMPOSITE_AND_MISC\n      if (IS_DEBUG_VIEW_COMPOSITE_ENABLE_GAMMA_CORRECTION)\n    #endif\n    color.rgb = LinearToSRGB(color.rgb);\n    #if !CC_FORWARD_ADD && CC_USE_FOG != 4\n      CC_APPLY_FOG_BASE(color, fogFactor);\n    #endif\n    gl_FragData[0] = CCSurfacesDebugDisplayInvalidNumber(color);\n  }\n#elif CC_PIPELINE_TYPE == 1\n    void main () {\n      SurfacesMaterialData surfaceData;\n      CCSurfacesFragmentGetMaterialData(surfaceData);\n      gl_FragData[0] = CCSurfacesDeferredOutput0(surfaceData);\n      gl_FragData[1] = CCSurfacesDeferredOutput1(surfaceData);\n      gl_FragData[2] = CCSurfacesDeferredOutput2(surfaceData);\n    #if CC_USE_DEBUG_VIEW == CC_SURFACES_DEBUG_VIEW_SINGLE && CC_SURFACES_ENABLE_DEBUG_VIEW\n      vec4 debugColor = vec4(0.0, 0.0, 0.0, 1.0);\n      CCSurfacesDebugViewMeshData(debugColor);\n      CCSurfacesDebugViewSurfaceData(debugColor, surfaceData);\n      if (IS_DEBUG_VIEW_ENABLE_WITH_CAMERA) {\n        gl_FragData[0] = debugColor;\n      }\n    #endif\n    }\n#endif"},"builtins":{"globals":{"blocks":[{"name":"CCGlobal","defines":[]},{"name":"CCCamera","defines":[]},{"name":"CCShadow","defines":[]},{"name":"CCCSM","defines":["CC_SUPPORT_CASCADED_SHADOW_MAP"]}],"samplerTextures":[{"name":"cc_environment","defines":[]},{"name":"cc_diffuseMap","defines":["CC_USE_IBL","CC_USE_DIFFUSEMAP"]},{"name":"cc_shadowMap","defines":["CC_RECEIVE_SHADOW"]},{"name":"cc_spotShadowMap","defines":["CC_RECEIVE_SHADOW"]}],"buffers":[],"images":[]},"locals":{"blocks":[{"name":"CCLocal","defines":["!USE_INSTANCING"]},{"name":"CCMorph","defines":["CC_USE_MORPH"]},{"name":"CCSkinningTexture","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"CCSkinningAnimation","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"CCSkinning","defines":["CC_USE_SKINNING","!CC_USE_BAKED_ANIMATION","!CC_USE_REAL_TIME_JOINT_TEXTURE"]},{"name":"CCForwardLight","defines":["CC_FORWARD_ADD","CC_ENABLE_CLUSTERED_LIGHT_CULLING"]},{"name":"CCSH","defines":["CC_USE_LIGHT_PROBE","!USE_INSTANCING"]}],"samplerTextures":[{"name":"cc_PositionDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_POSITION"]},{"name":"cc_NormalDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_NORMAL"]},{"name":"cc_TangentDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_TANGENT"]},{"name":"cc_jointTexture","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"cc_realtimeJoint","defines":["CC_USE_SKINNING","!CC_USE_BAKED_ANIMATION","CC_USE_REAL_TIME_JOINT_TEXTURE"]},{"name":"cc_reflectionProbeCubemap","defines":["CC_USE_REFLECTION_PROBE"]},{"name":"cc_reflectionProbePlanarMap","defines":["CC_USE_REFLECTION_PROBE"]},{"name":"cc_reflectionProbeDataMap","defines":["CC_USE_REFLECTION_PROBE"]},{"name":"cc_lightingMap","defines":["CC_USE_LIGHTMAP","!CC_FORWARD_ADD"]}],"buffers":[],"images":[]},"statistics":{"CC_EFFECT_USED_VERTEX_UNIFORM_VECTORS":101,"CC_EFFECT_USED_FRAGMENT_UNIFORM_VECTORS":131}},"defines":[{"name":"HAS_SECOND_UV","type":"boolean"},{"name":"USE_TWOSIDE","type":"boolean"},{"name":"USE_REFLECTION_DENOISE","type":"boolean"},{"name":"IS_ANISOTROPY","type":"boolean"},{"name":"USE_VERTEX_COLOR","type":"boolean"},{"name":"USE_COMPATIBLE_LIGHTING","type":"boolean"},{"name":"USE_INSTANCING","type":"boolean"},{"name":"CC_USE_SKINNING","type":"boolean"},{"name":"CC_USE_BAKED_ANIMATION","type":"boolean"},{"name":"CC_USE_LIGHTMAP","type":"boolean"},{"name":"CC_RECEIVE_SHADOW","type":"boolean"},{"name":"CC_USE_LIGHT_PROBE","type":"boolean","default":0},{"name":"CC_USE_MORPH","type":"boolean"},{"name":"CC_FORWARD_ADD","type":"boolean"},{"name":"CC_USE_FOG","type":"number","range":[0,4]},{"name":"CC_USE_ACCURATE_FOG","type":"boolean"},{"name":"CC_USE_REFLECTION_PROBE","type":"number","range":[0,3]},{"name":"CC_MORPH_TARGET_COUNT","type":"number","range":[2,8]},{"name":"CC_MORPH_TARGET_HAS_POSITION","type":"boolean"},{"name":"CC_MORPH_TARGET_HAS_NORMAL","type":"boolean"},{"name":"CC_MORPH_TARGET_HAS_TANGENT","type":"boolean"},{"name":"CC_MORPH_PRECOMPUTED","type":"boolean"},{"name":"CC_USE_REAL_TIME_JOINT_TEXTURE","type":"boolean"},{"name":"CC_DISABLE_STRUCTURE_IN_FRAGMENT_SHADER","type":"number","range":[0,1]},{"name":"CC_PIPELINE_TYPE","type":"number","range":[0,1]},{"name":"CC_FORCE_FORWARD_SHADING","type":"boolean"},{"name":"CC_SUPPORT_CASCADED_SHADOW_MAP","type":"boolean"},{"name":"CC_USE_IBL","type":"number","range":[0,2]},{"name":"CC_USE_DIFFUSEMAP","type":"number","range":[0,2]},{"name":"CC_USE_DEBUG_VIEW","type":"number","range":[0,3]},{"name":"CC_IBL_CONVOLUTED","type":"boolean"},{"name":"CC_SHADOWMAP_FORMAT","type":"number","range":[0,3]},{"name":"CC_SHADOWMAP_USE_LINEAR_DEPTH","type":"boolean"},{"name":"CC_DIR_SHADOW_PCF_TYPE","type":"number","range":[0,3]},{"name":"CC_CASCADED_LAYERS_TRANSITION","type":"boolean"},{"name":"CC_USE_HDR","type":"boolean"},{"name":"CC_LIGHT_MAP_VERSION","type":"number","range":[0,3]},{"name":"TEXTURE_UV","type":"string","options":["v_uv","v_uv1"]},{"name":"DCC_APP_NAME","type":"number","range":[0,5]},{"name":"USE_SHININESS_MAP","type":"boolean"},{"name":"GLOSSINESS_MAP_CHANNEL","type":"string","options":["r","g","b","a"]},{"name":"USE_SPECULAR_GLOSSINESS_MAP","type":"boolean"},{"name":"USE_SPECULAR_MAP","type":"boolean"},{"name":"USE_METALLIC_MAP","type":"boolean"},{"name":"USE_ALBEDO_MAP","type":"boolean"},{"name":"USE_TRANSPARENCY_MAP","type":"boolean"},{"name":"TRANSPARENCY_MAP_CHANNEL","type":"string","options":["a","r","g","b"]},{"name":"USE_EMISSIVE_MAP","type":"boolean"},{"name":"USE_EMISSIVESCALE_MAP","type":"boolean"},{"name":"USE_NORMAL_MAP","type":"boolean"},{"name":"NORMAL_UV","type":"string","options":["v_uv","v_uv1"]},{"name":"USE_OCCLUSION_MAP","type":"boolean"},{"name":"OCCLUSION_UV","type":"string","options":["v_uv","v_uv1"]},{"name":"OCCLUSION_CHANNEL","type":"string","options":["r","g","b","a"]},{"name":"USE_ALPHA_TEST","type":"boolean"},{"name":"HAS_EXPORTED_GLOSSINESS","type":"boolean"},{"name":"GLOSSINESS_MAP_USE_SINGLE_CHANNEL","type":"boolean"},{"name":"HAS_EXPORTED_METALLIC","type":"boolean"},{"name":"CC_SHADOW_TYPE","type":"number","range":[0,3]},{"name":"CC_DIR_LIGHT_SHADOW_TYPE","type":"number","range":[0,3]},{"name":"CC_DISABLE_DIRECTIONAL_LIGHT","type":"boolean"},{"name":"CC_USE_RGBE_OUTPUT","type":"boolean"}]},{"hash":3860472471,"name":"util/dcc/imported-specular-glossiness|shadow-caster-vs|shadow-caster-fs","blocks":[{"name":"Constants","stageFlags":17,"binding":0,"members":[{"name":"tilingOffset","type":16,"count":1},{"name":"diffuseColor","type":16,"count":1},{"name":"specularColor","type":16,"count":1},{"name":"emissive","type":16,"count":1},{"name":"emissiveScale","type":13,"count":1},{"name":"alphaThreshold","type":13,"count":1},{"name":"shininessExponent","type":13,"count":1},{"name":"glossiness","type":13,"count":1},{"name":"metallic","type":13,"count":1},{"name":"normalScale","type":13,"count":1},{"name":"transparencyFactor","type":13,"count":1},{"name":"diffuseFactor","type":13,"count":1},{"name":"specularFactor","type":13,"count":1}],"defines":[]}],"samplerTextures":[{"name":"shininessExponentMap","type":28,"count":1,"stageFlags":16,"binding":1,"defines":["USE_SHININESS_MAP"]},{"name":"specularGlossinessMap","type":28,"count":1,"stageFlags":16,"binding":2,"defines":["USE_SPECULAR_GLOSSINESS_MAP"]},{"name":"specularMap","type":28,"count":1,"stageFlags":16,"binding":3,"defines":["USE_SPECULAR_MAP"]},{"name":"metallicMap","type":28,"count":1,"stageFlags":16,"binding":4,"defines":["USE_METALLIC_MAP"]},{"name":"albedoMap","type":28,"count":1,"stageFlags":16,"binding":5,"defines":["USE_ALBEDO_MAP"]},{"name":"transparencyMap","type":28,"count":1,"stageFlags":16,"binding":6,"defines":["USE_TRANSPARENCY_MAP"]},{"name":"emissiveMap","type":28,"count":1,"stageFlags":16,"binding":7,"defines":["USE_EMISSIVE_MAP"]},{"name":"emissiveScaleMap","type":28,"count":1,"stageFlags":16,"binding":8,"defines":["USE_EMISSIVESCALE_MAP"]},{"name":"normalMap","type":28,"count":1,"stageFlags":16,"binding":9,"defines":["USE_NORMAL_MAP"]},{"name":"occlusionMap","type":28,"count":1,"stageFlags":16,"binding":10,"defines":["USE_OCCLUSION_MAP"]}],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[],"attributes":[{"name":"a_position","format":32,"location":0,"defines":[]},{"name":"a_normal","format":32,"location":1,"defines":[]},{"name":"a_texCoord","format":21,"location":2,"defines":[]},{"name":"a_tangent","format":44,"location":3,"defines":[]},{"name":"a_color","format":44,"location":6,"defines":["CC_SURFACES_USE_VERTEX_COLOR"]},{"name":"a_texCoord1","format":21,"location":7,"defines":[]},{"name":"a_joints","location":4,"defines":["CC_USE_SKINNING"]},{"name":"a_weights","format":44,"location":5,"defines":["CC_USE_SKINNING"]},{"name":"a_jointAnimInfo","format":44,"isInstanced":true,"location":8,"defines":["USE_INSTANCING","CC_USE_BAKED_ANIMATION"]},{"name":"a_matWorld0","format":44,"isInstanced":true,"location":9,"defines":["USE_INSTANCING"]},{"name":"a_matWorld1","format":44,"isInstanced":true,"location":10,"defines":["USE_INSTANCING"]},{"name":"a_matWorld2","format":44,"isInstanced":true,"location":11,"defines":["USE_INSTANCING"]},{"name":"a_lightingMapUVParam","format":44,"isInstanced":true,"location":12,"defines":["USE_INSTANCING","CC_USE_LIGHTMAP"]},{"name":"a_localShadowBiasAndProbeId","format":44,"isInstanced":true,"location":13,"defines":["USE_INSTANCING"]},{"name":"a_sh_linear_const_r","format":44,"isInstanced":true,"location":14,"defines":["USE_INSTANCING","CC_USE_LIGHT_PROBE"]},{"name":"a_sh_linear_const_g","format":44,"isInstanced":true,"location":15,"defines":["USE_INSTANCING","CC_USE_LIGHT_PROBE"]},{"name":"a_sh_linear_const_b","format":44,"isInstanced":true,"location":16,"defines":["USE_INSTANCING","CC_USE_LIGHT_PROBE"]},{"name":"a_vertexId","format":11,"location":17,"defines":["CC_USE_MORPH"]}],"fragColors":[{"name":"fragColorX","typename":"vec4","type":16,"count":1,"stageFlags":16,"location":0,"defines":[]}],"descriptors":[{"rate":0,"blocks":[{"name":"CCLocal","stageFlags":17,"tags":{"builtin":"local"},"members":[{"name":"cc_matWorld","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matWorldIT","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_lightingMapUVParam","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_localShadowBias","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_reflectionProbeData1","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_reflectionProbeData2","typename":"vec4","type":16,"count":1,"precision":"highp "}],"defines":["!USE_INSTANCING"]},{"name":"CCMorph","stageFlags":1,"tags":{"builtin":"local"},"members":[{"name":"cc_displacementWeights","typename":"vec4","type":16,"count":15,"isArray":true},{"name":"cc_displacementTextureInfo","typename":"vec4","type":16,"count":1}],"defines":["CC_USE_MORPH"]},{"name":"CCSkinningTexture","stageFlags":1,"tags":{"builtin":"local"},"members":[{"name":"cc_jointTextureInfo","typename":"vec4","type":16,"count":1,"precision":"highp "}],"defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"CCSkinningAnimation","stageFlags":1,"tags":{"builtin":"local"},"members":[{"name":"cc_jointAnimInfo","typename":"vec4","type":16,"count":1,"precision":"highp "}],"defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"CCSkinning","stageFlags":1,"tags":{"builtin":"local"},"members":[{"name":"cc_joints","typename":"vec4","type":16,"count":0,"precision":"highp ","isArray":true}],"defines":["CC_USE_SKINNING","!CC_USE_BAKED_ANIMATION","!CC_USE_REAL_TIME_JOINT_TEXTURE"]},{"name":"CCForwardLight","stageFlags":16,"tags":{"builtin":"local"},"members":[{"name":"cc_lightPos","typename":"vec4","type":16,"count":0,"precision":"highp ","isArray":true},{"name":"cc_lightColor","typename":"vec4","type":16,"count":0,"isArray":true},{"name":"cc_lightSizeRangeAngle","typename":"vec4","type":16,"count":0,"isArray":true},{"name":"cc_lightDir","typename":"vec4","type":16,"count":0,"isArray":true}],"defines":["CC_FORWARD_ADD","CC_ENABLE_CLUSTERED_LIGHT_CULLING"]},{"name":"CCSH","stageFlags":16,"tags":{"builtin":"local"},"members":[{"name":"cc_sh_linear_const_r","typename":"vec4","type":16,"count":1},{"name":"cc_sh_linear_const_g","typename":"vec4","type":16,"count":1},{"name":"cc_sh_linear_const_b","typename":"vec4","type":16,"count":1},{"name":"cc_sh_quadratic_r","typename":"vec4","type":16,"count":1},{"name":"cc_sh_quadratic_g","typename":"vec4","type":16,"count":1},{"name":"cc_sh_quadratic_b","typename":"vec4","type":16,"count":1},{"name":"cc_sh_quadratic_a","typename":"vec4","type":16,"count":1}],"defines":["CC_USE_LIGHT_PROBE","!USE_INSTANCING"]}],"samplerTextures":[{"name":"cc_PositionDisplacements","typename":"sampler2D","type":28,"count":1,"stageFlags":1,"tags":{"builtin":"local"},"defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_POSITION"]},{"name":"cc_NormalDisplacements","typename":"sampler2D","type":28,"count":1,"stageFlags":1,"tags":{"builtin":"local"},"defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_NORMAL"]},{"name":"cc_TangentDisplacements","typename":"sampler2D","type":28,"count":1,"stageFlags":1,"tags":{"builtin":"local"},"defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_TANGENT"]},{"name":"cc_jointTexture","typename":"sampler2D","type":28,"count":1,"precision":"highp ","stageFlags":1,"tags":{"builtin":"local"},"defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"cc_realtimeJoint","typename":"sampler2D","type":28,"count":1,"precision":"highp ","stageFlags":1,"tags":{"builtin":"local"},"defines":["CC_USE_SKINNING","!CC_USE_BAKED_ANIMATION","CC_USE_REAL_TIME_JOINT_TEXTURE"]},{"name":"cc_reflectionProbeCubemap","typename":"samplerCube","type":31,"count":1,"stageFlags":16,"tags":{"builtin":"local"},"defines":["CC_USE_REFLECTION_PROBE"]},{"name":"cc_reflectionProbePlanarMap","typename":"sampler2D","type":28,"count":1,"stageFlags":16,"tags":{"builtin":"local"},"defines":["CC_USE_REFLECTION_PROBE"]},{"name":"cc_reflectionProbeDataMap","typename":"sampler2D","type":28,"count":1,"stageFlags":16,"tags":{"builtin":"local"},"defines":["CC_USE_REFLECTION_PROBE"]},{"name":"cc_lightingMap","typename":"sampler2D","type":28,"count":1,"stageFlags":16,"tags":{"builtin":"local"},"defines":["CC_USE_LIGHTMAP","!CC_FORWARD_ADD"]}],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[]},{"rate":1,"blocks":[{"name":"Constants","stageFlags":17,"binding":0,"members":[{"name":"tilingOffset","type":16,"count":1},{"name":"diffuseColor","type":16,"count":1},{"name":"specularColor","type":16,"count":1},{"name":"emissive","type":16,"count":1},{"name":"emissiveScale","type":13,"count":1},{"name":"alphaThreshold","type":13,"count":1},{"name":"shininessExponent","type":13,"count":1},{"name":"glossiness","type":13,"count":1},{"name":"metallic","type":13,"count":1},{"name":"normalScale","type":13,"count":1},{"name":"transparencyFactor","type":13,"count":1},{"name":"diffuseFactor","type":13,"count":1},{"name":"specularFactor","type":13,"count":1}],"defines":[]}],"samplerTextures":[{"name":"shininessExponentMap","type":28,"count":1,"stageFlags":16,"binding":1,"defines":["USE_SHININESS_MAP"]},{"name":"specularGlossinessMap","type":28,"count":1,"stageFlags":16,"binding":2,"defines":["USE_SPECULAR_GLOSSINESS_MAP"]},{"name":"specularMap","type":28,"count":1,"stageFlags":16,"binding":3,"defines":["USE_SPECULAR_MAP"]},{"name":"metallicMap","type":28,"count":1,"stageFlags":16,"binding":4,"defines":["USE_METALLIC_MAP"]},{"name":"albedoMap","type":28,"count":1,"stageFlags":16,"binding":5,"defines":["USE_ALBEDO_MAP"]},{"name":"transparencyMap","type":28,"count":1,"stageFlags":16,"binding":6,"defines":["USE_TRANSPARENCY_MAP"]},{"name":"emissiveMap","type":28,"count":1,"stageFlags":16,"binding":7,"defines":["USE_EMISSIVE_MAP"]},{"name":"emissiveScaleMap","type":28,"count":1,"stageFlags":16,"binding":8,"defines":["USE_EMISSIVESCALE_MAP"]},{"name":"normalMap","type":28,"count":1,"stageFlags":16,"binding":9,"defines":["USE_NORMAL_MAP"]},{"name":"occlusionMap","type":28,"count":1,"stageFlags":16,"binding":10,"defines":["USE_OCCLUSION_MAP"]}],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[]},{"rate":2,"blocks":[],"samplerTextures":[],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[]},{"rate":3,"blocks":[{"name":"CCGlobal","stageFlags":17,"tags":{"builtin":"global"},"members":[{"name":"cc_time","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_screenSize","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_nativeSize","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_probeInfo","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_debug_view_mode","typename":"vec4","type":16,"count":1,"precision":"mediump "}],"defines":[]},{"name":"CCCamera","stageFlags":17,"tags":{"builtin":"global"},"members":[{"name":"cc_matView","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matViewInv","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matProj","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matProjInv","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matViewProj","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matViewProjInv","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_cameraPos","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_surfaceTransform","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_screenScale","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_exposure","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_mainLitDir","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_mainLitColor","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_ambientSky","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_ambientGround","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_fogColor","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_fogBase","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_fogAdd","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_nearFar","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_viewPort","typename":"vec4","type":16,"count":1,"precision":"mediump "}],"defines":[]},{"name":"CCShadow","stageFlags":17,"tags":{"builtin":"global"},"members":[{"name":"cc_matLightView","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matLightViewProj","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_shadowInvProjDepthInfo","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_shadowProjDepthInfo","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_shadowProjInfo","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_shadowNFLSInfo","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_shadowWHPBInfo","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_shadowLPNNInfo","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_shadowColor","typename":"vec4","type":16,"count":1,"precision":"lowp "},{"name":"cc_planarNDInfo","typename":"vec4","type":16,"count":1,"precision":"mediump "}],"defines":[]},{"name":"CCCSM","stageFlags":16,"tags":{"builtin":"global"},"members":[{"name":"cc_csmViewDir0","typename":"vec4","type":16,"count":4,"precision":"highp ","isArray":true},{"name":"cc_csmViewDir1","typename":"vec4","type":16,"count":4,"precision":"highp ","isArray":true},{"name":"cc_csmViewDir2","typename":"vec4","type":16,"count":4,"precision":"highp ","isArray":true},{"name":"cc_csmAtlas","typename":"vec4","type":16,"count":4,"precision":"highp ","isArray":true},{"name":"cc_matCSMViewProj","typename":"mat4","type":25,"count":4,"precision":"highp ","isArray":true},{"name":"cc_csmProjDepthInfo","typename":"vec4","type":16,"count":4,"precision":"highp ","isArray":true},{"name":"cc_csmProjInfo","typename":"vec4","type":16,"count":4,"precision":"highp ","isArray":true},{"name":"cc_csmSplitsInfo","typename":"vec4","type":16,"count":1,"precision":"highp "}],"defines":["CC_SUPPORT_CASCADED_SHADOW_MAP"]}],"samplerTextures":[{"name":"cc_environment","typename":"samplerCube","type":31,"count":1,"stageFlags":16,"tags":{"builtin":"global"},"defines":[]},{"name":"cc_diffuseMap","typename":"samplerCube","type":31,"count":1,"stageFlags":16,"tags":{"builtin":"global"},"defines":["CC_USE_IBL","CC_USE_DIFFUSEMAP"]},{"name":"cc_shadowMap","typename":"sampler2D","type":28,"count":1,"precision":"highp ","stageFlags":16,"tags":{"builtin":"global"},"defines":["CC_RECEIVE_SHADOW"]},{"name":"cc_spotShadowMap","typename":"sampler2D","type":28,"count":1,"precision":"highp ","stageFlags":16,"tags":{"builtin":"global"},"defines":["CC_RECEIVE_SHADOW"]}],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[]}],"glsl3":{"vert":"\nprecision highp float;\n#define CC_SURFACES_USE_TANGENT_SPACE 0\n#define CC_SURFACES_USE_VERTEX_COLOR 0\n#define CC_SURFACES_USE_SECOND_UV 0\n#define CC_SURFACES_USE_LIGHT_MAP 0\n#define CC_SURFACES_TRANSFER_LOCAL_POS 0\n#ifndef CC_SURFACES_USE_SECOND_UV\n  #define CC_SURFACES_USE_SECOND_UV 0\n#endif\n#ifndef CC_SURFACES_USE_TANGENT_SPACE\n  #define CC_SURFACES_USE_TANGENT_SPACE 0\n#endif\n#ifndef CC_SURFACES_USE_VERTEX_COLOR\n  #define CC_SURFACES_USE_VERTEX_COLOR 0\n#endif\n#ifndef CC_SURFACES_TRANSFER_LOCAL_POS\n  #define CC_SURFACES_TRANSFER_LOCAL_POS 0\n#endif\n#ifndef CC_SURFACES_TRANSFER_CLIP_POS\n  #define CC_SURFACES_TRANSFER_CLIP_POS 0\n#endif\n#ifndef CC_SURFACES_USE_LIGHT_MAP\n  #ifdef CC_USE_LIGHTMAP\n    #define CC_SURFACES_USE_LIGHT_MAP CC_USE_LIGHTMAP\n  #else\n    #define CC_SURFACES_USE_LIGHT_MAP 0\n  #endif\n#endif\n#ifndef CC_SURFACES_FLIP_UV\n  #define CC_SURFACES_FLIP_UV 0\n#endif\n#ifndef CC_SURFACES_USE_TWO_SIDED\n  #define CC_SURFACES_USE_TWO_SIDED 0\n#endif\n#ifndef CC_SURFACES_USE_REFLECTION_DENOISE\n  #define CC_SURFACES_USE_REFLECTION_DENOISE 0\n#endif\n#ifndef CC_SURFACES_LIGHTING_ANISOTROPIC\n  #define CC_SURFACES_LIGHTING_ANISOTROPIC 0\n#endif\n#ifndef CC_SURFACES_LIGHTING_ANISOTROPIC_ENVCONVOLUTION_COUNT\n  #define CC_SURFACES_LIGHTING_ANISOTROPIC_ENVCONVOLUTION_COUNT 0\n#endif\n#ifndef CC_SURFACES_USE_LEGACY_COMPATIBLE_LIGHTING\n  #define CC_SURFACES_USE_LEGACY_COMPATIBLE_LIGHTING 0\n#endif\n#ifndef CC_SURFACES_LIGHTING_USE_FRESNEL\n  #define CC_SURFACES_LIGHTING_USE_FRESNEL 0\n#endif\n#ifndef CC_SURFACES_LIGHTING_TRANSMIT_SPECULAR\n  #define CC_SURFACES_LIGHTING_TRANSMIT_SPECULAR 0\n#endif\n#ifndef CC_SURFACES_LIGHTING_TRANSMIT_DIFFUSE\n  #define CC_SURFACES_LIGHTING_TRANSMIT_DIFFUSE 0\n#endif\n#ifndef CC_SURFACES_LIGHTING_USE_SHADOWMAP_TRANSMIT\n  #define CC_SURFACES_LIGHTING_USE_SHADOWMAP_TRANSMIT 0\n#endif\n#ifndef CC_SURFACES_LIGHTING_TRT\n  #define CC_SURFACES_LIGHTING_TRT 0\n#endif\n#ifndef CC_SURFACES_LIGHTING_TT\n  #define CC_SURFACES_LIGHTING_TT 0\n#endif\n#ifndef CC_SURFACES_ENABLE_DEBUG_VIEW\n  #define CC_SURFACES_ENABLE_DEBUG_VIEW 1\n#endif\n#ifndef CC_SURFACES_LIGHTING_CALCULATE_DIFFUSE\n  #define CC_SURFACES_LIGHTING_CALCULATE_DIFFUSE 1\n#endif\n#ifndef CC_SURFACES_LIGHTING_CALCULATE_SPECULAR\n  #define CC_SURFACES_LIGHTING_CALCULATE_SPECULAR 1\n#endif\n#define CC_USE_SURFACE_SHADER 1\nin vec3 a_position;\nin vec3 a_normal;\nin vec2 a_texCoord;\n#if CC_SURFACES_USE_TANGENT_SPACE\n  in vec4 a_tangent;\n#endif\n#if CC_SURFACES_USE_VERTEX_COLOR\n  in vec4 a_color;\n#endif\n#if CC_SURFACES_USE_SECOND_UV || CC_USE_LIGHTMAP\n  in vec2 a_texCoord1;\n#endif\n#if CC_USE_SKINNING\n    in vec4 a_joints;\n  in vec4 a_weights;\n#endif\n#if USE_INSTANCING\n  #if CC_USE_BAKED_ANIMATION\n    in highp vec4 a_jointAnimInfo;\n  #endif\n  in vec4 a_matWorld0;\n  in vec4 a_matWorld1;\n  in vec4 a_matWorld2;\n  #if CC_USE_LIGHTMAP\n    in vec4 a_lightingMapUVParam;\n  #endif\n  #if CC_RECEIVE_SHADOW || CC_USE_REFLECTION_PROBE\n    in vec4 a_localShadowBiasAndProbeId;\n  #endif\n  #if CC_USE_LIGHT_PROBE\n    in vec4 a_sh_linear_const_r;\n    in vec4 a_sh_linear_const_g;\n    in vec4 a_sh_linear_const_b;\n  #endif\n#endif\n#if CC_USE_MORPH\n    in float a_vertexId;\n#endif\nout highp vec3 v_worldPos;\nout mediump vec4 v_normal;\nout vec2 v_uv;\n#if CC_SURFACES_USE_VERTEX_COLOR\n  out lowp vec4 v_color;\n#endif\n#if CC_SURFACES_USE_TANGENT_SPACE\n  out mediump vec4 v_tangent;\n#endif\n#if CC_SURFACES_USE_SECOND_UV\n  out mediump vec2 v_uv1;\n#endif\n#if CC_USE_LIGHTMAP && !CC_FORWARD_ADD\n  out mediump vec3 v_luv;\n#endif\n#if CC_RECEIVE_SHADOW || CC_USE_REFLECTION_PROBE\n  out mediump vec4 v_shadowBiasAndProbeId;\n#endif\n#if CC_USE_FOG != 4 && !CC_USE_ACCURATE_FOG\n  out mediump float v_fogFactor;\n#endif\n#if CC_SURFACES_TRANSFER_LOCAL_POS\n  out highp vec4 v_localPos;\n#endif\n#if CC_SURFACES_TRANSFER_CLIP_POS\n  out highp vec4 v_clipPos;\n#endif\n#if CC_USE_LIGHT_PROBE\n  #if USE_INSTANCING\n    out mediump vec4 v_sh_linear_const_r;\n    out mediump vec4 v_sh_linear_const_g;\n    out mediump vec4 v_sh_linear_const_b;\n  #endif\n#endif\n#define VSOutput_worldPos v_worldPos\n#define VSOutput_worldNormal v_normal.xyz\n#define VSOutput_faceSideSign v_normal.w\n#define VSOutput_texcoord v_uv\n#if CC_SURFACES_USE_VERTEX_COLOR\n  #define VSOutput_vertexColor v_color\n#endif\n#if CC_SURFACES_USE_TANGENT_SPACE\n  #define VSOutput_worldTangent v_tangent.xyz\n  #define VSOutput_mirrorNormal v_tangent.w\n#endif\n#if CC_SURFACES_USE_SECOND_UV\n  #define VSOutput_texcoord1 v_uv1\n#endif\n#if CC_USE_LIGHTMAP && !CC_FORWARD_ADD\n  #define VSOutput_lightMapUV v_luv\n#endif\n#if CC_RECEIVE_SHADOW\n  #define VSOutput_shadowBias v_shadowBiasAndProbeId.xy\n#endif\n#if CC_USE_REFLECTION_PROBE\n  #define VSOutput_reflectionProbeId v_shadowBiasAndProbeId.z\n#endif\n#if CC_USE_FOG != 4 && !CC_USE_ACCURATE_FOG\n  #define VSOutput_fogFactor v_fogFactor\n#endif\n#if CC_SURFACES_TRANSFER_LOCAL_POS\n  #define VSOutput_localPos v_localPos\n#endif\n#if CC_SURFACES_TRANSFER_CLIP_POS\n  #define VSOutput_clipPos v_clipPos\n#endif\nstruct SurfacesStandardVertexIntermediate\n{\n  highp vec4 position;\n  vec3 normal;\n#if CC_SURFACES_USE_TANGENT_SPACE\n  vec4 tangent;\n#endif\n#if CC_SURFACES_USE_VERTEX_COLOR\n  vec4 color;\n#endif\n  vec2 texCoord;\n#if CC_SURFACES_USE_SECOND_UV\n  vec2 texCoord1;\n#endif\n  highp vec4 clipPos;\n  highp vec3 worldPos;\n  vec4 worldNormal;\n  #if CC_SURFACES_USE_TANGENT_SPACE\n    vec3 worldTangent, worldBinormal;\n  #endif\n#if CC_RECEIVE_SHADOW || CC_USE_REFLECTION_PROBE\n  vec4 shadowBiasAndProbeId;\n#endif\n#if CC_USE_FOG != 4 && !CC_USE_ACCURATE_FOG\n  float fogFactor;\n#endif\n#if CC_USE_LIGHTMAP && !CC_FORWARD_ADD\n  vec3 lightmapUV;\n#endif\n};\n#if CC_USE_MORPH\n    int getVertexId() {\n      return int(a_vertexId);\n    }\n#endif\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n  mediump vec4 cc_probeInfo;\n  mediump vec4 cc_debug_view_mode;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_surfaceTransform;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\nlayout(std140) uniform CCShadow {\n  highp mat4 cc_matLightView;\n  highp mat4 cc_matLightViewProj;\n  highp vec4 cc_shadowInvProjDepthInfo;\n  highp vec4 cc_shadowProjDepthInfo;\n  highp vec4 cc_shadowProjInfo;\n  mediump vec4 cc_shadowNFLSInfo;\n  mediump vec4 cc_shadowWHPBInfo;\n  mediump vec4 cc_shadowLPNNInfo;\n  lowp vec4 cc_shadowColor;\n  mediump vec4 cc_planarNDInfo;\n};\n#define QUATER_PI         0.78539816340\n#define HALF_PI           1.57079632679\n#define PI                3.14159265359\n#define PI2               6.28318530718\n#define PI4               12.5663706144\n#define INV_QUATER_PI     1.27323954474\n#define INV_HALF_PI       0.63661977237\n#define INV_PI            0.31830988618\n#define INV_PI2           0.15915494309\n#define INV_PI4           0.07957747155\n#define EPSILON           1e-6\n#define EPSILON_LOWP      1e-4\n#define LOG2              1.442695\n#define EXP_VALUE         2.71828183f\n#define FP_MAX            65504.0\n#define FP_SCALE          0.0009765625\n#define FP_SCALE_INV      1024.0\n#define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\n#define LIGHT_MAP_TYPE_DISABLED 0\n#define LIGHT_MAP_TYPE_ALL_IN_ONE 1\n#define LIGHT_MAP_TYPE_INDIRECT_OCCLUSION 2\n#define REFLECTION_PROBE_TYPE_NONE 0\n#define REFLECTION_PROBE_TYPE_CUBE 1\n#define REFLECTION_PROBE_TYPE_PLANAR 2\n#define LIGHT_TYPE_DIRECTIONAL 0.0\n#define LIGHT_TYPE_POINT 1.0\n#define LIGHT_TYPE_SPOT 2.0\n#define LIGHT_TYPE_SPHERE 3.0\n#define LIGHT_TYPE_RANGED_DIRECTIONAL 4.0\n#define IS_DIRECTIONAL_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_DIRECTIONAL)) < EPSILON_LOWP)\n#define IS_SPHERE_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_SPHERE)) < EPSILON_LOWP)\n#define IS_SPOT_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_SPOT)) < EPSILON_LOWP)\n#define IS_POINT_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_POINT)) < EPSILON_LOWP)\n#define IS_RANGED_DIRECTIONAL_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_RANGED_DIRECTIONAL)) < EPSILON_LOWP)\nhighp float decode32 (highp vec4 rgba) {\n  rgba = rgba * 255.0;\n  highp float Sign = 1.0 - (step(128.0, (rgba[3]) + 0.5)) * 2.0;\n  highp float Exponent = 2.0 * (mod(float(int((rgba[3]) + 0.5)), 128.0)) + (step(128.0, (rgba[2]) + 0.5)) - 127.0;\n  highp float Mantissa = (mod(float(int((rgba[2]) + 0.5)), 128.0)) * 65536.0 + rgba[1] * 256.0 + rgba[0] + 8388608.0;\n  return Sign * exp2(Exponent - 23.0) * Mantissa;\n}\n#if !USE_INSTANCING\n  layout(std140) uniform CCLocal {\n    highp mat4 cc_matWorld;\n    highp mat4 cc_matWorldIT;\n    highp vec4 cc_lightingMapUVParam;\n    highp vec4 cc_localShadowBias;\n    highp vec4 cc_reflectionProbeData1;\n    highp vec4 cc_reflectionProbeData2;\n  };\n#endif\nvoid CCGetWorldMatrixFull(out mat4 matWorld, out mat4 matWorldIT)\n{\n  #if USE_INSTANCING\n    matWorld = mat4(\n      vec4(a_matWorld0.xyz, 0.0),\n      vec4(a_matWorld1.xyz, 0.0),\n      vec4(a_matWorld2.xyz, 0.0),\n      vec4(a_matWorld0.w, a_matWorld1.w, a_matWorld2.w, 1.0)\n    );\n    matWorldIT = matWorld;\n  #else\n    matWorld = cc_matWorld;\n    matWorldIT = cc_matWorldIT;\n  #endif\n}\n#if CC_USE_MORPH\n  layout(std140) uniform CCMorph {\n    vec4 cc_displacementWeights[15];\n    vec4 cc_displacementTextureInfo;\n  };\n  #if CC_MORPH_TARGET_HAS_POSITION\n    uniform sampler2D cc_PositionDisplacements;\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    uniform sampler2D cc_NormalDisplacements;\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    uniform sampler2D cc_TangentDisplacements;\n  #endif\n  vec2 getPixelLocation(vec2 textureResolution, int pixelIndex) {\n    float pixelIndexF = float(pixelIndex);\n    float x = mod(pixelIndexF, textureResolution.x);\n    float y = floor(pixelIndexF / textureResolution.x);\n    return vec2(x, y);\n  }\n  vec2 getPixelCoordFromLocation(vec2 location, vec2 textureResolution) {\n    return (vec2(location.x, location.y) + .5) / textureResolution;\n  }\n  #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      vec4 fetchVec3ArrayFromTexture(sampler2D tex, int pixelIndex) {\n        ivec2 texSize = textureSize(tex, 0);\n        return texelFetch(tex, ivec2(pixelIndex % texSize.x, pixelIndex / texSize.x), 0);\n      }\n  #else\n    vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n      int pixelIndex = elementIndex * 4;\n      vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n      vec2 x = getPixelCoordFromLocation(location + vec2(0.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 y = getPixelCoordFromLocation(location + vec2(1.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 z = getPixelCoordFromLocation(location + vec2(2.0, 0.0), cc_displacementTextureInfo.xy);\n      return vec4(\n        decode32(texture(tex, x)),\n        decode32(texture(tex, y)),\n        decode32(texture(tex, z)),\n        1.0\n      );\n    }\n  #endif\n  float getDisplacementWeight(int index) {\n    int quot = index / 4;\n    int remainder = index - quot * 4;\n    if (remainder == 0) {\n      return cc_displacementWeights[quot].x;\n    } else if (remainder == 1) {\n      return cc_displacementWeights[quot].y;\n    } else if (remainder == 2) {\n      return cc_displacementWeights[quot].z;\n    } else {\n      return cc_displacementWeights[quot].w;\n    }\n  }\n  vec3 getVec3DisplacementFromTexture(sampler2D tex, int vertexIndex) {\n  #if CC_MORPH_PRECOMPUTED\n    return fetchVec3ArrayFromTexture(tex, vertexIndex).rgb;\n  #else\n    vec3 result = vec3(0, 0, 0);\n    int nVertices = int(cc_displacementTextureInfo.z);\n    for (int iTarget = 0; iTarget < CC_MORPH_TARGET_COUNT; ++iTarget) {\n      result += (fetchVec3ArrayFromTexture(tex, nVertices * iTarget + vertexIndex).rgb * getDisplacementWeight(iTarget));\n    }\n    return result;\n  #endif\n  }\n  #if CC_MORPH_TARGET_HAS_POSITION\n  vec3 getPositionDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_PositionDisplacements, vertexId);\n  }\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n  vec3 getNormalDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_NormalDisplacements, vertexId);\n  }\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n  vec3 getTangentDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_TangentDisplacements, vertexId);\n  }\n  #endif\n  void applyMorph (inout vec4 position, inout vec3 normal, inout vec4 tangent) {\n    int vertexId = getVertexId();\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    normal.xyz = normal.xyz + getNormalDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    tangent.xyz = tangent.xyz + getTangentDisplacement(vertexId);\n  #endif\n  }\n  void applyMorph (inout vec4 position) {\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(getVertexId());\n  #endif\n  }\n#endif\n#if CC_USE_SKINNING\n  #if CC_USE_BAKED_ANIMATION\n    layout(std140) uniform CCSkinningTexture {\n      highp vec4 cc_jointTextureInfo;\n    };\n    layout(std140) uniform CCSkinningAnimation {\n      highp vec4 cc_jointAnimInfo;\n    };\n    uniform highp sampler2D cc_jointTexture;\n    void CCGetJointTextureCoords(float pixelsPerJoint, float jointIdx, out highp float x, out highp float y, out highp float invSize)\n    {\n      #if USE_INSTANCING\n        highp float temp = pixelsPerJoint * (a_jointAnimInfo.x * a_jointAnimInfo.y + jointIdx) + a_jointAnimInfo.z;\n      #else\n        highp float temp = pixelsPerJoint * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + jointIdx) + cc_jointTextureInfo.z;\n      #endif\n      invSize = cc_jointTextureInfo.w;\n      highp float tempY = floor(temp * invSize);\n      x = floor(temp - tempY * cc_jointTextureInfo.x);\n      y = (tempY + 0.5) * invSize;\n    }\n  #else\n    #if CC_USE_REAL_TIME_JOINT_TEXTURE\n      uniform highp sampler2D cc_realtimeJoint;\n    #else\n      layout(std140) uniform CCSkinning {\n        highp vec4 cc_joints[CC_JOINT_UNIFORM_CAPACITY * 3];\n      };\n    #endif\n  #endif\n  #if CC_USE_BAKED_ANIMATION\n    #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      mat4 getJointMatrix (float i) {\n        highp float x, y, invSize;\n        CCGetJointTextureCoords(3.0, i, x, y, invSize);\n        vec4 v1 = texture(cc_jointTexture, vec2((x + 0.5) * invSize, y));\n        vec4 v2 = texture(cc_jointTexture, vec2((x + 1.5) * invSize, y));\n        vec4 v3 = texture(cc_jointTexture, vec2((x + 2.5) * invSize, y));\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #else\n      mat4 getJointMatrix (float i) {\n        highp float x, y, invSize;\n        CCGetJointTextureCoords(12.0, i, x, y, invSize);\n        vec4 v1 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 0.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 1.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 2.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 3.5) * invSize, y)))\n        );\n        vec4 v2 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 4.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 5.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 6.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 7.5) * invSize, y)))\n        );\n        vec4 v3 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 8.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 9.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 10.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 11.5) * invSize, y)))\n        );\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #else\n    #if CC_USE_REAL_TIME_JOINT_TEXTURE\n      #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n        mat4 getJointMatrix (float i) {\n          float x = i;\n          vec4 v1 = texture(cc_realtimeJoint, vec2( x / 256.0, 0.5 / 3.0));\n          vec4 v2 = texture(cc_realtimeJoint, vec2( x / 256.0, 1.5 / 3.0));\n          vec4 v3 = texture(cc_realtimeJoint, vec2( x / 256.0, 2.5 / 3.0));\n          return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n        }\n      #else\n        mat4 getJointMatrix (float i) {\n         float x = 4.0 * i;\n          vec4 v1 = vec4(\n            decode32(texture(cc_realtimeJoint, vec2((x + 0.5)/ 1024.0, 0.5 / 3.0))),\n            decode32(texture(cc_realtimeJoint, vec2((x + 1.5)/ 1024.0, 0.5 / 3.0))),\n            decode32(texture(cc_realtimeJoint, vec2((x + 2.5)/ 1024.0, 0.5 / 3.0))),\n            decode32(texture(cc_realtimeJoint, vec2((x + 3.5)/ 1024.0, 0.5 / 3.0)))\n          );\n          vec4 v2 = vec4(\n            decode32(texture(cc_realtimeJoint, vec2((x + 0.5)/ 1024.0, 1.5 / 3.0))),\n            decode32(texture(cc_realtimeJoint, vec2((x + 1.5)/ 1024.0, 1.5 / 3.0))),\n            decode32(texture(cc_realtimeJoint, vec2((x + 2.5)/ 1024.0, 1.5 / 3.0))),\n            decode32(texture(cc_realtimeJoint, vec2((x + 3.5)/ 1024.0, 1.5 / 3.0)))\n          );\n          vec4 v3 = vec4(\n            decode32(texture(cc_realtimeJoint, vec2((x + 0.5)/ 1024.0, 2.5 / 3.0))),\n            decode32(texture(cc_realtimeJoint, vec2((x + 1.5)/ 1024.0, 2.5 / 3.0))),\n            decode32(texture(cc_realtimeJoint, vec2((x + 2.5)/ 1024.0, 2.5 / 3.0))),\n            decode32(texture(cc_realtimeJoint, vec2((x + 3.5)/ 1024.0, 2.5 / 3.0)))\n          );\n          return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n        }\n      #endif\n    #else\n      mat4 getJointMatrix (float i) {\n        int idx = int(i);\n        vec4 v1 = cc_joints[idx * 3];\n        vec4 v2 = cc_joints[idx * 3 + 1];\n        vec4 v3 = cc_joints[idx * 3 + 2];\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #endif\n  mat4 skinMatrix () {\n    vec4 joints = vec4(a_joints);\n    return getJointMatrix(joints.x) * a_weights.x\n         + getJointMatrix(joints.y) * a_weights.y\n         + getJointMatrix(joints.z) * a_weights.z\n         + getJointMatrix(joints.w) * a_weights.w;\n  }\n  void CCSkin (inout vec4 position) {\n    mat4 m = skinMatrix();\n    position = m * position;\n  }\n  void CCSkin (inout vec4 position, inout vec3 normal, inout vec4 tangent) {\n    mat4 m = skinMatrix();\n    position = m * position;\n    normal = (m * vec4(normal, 0.0)).xyz;\n    tangent.xyz = (m * vec4(tangent.xyz, 0.0)).xyz;\n  }\n#endif\n#if CC_USE_FOG != 4 && !CC_USE_ACCURATE_FOG\n  #if CC_USE_FOG != 4\n  #endif\n#endif\nlayout(std140) uniform Constants {\n  vec4  tilingOffset;\n  vec4  diffuseColor;\n  vec4  specularColor;\n  vec4  emissive;\n  float emissiveScale;\n  float alphaThreshold;\n  float shininessExponent;\n  float glossiness;\n  float metallic;\n  float normalScale;\n  float transparencyFactor;\n  float diffuseFactor;\n  float specularFactor;\n};\n#define CC_SURFACES_VERTEX_MODIFY_UV\nvoid SurfacesVertexModifyUV(inout SurfacesStandardVertexIntermediate In)\n{\n  In.texCoord = In.texCoord * tilingOffset.xy + tilingOffset.zw;\n#if CC_SURFACES_USE_SECOND_UV\n  In.texCoord1 = In.texCoord1 * tilingOffset.xy + tilingOffset.zw;\n#endif\n}\n#ifndef CC_SURFACES_VERTEX_MODIFY_LOCAL_POS\nvec3 SurfacesVertexModifyLocalPos(in SurfacesStandardVertexIntermediate In)\n{\n  return In.position.xyz;\n}\n#endif\n#ifndef CC_SURFACES_VERTEX_MODIFY_LOCAL_NORMAL\n#endif\n#ifndef CC_SURFACES_VERTEX_MODIFY_LOCAL_TANGENT\n  #if CC_SURFACES_USE_TANGENT_SPACE\n  #endif\n#endif\n#ifndef CC_SURFACES_VERTEX_MODIFY_LOCAL_SHARED_DATA\nvoid SurfacesVertexModifyLocalSharedData(inout SurfacesStandardVertexIntermediate In)\n{\n}\n#endif\n#ifndef CC_SURFACES_VERTEX_MODIFY_WORLD_POS\nvec3 SurfacesVertexModifyWorldPos(in SurfacesStandardVertexIntermediate In)\n{\n  return In.worldPos;\n}\n#endif\n#ifndef CC_SURFACES_VERTEX_MODIFY_CLIP_POS\nvec4 SurfacesVertexModifyClipPos(in SurfacesStandardVertexIntermediate In)\n{\n  return In.clipPos;\n}\n#endif\n#ifndef CC_SURFACES_VERTEX_MODIFY_UV\nvoid SurfacesVertexModifyUV(inout SurfacesStandardVertexIntermediate In)\n{\n}\n#endif\n#ifndef CC_SURFACES_VERTEX_MODIFY_WORLD_NORMAL\n#endif\n#ifndef CC_SURFACES_VERTEX_MODIFY_SHARED_DATA\nvoid SurfacesVertexModifySharedData(inout SurfacesStandardVertexIntermediate In)\n{\n}\n#endif\nvoid CCSurfacesVertexInput(out SurfacesStandardVertexIntermediate In)\n{\n  In.position = vec4(a_position, 1.0);\n  In.normal = a_normal;\n#if CC_SURFACES_USE_TANGENT_SPACE\n  In.tangent = a_tangent;\n#endif\n#if CC_SURFACES_USE_VERTEX_COLOR\n  In.color = a_color;\n#endif\n  In.texCoord = a_texCoord;\n#if CC_SURFACES_USE_SECOND_UV\n  In.texCoord1 = a_texCoord1;\n#endif\n}\nvoid CCSurfacesVertexOutput(in SurfacesStandardVertexIntermediate In)\n{\n  gl_Position = In.clipPos;\n  VSOutput_worldNormal = In.worldNormal.xyz;\n  VSOutput_faceSideSign = In.worldNormal.w;\n  VSOutput_worldPos = In.worldPos;\n#if CC_SURFACES_USE_TANGENT_SPACE\n  VSOutput_worldTangent = In.worldTangent.xyz;\n  VSOutput_mirrorNormal = In.tangent.w > 0.0 ? 1.0 : -1.0;\n#endif\n#if CC_SURFACES_USE_VERTEX_COLOR\n  VSOutput_vertexColor = In.color;\n#endif\n  VSOutput_texcoord = In.texCoord;\n#if CC_SURFACES_USE_SECOND_UV\n  VSOutput_texcoord1 = In.texCoord1;\n#endif\n#if CC_USE_FOG != 4 && !CC_USE_ACCURATE_FOG\n  VSOutput_fogFactor = In.fogFactor;\n#endif\n#if CC_RECEIVE_SHADOW\n  VSOutput_shadowBias = In.shadowBiasAndProbeId.xy;\n#endif\n#if CC_USE_REFLECTION_PROBE\n  VSOutput_reflectionProbeId = In.shadowBiasAndProbeId.z;\n#endif\n#if CC_USE_LIGHTMAP && !CC_FORWARD_ADD\n  VSOutput_lightMapUV = In.lightmapUV;\n#endif\n#if CC_SURFACES_TRANSFER_LOCAL_POS\n  VSOutput_localPos = In.position;\n#endif\n#if CC_SURFACES_TRANSFER_CLIP_POS\n  VSOutput_clipPos = In.clipPos;\n#endif\n#if CC_USE_LIGHT_PROBE\n  #if USE_INSTANCING\n    v_sh_linear_const_r = a_sh_linear_const_r;\n    v_sh_linear_const_g = a_sh_linear_const_g;\n    v_sh_linear_const_b = a_sh_linear_const_b;\n  #endif\n#endif\n}\nvoid CCSurfacesVertexAnimation(inout SurfacesStandardVertexIntermediate In)\n{\nvec4 temp = vec4(0.0);\n#if CC_USE_MORPH\n  #if CC_SURFACES_USE_TANGENT_SPACE\n    applyMorph(In.position, In.normal, In.tangent);\n  #else\n    applyMorph(In.position, In.normal, temp);\n  #endif\n#endif\n#if CC_USE_SKINNING\n  #if CC_SURFACES_USE_TANGENT_SPACE\n    CCSkin(In.position, In.normal, In.tangent);\n  #else\n    CCSkin(In.position, In.normal, temp);\n  #endif\n#endif\n}\nvoid CCSurfacesVertexWorldTransform(inout SurfacesStandardVertexIntermediate In)\n{\n    mat4 matWorld, matWorldIT;\n    CCGetWorldMatrixFull(matWorld, matWorldIT);\n    In.worldPos = (matWorld * In.position).xyz;\n    In.worldNormal.xyz = normalize((matWorldIT * vec4(In.normal.xyz, 0.0)).xyz);\n    #if CC_SURFACES_USE_TANGENT_SPACE\n      In.worldTangent = normalize((matWorld * vec4(In.tangent.xyz, 0.0)).xyz);\n      In.worldBinormal = cross(In.worldNormal.xyz, In.worldTangent) * In.tangent.w;\n    #endif\n}\nvoid CCSurfacesVertexTransformUV(inout SurfacesStandardVertexIntermediate In)\n{\n  #if CC_SURFACES_FLIP_UV\n    In.texCoord = cc_cameraPos.w > 1.0 ? vec2(In.texCoord.x, 1.0 - In.texCoord.y) : In.texCoord;\n    #if CC_SURFACES_USE_SECOND_UV\n      In.texCoord1 = cc_cameraPos.w > 1.0 ? vec2(In.texCoord1.x, 1.0 - In.texCoord1.y) : In.texCoord1;\n    #endif\n  #endif\n}\nout highp vec2 v_clip_depth;\nvoid main()\n{\n  SurfacesStandardVertexIntermediate In;\n  CCSurfacesVertexInput(In);\n  CCSurfacesVertexAnimation(In);\n  In.position.xyz = SurfacesVertexModifyLocalPos(In);\n  SurfacesVertexModifyLocalSharedData(In);\n  CCSurfacesVertexWorldTransform(In);\n  In.worldPos = SurfacesVertexModifyWorldPos(In);\n  In.clipPos = cc_matLightViewProj * vec4(In.worldPos, 1.0);\n  In.clipPos = SurfacesVertexModifyClipPos(In);\n  SurfacesVertexModifyUV(In);\n  SurfacesVertexModifySharedData(In);\n  CCSurfacesVertexTransformUV(In);\n  CCSurfacesVertexOutput(In);\n  v_clip_depth = In.clipPos.zw;\n}","frag":"\nprecision highp float;\n#define CC_SURFACES_USE_TANGENT_SPACE 0\n#define CC_SURFACES_USE_VERTEX_COLOR 0\n#define CC_SURFACES_USE_SECOND_UV 0\n#define CC_SURFACES_USE_LIGHT_MAP 0\n#define CC_SURFACES_TRANSFER_LOCAL_POS 0\n#ifndef CC_SURFACES_USE_SECOND_UV\n  #define CC_SURFACES_USE_SECOND_UV 0\n#endif\n#ifndef CC_SURFACES_USE_TANGENT_SPACE\n  #define CC_SURFACES_USE_TANGENT_SPACE 0\n#endif\n#ifndef CC_SURFACES_USE_VERTEX_COLOR\n  #define CC_SURFACES_USE_VERTEX_COLOR 0\n#endif\n#ifndef CC_SURFACES_TRANSFER_LOCAL_POS\n  #define CC_SURFACES_TRANSFER_LOCAL_POS 0\n#endif\n#ifndef CC_SURFACES_TRANSFER_CLIP_POS\n  #define CC_SURFACES_TRANSFER_CLIP_POS 0\n#endif\n#ifndef CC_SURFACES_USE_LIGHT_MAP\n  #ifdef CC_USE_LIGHTMAP\n    #define CC_SURFACES_USE_LIGHT_MAP CC_USE_LIGHTMAP\n  #else\n    #define CC_SURFACES_USE_LIGHT_MAP 0\n  #endif\n#endif\n#ifndef CC_SURFACES_FLIP_UV\n  #define CC_SURFACES_FLIP_UV 0\n#endif\n#ifndef CC_SURFACES_USE_TWO_SIDED\n  #define CC_SURFACES_USE_TWO_SIDED 0\n#endif\n#ifndef CC_SURFACES_USE_REFLECTION_DENOISE\n  #define CC_SURFACES_USE_REFLECTION_DENOISE 0\n#endif\n#ifndef CC_SURFACES_LIGHTING_ANISOTROPIC\n  #define CC_SURFACES_LIGHTING_ANISOTROPIC 0\n#endif\n#ifndef CC_SURFACES_LIGHTING_ANISOTROPIC_ENVCONVOLUTION_COUNT\n  #define CC_SURFACES_LIGHTING_ANISOTROPIC_ENVCONVOLUTION_COUNT 0\n#endif\n#ifndef CC_SURFACES_USE_LEGACY_COMPATIBLE_LIGHTING\n  #define CC_SURFACES_USE_LEGACY_COMPATIBLE_LIGHTING 0\n#endif\n#ifndef CC_SURFACES_LIGHTING_USE_FRESNEL\n  #define CC_SURFACES_LIGHTING_USE_FRESNEL 0\n#endif\n#ifndef CC_SURFACES_LIGHTING_TRANSMIT_SPECULAR\n  #define CC_SURFACES_LIGHTING_TRANSMIT_SPECULAR 0\n#endif\n#ifndef CC_SURFACES_LIGHTING_TRANSMIT_DIFFUSE\n  #define CC_SURFACES_LIGHTING_TRANSMIT_DIFFUSE 0\n#endif\n#ifndef CC_SURFACES_LIGHTING_USE_SHADOWMAP_TRANSMIT\n  #define CC_SURFACES_LIGHTING_USE_SHADOWMAP_TRANSMIT 0\n#endif\n#ifndef CC_SURFACES_LIGHTING_TRT\n  #define CC_SURFACES_LIGHTING_TRT 0\n#endif\n#ifndef CC_SURFACES_LIGHTING_TT\n  #define CC_SURFACES_LIGHTING_TT 0\n#endif\n#ifndef CC_SURFACES_ENABLE_DEBUG_VIEW\n  #define CC_SURFACES_ENABLE_DEBUG_VIEW 1\n#endif\n#ifndef CC_SURFACES_LIGHTING_CALCULATE_DIFFUSE\n  #define CC_SURFACES_LIGHTING_CALCULATE_DIFFUSE 1\n#endif\n#ifndef CC_SURFACES_LIGHTING_CALCULATE_SPECULAR\n  #define CC_SURFACES_LIGHTING_CALCULATE_SPECULAR 1\n#endif\n#define CC_USE_SURFACE_SHADER 1\nin highp vec3 v_worldPos;\nin mediump vec4 v_normal;\nin vec2 v_uv;\n#if CC_SURFACES_USE_VERTEX_COLOR\n  in lowp vec4 v_color;\n#endif\n#if CC_SURFACES_USE_TANGENT_SPACE\n  in mediump vec4 v_tangent;\n#endif\n#if CC_SURFACES_USE_SECOND_UV\n  in mediump vec2 v_uv1;\n#endif\n#if CC_USE_LIGHTMAP && !CC_FORWARD_ADD\n  in mediump vec3 v_luv;\n#endif\n#if CC_RECEIVE_SHADOW || CC_USE_REFLECTION_PROBE\n  in mediump vec4 v_shadowBiasAndProbeId;\n#endif\n#if CC_USE_FOG != 4 && !CC_USE_ACCURATE_FOG\n  in mediump float v_fogFactor;\n#endif\n#if CC_SURFACES_TRANSFER_LOCAL_POS\n  in highp vec4 v_localPos;\n#endif\n#if CC_SURFACES_TRANSFER_CLIP_POS\n  in highp vec4 v_clipPos;\n#endif\n#if CC_USE_LIGHT_PROBE\n  #if USE_INSTANCING\n    in mediump vec4 v_sh_linear_const_r;\n    in mediump vec4 v_sh_linear_const_g;\n    in mediump vec4 v_sh_linear_const_b;\n  #endif\n#endif\n#define FSInput_worldPos v_worldPos\n#define FSInput_worldNormal v_normal.xyz\n#define FSInput_faceSideSign v_normal.w\n#define FSInput_texcoord v_uv\n#if CC_SURFACES_USE_VERTEX_COLOR\n  #define FSInput_vertexColor v_color\n#else\n  #define FSInput_vertexColor vec4(1.0)\n#endif\n#if CC_SURFACES_USE_TANGENT_SPACE\n  #define FSInput_worldTangent v_tangent.xyz\n  #define FSInput_mirrorNormal v_tangent.w\n#else\n  #define FSInput_worldTangent vec3(0.0, 0.0, 0.0)\n  #define FSInput_mirrorNormal 1.0\n#endif\n#if CC_SURFACES_USE_SECOND_UV\n  #define FSInput_texcoord1 v_uv1\n#else\n  #define FSInput_texcoord1 vec2(0.0, 0.0)\n#endif\n#if CC_USE_LIGHTMAP && !CC_FORWARD_ADD\n  #define FSInput_lightMapUV v_luv\n#endif\n#if CC_RECEIVE_SHADOW\n  #define FSInput_shadowBias v_shadowBiasAndProbeId.xy\n#endif\n#if CC_USE_REFLECTION_PROBE\n  #define FSInput_reflectionProbeId v_shadowBiasAndProbeId.z\n#endif\n#if CC_USE_FOG != 4 && !CC_USE_ACCURATE_FOG\n  #define FSInput_fogFactor v_fogFactor\n#endif\n#if CC_SURFACES_TRANSFER_LOCAL_POS\n  #define FSInput_localPos v_localPos\n#endif\n#if CC_SURFACES_TRANSFER_CLIP_POS\n  #define FSInput_clipPos v_clipPos\n#endif\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n  mediump vec4 cc_probeInfo;\n  mediump vec4 cc_debug_view_mode;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_surfaceTransform;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\n#define CC_SURFACES_DEBUG_VIEW_VERTEX_COLOR 1\n#define CC_SURFACES_DEBUG_VIEW_VERTEX_NORMAL CC_SURFACES_DEBUG_VIEW_VERTEX_COLOR + 1\n#define CC_SURFACES_DEBUG_VIEW_VERTEX_TANGENT CC_SURFACES_DEBUG_VIEW_VERTEX_NORMAL + 1\n#define CC_SURFACES_DEBUG_VIEW_WORLD_POS CC_SURFACES_DEBUG_VIEW_VERTEX_TANGENT + 1\n#define CC_SURFACES_DEBUG_VIEW_VERTEX_MIRROR CC_SURFACES_DEBUG_VIEW_WORLD_POS + 1\n#define CC_SURFACES_DEBUG_VIEW_FACE_SIDE CC_SURFACES_DEBUG_VIEW_VERTEX_MIRROR + 1\n#define CC_SURFACES_DEBUG_VIEW_UV0 CC_SURFACES_DEBUG_VIEW_FACE_SIDE + 1\n#define CC_SURFACES_DEBUG_VIEW_UV1 CC_SURFACES_DEBUG_VIEW_UV0 + 1\n#define CC_SURFACES_DEBUG_VIEW_UVLIGHTMAP CC_SURFACES_DEBUG_VIEW_UV1 + 1\n#define CC_SURFACES_DEBUG_VIEW_PROJ_DEPTH CC_SURFACES_DEBUG_VIEW_UVLIGHTMAP + 1\n#define CC_SURFACES_DEBUG_VIEW_LINEAR_DEPTH CC_SURFACES_DEBUG_VIEW_PROJ_DEPTH + 1\n#define CC_SURFACES_DEBUG_VIEW_FRAGMENT_NORMAL CC_SURFACES_DEBUG_VIEW_LINEAR_DEPTH + 1\n#define CC_SURFACES_DEBUG_VIEW_FRAGMENT_TANGENT CC_SURFACES_DEBUG_VIEW_FRAGMENT_NORMAL + 1\n#define CC_SURFACES_DEBUG_VIEW_FRAGMENT_BINORMAL CC_SURFACES_DEBUG_VIEW_FRAGMENT_TANGENT + 1\n#define CC_SURFACES_DEBUG_VIEW_BASE_COLOR CC_SURFACES_DEBUG_VIEW_FRAGMENT_BINORMAL + 1\n#define CC_SURFACES_DEBUG_VIEW_DIFFUSE_COLOR CC_SURFACES_DEBUG_VIEW_BASE_COLOR + 1\n#define CC_SURFACES_DEBUG_VIEW_SPECULAR_COLOR CC_SURFACES_DEBUG_VIEW_DIFFUSE_COLOR + 1\n#define CC_SURFACES_DEBUG_VIEW_TRANSPARENCY CC_SURFACES_DEBUG_VIEW_SPECULAR_COLOR + 1\n#define CC_SURFACES_DEBUG_VIEW_METALLIC CC_SURFACES_DEBUG_VIEW_TRANSPARENCY + 1\n#define CC_SURFACES_DEBUG_VIEW_ROUGHNESS CC_SURFACES_DEBUG_VIEW_METALLIC + 1\n#define CC_SURFACES_DEBUG_VIEW_SPECULAR_INTENSITY CC_SURFACES_DEBUG_VIEW_ROUGHNESS + 1\n#define CC_SURFACES_DEBUG_VIEW_IOR CC_SURFACES_DEBUG_VIEW_SPECULAR_INTENSITY + 1\n#define CC_SURFACES_DEBUG_VIEW_DIRECT_DIFFUSE CC_SURFACES_DEBUG_VIEW_IOR + 1\n#define CC_SURFACES_DEBUG_VIEW_DIRECT_SPECULAR CC_SURFACES_DEBUG_VIEW_DIRECT_DIFFUSE + 1\n#define CC_SURFACES_DEBUG_VIEW_DIRECT_ALL CC_SURFACES_DEBUG_VIEW_DIRECT_SPECULAR + 1\n#define CC_SURFACES_DEBUG_VIEW_ENV_DIFFUSE CC_SURFACES_DEBUG_VIEW_DIRECT_ALL + 1\n#define CC_SURFACES_DEBUG_VIEW_ENV_SPECULAR CC_SURFACES_DEBUG_VIEW_ENV_DIFFUSE + 1\n#define CC_SURFACES_DEBUG_VIEW_ENV_ALL CC_SURFACES_DEBUG_VIEW_ENV_SPECULAR + 1\n#define CC_SURFACES_DEBUG_VIEW_EMISSIVE CC_SURFACES_DEBUG_VIEW_ENV_ALL + 1\n#define CC_SURFACES_DEBUG_VIEW_LIGHT_MAP CC_SURFACES_DEBUG_VIEW_EMISSIVE + 1\n#define CC_SURFACES_DEBUG_VIEW_SHADOW CC_SURFACES_DEBUG_VIEW_LIGHT_MAP + 1\n#define CC_SURFACES_DEBUG_VIEW_AO CC_SURFACES_DEBUG_VIEW_SHADOW + 1\n#define CC_SURFACES_DEBUG_VIEW_FRESNEL CC_SURFACES_DEBUG_VIEW_AO + 1\n#define CC_SURFACES_DEBUG_VIEW_TRANSMIT_DIRECT_DIFFUSE CC_SURFACES_DEBUG_VIEW_FRESNEL + 1\n#define CC_SURFACES_DEBUG_VIEW_TRANSMIT_DIRECT_SPECULAR CC_SURFACES_DEBUG_VIEW_TRANSMIT_DIRECT_DIFFUSE + 1\n#define CC_SURFACES_DEBUG_VIEW_TRANSMIT_ENV_DIFFUSE CC_SURFACES_DEBUG_VIEW_TRANSMIT_DIRECT_SPECULAR + 1\n#define CC_SURFACES_DEBUG_VIEW_TRANSMIT_ENV_SPECULAR CC_SURFACES_DEBUG_VIEW_TRANSMIT_ENV_DIFFUSE + 1\n#define CC_SURFACES_DEBUG_VIEW_TRANSMIT_ALL CC_SURFACES_DEBUG_VIEW_TRANSMIT_ENV_SPECULAR + 1\n#define CC_SURFACES_DEBUG_VIEW_TRT_DIRECT CC_SURFACES_DEBUG_VIEW_TRANSMIT_ALL + 1\n#define CC_SURFACES_DEBUG_VIEW_TRT_ENVIRONMENT CC_SURFACES_DEBUG_VIEW_TRT_DIRECT + 1\n#define CC_SURFACES_DEBUG_VIEW_TRT_ALL CC_SURFACES_DEBUG_VIEW_TRT_ENVIRONMENT + 1\n#define CC_SURFACES_DEBUG_VIEW_FOG CC_SURFACES_DEBUG_VIEW_TRT_ALL + 1\n#define CC_SURFACES_DEBUG_VIEW_SINGLE 1\n#define CC_SURFACES_DEBUG_VIEW_COMPOSITE_AND_MISC 2\n#define IS_DEBUG_VIEW_ENABLE_WITH_CAMERA (cc_surfaceTransform.y != 3.0)\n#define IS_DEBUG_VIEW_LIGHTING_ENABLE_WITH_ALBEDO (UnpackBitFromFloat(cc_debug_view_mode.w, 6) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_MISC_ENABLE_CSM_LAYER_COLORATION (UnpackBitFromFloat(cc_debug_view_mode.w, 7) && IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_DIRECT_DIFFUSE (UnpackBitFromFloat(cc_debug_view_mode.y, 0) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_DIRECT_SPECULAR (UnpackBitFromFloat(cc_debug_view_mode.y, 1) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_ENV_DIFFUSE (UnpackBitFromFloat(cc_debug_view_mode.y, 2) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_ENV_SPECULAR (UnpackBitFromFloat(cc_debug_view_mode.y, 3) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_EMISSIVE (UnpackBitFromFloat(cc_debug_view_mode.y, 4) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_LIGHT_MAP (UnpackBitFromFloat(cc_debug_view_mode.y, 5) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_SHADOW (UnpackBitFromFloat(cc_debug_view_mode.y, 6) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_AO (UnpackBitFromFloat(cc_debug_view_mode.y, 7) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_NORMAL_MAP (UnpackBitFromFloat(cc_debug_view_mode.z, 0) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_FOG (UnpackBitFromFloat(cc_debug_view_mode.z, 1) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_TONE_MAPPING (UnpackBitFromFloat(cc_debug_view_mode.z, 2) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_GAMMA_CORRECTION (UnpackBitFromFloat(cc_debug_view_mode.z, 3) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_FRESNEL (UnpackBitFromFloat(cc_debug_view_mode.z, 4) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_TRANSMIT_DIFFUSE (UnpackBitFromFloat(cc_debug_view_mode.z, 5) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_TRANSMIT_SPECULAR (UnpackBitFromFloat(cc_debug_view_mode.z, 6) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_TRT (UnpackBitFromFloat(cc_debug_view_mode.z, 7) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_TT (UnpackBitFromFloat(cc_debug_view_mode.w, 0) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#if (CC_PIPELINE_TYPE == 0 || CC_FORCE_FORWARD_SHADING)\n  #if CC_FORWARD_ADD\n    #if CC_PIPELINE_TYPE == 0\n      #define LIGHTS_PER_PASS 1\n    #else\n      #define LIGHTS_PER_PASS 10\n    #endif\n    #if CC_ENABLE_CLUSTERED_LIGHT_CULLING == 0\n    layout(std140) uniform CCForwardLight {\n      highp vec4 cc_lightPos[LIGHTS_PER_PASS];\n      vec4 cc_lightColor[LIGHTS_PER_PASS];\n      vec4 cc_lightSizeRangeAngle[LIGHTS_PER_PASS];\n      vec4 cc_lightDir[LIGHTS_PER_PASS];\n    };\n    #endif\n  #endif\n#endif\n#if CC_USE_LIGHT_PROBE\n  #if !USE_INSTANCING\n    layout(std140) uniform CCSH {\n      vec4 cc_sh_linear_const_r;\n      vec4 cc_sh_linear_const_g;\n      vec4 cc_sh_linear_const_b;\n      vec4 cc_sh_quadratic_r;\n      vec4 cc_sh_quadratic_g;\n      vec4 cc_sh_quadratic_b;\n      vec4 cc_sh_quadratic_a;\n    };\n  #endif\n#endif\nlayout(std140) uniform CCShadow {\n  highp mat4 cc_matLightView;\n  highp mat4 cc_matLightViewProj;\n  highp vec4 cc_shadowInvProjDepthInfo;\n  highp vec4 cc_shadowProjDepthInfo;\n  highp vec4 cc_shadowProjInfo;\n  mediump vec4 cc_shadowNFLSInfo;\n  mediump vec4 cc_shadowWHPBInfo;\n  mediump vec4 cc_shadowLPNNInfo;\n  lowp vec4 cc_shadowColor;\n  mediump vec4 cc_planarNDInfo;\n};\n#if CC_SUPPORT_CASCADED_SHADOW_MAP\n  layout(std140) uniform CCCSM {\n    highp vec4 cc_csmViewDir0[4];\n    highp vec4 cc_csmViewDir1[4];\n    highp vec4 cc_csmViewDir2[4];\n    highp vec4 cc_csmAtlas[4];\n    highp mat4 cc_matCSMViewProj[4];\n    highp vec4 cc_csmProjDepthInfo[4];\n    highp vec4 cc_csmProjInfo[4];\n    highp vec4 cc_csmSplitsInfo;\n  };\n#endif\nuniform samplerCube cc_environment;\n#if CC_USE_IBL\n  #if CC_USE_DIFFUSEMAP\n    uniform samplerCube cc_diffuseMap;\n  #endif\n#endif\n#if CC_USE_REFLECTION_PROBE\n  uniform samplerCube cc_reflectionProbeCubemap;\n  uniform sampler2D cc_reflectionProbePlanarMap;\n  uniform sampler2D cc_reflectionProbeDataMap;\n#endif\n#define QUATER_PI         0.78539816340\n#define HALF_PI           1.57079632679\n#define PI                3.14159265359\n#define PI2               6.28318530718\n#define PI4               12.5663706144\n#define INV_QUATER_PI     1.27323954474\n#define INV_HALF_PI       0.63661977237\n#define INV_PI            0.31830988618\n#define INV_PI2           0.15915494309\n#define INV_PI4           0.07957747155\n#define EPSILON           1e-6\n#define EPSILON_LOWP      1e-4\n#define LOG2              1.442695\n#define EXP_VALUE         2.71828183f\n#define FP_MAX            65504.0\n#define FP_SCALE          0.0009765625\n#define FP_SCALE_INV      1024.0\n#define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\n#define LIGHT_MAP_TYPE_DISABLED 0\n#define LIGHT_MAP_TYPE_ALL_IN_ONE 1\n#define LIGHT_MAP_TYPE_INDIRECT_OCCLUSION 2\n#define REFLECTION_PROBE_TYPE_NONE 0\n#define REFLECTION_PROBE_TYPE_CUBE 1\n#define REFLECTION_PROBE_TYPE_PLANAR 2\n#define LIGHT_TYPE_DIRECTIONAL 0.0\n#define LIGHT_TYPE_POINT 1.0\n#define LIGHT_TYPE_SPOT 2.0\n#define LIGHT_TYPE_SPHERE 3.0\n#define LIGHT_TYPE_RANGED_DIRECTIONAL 4.0\n#define IS_DIRECTIONAL_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_DIRECTIONAL)) < EPSILON_LOWP)\n#define IS_SPHERE_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_SPHERE)) < EPSILON_LOWP)\n#define IS_SPOT_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_SPOT)) < EPSILON_LOWP)\n#define IS_POINT_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_POINT)) < EPSILON_LOWP)\n#define IS_RANGED_DIRECTIONAL_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_RANGED_DIRECTIONAL)) < EPSILON_LOWP)\nvec4 packDepthToRGBA (float depth) {\n  vec4 ret = vec4(1.0, 255.0, 65025.0, 16581375.0) * depth;\n  ret = fract(ret);\n  ret -= vec4(ret.yzw, 0.0) / 255.0;\n  return ret;\n}\n#define UnpackBitFromFloat(value, bit) (mod(floor(value / pow(10.0, float(bit))), 10.0) > 0.0)\nfloat GetLinearDepthFromViewSpace(vec3 viewPos, float near, float far) {\n  float dist = length(viewPos);\n  return (dist - near) / (far - near);\n}\n#if CC_SUPPORT_CASCADED_SHADOW_MAP\n#endif\nfloat CCGetLinearDepth(vec3 worldPos, float viewSpaceBias) {\n\tvec4 viewPos = cc_matLightView * vec4(worldPos.xyz, 1.0);\n  viewPos.z += viewSpaceBias;\n\treturn GetLinearDepthFromViewSpace(viewPos.xyz, cc_shadowNFLSInfo.x, cc_shadowNFLSInfo.y);\n}\nfloat CCGetLinearDepth(vec3 worldPos) {\n\treturn CCGetLinearDepth(worldPos, 0.0);\n}\n#if CC_RECEIVE_SHADOW\n  uniform highp sampler2D cc_shadowMap;\n  uniform highp sampler2D cc_spotShadowMap;\n  #if CC_SUPPORT_CASCADED_SHADOW_MAP\n  #else\n  #endif\n#endif\n#if CC_USE_FOG != 4\n#endif\n#if CC_USE_LIGHT_PROBE\n  #if CC_USE_LIGHT_PROBE\n  #endif\n#endif\n#if CC_USE_REFLECTION_PROBE\n  layout(std140) uniform CCLocal {\n    highp mat4 cc_matWorld;\n    highp mat4 cc_matWorldIT;\n    highp vec4 cc_lightingMapUVParam;\n    highp vec4 cc_localShadowBias;\n    highp vec4 cc_reflectionProbeData1;\n    highp vec4 cc_reflectionProbeData2;\n  };\n#endif\n#if CC_USE_LIGHTMAP && !CC_FORWARD_ADD\n  uniform sampler2D cc_lightingMap;\n#endif\nlayout(std140) uniform Constants {\n  vec4  tilingOffset;\n  vec4  diffuseColor;\n  vec4  specularColor;\n  vec4  emissive;\n  float emissiveScale;\n  float alphaThreshold;\n  float shininessExponent;\n  float glossiness;\n  float metallic;\n  float normalScale;\n  float transparencyFactor;\n  float diffuseFactor;\n  float specularFactor;\n};\n#define DCC_APP_OTHERS 0\n#define DCC_APP_MAX 1\n#define DCC_APP_BLENDER 2\n#define DCC_APP_CINEMA4D 3\n#define DCC_APP_GLTF 4\n#define DCC_APP_MAYA 5\n#if USE_SHININESS_MAP\n  uniform sampler2D shininessExponentMap;\n#endif\n#if USE_SPECULAR_GLOSSINESS_MAP\n  uniform sampler2D specularGlossinessMap;\n#endif\n#if USE_SPECULAR_MAP\n  uniform sampler2D specularMap;\n#endif\n #if USE_METALLIC_MAP\n  uniform sampler2D metallicMap;\n#endif\n#if USE_ALBEDO_MAP\n  uniform sampler2D albedoMap;\n#endif\n#if USE_TRANSPARENCY_MAP\n  uniform sampler2D transparencyMap;\n#endif\n#if USE_EMISSIVE_MAP\n  uniform sampler2D emissiveMap;\n#endif\n#if USE_EMISSIVESCALE_MAP\n  uniform sampler2D emissiveScaleMap;\n#endif\n#if USE_NORMAL_MAP\n  uniform sampler2D normalMap;\n#endif\n#if USE_OCCLUSION_MAP\n  uniform sampler2D occlusionMap;\n#endif\n#define CC_SURFACES_FRAGMENT_ALPHA_CLIP_ONLY\nvoid SurfacesFragmentAlphaClipOnly()\n{\n    #if USE_ALPHA_TEST\n      float alpha = diffuseColor.a;\n      #if USE_VERTEX_COLOR\n        alpha *= FSInput_vertexColor.a;\n      #endif\n      #if USE_ALBEDO_MAP\n        alpha *= texture(albedoMap, TEXTURE_UV).a * transparencyFactor;\n      #endif\n      #if USE_TRANSPARENCY_MAP\n        alpha = texture(transparencyMap, TEXTURE_UV).TRANSPARENCY_MAP_CHANNEL;\n        #if DCC_APP_NAME == DCC_APP_MAYA\n          alpha = 1.0 - alpha;\n        #endif\n      #endif\n      if (alpha < alphaThreshold) discard;\n    #endif\n}\n#define CC_SURFACES_FRAGMENT_MODIFY_WORLD_NORMAL\n#define CC_SURFACES_FRAGMENT_MODIFY_EMISSIVE\n#define CC_SURFACES_FRAGMENT_MODIFY_SHARED_DATA\nstruct SurfacesMaterialData\n{\n  #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n  vec3 worldPos, worldPos_fract_part;\n  #else\n  vec3 worldPos;\n  #endif\n  vec4 baseColor;\n  vec3 worldNormal;\n  vec3 emissive;\n  float specularIntensity;\n  float roughness;\n  float metallic;\n  float ao;\n  vec3 worldTangent, worldBinormal;\n  float ior;\n#if CC_SURFACES_LIGHTING_ANISOTROPIC\n  float anisotropyShape;\n#endif\n#if CC_SURFACES_LIGHTING_TRANSMIT_SPECULAR || CC_SURFACES_LIGHTING_TRANSMIT_DIFFUSE\n  vec3 inScatteringLightColor;\n  vec4 transmitParams;\n#endif\n#if CC_SURFACES_LIGHTING_TRANSMIT_DIFFUSE\n  vec4 transmitDiffuseParams;\n#endif\n#if CC_SURFACES_LIGHTING_TRT\n  vec3 baseColorTRT;\n  float trtIntensity, roughnessTRT;\n  vec3 worldTangentTRT, worldBinormalTRT;\n#endif\n#if CC_SURFACES_LIGHTING_TT\n  vec3 baseColorTT;\n  float ttIntensity, ttScatterCoef;\n#endif\n};\nin highp vec2 v_clip_depth;\nlayout(location = 0) out vec4 fragColorX;\nvoid main () {\n  SurfacesFragmentAlphaClipOnly();\n  highp float clipDepth = v_clip_depth.x / v_clip_depth.y * 0.5 + 0.5;\n  if(cc_shadowLPNNInfo.x > EPSILON && cc_shadowLPNNInfo.x < 1.999999) {\n    #if CC_SHADOWMAP_USE_LINEAR_DEPTH\n      clipDepth = CCGetLinearDepth(FSInput_worldPos.xyz);\n    #endif\n  }\n  #if CC_SHADOWMAP_FORMAT == 1\n    fragColorX = packDepthToRGBA(clipDepth);\n  #else\n    fragColorX = vec4(clipDepth, 1.0, 1.0, 1.0);\n  #endif\n}"},"glsl1":{"vert":"\nprecision highp float;\n#define CC_SURFACES_USE_TANGENT_SPACE 0\n#define CC_SURFACES_USE_VERTEX_COLOR 0\n#define CC_SURFACES_USE_SECOND_UV 0\n#define CC_SURFACES_USE_LIGHT_MAP 0\n#define CC_SURFACES_TRANSFER_LOCAL_POS 0\n#ifndef CC_SURFACES_USE_SECOND_UV\n  #define CC_SURFACES_USE_SECOND_UV 0\n#endif\n#ifndef CC_SURFACES_USE_TANGENT_SPACE\n  #define CC_SURFACES_USE_TANGENT_SPACE 0\n#endif\n#ifndef CC_SURFACES_USE_VERTEX_COLOR\n  #define CC_SURFACES_USE_VERTEX_COLOR 0\n#endif\n#ifndef CC_SURFACES_TRANSFER_LOCAL_POS\n  #define CC_SURFACES_TRANSFER_LOCAL_POS 0\n#endif\n#ifndef CC_SURFACES_TRANSFER_CLIP_POS\n  #define CC_SURFACES_TRANSFER_CLIP_POS 0\n#endif\n#ifndef CC_SURFACES_USE_LIGHT_MAP\n  #ifdef CC_USE_LIGHTMAP\n    #define CC_SURFACES_USE_LIGHT_MAP CC_USE_LIGHTMAP\n  #else\n    #define CC_SURFACES_USE_LIGHT_MAP 0\n  #endif\n#endif\n#ifndef CC_SURFACES_FLIP_UV\n  #define CC_SURFACES_FLIP_UV 0\n#endif\n#ifndef CC_SURFACES_USE_TWO_SIDED\n  #define CC_SURFACES_USE_TWO_SIDED 0\n#endif\n#ifndef CC_SURFACES_USE_REFLECTION_DENOISE\n  #define CC_SURFACES_USE_REFLECTION_DENOISE 0\n#endif\n#ifndef CC_SURFACES_LIGHTING_ANISOTROPIC\n  #define CC_SURFACES_LIGHTING_ANISOTROPIC 0\n#endif\n#ifndef CC_SURFACES_LIGHTING_ANISOTROPIC_ENVCONVOLUTION_COUNT\n  #define CC_SURFACES_LIGHTING_ANISOTROPIC_ENVCONVOLUTION_COUNT 0\n#endif\n#ifndef CC_SURFACES_USE_LEGACY_COMPATIBLE_LIGHTING\n  #define CC_SURFACES_USE_LEGACY_COMPATIBLE_LIGHTING 0\n#endif\n#ifndef CC_SURFACES_LIGHTING_USE_FRESNEL\n  #define CC_SURFACES_LIGHTING_USE_FRESNEL 0\n#endif\n#ifndef CC_SURFACES_LIGHTING_TRANSMIT_SPECULAR\n  #define CC_SURFACES_LIGHTING_TRANSMIT_SPECULAR 0\n#endif\n#ifndef CC_SURFACES_LIGHTING_TRANSMIT_DIFFUSE\n  #define CC_SURFACES_LIGHTING_TRANSMIT_DIFFUSE 0\n#endif\n#ifndef CC_SURFACES_LIGHTING_USE_SHADOWMAP_TRANSMIT\n  #define CC_SURFACES_LIGHTING_USE_SHADOWMAP_TRANSMIT 0\n#endif\n#ifndef CC_SURFACES_LIGHTING_TRT\n  #define CC_SURFACES_LIGHTING_TRT 0\n#endif\n#ifndef CC_SURFACES_LIGHTING_TT\n  #define CC_SURFACES_LIGHTING_TT 0\n#endif\n#ifndef CC_SURFACES_ENABLE_DEBUG_VIEW\n  #define CC_SURFACES_ENABLE_DEBUG_VIEW 1\n#endif\n#ifndef CC_SURFACES_LIGHTING_CALCULATE_DIFFUSE\n  #define CC_SURFACES_LIGHTING_CALCULATE_DIFFUSE 1\n#endif\n#ifndef CC_SURFACES_LIGHTING_CALCULATE_SPECULAR\n  #define CC_SURFACES_LIGHTING_CALCULATE_SPECULAR 1\n#endif\n#define CC_USE_SURFACE_SHADER 1\nattribute vec3 a_position;\nattribute vec3 a_normal;\nattribute vec2 a_texCoord;\n#if CC_SURFACES_USE_TANGENT_SPACE\n  attribute vec4 a_tangent;\n#endif\n#if CC_SURFACES_USE_VERTEX_COLOR\n  attribute vec4 a_color;\n#endif\n#if CC_SURFACES_USE_SECOND_UV || CC_USE_LIGHTMAP\n  attribute vec2 a_texCoord1;\n#endif\n#if CC_USE_SKINNING\n    attribute vec4 a_joints;\n  attribute vec4 a_weights;\n#endif\n#if USE_INSTANCING\n  #if CC_USE_BAKED_ANIMATION\n    attribute highp vec4 a_jointAnimInfo;\n  #endif\n  attribute vec4 a_matWorld0;\n  attribute vec4 a_matWorld1;\n  attribute vec4 a_matWorld2;\n  #if CC_USE_LIGHTMAP\n    attribute vec4 a_lightingMapUVParam;\n  #endif\n  #if CC_RECEIVE_SHADOW || CC_USE_REFLECTION_PROBE\n    attribute vec4 a_localShadowBiasAndProbeId;\n  #endif\n  #if CC_USE_LIGHT_PROBE\n    attribute vec4 a_sh_linear_const_r;\n    attribute vec4 a_sh_linear_const_g;\n    attribute vec4 a_sh_linear_const_b;\n  #endif\n#endif\n#if CC_USE_MORPH\n    attribute float a_vertexId;\n#endif\nvarying highp vec3 v_worldPos;\nvarying mediump vec4 v_normal;\nvarying vec2 v_uv;\n#if CC_SURFACES_USE_VERTEX_COLOR\n  varying lowp vec4 v_color;\n#endif\n#if CC_SURFACES_USE_TANGENT_SPACE\n  varying mediump vec4 v_tangent;\n#endif\n#if CC_SURFACES_USE_SECOND_UV\n  varying mediump vec2 v_uv1;\n#endif\n#if CC_USE_LIGHTMAP && !CC_FORWARD_ADD\n  varying mediump vec3 v_luv;\n#endif\n#if CC_RECEIVE_SHADOW || CC_USE_REFLECTION_PROBE\n  varying mediump vec4 v_shadowBiasAndProbeId;\n#endif\n#if CC_USE_FOG != 4 && !CC_USE_ACCURATE_FOG\n  varying mediump float v_fogFactor;\n#endif\n#if CC_SURFACES_TRANSFER_LOCAL_POS\n  varying highp vec4 v_localPos;\n#endif\n#if CC_SURFACES_TRANSFER_CLIP_POS\n  varying highp vec4 v_clipPos;\n#endif\n#if CC_USE_LIGHT_PROBE\n  #if USE_INSTANCING\n    varying mediump vec4 v_sh_linear_const_r;\n    varying mediump vec4 v_sh_linear_const_g;\n    varying mediump vec4 v_sh_linear_const_b;\n  #endif\n#endif\n#define VSOutput_worldPos v_worldPos\n#define VSOutput_worldNormal v_normal.xyz\n#define VSOutput_faceSideSign v_normal.w\n#define VSOutput_texcoord v_uv\n#if CC_SURFACES_USE_VERTEX_COLOR\n  #define VSOutput_vertexColor v_color\n#endif\n#if CC_SURFACES_USE_TANGENT_SPACE\n  #define VSOutput_worldTangent v_tangent.xyz\n  #define VSOutput_mirrorNormal v_tangent.w\n#endif\n#if CC_SURFACES_USE_SECOND_UV\n  #define VSOutput_texcoord1 v_uv1\n#endif\n#if CC_USE_LIGHTMAP && !CC_FORWARD_ADD\n  #define VSOutput_lightMapUV v_luv\n#endif\n#if CC_RECEIVE_SHADOW\n  #define VSOutput_shadowBias v_shadowBiasAndProbeId.xy\n#endif\n#if CC_USE_REFLECTION_PROBE\n  #define VSOutput_reflectionProbeId v_shadowBiasAndProbeId.z\n#endif\n#if CC_USE_FOG != 4 && !CC_USE_ACCURATE_FOG\n  #define VSOutput_fogFactor v_fogFactor\n#endif\n#if CC_SURFACES_TRANSFER_LOCAL_POS\n  #define VSOutput_localPos v_localPos\n#endif\n#if CC_SURFACES_TRANSFER_CLIP_POS\n  #define VSOutput_clipPos v_clipPos\n#endif\nstruct SurfacesStandardVertexIntermediate\n{\n  highp vec4 position;\n  vec3 normal;\n#if CC_SURFACES_USE_TANGENT_SPACE\n  vec4 tangent;\n#endif\n#if CC_SURFACES_USE_VERTEX_COLOR\n  vec4 color;\n#endif\n  vec2 texCoord;\n#if CC_SURFACES_USE_SECOND_UV\n  vec2 texCoord1;\n#endif\n  highp vec4 clipPos;\n  highp vec3 worldPos;\n  vec4 worldNormal;\n  #if CC_SURFACES_USE_TANGENT_SPACE\n    vec3 worldTangent, worldBinormal;\n  #endif\n#if CC_RECEIVE_SHADOW || CC_USE_REFLECTION_PROBE\n  vec4 shadowBiasAndProbeId;\n#endif\n#if CC_USE_FOG != 4 && !CC_USE_ACCURATE_FOG\n  float fogFactor;\n#endif\n#if CC_USE_LIGHTMAP && !CC_FORWARD_ADD\n  vec3 lightmapUV;\n#endif\n};\n#if CC_USE_MORPH\n    int getVertexId() {\n      return int(a_vertexId);\n    }\n#endif\nuniform highp vec4 cc_cameraPos;\nuniform highp mat4 cc_matLightViewProj;\n#define QUATER_PI         0.78539816340\n#define HALF_PI           1.57079632679\n#define PI                3.14159265359\n#define PI2               6.28318530718\n#define PI4               12.5663706144\n#define INV_QUATER_PI     1.27323954474\n#define INV_HALF_PI       0.63661977237\n#define INV_PI            0.31830988618\n#define INV_PI2           0.15915494309\n#define INV_PI4           0.07957747155\n#define EPSILON           1e-6\n#define EPSILON_LOWP      1e-4\n#define LOG2              1.442695\n#define EXP_VALUE         2.71828183f\n#define FP_MAX            65504.0\n#define FP_SCALE          0.0009765625\n#define FP_SCALE_INV      1024.0\n#define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\n#define LIGHT_MAP_TYPE_DISABLED 0\n#define LIGHT_MAP_TYPE_ALL_IN_ONE 1\n#define LIGHT_MAP_TYPE_INDIRECT_OCCLUSION 2\n#define REFLECTION_PROBE_TYPE_NONE 0\n#define REFLECTION_PROBE_TYPE_CUBE 1\n#define REFLECTION_PROBE_TYPE_PLANAR 2\n#define LIGHT_TYPE_DIRECTIONAL 0.0\n#define LIGHT_TYPE_POINT 1.0\n#define LIGHT_TYPE_SPOT 2.0\n#define LIGHT_TYPE_SPHERE 3.0\n#define LIGHT_TYPE_RANGED_DIRECTIONAL 4.0\n#define IS_DIRECTIONAL_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_DIRECTIONAL)) < EPSILON_LOWP)\n#define IS_SPHERE_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_SPHERE)) < EPSILON_LOWP)\n#define IS_SPOT_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_SPOT)) < EPSILON_LOWP)\n#define IS_POINT_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_POINT)) < EPSILON_LOWP)\n#define IS_RANGED_DIRECTIONAL_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_RANGED_DIRECTIONAL)) < EPSILON_LOWP)\nhighp float decode32 (highp vec4 rgba) {\n  rgba = rgba * 255.0;\n  highp float Sign = 1.0 - (step(128.0, (rgba[3]) + 0.5)) * 2.0;\n  highp float Exponent = 2.0 * (mod(float(int((rgba[3]) + 0.5)), 128.0)) + (step(128.0, (rgba[2]) + 0.5)) - 127.0;\n  highp float Mantissa = (mod(float(int((rgba[2]) + 0.5)), 128.0)) * 65536.0 + rgba[1] * 256.0 + rgba[0] + 8388608.0;\n  return Sign * exp2(Exponent - 23.0) * Mantissa;\n}\n#if !USE_INSTANCING\n  uniform highp mat4 cc_matWorld;\n  uniform highp mat4 cc_matWorldIT;\n#endif\nvoid CCGetWorldMatrixFull(out mat4 matWorld, out mat4 matWorldIT)\n{\n  #if USE_INSTANCING\n    matWorld = mat4(\n      vec4(a_matWorld0.xyz, 0.0),\n      vec4(a_matWorld1.xyz, 0.0),\n      vec4(a_matWorld2.xyz, 0.0),\n      vec4(a_matWorld0.w, a_matWorld1.w, a_matWorld2.w, 1.0)\n    );\n    matWorldIT = matWorld;\n  #else\n    matWorld = cc_matWorld;\n    matWorldIT = cc_matWorldIT;\n  #endif\n}\n#if CC_USE_MORPH\n  uniform vec4 cc_displacementWeights[15];\n  uniform vec4 cc_displacementTextureInfo;\n  #if CC_MORPH_TARGET_HAS_POSITION\n    uniform sampler2D cc_PositionDisplacements;\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    uniform sampler2D cc_NormalDisplacements;\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    uniform sampler2D cc_TangentDisplacements;\n  #endif\n  vec2 getPixelLocation(vec2 textureResolution, int pixelIndex) {\n    float pixelIndexF = float(pixelIndex);\n    float x = mod(pixelIndexF, textureResolution.x);\n    float y = floor(pixelIndexF / textureResolution.x);\n    return vec2(x, y);\n  }\n  vec2 getPixelCoordFromLocation(vec2 location, vec2 textureResolution) {\n    return (vec2(location.x, location.y) + .5) / textureResolution;\n  }\n  #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n        int pixelIndex = elementIndex;\n        vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n        vec2 uv = getPixelCoordFromLocation(location, cc_displacementTextureInfo.xy);\n        return texture2D(tex, uv);\n      }\n  #else\n    vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n      int pixelIndex = elementIndex * 4;\n      vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n      vec2 x = getPixelCoordFromLocation(location + vec2(0.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 y = getPixelCoordFromLocation(location + vec2(1.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 z = getPixelCoordFromLocation(location + vec2(2.0, 0.0), cc_displacementTextureInfo.xy);\n      return vec4(\n        decode32(texture2D(tex, x)),\n        decode32(texture2D(tex, y)),\n        decode32(texture2D(tex, z)),\n        1.0\n      );\n    }\n  #endif\n  float getDisplacementWeight(int index) {\n    int quot = index / 4;\n    int remainder = index - quot * 4;\n    if (remainder == 0) {\n      return cc_displacementWeights[quot].x;\n    } else if (remainder == 1) {\n      return cc_displacementWeights[quot].y;\n    } else if (remainder == 2) {\n      return cc_displacementWeights[quot].z;\n    } else {\n      return cc_displacementWeights[quot].w;\n    }\n  }\n  vec3 getVec3DisplacementFromTexture(sampler2D tex, int vertexIndex) {\n  #if CC_MORPH_PRECOMPUTED\n    return fetchVec3ArrayFromTexture(tex, vertexIndex).rgb;\n  #else\n    vec3 result = vec3(0, 0, 0);\n    int nVertices = int(cc_displacementTextureInfo.z);\n    for (int iTarget = 0; iTarget < CC_MORPH_TARGET_COUNT; ++iTarget) {\n      result += (fetchVec3ArrayFromTexture(tex, nVertices * iTarget + vertexIndex).rgb * getDisplacementWeight(iTarget));\n    }\n    return result;\n  #endif\n  }\n  #if CC_MORPH_TARGET_HAS_POSITION\n  vec3 getPositionDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_PositionDisplacements, vertexId);\n  }\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n  vec3 getNormalDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_NormalDisplacements, vertexId);\n  }\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n  vec3 getTangentDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_TangentDisplacements, vertexId);\n  }\n  #endif\n  void applyMorph (inout vec4 position, inout vec3 normal, inout vec4 tangent) {\n    int vertexId = getVertexId();\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    normal.xyz = normal.xyz + getNormalDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    tangent.xyz = tangent.xyz + getTangentDisplacement(vertexId);\n  #endif\n  }\n  void applyMorph (inout vec4 position) {\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(getVertexId());\n  #endif\n  }\n#endif\n#if CC_USE_SKINNING\n  #if CC_USE_BAKED_ANIMATION\n    uniform highp vec4 cc_jointTextureInfo;\n    uniform highp vec4 cc_jointAnimInfo;\n    uniform highp sampler2D cc_jointTexture;\n    void CCGetJointTextureCoords(float pixelsPerJoint, float jointIdx, out highp float x, out highp float y, out highp float invSize)\n    {\n      #if USE_INSTANCING\n        highp float temp = pixelsPerJoint * (a_jointAnimInfo.x * a_jointAnimInfo.y + jointIdx) + a_jointAnimInfo.z;\n      #else\n        highp float temp = pixelsPerJoint * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + jointIdx) + cc_jointTextureInfo.z;\n      #endif\n      invSize = cc_jointTextureInfo.w;\n      highp float tempY = floor(temp * invSize);\n      x = floor(temp - tempY * cc_jointTextureInfo.x);\n      y = (tempY + 0.5) * invSize;\n    }\n  #else\n    #if CC_USE_REAL_TIME_JOINT_TEXTURE\n      uniform highp sampler2D cc_realtimeJoint;\n    #else\n      uniform highp vec4 cc_joints[CC_JOINT_UNIFORM_CAPACITY * 3];\n    #endif\n  #endif\n  #if CC_USE_BAKED_ANIMATION\n    #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      mat4 getJointMatrix (float i) {\n        highp float x, y, invSize;\n        CCGetJointTextureCoords(3.0, i, x, y, invSize);\n        vec4 v1 = texture2D(cc_jointTexture, vec2((x + 0.5) * invSize, y));\n        vec4 v2 = texture2D(cc_jointTexture, vec2((x + 1.5) * invSize, y));\n        vec4 v3 = texture2D(cc_jointTexture, vec2((x + 2.5) * invSize, y));\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #else\n      mat4 getJointMatrix (float i) {\n        highp float x, y, invSize;\n        CCGetJointTextureCoords(12.0, i, x, y, invSize);\n        vec4 v1 = vec4(\n          decode32(texture2D(cc_jointTexture, vec2((x + 0.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 1.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 2.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 3.5) * invSize, y)))\n        );\n        vec4 v2 = vec4(\n          decode32(texture2D(cc_jointTexture, vec2((x + 4.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 5.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 6.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 7.5) * invSize, y)))\n        );\n        vec4 v3 = vec4(\n          decode32(texture2D(cc_jointTexture, vec2((x + 8.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 9.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 10.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 11.5) * invSize, y)))\n        );\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #else\n    #if CC_USE_REAL_TIME_JOINT_TEXTURE\n      #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n        mat4 getJointMatrix (float i) {\n          float x = i;\n          vec4 v1 = texture2D(cc_realtimeJoint, vec2( x / 256.0, 0.5 / 3.0));\n          vec4 v2 = texture2D(cc_realtimeJoint, vec2( x / 256.0, 1.5 / 3.0));\n          vec4 v3 = texture2D(cc_realtimeJoint, vec2( x / 256.0, 2.5 / 3.0));\n          return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n        }\n      #else\n        mat4 getJointMatrix (float i) {\n         float x = 4.0 * i;\n          vec4 v1 = vec4(\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 0.5)/ 1024.0, 0.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 1.5)/ 1024.0, 0.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 2.5)/ 1024.0, 0.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 3.5)/ 1024.0, 0.5 / 3.0)))\n          );\n          vec4 v2 = vec4(\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 0.5)/ 1024.0, 1.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 1.5)/ 1024.0, 1.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 2.5)/ 1024.0, 1.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 3.5)/ 1024.0, 1.5 / 3.0)))\n          );\n          vec4 v3 = vec4(\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 0.5)/ 1024.0, 2.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 1.5)/ 1024.0, 2.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 2.5)/ 1024.0, 2.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 3.5)/ 1024.0, 2.5 / 3.0)))\n          );\n          return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n        }\n      #endif\n    #else\n      mat4 getJointMatrix (float i) {\n        int idx = int(i);\n        vec4 v1 = cc_joints[idx * 3];\n        vec4 v2 = cc_joints[idx * 3 + 1];\n        vec4 v3 = cc_joints[idx * 3 + 2];\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #endif\n  mat4 skinMatrix () {\n    vec4 joints = vec4(a_joints);\n    return getJointMatrix(joints.x) * a_weights.x\n         + getJointMatrix(joints.y) * a_weights.y\n         + getJointMatrix(joints.z) * a_weights.z\n         + getJointMatrix(joints.w) * a_weights.w;\n  }\n  void CCSkin (inout vec4 position) {\n    mat4 m = skinMatrix();\n    position = m * position;\n  }\n  void CCSkin (inout vec4 position, inout vec3 normal, inout vec4 tangent) {\n    mat4 m = skinMatrix();\n    position = m * position;\n    normal = (m * vec4(normal, 0.0)).xyz;\n    tangent.xyz = (m * vec4(tangent.xyz, 0.0)).xyz;\n  }\n#endif\n#if CC_USE_FOG != 4 && !CC_USE_ACCURATE_FOG\n  #if CC_USE_FOG != 4\n  #endif\n#endif\n    uniform vec4 tilingOffset;\n#define CC_SURFACES_VERTEX_MODIFY_UV\nvoid SurfacesVertexModifyUV(inout SurfacesStandardVertexIntermediate In)\n{\n  In.texCoord = In.texCoord * tilingOffset.xy + tilingOffset.zw;\n#if CC_SURFACES_USE_SECOND_UV\n  In.texCoord1 = In.texCoord1 * tilingOffset.xy + tilingOffset.zw;\n#endif\n}\n#ifndef CC_SURFACES_VERTEX_MODIFY_LOCAL_POS\nvec3 SurfacesVertexModifyLocalPos(in SurfacesStandardVertexIntermediate In)\n{\n  return In.position.xyz;\n}\n#endif\n#ifndef CC_SURFACES_VERTEX_MODIFY_LOCAL_NORMAL\n#endif\n#ifndef CC_SURFACES_VERTEX_MODIFY_LOCAL_TANGENT\n  #if CC_SURFACES_USE_TANGENT_SPACE\n  #endif\n#endif\n#ifndef CC_SURFACES_VERTEX_MODIFY_LOCAL_SHARED_DATA\nvoid SurfacesVertexModifyLocalSharedData(inout SurfacesStandardVertexIntermediate In)\n{\n}\n#endif\n#ifndef CC_SURFACES_VERTEX_MODIFY_WORLD_POS\nvec3 SurfacesVertexModifyWorldPos(in SurfacesStandardVertexIntermediate In)\n{\n  return In.worldPos;\n}\n#endif\n#ifndef CC_SURFACES_VERTEX_MODIFY_CLIP_POS\nvec4 SurfacesVertexModifyClipPos(in SurfacesStandardVertexIntermediate In)\n{\n  return In.clipPos;\n}\n#endif\n#ifndef CC_SURFACES_VERTEX_MODIFY_UV\nvoid SurfacesVertexModifyUV(inout SurfacesStandardVertexIntermediate In)\n{\n}\n#endif\n#ifndef CC_SURFACES_VERTEX_MODIFY_WORLD_NORMAL\n#endif\n#ifndef CC_SURFACES_VERTEX_MODIFY_SHARED_DATA\nvoid SurfacesVertexModifySharedData(inout SurfacesStandardVertexIntermediate In)\n{\n}\n#endif\nvoid CCSurfacesVertexInput(out SurfacesStandardVertexIntermediate In)\n{\n  In.position = vec4(a_position, 1.0);\n  In.normal = a_normal;\n#if CC_SURFACES_USE_TANGENT_SPACE\n  In.tangent = a_tangent;\n#endif\n#if CC_SURFACES_USE_VERTEX_COLOR\n  In.color = a_color;\n#endif\n  In.texCoord = a_texCoord;\n#if CC_SURFACES_USE_SECOND_UV\n  In.texCoord1 = a_texCoord1;\n#endif\n}\nvoid CCSurfacesVertexOutput(in SurfacesStandardVertexIntermediate In)\n{\n  gl_Position = In.clipPos;\n  VSOutput_worldNormal = In.worldNormal.xyz;\n  VSOutput_faceSideSign = In.worldNormal.w;\n  VSOutput_worldPos = In.worldPos;\n#if CC_SURFACES_USE_TANGENT_SPACE\n  VSOutput_worldTangent = In.worldTangent.xyz;\n  VSOutput_mirrorNormal = In.tangent.w > 0.0 ? 1.0 : -1.0;\n#endif\n#if CC_SURFACES_USE_VERTEX_COLOR\n  VSOutput_vertexColor = In.color;\n#endif\n  VSOutput_texcoord = In.texCoord;\n#if CC_SURFACES_USE_SECOND_UV\n  VSOutput_texcoord1 = In.texCoord1;\n#endif\n#if CC_USE_FOG != 4 && !CC_USE_ACCURATE_FOG\n  VSOutput_fogFactor = In.fogFactor;\n#endif\n#if CC_RECEIVE_SHADOW\n  VSOutput_shadowBias = In.shadowBiasAndProbeId.xy;\n#endif\n#if CC_USE_REFLECTION_PROBE\n  VSOutput_reflectionProbeId = In.shadowBiasAndProbeId.z;\n#endif\n#if CC_USE_LIGHTMAP && !CC_FORWARD_ADD\n  VSOutput_lightMapUV = In.lightmapUV;\n#endif\n#if CC_SURFACES_TRANSFER_LOCAL_POS\n  VSOutput_localPos = In.position;\n#endif\n#if CC_SURFACES_TRANSFER_CLIP_POS\n  VSOutput_clipPos = In.clipPos;\n#endif\n#if CC_USE_LIGHT_PROBE\n  #if USE_INSTANCING\n    v_sh_linear_const_r = a_sh_linear_const_r;\n    v_sh_linear_const_g = a_sh_linear_const_g;\n    v_sh_linear_const_b = a_sh_linear_const_b;\n  #endif\n#endif\n}\nvoid CCSurfacesVertexAnimation(inout SurfacesStandardVertexIntermediate In)\n{\nvec4 temp = vec4(0.0);\n#if CC_USE_MORPH\n  #if CC_SURFACES_USE_TANGENT_SPACE\n    applyMorph(In.position, In.normal, In.tangent);\n  #else\n    applyMorph(In.position, In.normal, temp);\n  #endif\n#endif\n#if CC_USE_SKINNING\n  #if CC_SURFACES_USE_TANGENT_SPACE\n    CCSkin(In.position, In.normal, In.tangent);\n  #else\n    CCSkin(In.position, In.normal, temp);\n  #endif\n#endif\n}\nvoid CCSurfacesVertexWorldTransform(inout SurfacesStandardVertexIntermediate In)\n{\n    mat4 matWorld, matWorldIT;\n    CCGetWorldMatrixFull(matWorld, matWorldIT);\n    In.worldPos = (matWorld * In.position).xyz;\n    In.worldNormal.xyz = normalize((matWorldIT * vec4(In.normal.xyz, 0.0)).xyz);\n    #if CC_SURFACES_USE_TANGENT_SPACE\n      In.worldTangent = normalize((matWorld * vec4(In.tangent.xyz, 0.0)).xyz);\n      In.worldBinormal = cross(In.worldNormal.xyz, In.worldTangent) * In.tangent.w;\n    #endif\n}\nvoid CCSurfacesVertexTransformUV(inout SurfacesStandardVertexIntermediate In)\n{\n  #if CC_SURFACES_FLIP_UV\n    In.texCoord = cc_cameraPos.w > 1.0 ? vec2(In.texCoord.x, 1.0 - In.texCoord.y) : In.texCoord;\n    #if CC_SURFACES_USE_SECOND_UV\n      In.texCoord1 = cc_cameraPos.w > 1.0 ? vec2(In.texCoord1.x, 1.0 - In.texCoord1.y) : In.texCoord1;\n    #endif\n  #endif\n}\nvarying highp vec2 v_clip_depth;\nvoid main()\n{\n  SurfacesStandardVertexIntermediate In;\n  CCSurfacesVertexInput(In);\n  CCSurfacesVertexAnimation(In);\n  In.position.xyz = SurfacesVertexModifyLocalPos(In);\n  SurfacesVertexModifyLocalSharedData(In);\n  CCSurfacesVertexWorldTransform(In);\n  In.worldPos = SurfacesVertexModifyWorldPos(In);\n  In.clipPos = cc_matLightViewProj * vec4(In.worldPos, 1.0);\n  In.clipPos = SurfacesVertexModifyClipPos(In);\n  SurfacesVertexModifyUV(In);\n  SurfacesVertexModifySharedData(In);\n  CCSurfacesVertexTransformUV(In);\n  CCSurfacesVertexOutput(In);\n  v_clip_depth = In.clipPos.zw;\n}","frag":"\n#ifdef GL_OES_standard_derivatives\n#extension GL_OES_standard_derivatives: enable\n#endif\n#ifdef GL_EXT_shader_texture_lod\n#extension GL_EXT_shader_texture_lod: enable\n#endif\nprecision highp float;\n#define CC_SURFACES_USE_TANGENT_SPACE 0\n#define CC_SURFACES_USE_VERTEX_COLOR 0\n#define CC_SURFACES_USE_SECOND_UV 0\n#define CC_SURFACES_USE_LIGHT_MAP 0\n#define CC_SURFACES_TRANSFER_LOCAL_POS 0\n#ifndef CC_SURFACES_USE_SECOND_UV\n  #define CC_SURFACES_USE_SECOND_UV 0\n#endif\n#ifndef CC_SURFACES_USE_TANGENT_SPACE\n  #define CC_SURFACES_USE_TANGENT_SPACE 0\n#endif\n#ifndef CC_SURFACES_USE_VERTEX_COLOR\n  #define CC_SURFACES_USE_VERTEX_COLOR 0\n#endif\n#ifndef CC_SURFACES_TRANSFER_LOCAL_POS\n  #define CC_SURFACES_TRANSFER_LOCAL_POS 0\n#endif\n#ifndef CC_SURFACES_TRANSFER_CLIP_POS\n  #define CC_SURFACES_TRANSFER_CLIP_POS 0\n#endif\n#ifndef CC_SURFACES_USE_LIGHT_MAP\n  #ifdef CC_USE_LIGHTMAP\n    #define CC_SURFACES_USE_LIGHT_MAP CC_USE_LIGHTMAP\n  #else\n    #define CC_SURFACES_USE_LIGHT_MAP 0\n  #endif\n#endif\n#ifndef CC_SURFACES_FLIP_UV\n  #define CC_SURFACES_FLIP_UV 0\n#endif\n#ifndef CC_SURFACES_USE_TWO_SIDED\n  #define CC_SURFACES_USE_TWO_SIDED 0\n#endif\n#ifndef CC_SURFACES_USE_REFLECTION_DENOISE\n  #define CC_SURFACES_USE_REFLECTION_DENOISE 0\n#endif\n#ifndef CC_SURFACES_LIGHTING_ANISOTROPIC\n  #define CC_SURFACES_LIGHTING_ANISOTROPIC 0\n#endif\n#ifndef CC_SURFACES_LIGHTING_ANISOTROPIC_ENVCONVOLUTION_COUNT\n  #define CC_SURFACES_LIGHTING_ANISOTROPIC_ENVCONVOLUTION_COUNT 0\n#endif\n#ifndef CC_SURFACES_USE_LEGACY_COMPATIBLE_LIGHTING\n  #define CC_SURFACES_USE_LEGACY_COMPATIBLE_LIGHTING 0\n#endif\n#ifndef CC_SURFACES_LIGHTING_USE_FRESNEL\n  #define CC_SURFACES_LIGHTING_USE_FRESNEL 0\n#endif\n#ifndef CC_SURFACES_LIGHTING_TRANSMIT_SPECULAR\n  #define CC_SURFACES_LIGHTING_TRANSMIT_SPECULAR 0\n#endif\n#ifndef CC_SURFACES_LIGHTING_TRANSMIT_DIFFUSE\n  #define CC_SURFACES_LIGHTING_TRANSMIT_DIFFUSE 0\n#endif\n#ifndef CC_SURFACES_LIGHTING_USE_SHADOWMAP_TRANSMIT\n  #define CC_SURFACES_LIGHTING_USE_SHADOWMAP_TRANSMIT 0\n#endif\n#ifndef CC_SURFACES_LIGHTING_TRT\n  #define CC_SURFACES_LIGHTING_TRT 0\n#endif\n#ifndef CC_SURFACES_LIGHTING_TT\n  #define CC_SURFACES_LIGHTING_TT 0\n#endif\n#ifndef CC_SURFACES_ENABLE_DEBUG_VIEW\n  #define CC_SURFACES_ENABLE_DEBUG_VIEW 1\n#endif\n#ifndef CC_SURFACES_LIGHTING_CALCULATE_DIFFUSE\n  #define CC_SURFACES_LIGHTING_CALCULATE_DIFFUSE 1\n#endif\n#ifndef CC_SURFACES_LIGHTING_CALCULATE_SPECULAR\n  #define CC_SURFACES_LIGHTING_CALCULATE_SPECULAR 1\n#endif\n#define CC_USE_SURFACE_SHADER 1\nvarying highp vec3 v_worldPos;\nvarying mediump vec4 v_normal;\nvarying vec2 v_uv;\n#if CC_SURFACES_USE_VERTEX_COLOR\n  varying lowp vec4 v_color;\n#endif\n#if CC_SURFACES_USE_TANGENT_SPACE\n  varying mediump vec4 v_tangent;\n#endif\n#if CC_SURFACES_USE_SECOND_UV\n  varying mediump vec2 v_uv1;\n#endif\n#if CC_USE_LIGHTMAP && !CC_FORWARD_ADD\n  varying mediump vec3 v_luv;\n#endif\n#if CC_RECEIVE_SHADOW || CC_USE_REFLECTION_PROBE\n  varying mediump vec4 v_shadowBiasAndProbeId;\n#endif\n#if CC_USE_FOG != 4 && !CC_USE_ACCURATE_FOG\n  varying mediump float v_fogFactor;\n#endif\n#if CC_SURFACES_TRANSFER_LOCAL_POS\n  varying highp vec4 v_localPos;\n#endif\n#if CC_SURFACES_TRANSFER_CLIP_POS\n  varying highp vec4 v_clipPos;\n#endif\n#if CC_USE_LIGHT_PROBE\n  #if USE_INSTANCING\n    varying mediump vec4 v_sh_linear_const_r;\n    varying mediump vec4 v_sh_linear_const_g;\n    varying mediump vec4 v_sh_linear_const_b;\n  #endif\n#endif\n#define FSInput_worldPos v_worldPos\n#define FSInput_worldNormal v_normal.xyz\n#define FSInput_faceSideSign v_normal.w\n#define FSInput_texcoord v_uv\n#if CC_SURFACES_USE_VERTEX_COLOR\n  #define FSInput_vertexColor v_color\n#else\n  #define FSInput_vertexColor vec4(1.0)\n#endif\n#if CC_SURFACES_USE_TANGENT_SPACE\n  #define FSInput_worldTangent v_tangent.xyz\n  #define FSInput_mirrorNormal v_tangent.w\n#else\n  #define FSInput_worldTangent vec3(0.0, 0.0, 0.0)\n  #define FSInput_mirrorNormal 1.0\n#endif\n#if CC_SURFACES_USE_SECOND_UV\n  #define FSInput_texcoord1 v_uv1\n#else\n  #define FSInput_texcoord1 vec2(0.0, 0.0)\n#endif\n#if CC_USE_LIGHTMAP && !CC_FORWARD_ADD\n  #define FSInput_lightMapUV v_luv\n#endif\n#if CC_RECEIVE_SHADOW\n  #define FSInput_shadowBias v_shadowBiasAndProbeId.xy\n#endif\n#if CC_USE_REFLECTION_PROBE\n  #define FSInput_reflectionProbeId v_shadowBiasAndProbeId.z\n#endif\n#if CC_USE_FOG != 4 && !CC_USE_ACCURATE_FOG\n  #define FSInput_fogFactor v_fogFactor\n#endif\n#if CC_SURFACES_TRANSFER_LOCAL_POS\n  #define FSInput_localPos v_localPos\n#endif\n#if CC_SURFACES_TRANSFER_CLIP_POS\n  #define FSInput_clipPos v_clipPos\n#endif\nuniform mediump vec4 cc_debug_view_mode;\nuniform mediump vec4 cc_surfaceTransform;\n#define CC_SURFACES_DEBUG_VIEW_VERTEX_COLOR 1\n#define CC_SURFACES_DEBUG_VIEW_VERTEX_NORMAL CC_SURFACES_DEBUG_VIEW_VERTEX_COLOR + 1\n#define CC_SURFACES_DEBUG_VIEW_VERTEX_TANGENT CC_SURFACES_DEBUG_VIEW_VERTEX_NORMAL + 1\n#define CC_SURFACES_DEBUG_VIEW_WORLD_POS CC_SURFACES_DEBUG_VIEW_VERTEX_TANGENT + 1\n#define CC_SURFACES_DEBUG_VIEW_VERTEX_MIRROR CC_SURFACES_DEBUG_VIEW_WORLD_POS + 1\n#define CC_SURFACES_DEBUG_VIEW_FACE_SIDE CC_SURFACES_DEBUG_VIEW_VERTEX_MIRROR + 1\n#define CC_SURFACES_DEBUG_VIEW_UV0 CC_SURFACES_DEBUG_VIEW_FACE_SIDE + 1\n#define CC_SURFACES_DEBUG_VIEW_UV1 CC_SURFACES_DEBUG_VIEW_UV0 + 1\n#define CC_SURFACES_DEBUG_VIEW_UVLIGHTMAP CC_SURFACES_DEBUG_VIEW_UV1 + 1\n#define CC_SURFACES_DEBUG_VIEW_PROJ_DEPTH CC_SURFACES_DEBUG_VIEW_UVLIGHTMAP + 1\n#define CC_SURFACES_DEBUG_VIEW_LINEAR_DEPTH CC_SURFACES_DEBUG_VIEW_PROJ_DEPTH + 1\n#define CC_SURFACES_DEBUG_VIEW_FRAGMENT_NORMAL CC_SURFACES_DEBUG_VIEW_LINEAR_DEPTH + 1\n#define CC_SURFACES_DEBUG_VIEW_FRAGMENT_TANGENT CC_SURFACES_DEBUG_VIEW_FRAGMENT_NORMAL + 1\n#define CC_SURFACES_DEBUG_VIEW_FRAGMENT_BINORMAL CC_SURFACES_DEBUG_VIEW_FRAGMENT_TANGENT + 1\n#define CC_SURFACES_DEBUG_VIEW_BASE_COLOR CC_SURFACES_DEBUG_VIEW_FRAGMENT_BINORMAL + 1\n#define CC_SURFACES_DEBUG_VIEW_DIFFUSE_COLOR CC_SURFACES_DEBUG_VIEW_BASE_COLOR + 1\n#define CC_SURFACES_DEBUG_VIEW_SPECULAR_COLOR CC_SURFACES_DEBUG_VIEW_DIFFUSE_COLOR + 1\n#define CC_SURFACES_DEBUG_VIEW_TRANSPARENCY CC_SURFACES_DEBUG_VIEW_SPECULAR_COLOR + 1\n#define CC_SURFACES_DEBUG_VIEW_METALLIC CC_SURFACES_DEBUG_VIEW_TRANSPARENCY + 1\n#define CC_SURFACES_DEBUG_VIEW_ROUGHNESS CC_SURFACES_DEBUG_VIEW_METALLIC + 1\n#define CC_SURFACES_DEBUG_VIEW_SPECULAR_INTENSITY CC_SURFACES_DEBUG_VIEW_ROUGHNESS + 1\n#define CC_SURFACES_DEBUG_VIEW_IOR CC_SURFACES_DEBUG_VIEW_SPECULAR_INTENSITY + 1\n#define CC_SURFACES_DEBUG_VIEW_DIRECT_DIFFUSE CC_SURFACES_DEBUG_VIEW_IOR + 1\n#define CC_SURFACES_DEBUG_VIEW_DIRECT_SPECULAR CC_SURFACES_DEBUG_VIEW_DIRECT_DIFFUSE + 1\n#define CC_SURFACES_DEBUG_VIEW_DIRECT_ALL CC_SURFACES_DEBUG_VIEW_DIRECT_SPECULAR + 1\n#define CC_SURFACES_DEBUG_VIEW_ENV_DIFFUSE CC_SURFACES_DEBUG_VIEW_DIRECT_ALL + 1\n#define CC_SURFACES_DEBUG_VIEW_ENV_SPECULAR CC_SURFACES_DEBUG_VIEW_ENV_DIFFUSE + 1\n#define CC_SURFACES_DEBUG_VIEW_ENV_ALL CC_SURFACES_DEBUG_VIEW_ENV_SPECULAR + 1\n#define CC_SURFACES_DEBUG_VIEW_EMISSIVE CC_SURFACES_DEBUG_VIEW_ENV_ALL + 1\n#define CC_SURFACES_DEBUG_VIEW_LIGHT_MAP CC_SURFACES_DEBUG_VIEW_EMISSIVE + 1\n#define CC_SURFACES_DEBUG_VIEW_SHADOW CC_SURFACES_DEBUG_VIEW_LIGHT_MAP + 1\n#define CC_SURFACES_DEBUG_VIEW_AO CC_SURFACES_DEBUG_VIEW_SHADOW + 1\n#define CC_SURFACES_DEBUG_VIEW_FRESNEL CC_SURFACES_DEBUG_VIEW_AO + 1\n#define CC_SURFACES_DEBUG_VIEW_TRANSMIT_DIRECT_DIFFUSE CC_SURFACES_DEBUG_VIEW_FRESNEL + 1\n#define CC_SURFACES_DEBUG_VIEW_TRANSMIT_DIRECT_SPECULAR CC_SURFACES_DEBUG_VIEW_TRANSMIT_DIRECT_DIFFUSE + 1\n#define CC_SURFACES_DEBUG_VIEW_TRANSMIT_ENV_DIFFUSE CC_SURFACES_DEBUG_VIEW_TRANSMIT_DIRECT_SPECULAR + 1\n#define CC_SURFACES_DEBUG_VIEW_TRANSMIT_ENV_SPECULAR CC_SURFACES_DEBUG_VIEW_TRANSMIT_ENV_DIFFUSE + 1\n#define CC_SURFACES_DEBUG_VIEW_TRANSMIT_ALL CC_SURFACES_DEBUG_VIEW_TRANSMIT_ENV_SPECULAR + 1\n#define CC_SURFACES_DEBUG_VIEW_TRT_DIRECT CC_SURFACES_DEBUG_VIEW_TRANSMIT_ALL + 1\n#define CC_SURFACES_DEBUG_VIEW_TRT_ENVIRONMENT CC_SURFACES_DEBUG_VIEW_TRT_DIRECT + 1\n#define CC_SURFACES_DEBUG_VIEW_TRT_ALL CC_SURFACES_DEBUG_VIEW_TRT_ENVIRONMENT + 1\n#define CC_SURFACES_DEBUG_VIEW_FOG CC_SURFACES_DEBUG_VIEW_TRT_ALL + 1\n#define CC_SURFACES_DEBUG_VIEW_SINGLE 1\n#define CC_SURFACES_DEBUG_VIEW_COMPOSITE_AND_MISC 2\n#define IS_DEBUG_VIEW_ENABLE_WITH_CAMERA (cc_surfaceTransform.y != 3.0)\n#define IS_DEBUG_VIEW_LIGHTING_ENABLE_WITH_ALBEDO (UnpackBitFromFloat(cc_debug_view_mode.w, 6) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_MISC_ENABLE_CSM_LAYER_COLORATION (UnpackBitFromFloat(cc_debug_view_mode.w, 7) && IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_DIRECT_DIFFUSE (UnpackBitFromFloat(cc_debug_view_mode.y, 0) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_DIRECT_SPECULAR (UnpackBitFromFloat(cc_debug_view_mode.y, 1) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_ENV_DIFFUSE (UnpackBitFromFloat(cc_debug_view_mode.y, 2) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_ENV_SPECULAR (UnpackBitFromFloat(cc_debug_view_mode.y, 3) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_EMISSIVE (UnpackBitFromFloat(cc_debug_view_mode.y, 4) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_LIGHT_MAP (UnpackBitFromFloat(cc_debug_view_mode.y, 5) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_SHADOW (UnpackBitFromFloat(cc_debug_view_mode.y, 6) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_AO (UnpackBitFromFloat(cc_debug_view_mode.y, 7) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_NORMAL_MAP (UnpackBitFromFloat(cc_debug_view_mode.z, 0) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_FOG (UnpackBitFromFloat(cc_debug_view_mode.z, 1) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_TONE_MAPPING (UnpackBitFromFloat(cc_debug_view_mode.z, 2) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_GAMMA_CORRECTION (UnpackBitFromFloat(cc_debug_view_mode.z, 3) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_FRESNEL (UnpackBitFromFloat(cc_debug_view_mode.z, 4) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_TRANSMIT_DIFFUSE (UnpackBitFromFloat(cc_debug_view_mode.z, 5) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_TRANSMIT_SPECULAR (UnpackBitFromFloat(cc_debug_view_mode.z, 6) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_TRT (UnpackBitFromFloat(cc_debug_view_mode.z, 7) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_TT (UnpackBitFromFloat(cc_debug_view_mode.w, 0) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#if (CC_PIPELINE_TYPE == 0 || CC_FORCE_FORWARD_SHADING)\n  #if CC_FORWARD_ADD\n    #if CC_PIPELINE_TYPE == 0\n      #define LIGHTS_PER_PASS 1\n    #else\n      #define LIGHTS_PER_PASS 10\n    #endif\n    #if CC_ENABLE_CLUSTERED_LIGHT_CULLING == 0\n    #endif\n  #endif\n#endif\n#if CC_USE_LIGHT_PROBE\n  #if !USE_INSTANCING\n    #endif\n#endif\nuniform highp mat4 cc_matLightView;\n  uniform mediump vec4 cc_shadowNFLSInfo;\n  uniform mediump vec4 cc_shadowLPNNInfo;\n#if CC_SUPPORT_CASCADED_SHADOW_MAP\n  #endif\nuniform samplerCube cc_environment;\n#if CC_USE_IBL\n  #if CC_USE_DIFFUSEMAP\n    uniform samplerCube cc_diffuseMap;\n  #endif\n#endif\n#if CC_USE_REFLECTION_PROBE\n  uniform samplerCube cc_reflectionProbeCubemap;\n  uniform sampler2D cc_reflectionProbePlanarMap;\n  uniform sampler2D cc_reflectionProbeDataMap;\n#endif\n#define QUATER_PI         0.78539816340\n#define HALF_PI           1.57079632679\n#define PI                3.14159265359\n#define PI2               6.28318530718\n#define PI4               12.5663706144\n#define INV_QUATER_PI     1.27323954474\n#define INV_HALF_PI       0.63661977237\n#define INV_PI            0.31830988618\n#define INV_PI2           0.15915494309\n#define INV_PI4           0.07957747155\n#define EPSILON           1e-6\n#define EPSILON_LOWP      1e-4\n#define LOG2              1.442695\n#define EXP_VALUE         2.71828183f\n#define FP_MAX            65504.0\n#define FP_SCALE          0.0009765625\n#define FP_SCALE_INV      1024.0\n#define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\n#define LIGHT_MAP_TYPE_DISABLED 0\n#define LIGHT_MAP_TYPE_ALL_IN_ONE 1\n#define LIGHT_MAP_TYPE_INDIRECT_OCCLUSION 2\n#define REFLECTION_PROBE_TYPE_NONE 0\n#define REFLECTION_PROBE_TYPE_CUBE 1\n#define REFLECTION_PROBE_TYPE_PLANAR 2\n#define LIGHT_TYPE_DIRECTIONAL 0.0\n#define LIGHT_TYPE_POINT 1.0\n#define LIGHT_TYPE_SPOT 2.0\n#define LIGHT_TYPE_SPHERE 3.0\n#define LIGHT_TYPE_RANGED_DIRECTIONAL 4.0\n#define IS_DIRECTIONAL_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_DIRECTIONAL)) < EPSILON_LOWP)\n#define IS_SPHERE_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_SPHERE)) < EPSILON_LOWP)\n#define IS_SPOT_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_SPOT)) < EPSILON_LOWP)\n#define IS_POINT_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_POINT)) < EPSILON_LOWP)\n#define IS_RANGED_DIRECTIONAL_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_RANGED_DIRECTIONAL)) < EPSILON_LOWP)\nvec4 packDepthToRGBA (float depth) {\n  vec4 ret = vec4(1.0, 255.0, 65025.0, 16581375.0) * depth;\n  ret = fract(ret);\n  ret -= vec4(ret.yzw, 0.0) / 255.0;\n  return ret;\n}\n#define UnpackBitFromFloat(value, bit) (mod(floor(value / pow(10.0, float(bit))), 10.0) > 0.0)\nfloat GetLinearDepthFromViewSpace(vec3 viewPos, float near, float far) {\n  float dist = length(viewPos);\n  return (dist - near) / (far - near);\n}\n#if CC_SUPPORT_CASCADED_SHADOW_MAP\n#endif\nfloat CCGetLinearDepth(vec3 worldPos, float viewSpaceBias) {\n\tvec4 viewPos = cc_matLightView * vec4(worldPos.xyz, 1.0);\n  viewPos.z += viewSpaceBias;\n\treturn GetLinearDepthFromViewSpace(viewPos.xyz, cc_shadowNFLSInfo.x, cc_shadowNFLSInfo.y);\n}\nfloat CCGetLinearDepth(vec3 worldPos) {\n\treturn CCGetLinearDepth(worldPos, 0.0);\n}\n#if CC_RECEIVE_SHADOW\n  uniform highp sampler2D cc_shadowMap;\n  uniform highp sampler2D cc_spotShadowMap;\n  #if CC_SUPPORT_CASCADED_SHADOW_MAP\n  #else\n  #endif\n#endif\n#if CC_USE_FOG != 4\n#endif\n#if CC_USE_LIGHT_PROBE\n  #if CC_USE_LIGHT_PROBE\n  #endif\n#endif\n#if CC_USE_REFLECTION_PROBE\n  #endif\n#if CC_USE_LIGHTMAP && !CC_FORWARD_ADD\n  uniform sampler2D cc_lightingMap;\n#endif\n    uniform vec4 diffuseColor;\n    uniform vec4 emissive;\n    uniform float alphaThreshold;\n    uniform float metallic;\n    uniform float transparencyFactor;\n#define DCC_APP_OTHERS 0\n#define DCC_APP_MAX 1\n#define DCC_APP_BLENDER 2\n#define DCC_APP_CINEMA4D 3\n#define DCC_APP_GLTF 4\n#define DCC_APP_MAYA 5\n#if USE_SHININESS_MAP\n  uniform sampler2D shininessExponentMap;\n#endif\n#if USE_SPECULAR_GLOSSINESS_MAP\n  uniform sampler2D specularGlossinessMap;\n#endif\n#if USE_SPECULAR_MAP\n  uniform sampler2D specularMap;\n#endif\n #if USE_METALLIC_MAP\n  uniform sampler2D metallicMap;\n#endif\n#if USE_ALBEDO_MAP\n  uniform sampler2D albedoMap;\n#endif\n#if USE_TRANSPARENCY_MAP\n  uniform sampler2D transparencyMap;\n#endif\n#if USE_EMISSIVE_MAP\n  uniform sampler2D emissiveMap;\n#endif\n#if USE_EMISSIVESCALE_MAP\n  uniform sampler2D emissiveScaleMap;\n#endif\n#if USE_NORMAL_MAP\n  uniform sampler2D normalMap;\n#endif\n#if USE_OCCLUSION_MAP\n  uniform sampler2D occlusionMap;\n#endif\n#define CC_SURFACES_FRAGMENT_ALPHA_CLIP_ONLY\nvoid SurfacesFragmentAlphaClipOnly()\n{\n    #if USE_ALPHA_TEST\n      float alpha = diffuseColor.a;\n      #if USE_VERTEX_COLOR\n        alpha *= FSInput_vertexColor.a;\n      #endif\n      #if USE_ALBEDO_MAP\n        alpha *= texture2D(albedoMap, TEXTURE_UV).a * transparencyFactor;\n      #endif\n      #if USE_TRANSPARENCY_MAP\n        alpha = texture2D(transparencyMap, TEXTURE_UV).TRANSPARENCY_MAP_CHANNEL;\n        #if DCC_APP_NAME == DCC_APP_MAYA\n          alpha = 1.0 - alpha;\n        #endif\n      #endif\n      if (alpha < alphaThreshold) discard;\n    #endif\n}\n#define CC_SURFACES_FRAGMENT_MODIFY_WORLD_NORMAL\n#define CC_SURFACES_FRAGMENT_MODIFY_EMISSIVE\n#define CC_SURFACES_FRAGMENT_MODIFY_SHARED_DATA\nstruct SurfacesMaterialData\n{\n  #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n  vec3 worldPos, worldPos_fract_part;\n  #else\n  vec3 worldPos;\n  #endif\n  vec4 baseColor;\n  vec3 worldNormal;\n  vec3 emissive;\n  float specularIntensity;\n  float roughness;\n  float metallic;\n  float ao;\n  vec3 worldTangent, worldBinormal;\n  float ior;\n#if CC_SURFACES_LIGHTING_ANISOTROPIC\n  float anisotropyShape;\n#endif\n#if CC_SURFACES_LIGHTING_TRANSMIT_SPECULAR || CC_SURFACES_LIGHTING_TRANSMIT_DIFFUSE\n  vec3 inScatteringLightColor;\n  vec4 transmitParams;\n#endif\n#if CC_SURFACES_LIGHTING_TRANSMIT_DIFFUSE\n  vec4 transmitDiffuseParams;\n#endif\n#if CC_SURFACES_LIGHTING_TRT\n  vec3 baseColorTRT;\n  float trtIntensity, roughnessTRT;\n  vec3 worldTangentTRT, worldBinormalTRT;\n#endif\n#if CC_SURFACES_LIGHTING_TT\n  vec3 baseColorTT;\n  float ttIntensity, ttScatterCoef;\n#endif\n};\nvarying highp vec2 v_clip_depth;\nvoid main () {\n  SurfacesFragmentAlphaClipOnly();\n  highp float clipDepth = v_clip_depth.x / v_clip_depth.y * 0.5 + 0.5;\n  if(cc_shadowLPNNInfo.x > EPSILON && cc_shadowLPNNInfo.x < 1.999999) {\n    #if CC_SHADOWMAP_USE_LINEAR_DEPTH\n      clipDepth = CCGetLinearDepth(FSInput_worldPos.xyz);\n    #endif\n  }\n  #if CC_SHADOWMAP_FORMAT == 1\n    gl_FragColor = packDepthToRGBA(clipDepth);\n  #else\n    gl_FragColor = vec4(clipDepth, 1.0, 1.0, 1.0);\n  #endif\n}"},"builtins":{"globals":{"blocks":[{"name":"CCGlobal","defines":[]},{"name":"CCCamera","defines":[]},{"name":"CCShadow","defines":[]},{"name":"CCCSM","defines":["CC_SUPPORT_CASCADED_SHADOW_MAP"]}],"samplerTextures":[{"name":"cc_environment","defines":[]},{"name":"cc_diffuseMap","defines":["CC_USE_IBL","CC_USE_DIFFUSEMAP"]},{"name":"cc_shadowMap","defines":["CC_RECEIVE_SHADOW"]},{"name":"cc_spotShadowMap","defines":["CC_RECEIVE_SHADOW"]}],"buffers":[],"images":[]},"locals":{"blocks":[{"name":"CCLocal","defines":["!USE_INSTANCING"]},{"name":"CCMorph","defines":["CC_USE_MORPH"]},{"name":"CCSkinningTexture","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"CCSkinningAnimation","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"CCSkinning","defines":["CC_USE_SKINNING","!CC_USE_BAKED_ANIMATION","!CC_USE_REAL_TIME_JOINT_TEXTURE"]},{"name":"CCForwardLight","defines":["CC_FORWARD_ADD","CC_ENABLE_CLUSTERED_LIGHT_CULLING"]},{"name":"CCSH","defines":["CC_USE_LIGHT_PROBE","!USE_INSTANCING"]}],"samplerTextures":[{"name":"cc_PositionDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_POSITION"]},{"name":"cc_NormalDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_NORMAL"]},{"name":"cc_TangentDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_TANGENT"]},{"name":"cc_jointTexture","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"cc_realtimeJoint","defines":["CC_USE_SKINNING","!CC_USE_BAKED_ANIMATION","CC_USE_REAL_TIME_JOINT_TEXTURE"]},{"name":"cc_reflectionProbeCubemap","defines":["CC_USE_REFLECTION_PROBE"]},{"name":"cc_reflectionProbePlanarMap","defines":["CC_USE_REFLECTION_PROBE"]},{"name":"cc_reflectionProbeDataMap","defines":["CC_USE_REFLECTION_PROBE"]},{"name":"cc_lightingMap","defines":["CC_USE_LIGHTMAP","!CC_FORWARD_ADD"]}],"buffers":[],"images":[]},"statistics":{"CC_EFFECT_USED_VERTEX_UNIFORM_VECTORS":101,"CC_EFFECT_USED_FRAGMENT_UNIFORM_VECTORS":131}},"defines":[{"name":"USE_INSTANCING","type":"boolean"},{"name":"CC_USE_SKINNING","type":"boolean"},{"name":"CC_USE_BAKED_ANIMATION","type":"boolean"},{"name":"CC_USE_LIGHTMAP","type":"boolean"},{"name":"CC_RECEIVE_SHADOW","type":"boolean"},{"name":"CC_USE_LIGHT_PROBE","type":"boolean","default":0},{"name":"CC_USE_MORPH","type":"boolean"},{"name":"CC_FORWARD_ADD","type":"boolean"},{"name":"CC_USE_FOG","type":"number","range":[0,4]},{"name":"CC_USE_ACCURATE_FOG","type":"boolean"},{"name":"CC_USE_REFLECTION_PROBE","type":"boolean"},{"name":"CC_MORPH_TARGET_COUNT","type":"number","range":[2,8]},{"name":"CC_MORPH_TARGET_HAS_POSITION","type":"boolean"},{"name":"CC_MORPH_TARGET_HAS_NORMAL","type":"boolean"},{"name":"CC_MORPH_TARGET_HAS_TANGENT","type":"boolean"},{"name":"CC_MORPH_PRECOMPUTED","type":"boolean"},{"name":"CC_USE_REAL_TIME_JOINT_TEXTURE","type":"boolean"},{"name":"CC_DISABLE_STRUCTURE_IN_FRAGMENT_SHADER","type":"number","range":[0,1]},{"name":"CC_PIPELINE_TYPE","type":"number","range":[0,1]},{"name":"CC_FORCE_FORWARD_SHADING","type":"boolean"},{"name":"CC_SUPPORT_CASCADED_SHADOW_MAP","type":"boolean"},{"name":"CC_USE_IBL","type":"number","range":[0,2]},{"name":"CC_USE_DIFFUSEMAP","type":"number","range":[0,2]},{"name":"TEXTURE_UV","type":"string","options":["v_uv","v_uv1"]},{"name":"DCC_APP_NAME","type":"number","range":[0,5]},{"name":"USE_SHININESS_MAP","type":"boolean"},{"name":"GLOSSINESS_MAP_CHANNEL","type":"string","options":["r","g","b","a"]},{"name":"USE_SPECULAR_GLOSSINESS_MAP","type":"boolean"},{"name":"USE_SPECULAR_MAP","type":"boolean"},{"name":"USE_METALLIC_MAP","type":"boolean"},{"name":"USE_ALBEDO_MAP","type":"boolean"},{"name":"USE_TRANSPARENCY_MAP","type":"boolean"},{"name":"TRANSPARENCY_MAP_CHANNEL","type":"string","options":["a","r","g","b"]},{"name":"USE_EMISSIVE_MAP","type":"boolean"},{"name":"USE_EMISSIVESCALE_MAP","type":"boolean"},{"name":"USE_NORMAL_MAP","type":"boolean"},{"name":"NORMAL_UV","type":"string","options":["v_uv","v_uv1"]},{"name":"USE_OCCLUSION_MAP","type":"boolean"},{"name":"OCCLUSION_UV","type":"string","options":["v_uv","v_uv1"]},{"name":"OCCLUSION_CHANNEL","type":"string","options":["r","g","b","a"]},{"name":"USE_ALPHA_TEST","type":"boolean"},{"name":"USE_VERTEX_COLOR","type":"boolean"},{"name":"CC_SHADOWMAP_USE_LINEAR_DEPTH","type":"boolean"},{"name":"CC_SHADOWMAP_FORMAT","type":"number","range":[0,3]}]}],[{"name":"opaque","passes":[{"program":"util/dcc/imported-specular-glossiness|standard-vs|standard-fs","properties":{"mainTexture":{"value":"grey","type":28,"handleInfo":["albedoMap",0,28]},"mainColor":{"linear":true,"type":16,"value":[1,1,1,1],"handleInfo":["diffuseColor",0,16]},"albedoScale":{"type":13,"value":[1],"handleInfo":["diffuseFactor",0,13]},"alphaThreshold":{"type":13,"value":[0.5]},"emissive":{"linear":true,"type":16,"value":[0,0,0,1]},"emissiveMap":{"value":"grey","type":28},"emissiveScale":{"type":13,"value":[1]},"emissiveScaleMap":{"value":"grey","type":28},"shininessExponentMap":{"value":"grey","type":28},"shininessExponent":{"type":13,"value":[100]},"specularGlossinessMap":{"value":"grey","type":28},"specularColor":{"linear":true,"type":16,"value":[0,0,0,0]},"specularMap":{"value":"grey","type":28},"specularFactor":{"type":13,"value":[1]},"transparencyMap":{"value":"grey","type":28},"transparencyFactor":{"type":13,"value":[1]},"tilingOffset":{"type":16,"value":[1,1,0,0]},"normalStrength":{"type":13,"value":[1],"handleInfo":["normalScale",0,13]},"normalMap":{"value":"normal","type":28},"glossiness":{"type":13,"value":[0]},"metallic":{"type":13,"value":[0]},"metallicMap":{"value":"grey","type":28},"occlusionMap":{"value":"white","type":28},"albedoMap":{"type":28,"value":"grey"},"diffuseColor":{"type":16,"value":[1,1,1,1]},"diffuseFactor":{"type":13,"value":[1]},"normalScale":{"type":13,"value":[1]}}},{"phase":"forward-add","propertyIndex":0,"program":"util/dcc/imported-specular-glossiness|standard-vs|standard-fs","embeddedMacros":{"CC_FORWARD_ADD":true},"blendState":{"targets":[{"blend":true,"blendSrc":1,"blendDst":1,"blendSrcAlpha":0,"blendDstAlpha":1}]},"depthStencilState":{"depthFunc":2,"depthTest":true,"depthWrite":false}},{"phase":"shadow-caster","propertyIndex":0,"program":"util/dcc/imported-specular-glossiness|shadow-caster-vs|shadow-caster-fs","rasterizerState":{"cullMode":1},"properties":{"tilingOffset":{"type":16,"value":[1,1,0,0]},"mainColor":{"type":16,"value":[1,1,1,1],"handleInfo":["diffuseColor",0,16]},"albedoScale":{"type":13,"value":[1],"handleInfo":["diffuseFactor",0,13]},"alphaThreshold":{"type":13,"value":[0.5]},"mainTexture":{"value":"grey","type":28,"handleInfo":["albedoMap",0,28]},"transparencyMap":{"value":"grey","type":28},"transparencyFactor":{"type":13,"value":[1]},"diffuseColor":{"type":16,"value":[1,1,1,1]},"diffuseFactor":{"type":13,"value":[1]},"albedoMap":{"type":28,"value":"grey"}}}]},{"name":"transparent","passes":[{"program":"util/dcc/imported-specular-glossiness|standard-vs|standard-fs","embeddedMacros":{"CC_FORCE_FORWARD_SHADING":true},"blendState":{"targets":[{"blend":true,"blendSrc":2,"blendDst":4,"blendDstAlpha":4}]},"depthStencilState":{"depthTest":true,"depthWrite":false},"properties":{"mainTexture":{"value":"grey","type":28,"handleInfo":["albedoMap",0,28]},"mainColor":{"linear":true,"type":16,"value":[1,1,1,1],"handleInfo":["diffuseColor",0,16]},"albedoScale":{"type":13,"value":[1],"handleInfo":["diffuseFactor",0,13]},"alphaThreshold":{"type":13,"value":[0.5]},"emissive":{"linear":true,"type":16,"value":[0,0,0,1]},"emissiveMap":{"value":"grey","type":28},"emissiveScale":{"type":13,"value":[1]},"emissiveScaleMap":{"value":"grey","type":28},"shininessExponentMap":{"value":"grey","type":28},"shininessExponent":{"type":13,"value":[100]},"specularGlossinessMap":{"value":"grey","type":28},"specularColor":{"linear":true,"type":16,"value":[0,0,0,0]},"specularMap":{"value":"grey","type":28},"specularFactor":{"type":13,"value":[1]},"transparencyMap":{"value":"grey","type":28},"transparencyFactor":{"type":13,"value":[1]},"tilingOffset":{"type":16,"value":[1,1,0,0]},"normalStrength":{"type":13,"value":[1],"handleInfo":["normalScale",0,13]},"normalMap":{"value":"normal","type":28},"glossiness":{"type":13,"value":[0]},"metallic":{"type":13,"value":[0]},"metallicMap":{"value":"grey","type":28},"occlusionMap":{"value":"white","type":28},"albedoMap":{"type":28,"value":"grey"},"diffuseColor":{"type":16,"value":[1,1,1,1]},"diffuseFactor":{"type":13,"value":[1]},"normalScale":{"type":13,"value":[1]}}},{"phase":"forward-add","propertyIndex":0,"program":"util/dcc/imported-specular-glossiness|standard-vs|standard-fs","embeddedMacros":{"CC_FORWARD_ADD":true},"blendState":{"targets":[{"blend":true,"blendSrc":1,"blendDst":1,"blendSrcAlpha":0,"blendDstAlpha":1}]},"depthStencilState":{"depthFunc":2,"depthTest":true,"depthWrite":false}},{"phase":"shadow-caster","propertyIndex":0,"program":"util/dcc/imported-specular-glossiness|shadow-caster-vs|shadow-caster-fs","rasterizerState":{"cullMode":1},"properties":{"tilingOffset":{"type":16,"value":[1,1,0,0]},"mainColor":{"type":16,"value":[1,1,1,1],"handleInfo":["diffuseColor",0,16]},"albedoScale":{"type":13,"value":[1],"handleInfo":["diffuseFactor",0,13]},"alphaThreshold":{"type":13,"value":[0.5]},"mainTexture":{"value":"grey","type":28,"handleInfo":["albedoMap",0,28]},"transparencyMap":{"value":"grey","type":28},"transparencyFactor":{"type":13,"value":[1]},"diffuseColor":{"type":16,"value":[1,1,1,1]},"diffuseFactor":{"type":13,"value":[1]},"albedoMap":{"type":28,"value":"grey"}}}]}]]],0,0,[],[],[]],[[{"name":"img_celebmoment_rarity_container","rect":{"x":0,"y":0,"width":112,"height":95},"offset":{"x":0,"y":0},"originalSize":{"width":112,"height":95},"rotated":false,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[-56,-47.5,0,56,-47.5,0,-56,47.5,0,56,47.5,0],"indexes":[0,1,2,2,1,3],"uv":[0,95,112,95,0,0,112,0],"nuv":[0,0,1,0,0,1,1,1],"minPos":{"x":-56,"y":-47.5,"z":0},"maxPos":{"x":56,"y":47.5,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[10],[488]],[[[58,"SideProp_reverse"],[100,"SideProp_reverse",[-31],[[189,-29,[7,"f58yxP6+VLmJBUo4AeYIQX"],-28,[-21,-22,-23,-24,-25,-26,-27]],[190,true,-30,[7,"f4P9Gc7JhGIaBW8TA5Vrk+"]]],[93,"9dqzIfPdlPQrKp/rbyFqQq",null,-20,0,[[5,["mainRenderer"],-19,[0,["8dt/KCiu1GOJ6DGYai+gUP"]],-18,[0,["3ew1Vo2adBpqZ739+OrPkj"]]]],[-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17]],[1,-6.083,0,-5.863]],[0,["8dt/KCiu1GOJ6DGYai+gUP"]],[0,["8dt/KCiu1GOJ6DGYai+gUP"]],[0,["8dt/KCiu1GOJ6DGYai+gUP"]],[0,["8dt/KCiu1GOJ6DGYai+gUP"]],[0,["8dt/KCiu1GOJ6DGYai+gUP"]],[0,["8dt/KCiu1GOJ6DGYai+gUP"]],[0,["8dt/KCiu1GOJ6DGYai+gUP"]],[0,["8dt/KCiu1GOJ6DGYai+gUP"]],[0,["8dt/KCiu1GOJ6DGYai+gUP"]],[0,["8dt/KCiu1GOJ6DGYai+gUP"]],[0,["8dt/KCiu1GOJ6DGYai+gUP"]],[0,["8dt/KCiu1GOJ6DGYai+gUP"]],[0,["8dt/KCiu1GOJ6DGYai+gUP"]],[0,["8dt/KCiu1GOJ6DGYai+gUP"]],[0,["8dt/KCiu1GOJ6DGYai+gUP"]],[0,["8dt/KCiu1GOJ6DGYai+gUP"]],[0,["8dt/KCiu1GOJ6DGYai+gUP"]],[101,"Parent",1,[-32,-33,-34,-35,-36,-37,-38],[4,"aeIQ1y+rZKOoF/V5cr94ZO",null,null,null,1,0],[1,11,11,11]],[42,"PeopleVariation1",false,19,[-39,-40,-41,-42,-43,-44],[4,"da6prD9hlLlrYWOqh4cYsb",null,null,null,1,0]],[72,"PeopleVariation3",false,19,[-45,-46,-47,-48,-49,-50],[4,"67mea4kdBIKardKeCOtMrt",null,null,null,1,0],[1,-0.181,0,-0.206]],[72,"PeopleVariation2",false,19,[-51,-52,-53,-54,-55],[4,"a9M8Z8hedMYpDNj2qHU3FF",null,null,null,1,0],[1,-0.181,0,-0.206]],[42,"PeopleVariation4",false,19,[-56,-57,-58,-59,-60],[4,"abRHfE37RBoqbU9CB/HBK0",null,null,null,1,0]],[42,"PeopleVariation5",false,19,[-61,-62,-63,-64,-65],[4,"52lk1V4rVC9bgtEV+xGfi2",null,null,null,1,0]],[42,"TableVariation",false,19,[-66,-67,-68,-69],[4,"60EZConk5FTpTqUh5EbqMR",null,null,null,1,0]],[42,"SpeakerVariation",false,19,[-70,-71,-72,-73],[4,"0a77OF2GpG4KIC+Yw11xi+",null,null,null,1,0]],[11,0,{},25,[12,"e892RDjrxNZISjs1LC/QQv",null,-85,[6,"0avNr34HRDtI3/KDaBcU/C",1,[[1,"Crowd",["_name"],-74],[2,["_lpos"],-75,[1,0.093,-0.039,0.147]],[2,["_lrot"],-76,[3,0,0.984807753012208,0,0.17364817766693041]],[2,["_euler"],-77,[1,0,160,0]],[2,["_lscale"],-78,[1,0.090909,0.090909,0.090909]],[1,3,["startingPoseIndex"],2],[1,true,["shouldGetRandomPose"],2],[1,12,["poses","length"],2],[3,["poses","0"],2,5],[3,["poses","1"],2,6],[3,["poses","2"],2,7],[3,["poses","3"],2,8],[3,["poses","4"],2,9],[3,["poses","5"],2,10],[3,["poses","6"],2,11],[3,["poses","7"],2,12],[3,["poses","8"],2,13],[3,["poses","9"],2,14],[3,["poses","10"],2,15],[3,["poses","11"],2,16],[1,null,["poses","12"],2],[1,null,["poses","13"],2],[1,null,["poses","14"],2],[1,null,["poses","15"],2],[1,null,["poses","16"],2],[1,null,["poses","17"],2],[1,null,["poses","18"],2],[1,null,["poses","19"],2],[3,["_materials","0"],-79,17],[2,["_lrot"],-80,[3,0,0,0,1]],[2,["_euler"],-81,[1,0,0,0]],[1,1,["_materials","length"],-82],[3,["_materials","1"],-83,18],[3,["_materials","2"],-84,19]]],[[15,["mainRenderer"],[0,["0b8pE5sPNepqN6zgbDPnqa"]]]],4]],[0,["e892RDjrxNZISjs1LC/QQv"]],[0,["e892RDjrxNZISjs1LC/QQv"]],[0,["e892RDjrxNZISjs1LC/QQv"]],[0,["e892RDjrxNZISjs1LC/QQv"]],[0,["e892RDjrxNZISjs1LC/QQv"]],[0,["e892RDjrxNZISjs1LC/QQv"]],[0,["e892RDjrxNZISjs1LC/QQv"]],[0,["e892RDjrxNZISjs1LC/QQv"]],[0,["e892RDjrxNZISjs1LC/QQv"]],[0,["e892RDjrxNZISjs1LC/QQv"]],[0,["e892RDjrxNZISjs1LC/QQv"]],[0,["e892RDjrxNZISjs1LC/QQv"]],[0,["e892RDjrxNZISjs1LC/QQv"]],[0,["e892RDjrxNZISjs1LC/QQv"]],[0,["e892RDjrxNZISjs1LC/QQv"]],[0,["e892RDjrxNZISjs1LC/QQv"]],[0,["e892RDjrxNZISjs1LC/QQv"]],[0,["3ew1Vo2adBpqZ739+OrPkj"]],[0,["3ew1Vo2adBpqZ739+OrPkj"]],[0,["3ew1Vo2adBpqZ739+OrPkj"]],[0,["3ew1Vo2adBpqZ739+OrPkj"]],[0,["3ew1Vo2adBpqZ739+OrPkj"]],[0,["3ew1Vo2adBpqZ739+OrPkj"]],[0,["3ew1Vo2adBpqZ739+OrPkj"]],[0,["3ew1Vo2adBpqZ739+OrPkj"]],[0,["3ew1Vo2adBpqZ739+OrPkj"]],[0,["3ew1Vo2adBpqZ739+OrPkj"]],[0,["3ew1Vo2adBpqZ739+OrPkj"]],[0,["3ew1Vo2adBpqZ739+OrPkj"]],[0,["3ew1Vo2adBpqZ739+OrPkj"]],[0,["3ew1Vo2adBpqZ739+OrPkj"]],[0,["3ew1Vo2adBpqZ739+OrPkj"]],[0,["3ew1Vo2adBpqZ739+OrPkj"]],[0,["3ew1Vo2adBpqZ739+OrPkj"]],[11,0,{},25,[12,"e892RDjrxNZISjs1LC/QQv",null,-88,[6,"efptomRTBGwrBHx10/FPYD",1,[[1,"Crowd-001",["_name"],29],[2,["_lpos"],29,[1,-0.062,-0.039,-0.131]],[2,["_lrot"],29,[3,0,0.984807753012208,0,0.17364817766693041]],[2,["_euler"],29,[1,0,160,0]],[2,["_lscale"],29,[1,0.090909,0.090909,0.090909]],[1,3,["startingPoseIndex"],3],[1,true,["shouldGetRandomPose"],3],[1,12,["poses","length"],3],[3,["poses","0"],3,21],[3,["poses","1"],3,22],[3,["poses","2"],3,23],[3,["poses","3"],3,24],[3,["poses","4"],3,25],[3,["poses","5"],3,26],[3,["poses","6"],3,27],[3,["poses","7"],3,28],[3,["poses","8"],3,29],[3,["poses","9"],3,30],[3,["poses","10"],3,31],[3,["poses","11"],3,32],[1,null,["poses","12"],3],[1,null,["poses","13"],3],[1,null,["poses","14"],3],[1,null,["poses","15"],3],[1,null,["poses","16"],3],[1,null,["poses","17"],3],[1,null,["poses","18"],3],[1,null,["poses","19"],3],[3,["_materials","0"],46,33],[2,["_lrot"],-86,[3,0,0,0,1]],[2,["_euler"],-87,[1,0,0,0]],[1,1,["_materials","length"],46],[3,["_materials","1"],46,34],[3,["_materials","2"],46,35]]],[[15,["mainRenderer"],[0,["0b8pE5sPNepqN6zgbDPnqa"]]]],20]],[11,0,{},20,[12,"e892RDjrxNZISjs1LC/QQv",null,-91,[6,"8cYE0REt5A7Z020NmjPncM",1,[[1,"Crowd-002",["_name"],30],[2,["_lpos"],30,[1,-0.107,-0.039,-0.256]],[2,["_lrot"],30,[3,0,0.9848077530122079,0,0.17364817766693044]],[2,["_euler"],30,[1,0,159.99999999999997,0]],[2,["_lscale"],30,[1,0.09090899999999999,0.090909,0.09090899999999999]],[1,3,["startingPoseIndex"],4],[1,true,["shouldGetRandomPose"],4],[1,12,["poses","length"],4],[3,["poses","0"],4,43],[3,["poses","1"],4,44],[3,["poses","2"],4,45],[3,["poses","3"],4,46],[3,["poses","4"],4,47],[3,["poses","5"],4,48],[3,["poses","6"],4,49],[3,["poses","7"],4,50],[3,["poses","8"],4,51],[3,["poses","9"],4,52],[3,["poses","10"],4,53],[3,["poses","11"],4,54],[1,null,["poses","12"],4],[1,null,["poses","13"],4],[1,null,["poses","14"],4],[1,null,["poses","15"],4],[1,null,["poses","16"],4],[1,null,["poses","17"],4],[1,null,["poses","18"],4],[1,null,["poses","19"],4],[3,["_materials","0"],47,55],[2,["_lrot"],-89,[3,0,0,0,1]],[2,["_euler"],-90,[1,0,0,0]],[1,1,["_materials","length"],47],[3,["_materials","1"],47,56],[3,["_materials","2"],47,57]]],[[15,["mainRenderer"],[0,["0b8pE5sPNepqN6zgbDPnqa"]]]],42]],[11,0,{},20,[12,"e892RDjrxNZISjs1LC/QQv",null,-94,[6,"80x2lpvNZJg5ATtJtTQT1X",1,[[1,"Crowd-003",["_name"],31],[2,["_lpos"],31,[1,-0.286,-0.039,0.273]],[2,["_lrot"],31,[3,0,0.9848077530122079,0,0.17364817766693044]],[2,["_euler"],31,[1,0,159.99999999999997,0]],[2,["_lscale"],31,[1,0.09090899999999999,0.090909,0.09090899999999999]],[1,3,["startingPoseIndex"],5],[1,true,["shouldGetRandomPose"],5],[1,12,["poses","length"],5],[3,["poses","0"],5,59],[3,["poses","1"],5,60],[3,["poses","2"],5,61],[3,["poses","3"],5,62],[3,["poses","4"],5,63],[3,["poses","5"],5,64],[3,["poses","6"],5,65],[3,["poses","7"],5,66],[3,["poses","8"],5,67],[3,["poses","9"],5,68],[3,["poses","10"],5,69],[3,["poses","11"],5,70],[1,null,["poses","12"],5],[1,null,["poses","13"],5],[1,null,["poses","14"],5],[1,null,["poses","15"],5],[1,null,["poses","16"],5],[1,null,["poses","17"],5],[1,null,["poses","18"],5],[1,null,["poses","19"],5],[3,["_materials","0"],48,71],[2,["_lrot"],-92,[3,0,0,0,1]],[2,["_euler"],-93,[1,0,0,0]],[1,1,["_materials","length"],48],[3,["_materials","1"],48,72],[3,["_materials","2"],48,73]]],[[15,["mainRenderer"],[0,["0b8pE5sPNepqN6zgbDPnqa"]]]],58]],[11,0,{},20,[12,"e892RDjrxNZISjs1LC/QQv",null,-97,[6,"04ZsMf8mhGWLafATkJJUW0",1,[[1,"Crowd-004",["_name"],32],[2,["_lpos"],32,[1,0.109,-0.039,0.057]],[2,["_lrot"],32,[3,0,0.9848077530122079,0,0.17364817766693044]],[2,["_euler"],32,[1,0,159.99999999999997,0]],[2,["_lscale"],32,[1,0.09090899999999999,0.090909,0.09090899999999999]],[1,3,["startingPoseIndex"],6],[1,true,["shouldGetRandomPose"],6],[1,12,["poses","length"],6],[3,["poses","0"],6,75],[3,["poses","1"],6,76],[3,["poses","2"],6,77],[3,["poses","3"],6,78],[3,["poses","4"],6,79],[3,["poses","5"],6,80],[3,["poses","6"],6,81],[3,["poses","7"],6,82],[3,["poses","8"],6,83],[3,["poses","9"],6,84],[3,["poses","10"],6,85],[3,["poses","11"],6,86],[1,null,["poses","12"],6],[1,null,["poses","13"],6],[1,null,["poses","14"],6],[1,null,["poses","15"],6],[1,null,["poses","16"],6],[1,null,["poses","17"],6],[1,null,["poses","18"],6],[1,null,["poses","19"],6],[3,["_materials","0"],49,87],[2,["_lrot"],-95,[3,0,0,0,1]],[2,["_euler"],-96,[1,0,0,0]],[1,1,["_materials","length"],49],[3,["_materials","1"],49,88],[3,["_materials","2"],49,89]]],[[15,["mainRenderer"],[0,["0b8pE5sPNepqN6zgbDPnqa"]]]],74]],[11,0,{},26,[12,"e892RDjrxNZISjs1LC/QQv",null,-100,[6,"32UjsnRUZNIJ1h225M6kcF",1,[[1,"Crowd-005",["_name"],33],[2,["_lpos"],33,[1,0.10899999999999999,-0.039,0.05700000000000005]],[2,["_lrot"],33,[3,0,0.9848077530122079,0,0.17364817766693053]],[2,["_euler"],33,[1,0,159.99999999999997,0]],[2,["_lscale"],33,[1,0.09090899999999999,0.090909,0.09090899999999999]],[1,3,["startingPoseIndex"],7],[1,true,["shouldGetRandomPose"],7],[1,12,["poses","length"],7],[3,["poses","0"],7,95],[3,["poses","1"],7,96],[3,["poses","2"],7,97],[3,["poses","3"],7,98],[3,["poses","4"],7,99],[3,["poses","5"],7,100],[3,["poses","6"],7,101],[3,["poses","7"],7,102],[3,["poses","8"],7,103],[3,["poses","9"],7,104],[3,["poses","10"],7,105],[3,["poses","11"],7,106],[1,null,["poses","12"],7],[1,null,["poses","13"],7],[1,null,["poses","14"],7],[1,null,["poses","15"],7],[1,null,["poses","16"],7],[1,null,["poses","17"],7],[1,null,["poses","18"],7],[1,null,["poses","19"],7],[3,["_materials","0"],50,107],[2,["_lrot"],-98,[3,0,0,0,1]],[2,["_euler"],-99,[1,0,0,0]],[1,1,["_materials","length"],50],[3,["_materials","1"],50,108],[3,["_materials","2"],50,109]]],[[15,["mainRenderer"],[0,["0b8pE5sPNepqN6zgbDPnqa"]]]],94]],[11,0,{},26,[12,"e892RDjrxNZISjs1LC/QQv",null,-103,[6,"280p2GYt5Bd6nN952sd+2a",1,[[1,"Crowd-006",["_name"],34],[2,["_lpos"],34,[1,-0.357,-0.039,0.407]],[2,["_lrot"],34,[3,0,0.9848077530122079,0,0.17364817766693053]],[2,["_euler"],34,[1,0,159.99999999999997,0]],[2,["_lscale"],34,[1,0.09090899999999995,0.090909,0.09090899999999995]],[1,3,["startingPoseIndex"],8],[1,true,["shouldGetRandomPose"],8],[1,12,["poses","length"],8],[3,["poses","0"],8,111],[3,["poses","1"],8,112],[3,["poses","2"],8,113],[3,["poses","3"],8,114],[3,["poses","4"],8,115],[3,["poses","5"],8,116],[3,["poses","6"],8,117],[3,["poses","7"],8,118],[3,["poses","8"],8,119],[3,["poses","9"],8,120],[3,["poses","10"],8,121],[3,["poses","11"],8,122],[1,null,["poses","12"],8],[1,null,["poses","13"],8],[1,null,["poses","14"],8],[1,null,["poses","15"],8],[1,null,["poses","16"],8],[1,null,["poses","17"],8],[1,null,["poses","18"],8],[1,null,["poses","19"],8],[3,["_materials","0"],51,123],[2,["_lrot"],-101,[3,0,0,0,1]],[2,["_euler"],-102,[1,0,0,0]],[1,1,["_materials","length"],51],[3,["_materials","1"],51,124],[3,["_materials","2"],51,125]]],[[15,["mainRenderer"],[0,["0b8pE5sPNepqN6zgbDPnqa"]]]],110]],[11,0,{},22,[12,"e892RDjrxNZISjs1LC/QQv",null,-106,[6,"d3fTzKBx1IjJIomnxzxyN0",1,[[1,"Crowd-007",["_name"],35],[2,["_lpos"],35,[1,0.175,-0.039,0.052]],[2,["_lrot"],35,[3,0,0.9848077530122079,0,0.17364817766693064]],[2,["_euler"],35,[1,0,159.99999999999997,0]],[2,["_lscale"],35,[1,0.0909089999999999,0.090909,0.0909089999999999]],[1,3,["startingPoseIndex"],9],[1,true,["shouldGetRandomPose"],9],[1,12,["poses","length"],9],[3,["poses","0"],9,133],[3,["poses","1"],9,134],[3,["poses","2"],9,135],[3,["poses","3"],9,136],[3,["poses","4"],9,137],[3,["poses","5"],9,138],[3,["poses","6"],9,139],[3,["poses","7"],9,140],[3,["poses","8"],9,141],[3,["poses","9"],9,142],[3,["poses","10"],9,143],[3,["poses","11"],9,144],[1,null,["poses","12"],9],[1,null,["poses","13"],9],[1,null,["poses","14"],9],[1,null,["poses","15"],9],[1,null,["poses","16"],9],[1,null,["poses","17"],9],[1,null,["poses","18"],9],[1,null,["poses","19"],9],[3,["_materials","0"],52,145],[2,["_lrot"],-104,[3,0,0,0,1]],[2,["_euler"],-105,[1,0,0,0]],[1,1,["_materials","length"],52],[3,["_materials","1"],52,146],[3,["_materials","2"],52,147]]],[[15,["mainRenderer"],[0,["0b8pE5sPNepqN6zgbDPnqa"]]]],132]],[11,0,{},22,[12,"e892RDjrxNZISjs1LC/QQv",null,-109,[6,"e9jmzDFX5H1ZS7Rh9N2BSb",1,[[1,"Crowd-008",["_name"],36],[2,["_lpos"],36,[1,0.258,-0.039,0.322]],[2,["_lrot"],36,[3,0,0.9848077530122079,0,0.17364817766693064]],[2,["_euler"],36,[1,0,159.99999999999997,0]],[2,["_lscale"],36,[1,0.0909089999999999,0.090909,0.0909089999999999]],[1,3,["startingPoseIndex"],10],[1,true,["shouldGetRandomPose"],10],[1,12,["poses","length"],10],[3,["poses","0"],10,149],[3,["poses","1"],10,150],[3,["poses","2"],10,151],[3,["poses","3"],10,152],[3,["poses","4"],10,153],[3,["poses","5"],10,154],[3,["poses","6"],10,155],[3,["poses","7"],10,156],[3,["poses","8"],10,157],[3,["poses","9"],10,158],[3,["poses","10"],10,159],[3,["poses","11"],10,160],[1,null,["poses","12"],10],[1,null,["poses","13"],10],[1,null,["poses","14"],10],[1,null,["poses","15"],10],[1,null,["poses","16"],10],[1,null,["poses","17"],10],[1,null,["poses","18"],10],[1,null,["poses","19"],10],[3,["_materials","0"],53,161],[2,["_lrot"],-107,[3,0,0,0,1]],[2,["_euler"],-108,[1,0,0,0]],[1,1,["_materials","length"],53],[3,["_materials","1"],53,162],[3,["_materials","2"],53,163]]],[[15,["mainRenderer"],[0,["0b8pE5sPNepqN6zgbDPnqa"]]]],148]],[11,0,{},21,[12,"e892RDjrxNZISjs1LC/QQv",null,-112,[6,"e25qgoiX1NkJ2vuabYxIh1",1,[[1,"Crowd-009",["_name"],37],[2,["_lpos"],37,[1,0.194,-0.039,0.399]],[2,["_lrot"],37,[3,0,0.9848077530122079,0,0.1736481776669307]],[2,["_euler"],37,[1,0,159.99999999999997,0]],[2,["_lscale"],37,[1,0.09090899999999988,0.090909,0.09090899999999988]],[1,3,["startingPoseIndex"],11],[1,true,["shouldGetRandomPose"],11],[1,12,["poses","length"],11],[3,["poses","0"],11,171],[3,["poses","1"],11,172],[3,["poses","2"],11,173],[3,["poses","3"],11,174],[3,["poses","4"],11,175],[3,["poses","5"],11,176],[3,["poses","6"],11,177],[3,["poses","7"],11,178],[3,["poses","8"],11,179],[3,["poses","9"],11,180],[3,["poses","10"],11,181],[3,["poses","11"],11,182],[1,null,["poses","12"],11],[1,null,["poses","13"],11],[1,null,["poses","14"],11],[1,null,["poses","15"],11],[1,null,["poses","16"],11],[1,null,["poses","17"],11],[1,null,["poses","18"],11],[1,null,["poses","19"],11],[3,["_materials","0"],54,183],[2,["_lrot"],-110,[3,0,0,0,1]],[2,["_euler"],-111,[1,0,0,0]],[1,1,["_materials","length"],54],[3,["_materials","1"],54,184],[3,["_materials","2"],54,185]]],[[15,["mainRenderer"],[0,["0b8pE5sPNepqN6zgbDPnqa"]]]],170]],[11,0,{},21,[12,"e892RDjrxNZISjs1LC/QQv",null,-115,[6,"ffrdTozJ9BGIpgtl02pm/J",1,[[1,"Crowd-010",["_name"],38],[2,["_lpos"],38,[1,-0.005,-0.039,0.137]],[2,["_lrot"],38,[3,0,0.9848077530122079,0,0.1736481776669307]],[2,["_euler"],38,[1,0,159.99999999999997,0]],[2,["_lscale"],38,[1,0.09090899999999988,0.090909,0.09090899999999988]],[1,3,["startingPoseIndex"],12],[1,true,["shouldGetRandomPose"],12],[1,12,["poses","length"],12],[3,["poses","0"],12,187],[3,["poses","1"],12,188],[3,["poses","2"],12,189],[3,["poses","3"],12,190],[3,["poses","4"],12,191],[3,["poses","5"],12,192],[3,["poses","6"],12,193],[3,["poses","7"],12,194],[3,["poses","8"],12,195],[3,["poses","9"],12,196],[3,["poses","10"],12,197],[3,["poses","11"],12,198],[1,null,["poses","12"],12],[1,null,["poses","13"],12],[1,null,["poses","14"],12],[1,null,["poses","15"],12],[1,null,["poses","16"],12],[1,null,["poses","17"],12],[1,null,["poses","18"],12],[1,null,["poses","19"],12],[3,["_materials","0"],55,199],[2,["_lrot"],-113,[3,0,0,0,1]],[2,["_euler"],-114,[1,0,0,0]],[1,1,["_materials","length"],55],[3,["_materials","1"],55,200],[3,["_materials","2"],55,201]]],[[15,["mainRenderer"],[0,["0b8pE5sPNepqN6zgbDPnqa"]]]],186]],[11,0,{},21,[12,"e892RDjrxNZISjs1LC/QQv",null,-118,[6,"4eB4AX8lxC74SPBHSEkVYa",1,[[1,"Crowd-011",["_name"],39],[2,["_lpos"],39,[1,-0.208,-0.039,0.542]],[2,["_lrot"],39,[3,0,0.9848077530122079,0,0.1736481776669307]],[2,["_euler"],39,[1,0,159.99999999999997,0]],[2,["_lscale"],39,[1,0.09090899999999988,0.090909,0.09090899999999988]],[1,3,["startingPoseIndex"],13],[1,true,["shouldGetRandomPose"],13],[1,12,["poses","length"],13],[3,["poses","0"],13,203],[3,["poses","1"],13,204],[3,["poses","2"],13,205],[3,["poses","3"],13,206],[3,["poses","4"],13,207],[3,["poses","5"],13,208],[3,["poses","6"],13,209],[3,["poses","7"],13,210],[3,["poses","8"],13,211],[3,["poses","9"],13,212],[3,["poses","10"],13,213],[3,["poses","11"],13,214],[1,null,["poses","12"],13],[1,null,["poses","13"],13],[1,null,["poses","14"],13],[1,null,["poses","15"],13],[1,null,["poses","16"],13],[1,null,["poses","17"],13],[1,null,["poses","18"],13],[1,null,["poses","19"],13],[3,["_materials","0"],56,215],[2,["_lrot"],-116,[3,0,0,0,1]],[2,["_euler"],-117,[1,0,0,0]],[1,1,["_materials","length"],56],[3,["_materials","1"],56,216],[3,["_materials","2"],56,217]]],[[15,["mainRenderer"],[0,["0b8pE5sPNepqN6zgbDPnqa"]]]],202]],[11,0,{},23,[12,"e892RDjrxNZISjs1LC/QQv",null,-121,[6,"160vVJKa9F9ojeyUgGPoE7",1,[[1,"Crowd-012",["_name"],40],[2,["_lpos"],40,[1,0.015,-0.039,-0.161]],[2,["_lrot"],40,[3,0,0.9848077530122079,0,0.17364817766693078]],[2,["_euler"],40,[1,0,159.99999999999994,0]],[2,["_lscale"],40,[1,0.09090899999999984,0.090909,0.09090899999999984]],[1,3,["startingPoseIndex"],14],[1,true,["shouldGetRandomPose"],14],[1,12,["poses","length"],14],[3,["poses","0"],14,225],[3,["poses","1"],14,226],[3,["poses","2"],14,227],[3,["poses","3"],14,228],[3,["poses","4"],14,229],[3,["poses","5"],14,230],[3,["poses","6"],14,231],[3,["poses","7"],14,232],[3,["poses","8"],14,233],[3,["poses","9"],14,234],[3,["poses","10"],14,235],[3,["poses","11"],14,236],[1,null,["poses","12"],14],[1,null,["poses","13"],14],[1,null,["poses","14"],14],[1,null,["poses","15"],14],[1,null,["poses","16"],14],[1,null,["poses","17"],14],[1,null,["poses","18"],14],[1,null,["poses","19"],14],[3,["_materials","0"],57,237],[2,["_lrot"],-119,[3,0,0,0,1]],[2,["_euler"],-120,[1,0,0,0]],[1,1,["_materials","length"],57],[3,["_materials","1"],57,238],[3,["_materials","2"],57,239]]],[[15,["mainRenderer"],[0,["0b8pE5sPNepqN6zgbDPnqa"]]]],224]],[11,0,{},23,[12,"e892RDjrxNZISjs1LC/QQv",null,-124,[6,"016dOxB39OSplqR2KIFme5",1,[[1,"Crowd-013",["_name"],41],[2,["_lpos"],41,[1,-0.359,-0.039,0.248]],[2,["_lrot"],41,[3,0,0.9848077530122079,0,0.17364817766693078]],[2,["_euler"],41,[1,0,159.99999999999994,0]],[2,["_lscale"],41,[1,0.09090899999999984,0.090909,0.09090899999999984]],[1,3,["startingPoseIndex"],15],[1,true,["shouldGetRandomPose"],15],[1,12,["poses","length"],15],[3,["poses","0"],15,241],[3,["poses","1"],15,242],[3,["poses","2"],15,243],[3,["poses","3"],15,244],[3,["poses","4"],15,245],[3,["poses","5"],15,246],[3,["poses","6"],15,247],[3,["poses","7"],15,248],[3,["poses","8"],15,249],[3,["poses","9"],15,250],[3,["poses","10"],15,251],[3,["poses","11"],15,252],[1,null,["poses","12"],15],[1,null,["poses","13"],15],[1,null,["poses","14"],15],[1,null,["poses","15"],15],[1,null,["poses","16"],15],[1,null,["poses","17"],15],[1,null,["poses","18"],15],[1,null,["poses","19"],15],[3,["_materials","0"],58,253],[2,["_lrot"],-122,[3,0,0,0,1]],[2,["_euler"],-123,[1,0,0,0]],[1,1,["_materials","length"],58],[3,["_materials","1"],58,254],[3,["_materials","2"],58,255]]],[[15,["mainRenderer"],[0,["0b8pE5sPNepqN6zgbDPnqa"]]]],240]],[11,0,{},24,[12,"e892RDjrxNZISjs1LC/QQv",null,-127,[6,"afLX6hyBFPE4xywGKx+6+s",1,[[1,"Crowd-014",["_name"],42],[2,["_lpos"],42,[1,-0.073,-0.039,0.281]],[2,["_lrot"],42,[3,0,0.9848077530122079,0,0.17364817766693083]],[2,["_euler"],42,[1,0,159.99999999999994,0]],[2,["_lscale"],42,[1,0.09090899999999981,0.090909,0.09090899999999981]],[1,3,["startingPoseIndex"],16],[1,true,["shouldGetRandomPose"],16],[1,12,["poses","length"],16],[3,["poses","0"],16,261],[3,["poses","1"],16,262],[3,["poses","2"],16,263],[3,["poses","3"],16,264],[3,["poses","4"],16,265],[3,["poses","5"],16,266],[3,["poses","6"],16,267],[3,["poses","7"],16,268],[3,["poses","8"],16,269],[3,["poses","9"],16,270],[3,["poses","10"],16,271],[3,["poses","11"],16,272],[1,null,["poses","12"],16],[1,null,["poses","13"],16],[1,null,["poses","14"],16],[1,null,["poses","15"],16],[1,null,["poses","16"],16],[1,null,["poses","17"],16],[1,null,["poses","18"],16],[1,null,["poses","19"],16],[3,["_materials","0"],59,273],[2,["_lrot"],-125,[3,0,0,0,1]],[2,["_euler"],-126,[1,0,0,0]],[1,1,["_materials","length"],59],[3,["_materials","1"],59,274],[3,["_materials","2"],59,275]]],[[15,["mainRenderer"],[0,["0b8pE5sPNepqN6zgbDPnqa"]]]],260]],[11,0,{},24,[12,"e892RDjrxNZISjs1LC/QQv",null,-130,[6,"a8fnHe4odNd4kE7mjl7LjT",1,[[1,"Crowd-015",["_name"],43],[2,["_lpos"],43,[1,-0.141,-0.039,-0.119]],[2,["_lrot"],43,[3,0,0.9848077530122079,0,0.17364817766693083]],[2,["_euler"],43,[1,0,159.99999999999994,0]],[2,["_lscale"],43,[1,0.09090899999999981,0.090909,0.09090899999999981]],[1,3,["startingPoseIndex"],17],[1,true,["shouldGetRandomPose"],17],[1,12,["poses","length"],17],[3,["poses","0"],17,277],[3,["poses","1"],17,278],[3,["poses","2"],17,279],[3,["poses","3"],17,280],[3,["poses","4"],17,281],[3,["poses","5"],17,282],[3,["poses","6"],17,283],[3,["poses","7"],17,284],[3,["poses","8"],17,285],[3,["poses","9"],17,286],[3,["poses","10"],17,287],[3,["poses","11"],17,288],[1,null,["poses","12"],17],[1,null,["poses","13"],17],[1,null,["poses","14"],17],[1,null,["poses","15"],17],[1,null,["poses","16"],17],[1,null,["poses","17"],17],[1,null,["poses","18"],17],[1,null,["poses","19"],17],[3,["_materials","0"],60,289],[2,["_lrot"],-128,[3,0,0,0,1]],[2,["_euler"],-129,[1,0,0,0]],[1,1,["_materials","length"],60],[3,["_materials","1"],60,290],[3,["_materials","2"],60,291]]],[[15,["mainRenderer"],[0,["0b8pE5sPNepqN6zgbDPnqa"]]]],276]],[11,0,{},24,[12,"e892RDjrxNZISjs1LC/QQv",null,-133,[6,"8fL9ZRpi5OdJv70vNN5iRc",1,[[1,"Crowd-016",["_name"],44],[2,["_lpos"],44,[1,-0.43,-0.039,0.094]],[2,["_lrot"],44,[3,0,0.9848077530122079,0,0.17364817766693083]],[2,["_euler"],44,[1,0,159.99999999999994,0]],[2,["_lscale"],44,[1,0.09090899999999981,0.090909,0.09090899999999981]],[1,3,["startingPoseIndex"],18],[1,true,["shouldGetRandomPose"],18],[1,12,["poses","length"],18],[3,["poses","0"],18,293],[3,["poses","1"],18,294],[3,["poses","2"],18,295],[3,["poses","3"],18,296],[3,["poses","4"],18,297],[3,["poses","5"],18,298],[3,["poses","6"],18,299],[3,["poses","7"],18,300],[3,["poses","8"],18,301],[3,["poses","9"],18,302],[3,["poses","10"],18,303],[3,["poses","11"],18,304],[1,null,["poses","12"],18],[1,null,["poses","13"],18],[1,null,["poses","14"],18],[1,null,["poses","15"],18],[1,null,["poses","16"],18],[1,null,["poses","17"],18],[1,null,["poses","18"],18],[1,null,["poses","19"],18],[3,["_materials","0"],61,305],[2,["_lrot"],-131,[3,0,0,0,1]],[2,["_euler"],-132,[1,0,0,0]],[1,1,["_materials","length"],61],[3,["_materials","1"],61,306],[3,["_materials","2"],61,307]]],[[15,["mainRenderer"],[0,["0b8pE5sPNepqN6zgbDPnqa"]]]],292]],[37,"table",25,[[16,-134,[7,"deTNnoNB9NTLMva2adQnDU"],[0],[9],1]],[4,"10ESfIMLBIwaVSir/zn4LP",null,null,null,1,0],[1,0.4636607225537302,-0.010000000000000035,-4.688638441085814]],[37,"table",25,[[16,-135,[7,"b2Z19kY7FAf55bh/jPUWEl"],[2],[9],3]],[4,"c5gDeVNphK07gBWy+m5mVg",null,null,null,1,0],[1,0.4636607225537302,-0.010000000000000035,-4.688638441085814]],[0,["e3hqu0HdxNq4e2nv3hKDvO"]],[0,["e3hqu0HdxNq4e2nv3hKDvO"]],[36,"Beer_Bottle5",20,[[16,-136,[7,"c6JQL9MHlPfb60JC52BY90"],[36],[9],37]],[4,"7fhKCiwz9AOZ7ONBGxrmA0",null,null,null,1,0],[1,-0.017,0.008,-0.001],[1,1.1101818181818182,2.8880000000000003,1.1101818181818184]],[36,"Beer_Bottle6",20,[[16,-137,[7,"62Em35CyJIipi46b9puAUI"],[38],[9],39]],[4,"185S6iG9RAJoEkBDIQkItD",null,null,null,1,0],[1,0.126,0.008,0.186],[1,1.1101818181818182,2.8880000000000003,1.1101818181818184]],[32,"Amplifier-001",20,[[16,-138,[7,"0fG4NulrhCf6LLNQoYAkyg"],[40],[9],41]],[4,"505zWUpTxN3bLQMiOMWoZM",null,null,null,1,0],[1,-0.188,0.08,-0.344],[3,0,0.48709770525415746,0,0.8733474826986873],[1,15.609465165571734,18.4912109375,9.172158674760299],[1,0,58.3,0]],[0,["e3hqu0HdxNq4e2nv3hKDvO"]],[0,["e3hqu0HdxNq4e2nv3hKDvO"]],[0,["e3hqu0HdxNq4e2nv3hKDvO"]],[32,"Beer_Bottle5",26,[[16,-139,[7,"8cuMurcilAd4d9F654RBVR"],[90],[9],91]],[4,"9eqWORqbpFiJ0MDXfvRKXz",null,null,null,1,0],[1,0.059,-0.011,0.029000000000000026],[3,-0.5913096483635822,0,0,0.8064446042674827],[1,1.1101818181818182,2.8880000000000003,1.110181818181818],[1,-72.49999999999999,0,0]],[32,"Beer_Bottle6",26,[[16,-140,[7,"aeQbEQZF5JsLFirAYHKPu8"],[92],[9],93]],[4,"f8O2xtcRdPi4poqa3G7RUh",null,null,null,1,0],[1,-0.3420000000000001,0.008,0.387],[3,-0.44150585279174526,0,0,0.8972583696743284],[1,1.1101818181818182,2.8880000000000003,1.1101818181818184],[1,-52.400000000000006,0,0]],[0,["e3hqu0HdxNq4e2nv3hKDvO"]],[0,["e3hqu0HdxNq4e2nv3hKDvO"]],[36,"Beer_Bottle2",22,[[16,-141,[7,"04bDtH8hhNAZlP0i3vn9r0"],[126],[9],127]],[4,"d8pL9OUC9IxK5ajeP4dHWc",null,null,null,1,0],[1,0.122,0.008,0.382],[1,1.1101818181818182,2.8880000000000003,1.1101818181818182]],[37,"table",22,[[16,-142,[7,"76r1HscolOn40AITIFbVUI"],[128],[9],129]],[4,"06Jf36UaBFBbBq3F2xl2sW",null,null,null,1,0],[1,0.644,-0.01,-4.483]],[37,"table-001",22,[[16,-143,[7,"49GzrBLzBJqZfSASKI6Ex/"],[130],[9],131]],[4,"8dJAPhFVxILItJwUX+1+DJ",null,null,null,1,0],[1,0.644,-0.01,-4.483]],[0,["e3hqu0HdxNq4e2nv3hKDvO"]],[0,["e3hqu0HdxNq4e2nv3hKDvO"]],[36,"Beer_Bottle2",21,[[16,-144,[7,"41F6rsSIZFwZblbdmUTcuP"],[164],[9],165]],[4,"f1ERcICB9NWY9pi02XS2fz",null,null,null,1,0],[1,0.138,0.008,-0.507],[1,1.1101818181818182,2.8880000000000003,1.1101818181818182]],[32,"Light_Stand-001",21,[[16,-145,[7,"a9fj/QbYFE87RhfvQE+Kb5"],[166],[9],167]],[4,"a257sNrkBHTZxuzB+KVpJc",null,null,null,1,0],[1,-0.009,0.011,0.317],[3,0,0.4293450097784799,0,0.90314055527272],[1,0.36363636363636365,0.36363636363636365,0.36363636363636365],[1,0,50.852,0]],[36,"Beer_Bottle3",21,[[16,-146,[7,"3c7MZzdVxOo60Qq0dahRhf"],[168],[9],169]],[4,"81Xelbl+pMj7yHXrvPveRI",null,null,null,1,0],[1,-0.019,0.008,0.053],[1,1.1101818181818182,2.8880000000000003,1.1101818181818182]],[0,["e3hqu0HdxNq4e2nv3hKDvO"]],[0,["e3hqu0HdxNq4e2nv3hKDvO"]],[0,["e3hqu0HdxNq4e2nv3hKDvO"]],[32,"Beer_Bottle3",23,[[16,-147,[7,"e0Xbraey1P2K6X/yz8UZ6c"],[218],[9],219]],[4,"4ccPMgJCJAD6FCCKJDH5jR",null,null,null,1,0],[1,0.059,-0.011,0.029],[3,-0.5913096483635824,0,0,0.8064446042674825],[1,1.1101818181818182,2.8880000000000003,1.1101818181818182],[1,-72.5,0,0]],[32,"Beer_Bottle4",23,[[16,-148,[7,"53nASOc1hOeL9nIGYttJlg"],[220],[9],221]],[4,"e7hzTdKxVBFpt3KxArDBVK",null,null,null,1,0],[1,-0.188,0.008,-0.302],[3,-0.4415058527917452,0,0,0.8972583696743285],[1,1.1101818181818182,2.8880000000000003,1.1101818181818182],[1,-52.4,0,0]],[32,"Studio_Camera-001",23,[[16,-149,[7,"64a4c8rfhEw6dMvSKE2Irn"],[222],[9],223]],[4,"05MVqkQ69NBLYxY9H2Uljd",null,null,null,1,0],[1,-0.375,0.011,0.585],[3,0,0.6333065863819719,0,0.7739010063601248],[1,0.36363636363636365,0.36363636363636365,0.36363636363636365],[1,0,78.589,0]],[0,["e3hqu0HdxNq4e2nv3hKDvO"]],[0,["e3hqu0HdxNq4e2nv3hKDvO"]],[32,"Beer_Bottle3",24,[[16,-150,[7,"25/ZhE8CRC778SrDUcq3aI"],[256],[9],257]],[4,"dfNibg1hZN7JrKRGGGTM69",null,null,null,1,0],[1,0.059,-0.011,0.029],[3,-0.5913096483635824,0,0,0.8064446042674825],[1,1.1101818181818182,2.8880000000000003,1.1101818181818182],[1,-72.5,0,0]],[32,"Beer_Bottle4",24,[[16,-151,[7,"49ahH5y25Cl6S2eZ7YGokJ"],[258],[9],259]],[4,"2as7NmKWpJbp35egn235nQ",null,null,null,1,0],[1,-0.342,0.008,0.387],[3,-0.4415058527917452,0,0,0.8972583696743285],[1,1.1101818181818182,2.8880000000000003,1.1101818181818182],[1,-52.4,0,0]],[0,["e3hqu0HdxNq4e2nv3hKDvO"]],[0,["e3hqu0HdxNq4e2nv3hKDvO"]],[0,["e3hqu0HdxNq4e2nv3hKDvO"]]],0,[0,-1,77,0,-2,76,0,-3,75,0,-4,74,0,-5,73,0,-6,72,0,-7,71,0,-8,70,0,-9,69,0,-10,68,0,-11,67,0,-12,66,0,-13,65,0,-14,64,0,-15,63,0,-16,62,0,-17,27,0,3,27,0,5,27,0,4,1,0,-1,25,0,-2,20,0,-3,26,0,-4,22,0,-5,21,0,-6,23,0,-7,24,0,21,19,0,2,1,0,2,1,0,-1,19,0,-1,25,0,-2,20,0,-3,26,0,-4,22,0,-5,21,0,-6,23,0,-7,24,0,-1,82,0,-2,83,0,-3,84,0,-4,63,0,-5,64,0,-6,65,0,-1,97,0,-2,98,0,-3,99,0,-4,70,0,-5,71,0,-6,72,0,-1,92,0,-2,93,0,-3,94,0,-4,68,0,-5,69,0,-1,103,0,-2,104,0,-3,105,0,-4,73,0,-5,74,0,-1,108,0,-2,109,0,-3,75,0,-4,76,0,-5,77,0,-1,78,0,-2,79,0,-3,27,0,-4,62,0,-1,88,0,-2,89,0,-3,66,0,-4,67,0,1,28,0,1,28,0,1,28,0,1,28,0,1,28,0,1,45,0,1,80,0,1,80,0,1,45,0,1,45,0,1,45,0,4,27,0,1,81,0,1,81,0,4,62,0,1,85,0,1,85,0,4,63,0,1,86,0,1,86,0,4,64,0,1,87,0,1,87,0,4,65,0,1,90,0,1,90,0,4,66,0,1,91,0,1,91,0,4,67,0,1,95,0,1,95,0,4,68,0,1,96,0,1,96,0,4,69,0,1,100,0,1,100,0,4,70,0,1,101,0,1,101,0,4,71,0,1,102,0,1,102,0,4,72,0,1,106,0,1,106,0,4,73,0,1,107,0,1,107,0,4,74,0,1,110,0,1,110,0,4,75,0,1,111,0,1,111,0,4,76,0,1,112,0,1,112,0,4,77,0,2,78,0,2,79,0,2,82,0,2,83,0,2,84,0,2,88,0,2,89,0,2,92,0,2,93,0,2,94,0,2,97,0,2,98,0,2,99,0,2,103,0,2,104,0,2,105,0,2,108,0,2,109,0,14,1,151],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[-1,7,-1,7,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,7,-1,7,-1,7,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,7,-1,7,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,7,-1,7,-1,7,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,7,-1,7,-1,7,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,7,-1,7,-1,7,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,7,-1,7,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[22,41,22,42,6,29,30,31,32,33,34,27,28,23,24,25,26,7,7,7,6,29,30,31,32,33,34,27,28,23,24,25,26,7,7,7,17,18,17,18,17,58,6,29,30,31,32,33,34,27,28,23,24,25,26,7,7,7,6,29,30,31,32,33,34,27,28,23,24,25,26,7,7,7,6,29,30,31,32,33,34,27,28,23,24,25,26,7,7,7,17,18,17,18,6,29,30,31,32,33,34,27,28,23,24,25,26,7,7,7,6,29,30,31,32,33,34,27,28,23,24,25,26,7,7,7,17,18,22,41,22,42,6,29,30,31,32,33,34,27,28,23,24,25,26,7,7,7,6,29,30,31,32,33,34,27,28,23,24,25,26,7,7,7,17,18,17,59,17,18,6,29,30,31,32,33,34,27,28,23,24,25,26,7,7,7,6,29,30,31,32,33,34,27,28,23,24,25,26,7,7,7,6,29,30,31,32,33,34,27,28,23,24,25,26,7,7,7,17,18,17,18,17,60,6,29,30,31,32,33,34,27,28,23,24,25,26,7,7,7,6,29,30,31,32,33,34,27,28,23,24,25,26,7,7,7,17,18,17,18,6,29,30,31,32,33,34,27,28,23,24,25,26,7,7,7,6,29,30,31,32,33,34,27,28,23,24,25,26,7,7,7,6,29,30,31,32,33,34,27,28,23,24,25,26,7,7,7]],[[[31,".bin",729127771,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":6336,"length":504,"count":252,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":6336,"count":132,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.00717845419421792,-0.003693472361192107,-0.007191348820924759],"maxPosition",8,[1,0.00717845419421792,0.009537317790091038,0.007039302960038185]]],-1],0,0,[],[],[]],[[[31,".bin",1732692214,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":12720,"length":960,"count":480,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":12720,"count":265,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.0010263219010084867,-0.02349531091749668,-0.005276707466691732],"maxPosition",8,[1,0.009527095593512058,0.01623224839568138,0.005276707466691732]]],-1],0,0,[],[],[]],[[[31,".bin",2070169348,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":110208,"length":7728,"count":3864,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":110208,"count":2296,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,0.1707466095685959,-0.04122530296444893,-0.0620969757437706],"maxPosition",8,[1,0.2741606533527374,0.11112016439437866,0.0038033390883356333]]],-1],0,0,[],[],[]],[[[31,".bin",1654312910,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":8448,"length":888,"count":444,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":8448,"count":176,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.028653103858232498,0.01343634631484747,0.0009556725854054093],"maxPosition",8,[1,0.022986579686403275,0.074921615421772,0.003142855130136013]]],-1],0,0,[],[],[]],[[[31,".bin",4028609073,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":10896,"length":816,"count":408,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":10896,"count":227,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.01467535737901926,-0.0060756332240998745,-0.077574722468853],"maxPosition",8,[1,0.014675356447696686,0.006075632758438587,0.004999999888241291]]],-1],0,0,[],[],[]],[[[31,".bin",2966256564,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":10752,"length":2112,"count":1056,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":10752,"count":224,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.004762029740959406,-0.0006366002489812672,-0.004680191166698933],"maxPosition",8,[1,0.004762000869959593,0.005230848677456379,0.00897319708019495]]],-1],0,0,[],[],[]],[[[31,".bin",2187149348,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":26208,"length":1656,"count":828,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":26208,"count":546,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.04714525118470192,0.09131130576133728,-0.08196159452199936],"maxPosition",8,[1,0.04714551940560341,0.12236843258142471,0.009501886554062366]]],-1],0,0,[],[],[]],[[{"name":"particleAtom","rect":{"x":0,"y":0,"width":31,"height":31},"offset":{"x":0,"y":0},"originalSize":{"width":31,"height":31},"rotated":false,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[-15.5,-15.5,0,15.5,-15.5,0,-15.5,15.5,0,15.5,15.5,0],"indexes":[0,1,2,2,1,3],"uv":[0,31,31,31,0,0,31,0],"nuv":[0,0,1,0,0,1,1,1],"minPos":{"x":-15.5,"y":-15.5,"z":0},"maxPos":{"x":15.5,"y":15.5,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[10],[489]]]]
